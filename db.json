{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500196315000},{"_id":"source/.DS_Store","hash":"83ee9468b86e5097326bbacd09496ef44e2942ba","modified":1500197906000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1500196315000},{"_id":"source/CNAME","hash":"7112c2b1f335c66efcc5f46ace26af723bcdce79","modified":1480734742000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1500196315000},{"_id":"themes/huxblog/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1500196315000},{"_id":"source/_posts/.DS_Store","hash":"a7a42c9e6eca6e48cb7915cc86814246b160bd24","modified":1500198274000},{"_id":"source/_posts/Android  React Native系列（一）：学习路径.md","hash":"becf8cab1577d660f1f9eeea3c5045ef7c90117d","modified":1456549474000},{"_id":"source/_posts/Android-WebView开发笔记（一）.md","hash":"bfcacd3ae6212a79c5b86fd0257d0451b385b0cd","modified":1453360418000},{"_id":"source/_posts/Android图片加载框架：Picasso（一）.md","hash":"c789a778b8b9ea6958e579dde11f88b244af45ae","modified":1454125338000},{"_id":"source/_posts/Android架构：MVP设计模式.md","hash":"415a7baa740111657bc721d0c0a101446a33ac05","modified":1454311706000},{"_id":"source/_posts/Android源码学习（一）.md","hash":"a69223dc8bc7c4912bed88487860ebfc8d1d504e","modified":1460447077000},{"_id":"source/_posts/Android源码学习：编译过程中的问题.md","hash":"dfd2a2163cd8fabcd00d9c3c83e8a47bc1b94de0","modified":1460448301000},{"_id":"source/_posts/Android网络Client：Retrofit(一).md","hash":"6a34c808262e50950c31724b5c38961f373c71a2","modified":1460599867000},{"_id":"source/_posts/Android：6-0运行时权限.md","hash":"b21b61d3179d40ebe4b881088bb608a41a1efb28","modified":1459929288000},{"_id":"source/_posts/Android：DFM弹幕开发之基本配置.md","hash":"65ba7cf95cbb10643d359b1dd7ec41399017da5f","modified":1500194242000},{"_id":"source/_posts/Android：Handler、Message、MessageQueue、Looper.md","hash":"f2c0689c1fe69892166137dd928c52ea67a26431","modified":1468853267000},{"_id":"source/_posts/Android：NDK开发（一）.md","hash":"fe1db3be518c3205007e659238e18580bdf716d1","modified":1462784250000},{"_id":"source/_posts/Android：Material-Design笔记（一）.md","hash":"99fff980c67e7382ed8634fbb5b2fb12fd8c5f7f","modified":1460247206000},{"_id":"source/_posts/Android：DataBinding-Guide.md","hash":"db8764ec36de94d3890892661fc04af6e7ffa0f6","modified":1468853206000},{"_id":"source/_posts/Android：NDK开发（二）.md","hash":"2fa7b5cdf23a11c98629ab56062c016e16571177","modified":1463019232000},{"_id":"source/_posts/Android：RecyclerView.md","hash":"46040d65aa6f8414b0c675f24ba7855e1bcb69be","modified":1456549230000},{"_id":"source/_posts/Android：SurfaceView基础与原理.md","hash":"8f9103425255169529b6401cc4d147ff559eb167","modified":1474248498000},{"_id":"source/_posts/Android：Service与Notification.md","hash":"e8d5e5b24a8a8860172225c890d2f02454a3dccc","modified":1469872307000},{"_id":"source/_posts/Java设计模式（一）：观察者模式.md","hash":"b93f954531fdaa6291c044db59b793fc61352d03","modified":1453875908000},{"_id":"source/_posts/Android：WebView开发笔记（二）.md","hash":"c763f2eb60be8bd4fdc82765db16a6ccff384a2c","modified":1453864797000},{"_id":"source/_posts/Kotlin基础之内联函数.md","hash":"e03f501c51a4960df09a05b6f096f288f838c9aa","modified":1499067956000},{"_id":"source/_posts/Kotlin基础之函数.md","hash":"10288b273045f62f21471bd1dead7a316590a190","modified":1499067961000},{"_id":"source/_posts/Kotlin基础之基础类型与包.md","hash":"c75794b2934f92362113ef32549f70c05c55d59e","modified":1499068099000},{"_id":"source/_posts/Kotlin基础之委托及委托属性.md","hash":"d65e2234884d3e598a241055f43f437f37d05634","modified":1499308057000},{"_id":"source/_posts/Kotlin基础之对象表达式与声明.md","hash":"8f86a7cf368c7089716c36e97cabc6e500575570","modified":1499308053000},{"_id":"source/_posts/Kotlin基础之属性与字段、接口.md","hash":"f8c2ac52f9858c067d8e529b6c95c34a35790cc2","modified":1499068158000},{"_id":"source/_posts/Kotlin基础之扩展.md","hash":"1b06c98892f5d516436d1eb9f61d369c5020e616","modified":1499308008000},{"_id":"source/_posts/Kotlin基础之数据类、密封类、嵌套类和枚举类.md","hash":"654fdd6d00b583412c98d59fad601e164c506b5c","modified":1499068180000},{"_id":"source/_posts/Kotlin基础之泛型.md","hash":"074c3ff3b4b626cc0743a7e262fddf8c5e69b6bb","modified":1499068193000},{"_id":"source/_posts/Kotlin基础之类、继承、可见性修饰符.md","hash":"667af24ec75cd04649025549c69e65b49a121094","modified":1499068127000},{"_id":"source/_posts/Kotlin基础之跳转与条件循环表达式.md","hash":"58ae06bbaad06980fdb26150a6e7b47895399392","modified":1499068077000},{"_id":"source/_posts/Kotlin基础之高阶函数与Lambdas.md","hash":"eb0313d10bedacc03c9b010e83ef2642d78aadbb","modified":1499067966000},{"_id":"source/_posts/Kotlin进阶之解构声明.md","hash":"16c00bada270da7ce59b993aa7cdb20e948ffeea","modified":1500190178000},{"_id":"source/_posts/React-Native基础（1）：布局.md","hash":"71dd7006d90b3e622d9a3d198ca587a651ff8ea3","modified":1494942093000},{"_id":"source/_posts/React-Native基础（2）：聊聊Props和State.md","hash":"27c377989c95039669d69265f99feafbfc3d2537","modified":1495089842000},{"_id":"source/_posts/React-Native基础（4）：组件引用Ref.md","hash":"8d43cd09b2c753e9b9b88aad0fd4c5618db41f50","modified":1495439926000},{"_id":"source/_posts/RxJava读书笔记(一).md","hash":"fd56b43fe692d0c968d19e17c4cd01f5697644c5","modified":1463470904000},{"_id":"source/_posts/RxJava读书笔记（三）.md","hash":"5f4617c0ca454d4498e96d9d309756b287085a62","modified":1453950879000},{"_id":"source/_posts/RxJava读书笔记（二）.md","hash":"03ea6bab719e84e33fe28de95187517721541e4a","modified":1453950750000},{"_id":"source/_posts/hello-2015.markdown","hash":"999910c6056e2f2d680e668fac2621db196cf7c0","modified":1500196315000},{"_id":"source/_posts/js-module-7day.markdown","hash":"e2ad67488d6e38c6844a7203f8c89918847c221f","modified":1500196315000},{"_id":"source/_posts/js-module-loader.markdown","hash":"a9bb15f756fed8464a52a5f7131336b27715a34d","modified":1500196315000},{"_id":"source/_posts/js-version.markdown","hash":"325424f7d638c817164b8e977ba2ef2b18876444","modified":1500196315000},{"_id":"source/_posts/unix-linux-note.markdown","hash":"4f9eefe870a1291f469eef2b2603357c3f1da924","modified":1500196315000},{"_id":"source/_posts/深入理解OkHttp3的Connections.md","hash":"33c685b20a9d23fb30c41e6ef8cd3e202dad1cb0","modified":1493026800000},{"_id":"source/_posts/深入理解OkHttp3的DiskLruCache.md","hash":"743aef8b94cad2ee36220593b30127b8030c3150","modified":1493026793000},{"_id":"source/_posts/深入理解OkHttp3的Interceptors.md","hash":"028b366d0b651ff304fa88006c1d891e5d34b33e","modified":1493026786000},{"_id":"source/_posts/设计模式之命令模式.md","hash":"8fdb73bd17ff830e7fd9ccda3e12b18bfd13a96f","modified":1494230144000},{"_id":"source/about/index.md","hash":"900b72df10ceb5337e4be7bbb51d077a2b901ba4","modified":1500196315000},{"_id":"source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1500196315000},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1500196315000},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1500196315000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1500196315000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1500196315000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1500196315000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1500196315000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1500196315000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1500196315000},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1500196315000},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1500196315000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1500196315000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1500196315000},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1500196315000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1500196315000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1500196315000},{"_id":"source/_posts/Android：Activity的基础知识及启动过程.md","hash":"ed94641b64e9a310390f759c68f089e7f17fe302","modified":1468048666000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1500196315000},{"_id":"source/_posts/js-version/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1500196315000},{"_id":"source/_posts/js-version/post-bg-js-version.jpg","hash":"1598a1180c491f36b9036415b622bd9e5ad5d3bc","modified":1500196315000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1500196315000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1500196315000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"e325a9953abc1a3751aa1a927bc3ecbdd627803a","modified":1500196315000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1500196315000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1500196315000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1500196315000},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1500196315000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1500196315000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1500196315000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1500196315000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1500196315000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1500196315000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1500196315000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1500196315000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1500196315000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1500196315000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1500196315000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1500196315000},{"_id":"source/_posts/js-module-loader/post-bg-js-module.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1500196315000},{"_id":"source/_posts/js-version/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1500196315000},{"_id":"source/_posts/unix-linux-note/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1500196315000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1500196315000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1500196315000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1500196315000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1500196315000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500196315000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1500196315000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1500196315000},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1500196315000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1500196315000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1500196315000},{"_id":"source/_posts/CNAME","hash":"7112c2b1f335c66efcc5f46ace26af723bcdce79","modified":1480734742000}],"Category":[{"name":"Android源码学习系列","_id":"cj56iznc5000a9zm3k9sbq76l"},{"name":"danmaku","_id":"cj56izncg000l9zm3kal62tp1"},{"name":"android-aosp","_id":"cj56izncj000r9zm3boag32rt"},{"name":"android-mvvm","_id":"cj56izncl000x9zm37ttuwbkm"},{"name":"Java设计模式","_id":"cj56izncw001c9zm30p4fl81n"},{"name":"react-native","_id":"cj56izndf00249zm3d2f7kn5i"},{"name":"RxJava","_id":"cj56izndp002o9zm3uv8quazw"},{"name":"okhttp3","_id":"cj56izndu00309zm3l4eqrrah"},{"name":"设计模式","_id":"cj56izndy003c9zm3kuy24f53"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-07-16T09:12:36.000Z","updated":"2017-07-16T09:11:55.000Z","path":"404.html","title":"","comments":1,"_id":"cj56iznax00009zm341c7utwx","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2017-07-16T09:11:55.000Z","path":"about/index.html","_id":"cj56iznbp00029zm3kgubz0jv","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"external\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"external\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-07-16T09:12:36.000Z","updated":"2017-07-16T09:11:55.000Z","path":"archives/index.html","comments":1,"_id":"cj56iznbu00049zm33364ffca","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-07-16T09:12:36.000Z","updated":"2017-07-16T09:11:55.000Z","path":"tags/index.html","comments":1,"_id":"cj56iznby00069zm3hmu0sl0t","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"RxJava读书笔记（二）","date":"2016-01-28T03:07:30.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1453950569/reactive/Rx_Logo_S.png","_content":"","source":"_posts/RxJava读书笔记（二）.md","raw":"---\ntitle: RxJava读书笔记（二）\ndate: 2016-01-28 11:07:30\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1453950569/reactive/Rx_Logo_S.png\ntags:\n---","slug":"RxJava读书笔记（二）","published":1,"updated":"2016-01-28T03:12:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxd0000c0m34xpa7let","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RxJava读书笔记（三）","date":"2016-01-28T03:13:59.000Z","_content":"","source":"_posts/RxJava读书笔记（三）.md","raw":"---\ntitle: RxJava读书笔记（三）\ndate: 2016-01-28 11:13:59\ntags:\n---\n","slug":"RxJava读书笔记（三）","published":1,"updated":"2016-01-28T03:14:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxf0001c0m3ikp0tuti","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RxJava读书笔记(一)","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1453950569/reactive/Rx_Logo_S.png","_content":"[RxJava Essentials CN](https://www.gitbook.com/book/yuxingxin/rxjava-essentials-cn/details)\n\n[ReactiveX](http://reactivex.io/documentation/observable.html)\n\n[ReactiveX文档中文翻译](https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html)\n\n## 介绍\n### 概述\nRxJava是[ReactiveX (Reactive Extensions)](https://reactivex.io/)的Java版本：\n-  a library for composing asynchronous and event-based programs by using observable sequences.\n一个构成异步的、基于事件的用可观察的序列的程序库。\n\n关于ReactiveX的更多信息，查看[Introduction to ReactiveX](http://reactivex.io/intro.html)\n\n### 轻量级\nRxJava是个轻量级的库，以单独的jar形式，集中观察者模式和相关高阶函数\n### 多语言的实现\nRxJava支持Java6及以上的基于JVM的实现的语言如：[Groovy](https://github.com/ReactiveX/RxGroovy)、[Clojure](https://github.com/ReactiveX/RxClojure)、[JRuby](https://github.com/ReactiveX/RxJRuby)、[Kotlin](https://github.com/ReactiveX/RxKotlin)、[Scala](https://github.com/ReactiveX/RxScala)。\n\nRxJava适用多语言环境不仅仅是Java或Scala。设计遵守每种JVM-based语言的风格。\n\n### RxJava库\n以下的扩展库都可以适用RxJava\n- [Hystrix](https://github.com/Netflix/Hystrix/wiki/How-To-Use#wiki-Reactive-Execution) 针对分布式系统的延迟和容错库\n- [Camel RX](http://camel.apache.org/rx.html)使用RxJava提供重用[Apache Camel components, protocols, transports and data formats](http://camel.apache.org/components.html)的简单方式。\n- [rxjava-http-tail](https://github.com/myfreeweb/rxjava-http-tail) \n- [mod-rxvertx - Extension for VertX](https://github.com/vert-x/mod-rxvertx)\n- [rxjava-jdbc](https://github.com/davidmoten/rxjava-jdbc)\n- [rtree](https://github.com/davidmoten/rtree)","source":"_posts/RxJava读书笔记(一).md","raw":"---\ntitle: RxJava读书笔记(一)\n# 设置日志缩略图，可以是外链，也可以是相对路径\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1453950569/reactive/Rx_Logo_S.png\ncategories: RxJava\ntags: RxJava\n---\n[RxJava Essentials CN](https://www.gitbook.com/book/yuxingxin/rxjava-essentials-cn/details)\n\n[ReactiveX](http://reactivex.io/documentation/observable.html)\n\n[ReactiveX文档中文翻译](https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html)\n\n## 介绍\n### 概述\nRxJava是[ReactiveX (Reactive Extensions)](https://reactivex.io/)的Java版本：\n-  a library for composing asynchronous and event-based programs by using observable sequences.\n一个构成异步的、基于事件的用可观察的序列的程序库。\n\n关于ReactiveX的更多信息，查看[Introduction to ReactiveX](http://reactivex.io/intro.html)\n\n### 轻量级\nRxJava是个轻量级的库，以单独的jar形式，集中观察者模式和相关高阶函数\n### 多语言的实现\nRxJava支持Java6及以上的基于JVM的实现的语言如：[Groovy](https://github.com/ReactiveX/RxGroovy)、[Clojure](https://github.com/ReactiveX/RxClojure)、[JRuby](https://github.com/ReactiveX/RxJRuby)、[Kotlin](https://github.com/ReactiveX/RxKotlin)、[Scala](https://github.com/ReactiveX/RxScala)。\n\nRxJava适用多语言环境不仅仅是Java或Scala。设计遵守每种JVM-based语言的风格。\n\n### RxJava库\n以下的扩展库都可以适用RxJava\n- [Hystrix](https://github.com/Netflix/Hystrix/wiki/How-To-Use#wiki-Reactive-Execution) 针对分布式系统的延迟和容错库\n- [Camel RX](http://camel.apache.org/rx.html)使用RxJava提供重用[Apache Camel components, protocols, transports and data formats](http://camel.apache.org/components.html)的简单方式。\n- [rxjava-http-tail](https://github.com/myfreeweb/rxjava-http-tail) \n- [mod-rxvertx - Extension for VertX](https://github.com/vert-x/mod-rxvertx)\n- [rxjava-jdbc](https://github.com/davidmoten/rxjava-jdbc)\n- [rtree](https://github.com/davidmoten/rtree)","slug":"RxJava读书笔记(一)","published":1,"date":"2016-01-07T15:11:23.000Z","updated":"2016-05-17T07:41:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxh0002c0m3ywxjlkbh","content":"<p><a href=\"https://www.gitbook.com/book/yuxingxin/rxjava-essentials-cn/details\" target=\"_blank\" rel=\"external\">RxJava Essentials CN</a></p>\n<p><a href=\"http://reactivex.io/documentation/observable.html\" target=\"_blank\" rel=\"external\">ReactiveX</a></p>\n<p><a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html\" target=\"_blank\" rel=\"external\">ReactiveX文档中文翻译</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>RxJava是<a href=\"https://reactivex.io/\" target=\"_blank\" rel=\"external\">ReactiveX (Reactive Extensions)</a>的Java版本：</p>\n<ul>\n<li>a library for composing asynchronous and event-based programs by using observable sequences.<br>一个构成异步的、基于事件的用可观察的序列的程序库。</li>\n</ul>\n<p>关于ReactiveX的更多信息，查看<a href=\"http://reactivex.io/intro.html\" target=\"_blank\" rel=\"external\">Introduction to ReactiveX</a></p>\n<h3 id=\"轻量级\"><a href=\"#轻量级\" class=\"headerlink\" title=\"轻量级\"></a>轻量级</h3><p>RxJava是个轻量级的库，以单独的jar形式，集中观察者模式和相关高阶函数</p>\n<h3 id=\"多语言的实现\"><a href=\"#多语言的实现\" class=\"headerlink\" title=\"多语言的实现\"></a>多语言的实现</h3><p>RxJava支持Java6及以上的基于JVM的实现的语言如：<a href=\"https://github.com/ReactiveX/RxGroovy\" target=\"_blank\" rel=\"external\">Groovy</a>、<a href=\"https://github.com/ReactiveX/RxClojure\" target=\"_blank\" rel=\"external\">Clojure</a>、<a href=\"https://github.com/ReactiveX/RxJRuby\" target=\"_blank\" rel=\"external\">JRuby</a>、<a href=\"https://github.com/ReactiveX/RxKotlin\" target=\"_blank\" rel=\"external\">Kotlin</a>、<a href=\"https://github.com/ReactiveX/RxScala\" target=\"_blank\" rel=\"external\">Scala</a>。</p>\n<p>RxJava适用多语言环境不仅仅是Java或Scala。设计遵守每种JVM-based语言的风格。</p>\n<h3 id=\"RxJava库\"><a href=\"#RxJava库\" class=\"headerlink\" title=\"RxJava库\"></a>RxJava库</h3><p>以下的扩展库都可以适用RxJava</p>\n<ul>\n<li><a href=\"https://github.com/Netflix/Hystrix/wiki/How-To-Use#wiki-Reactive-Execution\" target=\"_blank\" rel=\"external\">Hystrix</a> 针对分布式系统的延迟和容错库</li>\n<li><a href=\"http://camel.apache.org/rx.html\" target=\"_blank\" rel=\"external\">Camel RX</a>使用RxJava提供重用<a href=\"http://camel.apache.org/components.html\" target=\"_blank\" rel=\"external\">Apache Camel components, protocols, transports and data formats</a>的简单方式。</li>\n<li><a href=\"https://github.com/myfreeweb/rxjava-http-tail\" target=\"_blank\" rel=\"external\">rxjava-http-tail</a> </li>\n<li><a href=\"https://github.com/vert-x/mod-rxvertx\" target=\"_blank\" rel=\"external\">mod-rxvertx - Extension for VertX</a></li>\n<li><a href=\"https://github.com/davidmoten/rxjava-jdbc\" target=\"_blank\" rel=\"external\">rxjava-jdbc</a></li>\n<li><a href=\"https://github.com/davidmoten/rtree\" target=\"_blank\" rel=\"external\">rtree</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.gitbook.com/book/yuxingxin/rxjava-essentials-cn/details\" target=\"_blank\" rel=\"external\">RxJava Essentials CN</a></p>\n<p><a href=\"http://reactivex.io/documentation/observable.html\" target=\"_blank\" rel=\"external\">ReactiveX</a></p>\n<p><a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html\" target=\"_blank\" rel=\"external\">ReactiveX文档中文翻译</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>RxJava是<a href=\"https://reactivex.io/\" target=\"_blank\" rel=\"external\">ReactiveX (Reactive Extensions)</a>的Java版本：</p>\n<ul>\n<li>a library for composing asynchronous and event-based programs by using observable sequences.<br>一个构成异步的、基于事件的用可观察的序列的程序库。</li>\n</ul>\n<p>关于ReactiveX的更多信息，查看<a href=\"http://reactivex.io/intro.html\" target=\"_blank\" rel=\"external\">Introduction to ReactiveX</a></p>\n<h3 id=\"轻量级\"><a href=\"#轻量级\" class=\"headerlink\" title=\"轻量级\"></a>轻量级</h3><p>RxJava是个轻量级的库，以单独的jar形式，集中观察者模式和相关高阶函数</p>\n<h3 id=\"多语言的实现\"><a href=\"#多语言的实现\" class=\"headerlink\" title=\"多语言的实现\"></a>多语言的实现</h3><p>RxJava支持Java6及以上的基于JVM的实现的语言如：<a href=\"https://github.com/ReactiveX/RxGroovy\" target=\"_blank\" rel=\"external\">Groovy</a>、<a href=\"https://github.com/ReactiveX/RxClojure\" target=\"_blank\" rel=\"external\">Clojure</a>、<a href=\"https://github.com/ReactiveX/RxJRuby\" target=\"_blank\" rel=\"external\">JRuby</a>、<a href=\"https://github.com/ReactiveX/RxKotlin\" target=\"_blank\" rel=\"external\">Kotlin</a>、<a href=\"https://github.com/ReactiveX/RxScala\" target=\"_blank\" rel=\"external\">Scala</a>。</p>\n<p>RxJava适用多语言环境不仅仅是Java或Scala。设计遵守每种JVM-based语言的风格。</p>\n<h3 id=\"RxJava库\"><a href=\"#RxJava库\" class=\"headerlink\" title=\"RxJava库\"></a>RxJava库</h3><p>以下的扩展库都可以适用RxJava</p>\n<ul>\n<li><a href=\"https://github.com/Netflix/Hystrix/wiki/How-To-Use#wiki-Reactive-Execution\" target=\"_blank\" rel=\"external\">Hystrix</a> 针对分布式系统的延迟和容错库</li>\n<li><a href=\"http://camel.apache.org/rx.html\" target=\"_blank\" rel=\"external\">Camel RX</a>使用RxJava提供重用<a href=\"http://camel.apache.org/components.html\" target=\"_blank\" rel=\"external\">Apache Camel components, protocols, transports and data formats</a>的简单方式。</li>\n<li><a href=\"https://github.com/myfreeweb/rxjava-http-tail\" target=\"_blank\" rel=\"external\">rxjava-http-tail</a> </li>\n<li><a href=\"https://github.com/vert-x/mod-rxvertx\" target=\"_blank\" rel=\"external\">mod-rxvertx - Extension for VertX</a></li>\n<li><a href=\"https://github.com/davidmoten/rxjava-jdbc\" target=\"_blank\" rel=\"external\">rxjava-jdbc</a></li>\n<li><a href=\"https://github.com/davidmoten/rtree\" target=\"_blank\" rel=\"external\">rtree</a></li>\n</ul>\n"},{"title":"React-Native基础（4）：组件引用Ref","date":"2017-05-22T07:58:44.000Z","_content":"\n在典型的React数据流中，父组件与子组件的唯一交互方式就是通过Props。修改子组件，就需要使用新的Prop来重新渲染。但是在有些情况，需要在数据流之外，直接来执行子组件的修改操作。React提供了使用Ref方式来解决直接修改子组件或子DOM元素的问题。\n\n- 添加Ref到DOM元素\n`ref`是React组件一个特殊属性，使用`回调函数`作为属性，函数的接收组件的基本DOM元素作为它的参数。\n```js\n<Component ref={(el) => this.el = el }/>\n```\n定义的回调函数会在组件加载和卸载时立即调用。\n在组件卸载时函数中元素的值为`null`。\n一个简单的例子\n```js\n...\nclass CustomTextInput extends React.Component{\n   constructor(props){\n       super(props);\n       this.focus = this.focus.bind(this);\n   }\n   \n   focus(){\n       // 获取文字焦点\n       this.textInput.focus();\n   }\n   \n   render(){\n       // 使用ref回调函数存储text input 元素的引用\n       return (\n        <div>\n          <input \n            type=\"text\" \n            ref={(input) => { this.textInput = input; }} />\n          <input\n            type=\"button\"\n            value=\"Focus the text input\"\n            onClick={this.focus} />\n        </div>\n       );\n   }\n}\n\n```\n\n```js\n// es6 箭头函数\nref={input => this.textInput = input}\n```\n\n- 添加Ref到Class组件\n\n当为组件添加Ref回调函数，回调函数将使用自定义的组件作为它的参数。\n例如：\n```js\nclass AutoFocusTextInput extends React.Component{\n    constructor(props){\n        this.textInput.focus();\n    }\n    \n    render(){\n        return(\n          <CustomTextInput\n            ref={ (input) => {this.textInput = input; }}\n            />\n        );\n    }\n}\n```\n这个方式只能用于以`class`方式声明的`CustomTextInput`\n\n```js\nclass CustomTextInput extends React.Component {\n    // ...\n}\n```\n- Ref和函数组件\n\n因为函数式组件没有组件实例，所以不能够通过上面的方式来给函数组件添加ref。\n通过两种方式来解决\n    1. 将函数组件转为Class组件。\n    2. 在函数组件内部使用`ref`，这种方式同样适应于class组件。\n    \n```js\nfunction CustomTextInput(props){\n    // 需要声明引用的textInput\n    let textInput = null;\n    function handleClick(){\n        textInput.focus();\n    }\n    \n    return (\n      <div>\n        <input \n          text=\"text\"\n          ref={ (input) => { textInput = input; }}\n          />\n        <input \n          text=\"button\"\n          value=\"Focus the text input\"\n          onClick={ handleClick }\n          />\n      </div>\n    );\n}\n\n```\n- 暴露DOM的Ref给父组件\n\n在极少情况下，父组件需要访问子组件。因为破坏了组件的封装性，这种做法并不推荐，但是有时对于触发焦点和测量子DOM节点的位置或大小会有用。如果给子组件添加ref时，也并不是理想解决方案，因为ref回调函数的参数是子组件，而不是DOM节点元素，并且不适用函数式组件。\n因此，在这些情况建议暴露子组件的特殊属性，子组件使用任意名称（如：`inputRef`）的函数类型的Prop，并把这个属性添加大DOM节点元素中，作为`ref`属性。就可以通过中间组件将父组件的ref函数传递给子组件中的DOM节点\n```js\nfunction CustomTextInput(props){\n  return (\n    <div>\n      <input ref={props.inputRef}/>\n    </div>\n  );\n}\n\nclass Parent extends React.Component{\n    render (\n      return (\n        <CustomTextInput\n          inputRef={el => this.inputElement = el}\n          />\n      );\n    )\n}\n```\n上面代码中父组件使用`inputRef`属性将ref回调函数传递给中间组件`CustomTextInput`，`CustomTextInput`又将函数传给`<input />`的ref属性。最终父组件获取到对`<input />`的引用。这种形式不仅适用于Class组件，同样也适用于函数组件。\n这种形式的另一个好处就是：对于深层的DOM节点同样有效。假设父组件不需要DOM节点引用，但是祖父组件想要获取子组件中DOM节点元素的引用，可以通过让祖父组件指定inputRef属性，传递给父组件，父组件再把`inputRef`转给`CustomTextInput`。\n\n```js\nfunction CustomTextInput(props){\n  return (\n    <div>\n      <input ref={props.inputRef}/>\n    </div>\n  );\n}\n\nclass Parent extends React.Component{\n    render (\n      return (\n        <div>\n          My input: <CustomTextInput inputRef={props.inputRef} />\n        </div>\n      );\n    )\n}\n\n\nclass GrandParent extends React.Component{\n  render() {\n    return (\n      <Parent\n        inputRef={el => this.inputElement = el}\n      />\n    );\n  }\n}\n\n```\n> 综合考虑下，不建议暴露DOM节点。 因为破坏了组件的封装，而且需要子节点添加额外的属性。\n\n- 说明\n\n如果`ref`以内联函数形式定义，在更新时会被调用两次\n    - 第一次为函数的参数为null，第二次为DOM元素\n因为每次render时，都要创建一个新的函数实例，建议通过组件bind函数来定义ref回调函数。\n\n- 适应场景\n\n    1. 管理输入焦点，文字选择或者媒体播放时；\n    2. 触发必要的动画时；\n    3. 与第三方DOM库交互时；\n\n避免使用在可用声明方式的情景下。如：通过定义`isOpen`的方式，避免暴露`Dialog`的`open`和`close`的方法。\n\n- 避免过度使用\n\n在使用`ref`时，一定要经过慎重思考，尤其是拥有State状态的组件。首先考虑使用Props\n\n[Refs and the DOM](https://facebook.github.io/react/docs/refs-and-the-dom.html)","source":"_posts/React-Native基础（4）：组件引用Ref.md","raw":"---\ntitle: React-Native基础（4）：组件引用Ref\ndate: 2017-05-22 15:58:44\ntags: react-native\ncategories : react-native\n---\n\n在典型的React数据流中，父组件与子组件的唯一交互方式就是通过Props。修改子组件，就需要使用新的Prop来重新渲染。但是在有些情况，需要在数据流之外，直接来执行子组件的修改操作。React提供了使用Ref方式来解决直接修改子组件或子DOM元素的问题。\n\n- 添加Ref到DOM元素\n`ref`是React组件一个特殊属性，使用`回调函数`作为属性，函数的接收组件的基本DOM元素作为它的参数。\n```js\n<Component ref={(el) => this.el = el }/>\n```\n定义的回调函数会在组件加载和卸载时立即调用。\n在组件卸载时函数中元素的值为`null`。\n一个简单的例子\n```js\n...\nclass CustomTextInput extends React.Component{\n   constructor(props){\n       super(props);\n       this.focus = this.focus.bind(this);\n   }\n   \n   focus(){\n       // 获取文字焦点\n       this.textInput.focus();\n   }\n   \n   render(){\n       // 使用ref回调函数存储text input 元素的引用\n       return (\n        <div>\n          <input \n            type=\"text\" \n            ref={(input) => { this.textInput = input; }} />\n          <input\n            type=\"button\"\n            value=\"Focus the text input\"\n            onClick={this.focus} />\n        </div>\n       );\n   }\n}\n\n```\n\n```js\n// es6 箭头函数\nref={input => this.textInput = input}\n```\n\n- 添加Ref到Class组件\n\n当为组件添加Ref回调函数，回调函数将使用自定义的组件作为它的参数。\n例如：\n```js\nclass AutoFocusTextInput extends React.Component{\n    constructor(props){\n        this.textInput.focus();\n    }\n    \n    render(){\n        return(\n          <CustomTextInput\n            ref={ (input) => {this.textInput = input; }}\n            />\n        );\n    }\n}\n```\n这个方式只能用于以`class`方式声明的`CustomTextInput`\n\n```js\nclass CustomTextInput extends React.Component {\n    // ...\n}\n```\n- Ref和函数组件\n\n因为函数式组件没有组件实例，所以不能够通过上面的方式来给函数组件添加ref。\n通过两种方式来解决\n    1. 将函数组件转为Class组件。\n    2. 在函数组件内部使用`ref`，这种方式同样适应于class组件。\n    \n```js\nfunction CustomTextInput(props){\n    // 需要声明引用的textInput\n    let textInput = null;\n    function handleClick(){\n        textInput.focus();\n    }\n    \n    return (\n      <div>\n        <input \n          text=\"text\"\n          ref={ (input) => { textInput = input; }}\n          />\n        <input \n          text=\"button\"\n          value=\"Focus the text input\"\n          onClick={ handleClick }\n          />\n      </div>\n    );\n}\n\n```\n- 暴露DOM的Ref给父组件\n\n在极少情况下，父组件需要访问子组件。因为破坏了组件的封装性，这种做法并不推荐，但是有时对于触发焦点和测量子DOM节点的位置或大小会有用。如果给子组件添加ref时，也并不是理想解决方案，因为ref回调函数的参数是子组件，而不是DOM节点元素，并且不适用函数式组件。\n因此，在这些情况建议暴露子组件的特殊属性，子组件使用任意名称（如：`inputRef`）的函数类型的Prop，并把这个属性添加大DOM节点元素中，作为`ref`属性。就可以通过中间组件将父组件的ref函数传递给子组件中的DOM节点\n```js\nfunction CustomTextInput(props){\n  return (\n    <div>\n      <input ref={props.inputRef}/>\n    </div>\n  );\n}\n\nclass Parent extends React.Component{\n    render (\n      return (\n        <CustomTextInput\n          inputRef={el => this.inputElement = el}\n          />\n      );\n    )\n}\n```\n上面代码中父组件使用`inputRef`属性将ref回调函数传递给中间组件`CustomTextInput`，`CustomTextInput`又将函数传给`<input />`的ref属性。最终父组件获取到对`<input />`的引用。这种形式不仅适用于Class组件，同样也适用于函数组件。\n这种形式的另一个好处就是：对于深层的DOM节点同样有效。假设父组件不需要DOM节点引用，但是祖父组件想要获取子组件中DOM节点元素的引用，可以通过让祖父组件指定inputRef属性，传递给父组件，父组件再把`inputRef`转给`CustomTextInput`。\n\n```js\nfunction CustomTextInput(props){\n  return (\n    <div>\n      <input ref={props.inputRef}/>\n    </div>\n  );\n}\n\nclass Parent extends React.Component{\n    render (\n      return (\n        <div>\n          My input: <CustomTextInput inputRef={props.inputRef} />\n        </div>\n      );\n    )\n}\n\n\nclass GrandParent extends React.Component{\n  render() {\n    return (\n      <Parent\n        inputRef={el => this.inputElement = el}\n      />\n    );\n  }\n}\n\n```\n> 综合考虑下，不建议暴露DOM节点。 因为破坏了组件的封装，而且需要子节点添加额外的属性。\n\n- 说明\n\n如果`ref`以内联函数形式定义，在更新时会被调用两次\n    - 第一次为函数的参数为null，第二次为DOM元素\n因为每次render时，都要创建一个新的函数实例，建议通过组件bind函数来定义ref回调函数。\n\n- 适应场景\n\n    1. 管理输入焦点，文字选择或者媒体播放时；\n    2. 触发必要的动画时；\n    3. 与第三方DOM库交互时；\n\n避免使用在可用声明方式的情景下。如：通过定义`isOpen`的方式，避免暴露`Dialog`的`open`和`close`的方法。\n\n- 避免过度使用\n\n在使用`ref`时，一定要经过慎重思考，尤其是拥有State状态的组件。首先考虑使用Props\n\n[Refs and the DOM](https://facebook.github.io/react/docs/refs-and-the-dom.html)","slug":"React-Native基础（4）：组件引用Ref","published":1,"updated":"2017-05-22T07:58:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxi0003c0m37w3shb3i","content":"<p>在典型的React数据流中，父组件与子组件的唯一交互方式就是通过Props。修改子组件，就需要使用新的Prop来重新渲染。但是在有些情况，需要在数据流之外，直接来执行子组件的修改操作。React提供了使用Ref方式来解决直接修改子组件或子DOM元素的问题。</p>\n<ul>\n<li>添加Ref到DOM元素<br><code>ref</code>是React组件一个特殊属性，使用<code>回调函数</code>作为属性，函数的接收组件的基本DOM元素作为它的参数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Component ref=&#123;(el) =&gt; <span class=\"keyword\">this</span>.el = el &#125;/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>定义的回调函数会在组件加载和卸载时立即调用。<br>在组件卸载时函数中元素的值为<code>null</code>。<br>一个简单的例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">class CustomTextInput extends React.Component&#123;</div><div class=\"line\">   <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>(props);</div><div class=\"line\">       <span class=\"keyword\">this</span>.focus = <span class=\"keyword\">this</span>.focus.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   focus()&#123;</div><div class=\"line\">       <span class=\"comment\">// 获取文字焦点</span></div><div class=\"line\">       <span class=\"keyword\">this</span>.textInput.focus();</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   render()&#123;</div><div class=\"line\">       <span class=\"comment\">// 使用ref回调函数存储text input 元素的引用</span></div><div class=\"line\">       <span class=\"keyword\">return</span> (</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &lt;input </div><div class=\"line\">            type=\"text\" </div><div class=\"line\">            ref=&#123;(input) =&gt; &#123; this.textInput = input; &#125;&#125; /&gt;</div><div class=\"line\">          &lt;input</div><div class=\"line\">            type=\"button\"</div><div class=\"line\">            value=\"Focus the text input\"</div><div class=\"line\">            onClick=&#123;this.focus&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">       );</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// es6 箭头函数</span></div><div class=\"line\">ref=&#123;input =&gt; <span class=\"keyword\">this</span>.textInput = input&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加Ref到Class组件</li>\n</ul>\n<p>当为组件添加Ref回调函数，回调函数将使用自定义的组件作为它的参数。<br>例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoFocusTextInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.textInput.focus();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">          &lt;CustomTextInput</div><div class=\"line\">            ref=&#123; (input) =&gt; &#123;this.textInput = input; &#125;&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个方式只能用于以<code>class</code>方式声明的<code>CustomTextInput</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomTextInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Ref和函数组件</li>\n</ul>\n<p>因为函数式组件没有组件实例，所以不能够通过上面的方式来给函数组件添加ref。<br>通过两种方式来解决</p>\n<pre><code>1. 将函数组件转为Class组件。\n2. 在函数组件内部使用`ref`，这种方式同样适应于class组件。\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTextInput</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 需要声明引用的textInput</span></div><div class=\"line\">    <span class=\"keyword\">let</span> textInput = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        textInput.focus();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;input </div><div class=\"line\">          text=\"text\"</div><div class=\"line\">          ref=&#123; (input) =&gt; &#123; textInput = input; &#125;&#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">        &lt;input </div><div class=\"line\">          text=\"button\"</div><div class=\"line\">          value=\"Focus the text input\"</div><div class=\"line\">          onClick=&#123; handleClick &#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>暴露DOM的Ref给父组件</li>\n</ul>\n<p>在极少情况下，父组件需要访问子组件。因为破坏了组件的封装性，这种做法并不推荐，但是有时对于触发焦点和测量子DOM节点的位置或大小会有用。如果给子组件添加ref时，也并不是理想解决方案，因为ref回调函数的参数是子组件，而不是DOM节点元素，并且不适用函数式组件。<br>因此，在这些情况建议暴露子组件的特殊属性，子组件使用任意名称（如：<code>inputRef</code>）的函数类型的Prop，并把这个属性添加大DOM节点元素中，作为<code>ref</code>属性。就可以通过中间组件将父组件的ref函数传递给子组件中的DOM节点<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTextInput</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;input ref=&#123;props.inputRef&#125;/&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Parent extends React.Component&#123;</div><div class=\"line\">    render (</div><div class=\"line\">      return (</div><div class=\"line\">        &lt;CustomTextInput</div><div class=\"line\">          inputRef=&#123;el =&gt; this.inputElement = el&#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">      );</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中父组件使用<code>inputRef</code>属性将ref回调函数传递给中间组件<code>CustomTextInput</code>，<code>CustomTextInput</code>又将函数传给<code>&lt;input /&gt;</code>的ref属性。最终父组件获取到对<code>&lt;input /&gt;</code>的引用。这种形式不仅适用于Class组件，同样也适用于函数组件。<br>这种形式的另一个好处就是：对于深层的DOM节点同样有效。假设父组件不需要DOM节点引用，但是祖父组件想要获取子组件中DOM节点元素的引用，可以通过让祖父组件指定inputRef属性，传递给父组件，父组件再把<code>inputRef</code>转给<code>CustomTextInput</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTextInput</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;input ref=&#123;props.inputRef&#125;/&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Parent extends React.Component&#123;</div><div class=\"line\">    render (</div><div class=\"line\">      return (</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          My input: &lt;CustomTextInput inputRef=&#123;props.inputRef&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      );</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class GrandParent extends React.Component&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Parent</div><div class=\"line\">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</div><div class=\"line\">      /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>综合考虑下，不建议暴露DOM节点。 因为破坏了组件的封装，而且需要子节点添加额外的属性。</p>\n</blockquote>\n<ul>\n<li>说明</li>\n</ul>\n<p>如果<code>ref</code>以内联函数形式定义，在更新时会被调用两次</p>\n<pre><code>- 第一次为函数的参数为null，第二次为DOM元素\n</code></pre><p>因为每次render时，都要创建一个新的函数实例，建议通过组件bind函数来定义ref回调函数。</p>\n<ul>\n<li><p>适应场景</p>\n<ol>\n<li>管理输入焦点，文字选择或者媒体播放时；</li>\n<li>触发必要的动画时；</li>\n<li>与第三方DOM库交互时；</li>\n</ol>\n</li>\n</ul>\n<p>避免使用在可用声明方式的情景下。如：通过定义<code>isOpen</code>的方式，避免暴露<code>Dialog</code>的<code>open</code>和<code>close</code>的方法。</p>\n<ul>\n<li>避免过度使用</li>\n</ul>\n<p>在使用<code>ref</code>时，一定要经过慎重思考，尤其是拥有State状态的组件。首先考虑使用Props</p>\n<p><a href=\"https://facebook.github.io/react/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"external\">Refs and the DOM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在典型的React数据流中，父组件与子组件的唯一交互方式就是通过Props。修改子组件，就需要使用新的Prop来重新渲染。但是在有些情况，需要在数据流之外，直接来执行子组件的修改操作。React提供了使用Ref方式来解决直接修改子组件或子DOM元素的问题。</p>\n<ul>\n<li>添加Ref到DOM元素<br><code>ref</code>是React组件一个特殊属性，使用<code>回调函数</code>作为属性，函数的接收组件的基本DOM元素作为它的参数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Component ref=&#123;(el) =&gt; <span class=\"keyword\">this</span>.el = el &#125;/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>定义的回调函数会在组件加载和卸载时立即调用。<br>在组件卸载时函数中元素的值为<code>null</code>。<br>一个简单的例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">class CustomTextInput extends React.Component&#123;</div><div class=\"line\">   <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>(props);</div><div class=\"line\">       <span class=\"keyword\">this</span>.focus = <span class=\"keyword\">this</span>.focus.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   focus()&#123;</div><div class=\"line\">       <span class=\"comment\">// 获取文字焦点</span></div><div class=\"line\">       <span class=\"keyword\">this</span>.textInput.focus();</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   render()&#123;</div><div class=\"line\">       <span class=\"comment\">// 使用ref回调函数存储text input 元素的引用</span></div><div class=\"line\">       <span class=\"keyword\">return</span> (</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &lt;input </div><div class=\"line\">            type=\"text\" </div><div class=\"line\">            ref=&#123;(input) =&gt; &#123; this.textInput = input; &#125;&#125; /&gt;</div><div class=\"line\">          &lt;input</div><div class=\"line\">            type=\"button\"</div><div class=\"line\">            value=\"Focus the text input\"</div><div class=\"line\">            onClick=&#123;this.focus&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">       );</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// es6 箭头函数</span></div><div class=\"line\">ref=&#123;input =&gt; <span class=\"keyword\">this</span>.textInput = input&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加Ref到Class组件</li>\n</ul>\n<p>当为组件添加Ref回调函数，回调函数将使用自定义的组件作为它的参数。<br>例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoFocusTextInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.textInput.focus();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">          &lt;CustomTextInput</div><div class=\"line\">            ref=&#123; (input) =&gt; &#123;this.textInput = input; &#125;&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个方式只能用于以<code>class</code>方式声明的<code>CustomTextInput</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomTextInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Ref和函数组件</li>\n</ul>\n<p>因为函数式组件没有组件实例，所以不能够通过上面的方式来给函数组件添加ref。<br>通过两种方式来解决</p>\n<pre><code>1. 将函数组件转为Class组件。\n2. 在函数组件内部使用`ref`，这种方式同样适应于class组件。\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTextInput</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 需要声明引用的textInput</span></div><div class=\"line\">    <span class=\"keyword\">let</span> textInput = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        textInput.focus();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;input </div><div class=\"line\">          text=\"text\"</div><div class=\"line\">          ref=&#123; (input) =&gt; &#123; textInput = input; &#125;&#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">        &lt;input </div><div class=\"line\">          text=\"button\"</div><div class=\"line\">          value=\"Focus the text input\"</div><div class=\"line\">          onClick=&#123; handleClick &#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>暴露DOM的Ref给父组件</li>\n</ul>\n<p>在极少情况下，父组件需要访问子组件。因为破坏了组件的封装性，这种做法并不推荐，但是有时对于触发焦点和测量子DOM节点的位置或大小会有用。如果给子组件添加ref时，也并不是理想解决方案，因为ref回调函数的参数是子组件，而不是DOM节点元素，并且不适用函数式组件。<br>因此，在这些情况建议暴露子组件的特殊属性，子组件使用任意名称（如：<code>inputRef</code>）的函数类型的Prop，并把这个属性添加大DOM节点元素中，作为<code>ref</code>属性。就可以通过中间组件将父组件的ref函数传递给子组件中的DOM节点<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTextInput</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;input ref=&#123;props.inputRef&#125;/&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Parent extends React.Component&#123;</div><div class=\"line\">    render (</div><div class=\"line\">      return (</div><div class=\"line\">        &lt;CustomTextInput</div><div class=\"line\">          inputRef=&#123;el =&gt; this.inputElement = el&#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">      );</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中父组件使用<code>inputRef</code>属性将ref回调函数传递给中间组件<code>CustomTextInput</code>，<code>CustomTextInput</code>又将函数传给<code>&lt;input /&gt;</code>的ref属性。最终父组件获取到对<code>&lt;input /&gt;</code>的引用。这种形式不仅适用于Class组件，同样也适用于函数组件。<br>这种形式的另一个好处就是：对于深层的DOM节点同样有效。假设父组件不需要DOM节点引用，但是祖父组件想要获取子组件中DOM节点元素的引用，可以通过让祖父组件指定inputRef属性，传递给父组件，父组件再把<code>inputRef</code>转给<code>CustomTextInput</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTextInput</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;input ref=&#123;props.inputRef&#125;/&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Parent extends React.Component&#123;</div><div class=\"line\">    render (</div><div class=\"line\">      return (</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          My input: &lt;CustomTextInput inputRef=&#123;props.inputRef&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      );</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class GrandParent extends React.Component&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Parent</div><div class=\"line\">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</div><div class=\"line\">      /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>综合考虑下，不建议暴露DOM节点。 因为破坏了组件的封装，而且需要子节点添加额外的属性。</p>\n</blockquote>\n<ul>\n<li>说明</li>\n</ul>\n<p>如果<code>ref</code>以内联函数形式定义，在更新时会被调用两次</p>\n<pre><code>- 第一次为函数的参数为null，第二次为DOM元素\n</code></pre><p>因为每次render时，都要创建一个新的函数实例，建议通过组件bind函数来定义ref回调函数。</p>\n<ul>\n<li><p>适应场景</p>\n<ol>\n<li>管理输入焦点，文字选择或者媒体播放时；</li>\n<li>触发必要的动画时；</li>\n<li>与第三方DOM库交互时；</li>\n</ol>\n</li>\n</ul>\n<p>避免使用在可用声明方式的情景下。如：通过定义<code>isOpen</code>的方式，避免暴露<code>Dialog</code>的<code>open</code>和<code>close</code>的方法。</p>\n<ul>\n<li>避免过度使用</li>\n</ul>\n<p>在使用<code>ref</code>时，一定要经过慎重思考，尤其是拥有State状态的组件。首先考虑使用Props</p>\n<p><a href=\"https://facebook.github.io/react/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"external\">Refs and the DOM</a></p>\n"},{"title":"React-Native基础（2）：聊聊Props与States","date":"2017-05-18T06:43:29.000Z","_content":"\nReact-Native 基于状态实现对DOM控制和渲染。组件状态分为两种：一种是组件间的状态传递、另一种是组件的内部状态，这两种状态使用props和state表示。props用于从父组件到子组件的数据传递。组件内部也有自己的状态：state，这些状态只能在组件内部修改。\n## Props\n在React-Native中大多数组件创建时可以带有不同的参数，这些参数被称为`props`。\n如：React-Native的常用组件`Image`。当创建`Image`时，可以用`source`属性来指定要显示的图片资源。\n```js\nimport React , { Component } from 'react'\nimport { AppRegistry , Image , } from 'react-native'\n\nclass Bananas extends Component {\n    render (){\n        let pic = {\n            uri : 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'\n        }\n        return (\n            <Image source={pic} style={{ width : 193 , height : 110}}/>\n        );\n    }\n}\n\nAppRegistry.registerComponent('Bananas', () => Bananas);\n```\n自定义的组件也可以使用`Props`，根据`Props`名称引用指定的属性值。如在组件`Greeting`的`render`方法中用`this.props.name`应用组件的`name`属性值。\n\n```js\nimport React , { Component } from 'react'\nimport { AppRegistry , Text , View} from 'react-native'\n\nclass Greeting extends Component {\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n\nclass LotsOfGreetings extends Component {\n  render() {\n    return (\n      <View style={{alignItems: 'center'}}>\n        <Greeting name='Rexxar' />\n        <Greeting name='Jaina' />\n        <Greeting name='Valeera' />\n      </View>\n    );\n  }\n}\n\nAppRegistry.registerComponent('LotsOfGreetings', () => LotsOfGreetings);\n\n```\n- 默认属性\n\n使用`static`定义组件的默认属性值\n\n```js\nimport React , { Component } from 'react'\nimport { AppRegistry , Text , View} from 'react-native'\nclass Greeting extends Component {\n  static defaultProps = {\n      name : 'alex' , s\n  }\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n...\n```\n- 约束与检查\n\n使用`PropTypes` 对`Props`值的类型进行约束\n```js\nimport React , { Component , PropTypes , } from 'react'\nimport { AppRegistry , Text , View , } from 'react-native'\nclass Greeting extends Component {\n  ...\n  static propTypes = {\n      name : PropTypes.string , \n      age : PropTypes.num , \n      greet : PropTypes.func.isRequired ,\n  }\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n```\n如果必须使用指定属性值，通过`PropTypes.{type}.isRequired`来约束。\n\n- 扩展语法...\n\n传入对象的属性会被复制到组件内，可以多次使用，可以与其他属性组合使用，后面的属性值覆盖之前的属性。[JSX 展开属性](http://reactjs.cn/react/docs/transferring-props.html)\n```js\nimport React , { Component , PropTypes , } from 'react'\nimport { AppRegistry , Text , View , } from 'react-native'\nclass Greeting extends Component {\n  ...\n  render() {\n    return (\n      <Text>Hello {this.props.name}</Text>\n    );\n  }\n}\n\n...\n<Greeting {...this.props} name='alex' />\n...\n```\n- Props属性解构\n通过解构Props属性，直接引用解构后的属性。\n```js\nimport React , { Component , PropTypes , } from 'react'\nimport { AppRegistry , Text , View , } from 'react-native'\nclass Greeting extends Component {\n  ...\n  render() {\n    let {name , ...props} = this.props;\n    return (\n      <Text>Hello {name}</Text>\n    );\n  }\n}\n```\n## State\n控制组件有两种类型数据：`Props`和`State`。`Props`是由父元素设定的固定属性值，在组件整个生命周期中是不可变，使用`State`来更新数据，刷新UI。\n通常在组件构造方法中初始化State，调用`setState()`方法更新State数据。\n简单的文字闪烁的例子，文字的内容在组件创建时使用Props设置为了固定值，文字的闪烁状态则由`State`来控制。\n\n```js\nimport React, { Component } from 'react';\nimport { AppRegistry, Text, View } from 'react-native';\nclass Blink extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {showText: true};\n\n    // 每秒修改State\n    setInterval(() => {\n      this.setState({ showText: !this.state.showText });\n    }, 1000);\n  }\n\n  render() {\n    let display = this.state.showText ? this.props.text : ' ';\n    return (\n      <Text>{display}</Text>\n    );\n  }\n}\n\nclass BlinkApp extends Component {\n  render() {\n    return (\n      <View>\n        <Blink text='I love to blink' />\n        <Blink text='Yes blinking is so great' />\n        <Blink text='Why did they ever take this out of HTML' />\n        <Blink text='Look at me look at me look at me' />\n      </View>\n    );\n  }\n}\n\nAppRegistry.registerComponent('BlinkApp', () => BlinkApp);\n\n```\n- 不要直接修改State属性值\n赋值的形式唯一的地方只能在构造器中执行\n```js\nclass ConcreateCompnent extends Component {\n    constructor(props){\n        super(props);\n        this.State = {...};\n    }\n}\n```\n使用`setState()`函数修改属性\n```js\n// 错误\nthis.state.name = 'lucky';\n// 正确\nthis.state.setState={ {name : 'lucky'} };\n```\n\n- 异步更新State\n\n为了性能，React会批处理连续多个`setState`操作。\n因为`this.props`和`this.state`可能执行一步更新，所以调用`this.props`或`this.state`时的值并不正确。\n```js\n// 错误\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n```\n建议`setState`接收函数的形式来更新state。因为函数的形式会使用前一个`state`作为第一个参数，同时更新的`props`属性作为第二个参数。\n```js\n// 正确\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n```\n\n- 合并更新State\n\n调用setState方法时，React会合并提供的state值。\n```js\nclass ConcreateComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            posts:[] ,\n            comments : [] , \n        }\n    }\n    \n    componentDidMount(){\n        fetchPosts().then( response => {\n            this.setState({\n                posts : response.posts\n            });   \n        });\n        \n        fetchComment().then( response => {\n            this.setState({\n                comments : response.comments\n            })\n        })\n    }\n}\n\n```\n- 数据流向\n\nReact中的数据流是单向的，只会从父组件传递到子组件。属性props（properties）是父子组件间进行状态传递的接口，React会向下遍历整个组件树，并重新渲染使用这个属性的组件。\n\n\n\n","source":"_posts/React-Native基础（2）：聊聊Props和State.md","raw":"---\ntitle: React-Native基础（2）：聊聊Props与States\ndate: 2017-05-18 14:43:29\ntags: react-native\ncategories : react-native\n---\n\nReact-Native 基于状态实现对DOM控制和渲染。组件状态分为两种：一种是组件间的状态传递、另一种是组件的内部状态，这两种状态使用props和state表示。props用于从父组件到子组件的数据传递。组件内部也有自己的状态：state，这些状态只能在组件内部修改。\n## Props\n在React-Native中大多数组件创建时可以带有不同的参数，这些参数被称为`props`。\n如：React-Native的常用组件`Image`。当创建`Image`时，可以用`source`属性来指定要显示的图片资源。\n```js\nimport React , { Component } from 'react'\nimport { AppRegistry , Image , } from 'react-native'\n\nclass Bananas extends Component {\n    render (){\n        let pic = {\n            uri : 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'\n        }\n        return (\n            <Image source={pic} style={{ width : 193 , height : 110}}/>\n        );\n    }\n}\n\nAppRegistry.registerComponent('Bananas', () => Bananas);\n```\n自定义的组件也可以使用`Props`，根据`Props`名称引用指定的属性值。如在组件`Greeting`的`render`方法中用`this.props.name`应用组件的`name`属性值。\n\n```js\nimport React , { Component } from 'react'\nimport { AppRegistry , Text , View} from 'react-native'\n\nclass Greeting extends Component {\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n\nclass LotsOfGreetings extends Component {\n  render() {\n    return (\n      <View style={{alignItems: 'center'}}>\n        <Greeting name='Rexxar' />\n        <Greeting name='Jaina' />\n        <Greeting name='Valeera' />\n      </View>\n    );\n  }\n}\n\nAppRegistry.registerComponent('LotsOfGreetings', () => LotsOfGreetings);\n\n```\n- 默认属性\n\n使用`static`定义组件的默认属性值\n\n```js\nimport React , { Component } from 'react'\nimport { AppRegistry , Text , View} from 'react-native'\nclass Greeting extends Component {\n  static defaultProps = {\n      name : 'alex' , s\n  }\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n...\n```\n- 约束与检查\n\n使用`PropTypes` 对`Props`值的类型进行约束\n```js\nimport React , { Component , PropTypes , } from 'react'\nimport { AppRegistry , Text , View , } from 'react-native'\nclass Greeting extends Component {\n  ...\n  static propTypes = {\n      name : PropTypes.string , \n      age : PropTypes.num , \n      greet : PropTypes.func.isRequired ,\n  }\n  render() {\n    return (\n      <Text>Hello {this.props.name}!</Text>\n    );\n  }\n}\n```\n如果必须使用指定属性值，通过`PropTypes.{type}.isRequired`来约束。\n\n- 扩展语法...\n\n传入对象的属性会被复制到组件内，可以多次使用，可以与其他属性组合使用，后面的属性值覆盖之前的属性。[JSX 展开属性](http://reactjs.cn/react/docs/transferring-props.html)\n```js\nimport React , { Component , PropTypes , } from 'react'\nimport { AppRegistry , Text , View , } from 'react-native'\nclass Greeting extends Component {\n  ...\n  render() {\n    return (\n      <Text>Hello {this.props.name}</Text>\n    );\n  }\n}\n\n...\n<Greeting {...this.props} name='alex' />\n...\n```\n- Props属性解构\n通过解构Props属性，直接引用解构后的属性。\n```js\nimport React , { Component , PropTypes , } from 'react'\nimport { AppRegistry , Text , View , } from 'react-native'\nclass Greeting extends Component {\n  ...\n  render() {\n    let {name , ...props} = this.props;\n    return (\n      <Text>Hello {name}</Text>\n    );\n  }\n}\n```\n## State\n控制组件有两种类型数据：`Props`和`State`。`Props`是由父元素设定的固定属性值，在组件整个生命周期中是不可变，使用`State`来更新数据，刷新UI。\n通常在组件构造方法中初始化State，调用`setState()`方法更新State数据。\n简单的文字闪烁的例子，文字的内容在组件创建时使用Props设置为了固定值，文字的闪烁状态则由`State`来控制。\n\n```js\nimport React, { Component } from 'react';\nimport { AppRegistry, Text, View } from 'react-native';\nclass Blink extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {showText: true};\n\n    // 每秒修改State\n    setInterval(() => {\n      this.setState({ showText: !this.state.showText });\n    }, 1000);\n  }\n\n  render() {\n    let display = this.state.showText ? this.props.text : ' ';\n    return (\n      <Text>{display}</Text>\n    );\n  }\n}\n\nclass BlinkApp extends Component {\n  render() {\n    return (\n      <View>\n        <Blink text='I love to blink' />\n        <Blink text='Yes blinking is so great' />\n        <Blink text='Why did they ever take this out of HTML' />\n        <Blink text='Look at me look at me look at me' />\n      </View>\n    );\n  }\n}\n\nAppRegistry.registerComponent('BlinkApp', () => BlinkApp);\n\n```\n- 不要直接修改State属性值\n赋值的形式唯一的地方只能在构造器中执行\n```js\nclass ConcreateCompnent extends Component {\n    constructor(props){\n        super(props);\n        this.State = {...};\n    }\n}\n```\n使用`setState()`函数修改属性\n```js\n// 错误\nthis.state.name = 'lucky';\n// 正确\nthis.state.setState={ {name : 'lucky'} };\n```\n\n- 异步更新State\n\n为了性能，React会批处理连续多个`setState`操作。\n因为`this.props`和`this.state`可能执行一步更新，所以调用`this.props`或`this.state`时的值并不正确。\n```js\n// 错误\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n```\n建议`setState`接收函数的形式来更新state。因为函数的形式会使用前一个`state`作为第一个参数，同时更新的`props`属性作为第二个参数。\n```js\n// 正确\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n```\n\n- 合并更新State\n\n调用setState方法时，React会合并提供的state值。\n```js\nclass ConcreateComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            posts:[] ,\n            comments : [] , \n        }\n    }\n    \n    componentDidMount(){\n        fetchPosts().then( response => {\n            this.setState({\n                posts : response.posts\n            });   \n        });\n        \n        fetchComment().then( response => {\n            this.setState({\n                comments : response.comments\n            })\n        })\n    }\n}\n\n```\n- 数据流向\n\nReact中的数据流是单向的，只会从父组件传递到子组件。属性props（properties）是父子组件间进行状态传递的接口，React会向下遍历整个组件树，并重新渲染使用这个属性的组件。\n\n\n\n","slug":"React-Native基础（2）：聊聊Props和State","published":1,"updated":"2017-05-18T06:44:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxj0005c0m3padi7eio","content":"<p>React-Native 基于状态实现对DOM控制和渲染。组件状态分为两种：一种是组件间的状态传递、另一种是组件的内部状态，这两种状态使用props和state表示。props用于从父组件到子组件的数据传递。组件内部也有自己的状态：state，这些状态只能在组件内部修改。</p>\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><p>在React-Native中大多数组件创建时可以带有不同的参数，这些参数被称为<code>props</code>。<br>如：React-Native的常用组件<code>Image</code>。当创建<code>Image</code>时，可以用<code>source</code>属性来指定要显示的图片资源。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Image , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bananas</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render ()&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> pic = &#123;</div><div class=\"line\">            <span class=\"attr\">uri</span> : <span class=\"string\">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;Image source=&#123;pic&#125; style=&#123;&#123; width : 193 , height : 110&#125;&#125;/&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('Bananas', () =&gt; Bananas);</div></pre></td></tr></table></figure></p>\n<p>自定义的组件也可以使用<code>Props</code>，根据<code>Props</code>名称引用指定的属性值。如在组件<code>Greeting</code>的<code>render</code>方法中用<code>this.props.name</code>应用组件的<code>name</code>属性值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LotsOfGreetings</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</div><div class=\"line\">        &lt;Greeting name='Rexxar' /&gt;</div><div class=\"line\">        &lt;Greeting name='Jaina' /&gt;</div><div class=\"line\">        &lt;Greeting name='Valeera' /&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('LotsOfGreetings', () =&gt; LotsOfGreetings);</div></pre></td></tr></table></figure>\n<ul>\n<li>默认属性</li>\n</ul>\n<p>使用<code>static</code>定义组件的默认属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">'alex'</span> , s</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<ul>\n<li>约束与检查</li>\n</ul>\n<p>使用<code>PropTypes</code> 对<code>Props</code>值的类型进行约束<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component , PropTypes , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  static propTypes = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : PropTypes.string , </div><div class=\"line\">      <span class=\"attr\">age</span> : PropTypes.num , </div><div class=\"line\">      <span class=\"attr\">greet</span> : PropTypes.func.isRequired ,</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果必须使用指定属性值，通过<code>PropTypes.{type}.isRequired</code>来约束。</p>\n<ul>\n<li>扩展语法…</li>\n</ul>\n<p>传入对象的属性会被复制到组件内，可以多次使用，可以与其他属性组合使用，后面的属性值覆盖之前的属性。<a href=\"http://reactjs.cn/react/docs/transferring-props.html\" target=\"_blank\" rel=\"external\">JSX 展开属性</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component , PropTypes , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;Greeting &#123;...this.props&#125; name=<span class=\"string\">'alex'</span> /&gt;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Props属性解构<br>通过解构Props属性，直接引用解构后的属性。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component , PropTypes , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> &#123;name , ...props&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;name&#125;&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>控制组件有两种类型数据：<code>Props</code>和<code>State</code>。<code>Props</code>是由父元素设定的固定属性值，在组件整个生命周期中是不可变，使用<code>State</code>来更新数据，刷新UI。<br>通常在组件构造方法中初始化State，调用<code>setState()</code>方法更新State数据。<br>简单的文字闪烁的例子，文字的内容在组件创建时使用Props设置为了固定值，文字的闪烁状态则由<code>State</code>来控制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry, Text, View &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blink</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">showText</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 每秒修改State</span></div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">showText</span>: !<span class=\"keyword\">this</span>.state.showText &#125;);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> display = <span class=\"keyword\">this</span>.state.showText ? <span class=\"keyword\">this</span>.props.text : <span class=\"string\">' '</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlinkApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View&gt;</div><div class=\"line\">        &lt;Blink text='I love to blink' /&gt;</div><div class=\"line\">        &lt;Blink text='Yes blinking is so great' /&gt;</div><div class=\"line\">        &lt;Blink text='Why did they ever take this out of HTML' /&gt;</div><div class=\"line\">        &lt;Blink text='Look at me look at me look at me' /&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('BlinkApp', () =&gt; BlinkApp);</div></pre></td></tr></table></figure>\n<ul>\n<li>不要直接修改State属性值<br>赋值的形式唯一的地方只能在构造器中执行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreateCompnent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.State = &#123;...&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用<code>setState()</code>函数修改属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误</span></div><div class=\"line\"><span class=\"keyword\">this</span>.state.name = <span class=\"string\">'lucky'</span>;</div><div class=\"line\"><span class=\"comment\">// 正确</span></div><div class=\"line\"><span class=\"keyword\">this</span>.state.setState=&#123; &#123;<span class=\"attr\">name</span> : <span class=\"string\">'lucky'</span>&#125; &#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>异步更新State</li>\n</ul>\n<p>为了性能，React会批处理连续多个<code>setState</code>操作。<br>因为<code>this.props</code>和<code>this.state</code>可能执行一步更新，所以调用<code>this.props</code>或<code>this.state</code>时的值并不正确。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">  <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.state.counter + <span class=\"keyword\">this</span>.props.increment,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>建议<code>setState</code>接收函数的形式来更新state。因为函数的形式会使用前一个<code>state</code>作为第一个参数，同时更新的<code>props</code>属性作为第二个参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正确</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">counter</span>: prevState.counter + props.increment</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n<ul>\n<li>合并更新State</li>\n</ul>\n<p>调用setState方法时，React会合并提供的state值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreateComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">posts</span>:[] ,</div><div class=\"line\">            <span class=\"attr\">comments</span> : [] , </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount()&#123;</div><div class=\"line\">        fetchPosts().then( <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">posts</span> : response.posts</div><div class=\"line\">            &#125;);   </div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        fetchComment().then( <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">comments</span> : response.comments</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>数据流向</li>\n</ul>\n<p>React中的数据流是单向的，只会从父组件传递到子组件。属性props（properties）是父子组件间进行状态传递的接口，React会向下遍历整个组件树，并重新渲染使用这个属性的组件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React-Native 基于状态实现对DOM控制和渲染。组件状态分为两种：一种是组件间的状态传递、另一种是组件的内部状态，这两种状态使用props和state表示。props用于从父组件到子组件的数据传递。组件内部也有自己的状态：state，这些状态只能在组件内部修改。</p>\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><p>在React-Native中大多数组件创建时可以带有不同的参数，这些参数被称为<code>props</code>。<br>如：React-Native的常用组件<code>Image</code>。当创建<code>Image</code>时，可以用<code>source</code>属性来指定要显示的图片资源。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Image , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bananas</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render ()&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> pic = &#123;</div><div class=\"line\">            <span class=\"attr\">uri</span> : <span class=\"string\">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;Image source=&#123;pic&#125; style=&#123;&#123; width : 193 , height : 110&#125;&#125;/&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('Bananas', () =&gt; Bananas);</div></pre></td></tr></table></figure></p>\n<p>自定义的组件也可以使用<code>Props</code>，根据<code>Props</code>名称引用指定的属性值。如在组件<code>Greeting</code>的<code>render</code>方法中用<code>this.props.name</code>应用组件的<code>name</code>属性值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LotsOfGreetings</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</div><div class=\"line\">        &lt;Greeting name='Rexxar' /&gt;</div><div class=\"line\">        &lt;Greeting name='Jaina' /&gt;</div><div class=\"line\">        &lt;Greeting name='Valeera' /&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('LotsOfGreetings', () =&gt; LotsOfGreetings);</div></pre></td></tr></table></figure>\n<ul>\n<li>默认属性</li>\n</ul>\n<p>使用<code>static</code>定义组件的默认属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">'alex'</span> , s</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<ul>\n<li>约束与检查</li>\n</ul>\n<p>使用<code>PropTypes</code> 对<code>Props</code>值的类型进行约束<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component , PropTypes , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  static propTypes = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : PropTypes.string , </div><div class=\"line\">      <span class=\"attr\">age</span> : PropTypes.num , </div><div class=\"line\">      <span class=\"attr\">greet</span> : PropTypes.func.isRequired ,</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果必须使用指定属性值，通过<code>PropTypes.{type}.isRequired</code>来约束。</p>\n<ul>\n<li>扩展语法…</li>\n</ul>\n<p>传入对象的属性会被复制到组件内，可以多次使用，可以与其他属性组合使用，后面的属性值覆盖之前的属性。<a href=\"http://reactjs.cn/react/docs/transferring-props.html\" target=\"_blank\" rel=\"external\">JSX 展开属性</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component , PropTypes , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;this.props.name&#125;&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;Greeting &#123;...this.props&#125; name=<span class=\"string\">'alex'</span> /&gt;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Props属性解构<br>通过解构Props属性，直接引用解构后的属性。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React , &#123; Component , PropTypes , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry , Text , View , &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> &#123;name , ...props&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;Hello &#123;name&#125;&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>控制组件有两种类型数据：<code>Props</code>和<code>State</code>。<code>Props</code>是由父元素设定的固定属性值，在组件整个生命周期中是不可变，使用<code>State</code>来更新数据，刷新UI。<br>通常在组件构造方法中初始化State，调用<code>setState()</code>方法更新State数据。<br>简单的文字闪烁的例子，文字的内容在组件创建时使用Props设置为了固定值，文字的闪烁状态则由<code>State</code>来控制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRegistry, Text, View &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blink</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">showText</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 每秒修改State</span></div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">showText</span>: !<span class=\"keyword\">this</span>.state.showText &#125;);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> display = <span class=\"keyword\">this</span>.state.showText ? <span class=\"keyword\">this</span>.props.text : <span class=\"string\">' '</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlinkApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View&gt;</div><div class=\"line\">        &lt;Blink text='I love to blink' /&gt;</div><div class=\"line\">        &lt;Blink text='Yes blinking is so great' /&gt;</div><div class=\"line\">        &lt;Blink text='Why did they ever take this out of HTML' /&gt;</div><div class=\"line\">        &lt;Blink text='Look at me look at me look at me' /&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('BlinkApp', () =&gt; BlinkApp);</div></pre></td></tr></table></figure>\n<ul>\n<li>不要直接修改State属性值<br>赋值的形式唯一的地方只能在构造器中执行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreateCompnent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.State = &#123;...&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用<code>setState()</code>函数修改属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误</span></div><div class=\"line\"><span class=\"keyword\">this</span>.state.name = <span class=\"string\">'lucky'</span>;</div><div class=\"line\"><span class=\"comment\">// 正确</span></div><div class=\"line\"><span class=\"keyword\">this</span>.state.setState=&#123; &#123;<span class=\"attr\">name</span> : <span class=\"string\">'lucky'</span>&#125; &#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>异步更新State</li>\n</ul>\n<p>为了性能，React会批处理连续多个<code>setState</code>操作。<br>因为<code>this.props</code>和<code>this.state</code>可能执行一步更新，所以调用<code>this.props</code>或<code>this.state</code>时的值并不正确。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">  <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.state.counter + <span class=\"keyword\">this</span>.props.increment,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>建议<code>setState</code>接收函数的形式来更新state。因为函数的形式会使用前一个<code>state</code>作为第一个参数，同时更新的<code>props</code>属性作为第二个参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正确</span></div><div class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState, props</span>) =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">counter</span>: prevState.counter + props.increment</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n<ul>\n<li>合并更新State</li>\n</ul>\n<p>调用setState方法时，React会合并提供的state值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreateComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">posts</span>:[] ,</div><div class=\"line\">            <span class=\"attr\">comments</span> : [] , </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount()&#123;</div><div class=\"line\">        fetchPosts().then( <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">posts</span> : response.posts</div><div class=\"line\">            &#125;);   </div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        fetchComment().then( <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">comments</span> : response.comments</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>数据流向</li>\n</ul>\n<p>React中的数据流是单向的，只会从父组件传递到子组件。属性props（properties）是父子组件间进行状态传递的接口，React会向下遍历整个组件树，并重新渲染使用这个属性的组件。</p>\n"},{"title":"React-Native基础（1）：布局","date":"2017-05-16T13:38:50.000Z","_content":"## Flex布局\nFlexbox布局旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名\"flex\"。\n### 父容器属性\n- flexDirection?: enum('row', 'column','row-reverse','column-reverse')\n- flexWrap?: enum('wrap', 'nowrap')\n- justifyContent?: enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around')\n- alignItems?: enum('flex-start', 'flex-end', 'center', 'stretch')\n\n### 主轴与侧轴\n![](http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexbox_main-cross-axis.png)\nFlex模块方向分为主轴方向与侧轴方式，之所以不叫水平方向或垂直方向，是因为主轴和侧轴要依据flexDirection来决定。\n1. 当为`row`或者`row-reverse`时，水平方向是主轴，垂直方向是侧轴；\n2. 当为`column`或`column-reverse`时，水平方向是侧轴，垂直方向是主轴；\n\n- flexDirection?: enum('row', 'column','row-reverse','column-reverse')\n控制子元素水平和垂直方向。水平方向默认为`row`，垂直方向默认为`column`。`flexDirection`决定了当前容器的主轴和侧轴。\n\nrow-reverse | column-reverse\n---|---\n![row-reverse](http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_row_reverse.png) | ![column-reverse](http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_column_reverse.png)\n\n- flexWrap?: enum('wrap', 'nowrap')\n控制子元素超过容器尺寸时的显示方式\n\nwrap | nowrap\n--- | ---\n![wrap](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_wrap.png) | ![nowrap](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_nowrap.png)\n\n- justifyContent?: enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around') \n定义在主轴方向上排列子元素的方式。\n\nflex-start | flex-end | center \n---|--- |---\n![flex-start](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-start.png) | ![flex-end](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-end.png) | ![center](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_center.png) \nspace-between | space-around | \n![space-between](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_space-between.png) | ![space-around](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-around.png)\n\n- alignItems?: enum('flex-start', 'flex-end', 'center', 'stretch', 'baseline')\n定义子元素在容器中侧轴方向上的排列方式。与`justifyContent`相似，但是与`justifyContent`轴不相同。\n\nflex-start |  flex-end | center | base-line | stretch\n---|--- | --- |--- |---\n![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-start.png) | ![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-end.png) | ![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_center.png) | ![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_baseline.png) |![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_stretch.png)\n\n- `alignContent`?: enum('flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around')\n定义每排在侧轴上的排列方式，当只有一排时属性无作用。\n\nflext-start | flex-end | center\n:---:|:---:|:---: |:---:\n![flext-start](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-start.png) | ![flex-end](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-end.png) | ![center](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_center.png)\nstretch | space-between | space-around\n![stretch](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_stretch.png) | ![space-between](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-between.png) | ![space-around](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-around.png)\n\n### 子元素属性\n- alignSelf?: enum('auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline')\n定义Flex容器内子元素在侧轴上的排列方式，覆盖父容器的`alignItems`属性。\n    - auto 表示继承了它的父容器的`alignItems`属性，无父容器默认为`stretch`拉伸。\n    - 其他属性参照`alignItems`属性。\n\n- flex?: number \n定义组件伸缩能力大小，默认为0。在React-native中，flex与css中效果不同，值为数值。\n    - 值为正数时，由值大小来定义尺寸的大小。如flex为2的元素要比felx为1的元素大两倍。\n    - 值为0时，组件大小由`width`和`height`决定\n    - 值为-1时，组件大小通常由`width`和`height`决定，然而在没有足够空间时，组件会缩小到`minWidth`和`minHeight`.\n    - flexGrow, flexShrink和flexBasis效果与CSS中效果一致。\n- flexBasis?: number, string \n\n- flexGrow?: number\n定义Flex容器Item的扩展因数，指定Item能够占据的空间值，默认`auto`\n\n![flexGrow](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-grow.png)\n- flexShrink?: number\n定义Flex容器Item的缩小因数，当Items的默认宽度超过容器宽度时，按照flexShrink值缩放items填充容器\n![flexShrink](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-shrink.png)\n\n- aspectRatio?: number \n宽高比非CSS标准属性，只适应于react-native，用于控制未定义元素的尺寸大小。\n\n## 尺寸\n- height?: number, string \n- width?: number, string\n- maxHeight?: number, string \n- maxWidth?: number, string\n- minHeight?: number, string\n- minWidth?: number, string\n\n## 边框\n- borderBottomWidth?: number \n- borderLeftWidth?: number\n- borderRightWidth?: number\n- borderTopWidth?: number\n- borderWidth?: number\n\n## 边距\n\n- top?: number, string\n- bottom?: number, string \n- left?: number, string\n- right?: number, string \n\n### 外边距\n- margin?: number, string \n- marginTop?: number, string \n- marginBottom?: number, string \n- marginVertical?: number, string 与同时设置`marginBottom`与`marginTop`一样\n- marginLeft?: number, string \n- marginRight?: number, string\n- marginHorizontal?: number, string 与同时设置`marginLeft`与`marginRight`一样\n\n### 内边距\n- padding?: number, string\n- paddingTop?: number, string \n- paddingBottom?: number, string\n- paddingVertical?: number, string 与同时设置`paddingTop`与`paddingBottom`一致\n- paddingLeft?: number, string \n- paddingRight?: number, string\n- paddingHorizontal?: number, string 与同时设置`paddingLeft`与`paddingRight`一致\n\n## 其他\n\n- display?: string\n设置组件的显示类型，效果类似CSS的display，但只支持`flex`和`none`。默认为`flex`\n- overflow?: enum('visible', 'hidden', 'scroll')\n定义超出容器时，子元素的绘制和显示方式。\n    - visible 裁剪溢出内容\n    - hidden 隐藏超过容器的部分\n    - scroll 滚动显示溢出内容\n- position?: enum('absolute', 'relative')\n与CSS类似，但是默认值为`relative`，所以`absolute`只针对相对于父容器有效。\n- zIndex?: number \n指定显示在组件层级关系，通常情况来说无须使用zIndex。组件按照其在DOM树中的顺序决定层级关系。\n- `[ios]`direction?: enum('inherit', 'ltr', 'rtl')\n\n\n\n\n","source":"_posts/React-Native基础（1）：布局.md","raw":"---\ntitle: React-Native基础（1）：布局\ndate: 2017-05-16 21:38:50\ntags: react-native\ncategories: react-native\n---\n## Flex布局\nFlexbox布局旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名\"flex\"。\n### 父容器属性\n- flexDirection?: enum('row', 'column','row-reverse','column-reverse')\n- flexWrap?: enum('wrap', 'nowrap')\n- justifyContent?: enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around')\n- alignItems?: enum('flex-start', 'flex-end', 'center', 'stretch')\n\n### 主轴与侧轴\n![](http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexbox_main-cross-axis.png)\nFlex模块方向分为主轴方向与侧轴方式，之所以不叫水平方向或垂直方向，是因为主轴和侧轴要依据flexDirection来决定。\n1. 当为`row`或者`row-reverse`时，水平方向是主轴，垂直方向是侧轴；\n2. 当为`column`或`column-reverse`时，水平方向是侧轴，垂直方向是主轴；\n\n- flexDirection?: enum('row', 'column','row-reverse','column-reverse')\n控制子元素水平和垂直方向。水平方向默认为`row`，垂直方向默认为`column`。`flexDirection`决定了当前容器的主轴和侧轴。\n\nrow-reverse | column-reverse\n---|---\n![row-reverse](http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_row_reverse.png) | ![column-reverse](http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_column_reverse.png)\n\n- flexWrap?: enum('wrap', 'nowrap')\n控制子元素超过容器尺寸时的显示方式\n\nwrap | nowrap\n--- | ---\n![wrap](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_wrap.png) | ![nowrap](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_nowrap.png)\n\n- justifyContent?: enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around') \n定义在主轴方向上排列子元素的方式。\n\nflex-start | flex-end | center \n---|--- |---\n![flex-start](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-start.png) | ![flex-end](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-end.png) | ![center](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_center.png) \nspace-between | space-around | \n![space-between](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_space-between.png) | ![space-around](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-around.png)\n\n- alignItems?: enum('flex-start', 'flex-end', 'center', 'stretch', 'baseline')\n定义子元素在容器中侧轴方向上的排列方式。与`justifyContent`相似，但是与`justifyContent`轴不相同。\n\nflex-start |  flex-end | center | base-line | stretch\n---|--- | --- |--- |---\n![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-start.png) | ![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-end.png) | ![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_center.png) | ![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_baseline.png) |![img](http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_stretch.png)\n\n- `alignContent`?: enum('flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around')\n定义每排在侧轴上的排列方式，当只有一排时属性无作用。\n\nflext-start | flex-end | center\n:---:|:---:|:---: |:---:\n![flext-start](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-start.png) | ![flex-end](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-end.png) | ![center](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_center.png)\nstretch | space-between | space-around\n![stretch](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_stretch.png) | ![space-between](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-between.png) | ![space-around](http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-around.png)\n\n### 子元素属性\n- alignSelf?: enum('auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline')\n定义Flex容器内子元素在侧轴上的排列方式，覆盖父容器的`alignItems`属性。\n    - auto 表示继承了它的父容器的`alignItems`属性，无父容器默认为`stretch`拉伸。\n    - 其他属性参照`alignItems`属性。\n\n- flex?: number \n定义组件伸缩能力大小，默认为0。在React-native中，flex与css中效果不同，值为数值。\n    - 值为正数时，由值大小来定义尺寸的大小。如flex为2的元素要比felx为1的元素大两倍。\n    - 值为0时，组件大小由`width`和`height`决定\n    - 值为-1时，组件大小通常由`width`和`height`决定，然而在没有足够空间时，组件会缩小到`minWidth`和`minHeight`.\n    - flexGrow, flexShrink和flexBasis效果与CSS中效果一致。\n- flexBasis?: number, string \n\n- flexGrow?: number\n定义Flex容器Item的扩展因数，指定Item能够占据的空间值，默认`auto`\n\n![flexGrow](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-grow.png)\n- flexShrink?: number\n定义Flex容器Item的缩小因数，当Items的默认宽度超过容器宽度时，按照flexShrink值缩放items填充容器\n![flexShrink](http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-shrink.png)\n\n- aspectRatio?: number \n宽高比非CSS标准属性，只适应于react-native，用于控制未定义元素的尺寸大小。\n\n## 尺寸\n- height?: number, string \n- width?: number, string\n- maxHeight?: number, string \n- maxWidth?: number, string\n- minHeight?: number, string\n- minWidth?: number, string\n\n## 边框\n- borderBottomWidth?: number \n- borderLeftWidth?: number\n- borderRightWidth?: number\n- borderTopWidth?: number\n- borderWidth?: number\n\n## 边距\n\n- top?: number, string\n- bottom?: number, string \n- left?: number, string\n- right?: number, string \n\n### 外边距\n- margin?: number, string \n- marginTop?: number, string \n- marginBottom?: number, string \n- marginVertical?: number, string 与同时设置`marginBottom`与`marginTop`一样\n- marginLeft?: number, string \n- marginRight?: number, string\n- marginHorizontal?: number, string 与同时设置`marginLeft`与`marginRight`一样\n\n### 内边距\n- padding?: number, string\n- paddingTop?: number, string \n- paddingBottom?: number, string\n- paddingVertical?: number, string 与同时设置`paddingTop`与`paddingBottom`一致\n- paddingLeft?: number, string \n- paddingRight?: number, string\n- paddingHorizontal?: number, string 与同时设置`paddingLeft`与`paddingRight`一致\n\n## 其他\n\n- display?: string\n设置组件的显示类型，效果类似CSS的display，但只支持`flex`和`none`。默认为`flex`\n- overflow?: enum('visible', 'hidden', 'scroll')\n定义超出容器时，子元素的绘制和显示方式。\n    - visible 裁剪溢出内容\n    - hidden 隐藏超过容器的部分\n    - scroll 滚动显示溢出内容\n- position?: enum('absolute', 'relative')\n与CSS类似，但是默认值为`relative`，所以`absolute`只针对相对于父容器有效。\n- zIndex?: number \n指定显示在组件层级关系，通常情况来说无须使用zIndex。组件按照其在DOM树中的顺序决定层级关系。\n- `[ios]`direction?: enum('inherit', 'ltr', 'rtl')\n\n\n\n\n","slug":"React-Native基础（1）：布局","published":1,"updated":"2017-05-16T13:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxl0008c0m380vcn9eg","content":"<h2 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h2><p>Flexbox布局旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名”flex”。</p>\n<h3 id=\"父容器属性\"><a href=\"#父容器属性\" class=\"headerlink\" title=\"父容器属性\"></a>父容器属性</h3><ul>\n<li>flexDirection?: enum(‘row’, ‘column’,’row-reverse’,’column-reverse’)</li>\n<li>flexWrap?: enum(‘wrap’, ‘nowrap’)</li>\n<li>justifyContent?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)</li>\n<li>alignItems?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’)</li>\n</ul>\n<h3 id=\"主轴与侧轴\"><a href=\"#主轴与侧轴\" class=\"headerlink\" title=\"主轴与侧轴\"></a>主轴与侧轴</h3><p><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexbox_main-cross-axis.png\" alt=\"\"><br>Flex模块方向分为主轴方向与侧轴方式，之所以不叫水平方向或垂直方向，是因为主轴和侧轴要依据flexDirection来决定。</p>\n<ol>\n<li>当为<code>row</code>或者<code>row-reverse</code>时，水平方向是主轴，垂直方向是侧轴；</li>\n<li>当为<code>column</code>或<code>column-reverse</code>时，水平方向是侧轴，垂直方向是主轴；</li>\n</ol>\n<ul>\n<li>flexDirection?: enum(‘row’, ‘column’,’row-reverse’,’column-reverse’)<br>控制子元素水平和垂直方向。水平方向默认为<code>row</code>，垂直方向默认为<code>column</code>。<code>flexDirection</code>决定了当前容器的主轴和侧轴。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>row-reverse</th>\n<th>column-reverse</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_row_reverse.png\" alt=\"row-reverse\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_column_reverse.png\" alt=\"column-reverse\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>flexWrap?: enum(‘wrap’, ‘nowrap’)<br>控制子元素超过容器尺寸时的显示方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>wrap</th>\n<th>nowrap</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_wrap.png\" alt=\"wrap\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_nowrap.png\" alt=\"nowrap\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>justifyContent?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)<br>定义在主轴方向上排列子元素的方式。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th>flex-end</th>\n<th>center </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-start.png\" alt=\"flex-start\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-end.png\" alt=\"flex-end\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_center.png\" alt=\"center\"> </td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>space-around</td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_space-between.png\" alt=\"space-between\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-around.png\" alt=\"space-around\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>alignItems?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’, ‘baseline’)<br>定义子元素在容器中侧轴方向上的排列方式。与<code>justifyContent</code>相似，但是与<code>justifyContent</code>轴不相同。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th>flex-end</th>\n<th>center</th>\n<th>base-line</th>\n<th>stretch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-start.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-end.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_center.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_baseline.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_stretch.png\" alt=\"img\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>alignContent</code>?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’, ‘space-between’, ‘space-around’)<br>定义每排在侧轴上的排列方式，当只有一排时属性无作用。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">flext-start</th>\n<th style=\"text-align:center\">flex-end</th>\n<th style=\"text-align:center\">center</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-start.png\" alt=\"flext-start\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-end.png\" alt=\"flex-end\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_center.png\" alt=\"center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stretch</td>\n<td style=\"text-align:center\">space-between</td>\n<td style=\"text-align:center\">space-around</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_stretch.png\" alt=\"stretch\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-between.png\" alt=\"space-between\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-around.png\" alt=\"space-around\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"子元素属性\"><a href=\"#子元素属性\" class=\"headerlink\" title=\"子元素属性\"></a>子元素属性</h3><ul>\n<li><p>alignSelf?: enum(‘auto’, ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’, ‘baseline’)<br>定义Flex容器内子元素在侧轴上的排列方式，覆盖父容器的<code>alignItems</code>属性。</p>\n<ul>\n<li>auto 表示继承了它的父容器的<code>alignItems</code>属性，无父容器默认为<code>stretch</code>拉伸。</li>\n<li>其他属性参照<code>alignItems</code>属性。</li>\n</ul>\n</li>\n<li><p>flex?: number<br>定义组件伸缩能力大小，默认为0。在React-native中，flex与css中效果不同，值为数值。</p>\n<ul>\n<li>值为正数时，由值大小来定义尺寸的大小。如flex为2的元素要比felx为1的元素大两倍。</li>\n<li>值为0时，组件大小由<code>width</code>和<code>height</code>决定</li>\n<li>值为-1时，组件大小通常由<code>width</code>和<code>height</code>决定，然而在没有足够空间时，组件会缩小到<code>minWidth</code>和<code>minHeight</code>.</li>\n<li>flexGrow, flexShrink和flexBasis效果与CSS中效果一致。</li>\n</ul>\n</li>\n<li><p>flexBasis?: number, string </p>\n</li>\n<li><p>flexGrow?: number<br>定义Flex容器Item的扩展因数，指定Item能够占据的空间值，默认<code>auto</code></p>\n</li>\n</ul>\n<p><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-grow.png\" alt=\"flexGrow\"></p>\n<ul>\n<li><p>flexShrink?: number<br>定义Flex容器Item的缩小因数，当Items的默认宽度超过容器宽度时，按照flexShrink值缩放items填充容器<br><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-shrink.png\" alt=\"flexShrink\"></p>\n</li>\n<li><p>aspectRatio?: number<br>宽高比非CSS标准属性，只适应于react-native，用于控制未定义元素的尺寸大小。</p>\n</li>\n</ul>\n<h2 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h2><ul>\n<li>height?: number, string </li>\n<li>width?: number, string</li>\n<li>maxHeight?: number, string </li>\n<li>maxWidth?: number, string</li>\n<li>minHeight?: number, string</li>\n<li>minWidth?: number, string</li>\n</ul>\n<h2 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h2><ul>\n<li>borderBottomWidth?: number </li>\n<li>borderLeftWidth?: number</li>\n<li>borderRightWidth?: number</li>\n<li>borderTopWidth?: number</li>\n<li>borderWidth?: number</li>\n</ul>\n<h2 id=\"边距\"><a href=\"#边距\" class=\"headerlink\" title=\"边距\"></a>边距</h2><ul>\n<li>top?: number, string</li>\n<li>bottom?: number, string </li>\n<li>left?: number, string</li>\n<li>right?: number, string </li>\n</ul>\n<h3 id=\"外边距\"><a href=\"#外边距\" class=\"headerlink\" title=\"外边距\"></a>外边距</h3><ul>\n<li>margin?: number, string </li>\n<li>marginTop?: number, string </li>\n<li>marginBottom?: number, string </li>\n<li>marginVertical?: number, string 与同时设置<code>marginBottom</code>与<code>marginTop</code>一样</li>\n<li>marginLeft?: number, string </li>\n<li>marginRight?: number, string</li>\n<li>marginHorizontal?: number, string 与同时设置<code>marginLeft</code>与<code>marginRight</code>一样</li>\n</ul>\n<h3 id=\"内边距\"><a href=\"#内边距\" class=\"headerlink\" title=\"内边距\"></a>内边距</h3><ul>\n<li>padding?: number, string</li>\n<li>paddingTop?: number, string </li>\n<li>paddingBottom?: number, string</li>\n<li>paddingVertical?: number, string 与同时设置<code>paddingTop</code>与<code>paddingBottom</code>一致</li>\n<li>paddingLeft?: number, string </li>\n<li>paddingRight?: number, string</li>\n<li>paddingHorizontal?: number, string 与同时设置<code>paddingLeft</code>与<code>paddingRight</code>一致</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>display?: string<br>设置组件的显示类型，效果类似CSS的display，但只支持<code>flex</code>和<code>none</code>。默认为<code>flex</code></li>\n<li>overflow?: enum(‘visible’, ‘hidden’, ‘scroll’)<br>定义超出容器时，子元素的绘制和显示方式。<ul>\n<li>visible 裁剪溢出内容</li>\n<li>hidden 隐藏超过容器的部分</li>\n<li>scroll 滚动显示溢出内容</li>\n</ul>\n</li>\n<li>position?: enum(‘absolute’, ‘relative’)<br>与CSS类似，但是默认值为<code>relative</code>，所以<code>absolute</code>只针对相对于父容器有效。</li>\n<li>zIndex?: number<br>指定显示在组件层级关系，通常情况来说无须使用zIndex。组件按照其在DOM树中的顺序决定层级关系。</li>\n<li><code>[ios]</code>direction?: enum(‘inherit’, ‘ltr’, ‘rtl’)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h2><p>Flexbox布局旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名”flex”。</p>\n<h3 id=\"父容器属性\"><a href=\"#父容器属性\" class=\"headerlink\" title=\"父容器属性\"></a>父容器属性</h3><ul>\n<li>flexDirection?: enum(‘row’, ‘column’,’row-reverse’,’column-reverse’)</li>\n<li>flexWrap?: enum(‘wrap’, ‘nowrap’)</li>\n<li>justifyContent?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)</li>\n<li>alignItems?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’)</li>\n</ul>\n<h3 id=\"主轴与侧轴\"><a href=\"#主轴与侧轴\" class=\"headerlink\" title=\"主轴与侧轴\"></a>主轴与侧轴</h3><p><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexbox_main-cross-axis.png\" alt=\"\"><br>Flex模块方向分为主轴方向与侧轴方式，之所以不叫水平方向或垂直方向，是因为主轴和侧轴要依据flexDirection来决定。</p>\n<ol>\n<li>当为<code>row</code>或者<code>row-reverse</code>时，水平方向是主轴，垂直方向是侧轴；</li>\n<li>当为<code>column</code>或<code>column-reverse</code>时，水平方向是侧轴，垂直方向是主轴；</li>\n</ol>\n<ul>\n<li>flexDirection?: enum(‘row’, ‘column’,’row-reverse’,’column-reverse’)<br>控制子元素水平和垂直方向。水平方向默认为<code>row</code>，垂直方向默认为<code>column</code>。<code>flexDirection</code>决定了当前容器的主轴和侧轴。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>row-reverse</th>\n<th>column-reverse</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_row_reverse.png\" alt=\"row-reverse\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/layout/flexDirection_column_reverse.png\" alt=\"column-reverse\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>flexWrap?: enum(‘wrap’, ‘nowrap’)<br>控制子元素超过容器尺寸时的显示方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>wrap</th>\n<th>nowrap</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_wrap.png\" alt=\"wrap\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flexWrap_nowrap.png\" alt=\"nowrap\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>justifyContent?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)<br>定义在主轴方向上排列子元素的方式。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th>flex-end</th>\n<th>center </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-start.png\" alt=\"flex-start\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-end.png\" alt=\"flex-end\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_center.png\" alt=\"center\"> </td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>space-around</td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_space-between.png\" alt=\"space-between\"></td>\n<td><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/justifyContent_flex-around.png\" alt=\"space-around\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>alignItems?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’, ‘baseline’)<br>定义子元素在容器中侧轴方向上的排列方式。与<code>justifyContent</code>相似，但是与<code>justifyContent</code>轴不相同。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th>flex-end</th>\n<th>center</th>\n<th>base-line</th>\n<th>stretch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-start.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_flex-end.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_center.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_baseline.png\" alt=\"img\"></td>\n<td><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alginContent_stretch.png\" alt=\"img\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>alignContent</code>?: enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’, ‘space-between’, ‘space-around’)<br>定义每排在侧轴上的排列方式，当只有一排时属性无作用。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">flext-start</th>\n<th style=\"text-align:center\">flex-end</th>\n<th style=\"text-align:center\">center</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-start.png\" alt=\"flext-start\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_flex-end.png\" alt=\"flex-end\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_center.png\" alt=\"center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stretch</td>\n<td style=\"text-align:center\">space-between</td>\n<td style=\"text-align:center\">space-around</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_stretch.png\" alt=\"stretch\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-between.png\" alt=\"space-between\"></td>\n<td style=\"text-align:center\"><img src=\"http://img-1252300500.cosgz.myqcloud.com/react-native/alignContent_space-around.png\" alt=\"space-around\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"子元素属性\"><a href=\"#子元素属性\" class=\"headerlink\" title=\"子元素属性\"></a>子元素属性</h3><ul>\n<li><p>alignSelf?: enum(‘auto’, ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’, ‘baseline’)<br>定义Flex容器内子元素在侧轴上的排列方式，覆盖父容器的<code>alignItems</code>属性。</p>\n<ul>\n<li>auto 表示继承了它的父容器的<code>alignItems</code>属性，无父容器默认为<code>stretch</code>拉伸。</li>\n<li>其他属性参照<code>alignItems</code>属性。</li>\n</ul>\n</li>\n<li><p>flex?: number<br>定义组件伸缩能力大小，默认为0。在React-native中，flex与css中效果不同，值为数值。</p>\n<ul>\n<li>值为正数时，由值大小来定义尺寸的大小。如flex为2的元素要比felx为1的元素大两倍。</li>\n<li>值为0时，组件大小由<code>width</code>和<code>height</code>决定</li>\n<li>值为-1时，组件大小通常由<code>width</code>和<code>height</code>决定，然而在没有足够空间时，组件会缩小到<code>minWidth</code>和<code>minHeight</code>.</li>\n<li>flexGrow, flexShrink和flexBasis效果与CSS中效果一致。</li>\n</ul>\n</li>\n<li><p>flexBasis?: number, string </p>\n</li>\n<li><p>flexGrow?: number<br>定义Flex容器Item的扩展因数，指定Item能够占据的空间值，默认<code>auto</code></p>\n</li>\n</ul>\n<p><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-grow.png\" alt=\"flexGrow\"></p>\n<ul>\n<li><p>flexShrink?: number<br>定义Flex容器Item的缩小因数，当Items的默认宽度超过容器宽度时，按照flexShrink值缩放items填充容器<br><img src=\"http://imgbucket-1252300500.picsh.myqcloud.com/react/style/flex-shrink.png\" alt=\"flexShrink\"></p>\n</li>\n<li><p>aspectRatio?: number<br>宽高比非CSS标准属性，只适应于react-native，用于控制未定义元素的尺寸大小。</p>\n</li>\n</ul>\n<h2 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h2><ul>\n<li>height?: number, string </li>\n<li>width?: number, string</li>\n<li>maxHeight?: number, string </li>\n<li>maxWidth?: number, string</li>\n<li>minHeight?: number, string</li>\n<li>minWidth?: number, string</li>\n</ul>\n<h2 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h2><ul>\n<li>borderBottomWidth?: number </li>\n<li>borderLeftWidth?: number</li>\n<li>borderRightWidth?: number</li>\n<li>borderTopWidth?: number</li>\n<li>borderWidth?: number</li>\n</ul>\n<h2 id=\"边距\"><a href=\"#边距\" class=\"headerlink\" title=\"边距\"></a>边距</h2><ul>\n<li>top?: number, string</li>\n<li>bottom?: number, string </li>\n<li>left?: number, string</li>\n<li>right?: number, string </li>\n</ul>\n<h3 id=\"外边距\"><a href=\"#外边距\" class=\"headerlink\" title=\"外边距\"></a>外边距</h3><ul>\n<li>margin?: number, string </li>\n<li>marginTop?: number, string </li>\n<li>marginBottom?: number, string </li>\n<li>marginVertical?: number, string 与同时设置<code>marginBottom</code>与<code>marginTop</code>一样</li>\n<li>marginLeft?: number, string </li>\n<li>marginRight?: number, string</li>\n<li>marginHorizontal?: number, string 与同时设置<code>marginLeft</code>与<code>marginRight</code>一样</li>\n</ul>\n<h3 id=\"内边距\"><a href=\"#内边距\" class=\"headerlink\" title=\"内边距\"></a>内边距</h3><ul>\n<li>padding?: number, string</li>\n<li>paddingTop?: number, string </li>\n<li>paddingBottom?: number, string</li>\n<li>paddingVertical?: number, string 与同时设置<code>paddingTop</code>与<code>paddingBottom</code>一致</li>\n<li>paddingLeft?: number, string </li>\n<li>paddingRight?: number, string</li>\n<li>paddingHorizontal?: number, string 与同时设置<code>paddingLeft</code>与<code>paddingRight</code>一致</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>display?: string<br>设置组件的显示类型，效果类似CSS的display，但只支持<code>flex</code>和<code>none</code>。默认为<code>flex</code></li>\n<li>overflow?: enum(‘visible’, ‘hidden’, ‘scroll’)<br>定义超出容器时，子元素的绘制和显示方式。<ul>\n<li>visible 裁剪溢出内容</li>\n<li>hidden 隐藏超过容器的部分</li>\n<li>scroll 滚动显示溢出内容</li>\n</ul>\n</li>\n<li>position?: enum(‘absolute’, ‘relative’)<br>与CSS类似，但是默认值为<code>relative</code>，所以<code>absolute</code>只针对相对于父容器有效。</li>\n<li>zIndex?: number<br>指定显示在组件层级关系，通常情况来说无须使用zIndex。组件按照其在DOM树中的顺序决定层级关系。</li>\n<li><code>[ios]</code>direction?: enum(‘inherit’, ‘ltr’, ‘rtl’)</li>\n</ul>\n"},{"title":"Kotlin进阶之解构声明","date":"2017-07-16T07:28:39.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"\n# 解构声明\nKotlin可以将一个对象解构为多个变量\n```kotlin\nval (name, age) = person \n```\n这种语法被称为解构声明。解构声明一次创建多个变量。比如声明`name`和`age`两个新的变量，可以单独使用\n```kotlin\nprintln(name)\nprintln(age)\n```\n解构声明最终编译为下面的代码\n```kotlin\nval name = person.component1()\nval age = person.component2()\n```\n`component1()`和`component2()`函数是Kotlin中广泛使用的惯例原则的例子（如`+`、`*` 操作符，`for`循环等）。解构声明右侧能放任意对象，只要可以调用所需的组件函数，如组件`component3()`，`component4()`等等。\n\n`componentN()`函数需要使用`operator`操作符标记，可以在解构声明中使用。\n\n解构声明同样可以在`for`循环中使用\n```kotlin\nfor ((a, b) in collection) { ... }\n```\n变量`a`和`b`为集合中元素`component1()`和`component2()`的值。\n\n## 一个函数返回两个值范例\n如果需要一个函数返回两个值，如：一个返回对象和一些排序状态，Kotlin可以通过声明一个[data类](https://kotlinlang.org/docs/reference/data-classes.html)并返回它的实例方式。\n```kotlin\ndata class Result(val result: Int , val state: Status)\n\nfun function(...): Result{\n    // 计算\n    return Result(result ,status)\n}\n\n// 现在可以使用这个函数了\nval (result , status) = function(...)\n```\n因为解构声明自动为data类声明`componentN()`函数。\n\n> 也可以使用标准类`Pair`（有返回Pair<Int , Status>的函数），但通常更好的方式就是使用自己命名的属性。\n\n## 结构声明与Map范例\n下面示例可能是迭代Map的好的方式\n```kotlin\nfor((key , value ) in map){\n    // ...\n}\n```\n想要这样做，需要：\n- 添加Map中值队列的`iterator()`函数\n- 添加元素键值对的`component1()`和`component2()`函数\n\n实际上，Kotlin标准库已经准备这些扩展：\n```kotlin\noperator fun <K, V> Map<K, V>.iterator(): Iterator<Map.Entry<K, V>> = entrySet().iterator()\noperator fun <K, V> Map.Entry<K, V>.component1() = getKey()\noperator fun <K, V> Map.Entry<K, V>.component2() = getValue()\n```\n因此可以自由在`for`循环中对Map使用解构声明（与data类集合一样）\n\n## 未使用变量的下划线表示（从1.1开始）\n如果不需要在解构声明中使用某个变量，可以使用下划线来替代\n```kotlin\nval (_, status) = getResult()\n```\n\n## 解构声明与Lambda表达式（从1.1起）\n可以在Lambda表达式中使用解构声明，如果Lambda中有Pair类型参数（或`Map.Entry`等提供`componentN`函数的类型），可以将单独这个参数在圆括号中进行解构声明。\n```kotlin\nmap.mapValues { entry -> \"${entry.value}!\" }\nmap.mapValues { (key, value) -> \"$value!\" }\n```\n> 注意声明两个参数与一个参数的解构声明不同\n\n```kotlin\n{ a -> ... } // 单个参数\n{ a, b -> ... } // 两个参数\n{ (a, b) -> ... } // 解构声明\n{ (a, b), c -> ... } // 解构声明和单个参数组合\n```\n如果未使用组件某个解构参数，使用下划线替代属性名\n```kotlin\nmap.mapValues { (_, value) -> \"$value!\" }\n```\n可以为整个解构参数或单个解构参数指定类型\n```kotlin\nmap.mapValues { (_, value): Map.Entry<Int, String> -> \"$value!\" }\n\nmap.mapValues { (_, value: String) -> \"$value!\" }\n```\n\n## 参考\n\n[JavaScript解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)","source":"_posts/Kotlin进阶之解构声明.md","raw":"title: Kotlin进阶之解构声明\ndate: 2017-07-16 15:28:39\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n\n# 解构声明\nKotlin可以将一个对象解构为多个变量\n```kotlin\nval (name, age) = person \n```\n这种语法被称为解构声明。解构声明一次创建多个变量。比如声明`name`和`age`两个新的变量，可以单独使用\n```kotlin\nprintln(name)\nprintln(age)\n```\n解构声明最终编译为下面的代码\n```kotlin\nval name = person.component1()\nval age = person.component2()\n```\n`component1()`和`component2()`函数是Kotlin中广泛使用的惯例原则的例子（如`+`、`*` 操作符，`for`循环等）。解构声明右侧能放任意对象，只要可以调用所需的组件函数，如组件`component3()`，`component4()`等等。\n\n`componentN()`函数需要使用`operator`操作符标记，可以在解构声明中使用。\n\n解构声明同样可以在`for`循环中使用\n```kotlin\nfor ((a, b) in collection) { ... }\n```\n变量`a`和`b`为集合中元素`component1()`和`component2()`的值。\n\n## 一个函数返回两个值范例\n如果需要一个函数返回两个值，如：一个返回对象和一些排序状态，Kotlin可以通过声明一个[data类](https://kotlinlang.org/docs/reference/data-classes.html)并返回它的实例方式。\n```kotlin\ndata class Result(val result: Int , val state: Status)\n\nfun function(...): Result{\n    // 计算\n    return Result(result ,status)\n}\n\n// 现在可以使用这个函数了\nval (result , status) = function(...)\n```\n因为解构声明自动为data类声明`componentN()`函数。\n\n> 也可以使用标准类`Pair`（有返回Pair<Int , Status>的函数），但通常更好的方式就是使用自己命名的属性。\n\n## 结构声明与Map范例\n下面示例可能是迭代Map的好的方式\n```kotlin\nfor((key , value ) in map){\n    // ...\n}\n```\n想要这样做，需要：\n- 添加Map中值队列的`iterator()`函数\n- 添加元素键值对的`component1()`和`component2()`函数\n\n实际上，Kotlin标准库已经准备这些扩展：\n```kotlin\noperator fun <K, V> Map<K, V>.iterator(): Iterator<Map.Entry<K, V>> = entrySet().iterator()\noperator fun <K, V> Map.Entry<K, V>.component1() = getKey()\noperator fun <K, V> Map.Entry<K, V>.component2() = getValue()\n```\n因此可以自由在`for`循环中对Map使用解构声明（与data类集合一样）\n\n## 未使用变量的下划线表示（从1.1开始）\n如果不需要在解构声明中使用某个变量，可以使用下划线来替代\n```kotlin\nval (_, status) = getResult()\n```\n\n## 解构声明与Lambda表达式（从1.1起）\n可以在Lambda表达式中使用解构声明，如果Lambda中有Pair类型参数（或`Map.Entry`等提供`componentN`函数的类型），可以将单独这个参数在圆括号中进行解构声明。\n```kotlin\nmap.mapValues { entry -> \"${entry.value}!\" }\nmap.mapValues { (key, value) -> \"$value!\" }\n```\n> 注意声明两个参数与一个参数的解构声明不同\n\n```kotlin\n{ a -> ... } // 单个参数\n{ a, b -> ... } // 两个参数\n{ (a, b) -> ... } // 解构声明\n{ (a, b), c -> ... } // 解构声明和单个参数组合\n```\n如果未使用组件某个解构参数，使用下划线替代属性名\n```kotlin\nmap.mapValues { (_, value) -> \"$value!\" }\n```\n可以为整个解构参数或单个解构参数指定类型\n```kotlin\nmap.mapValues { (_, value): Map.Entry<Int, String> -> \"$value!\" }\n\nmap.mapValues { (_, value: String) -> \"$value!\" }\n```\n\n## 参考\n\n[JavaScript解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)","slug":"Kotlin进阶之解构声明","published":1,"updated":"2017-07-16T07:29:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxn000bc0m3w6c7ocav","content":"<h1 id=\"解构声明\"><a href=\"#解构声明\" class=\"headerlink\" title=\"解构声明\"></a>解构声明</h1><p>Kotlin可以将一个对象解构为多个变量<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> (name, age) = person</div></pre></td></tr></table></figure></p>\n<p>这种语法被称为解构声明。解构声明一次创建多个变量。比如声明<code>name</code>和<code>age</code>两个新的变量，可以单独使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(name)</div><div class=\"line\">println(age)</div></pre></td></tr></table></figure></p>\n<p>解构声明最终编译为下面的代码<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> name = person.component1()</div><div class=\"line\"><span class=\"keyword\">val</span> age = person.component2()</div></pre></td></tr></table></figure></p>\n<p><code>component1()</code>和<code>component2()</code>函数是Kotlin中广泛使用的惯例原则的例子（如<code>+</code>、<code>*</code> 操作符，<code>for</code>循环等）。解构声明右侧能放任意对象，只要可以调用所需的组件函数，如组件<code>component3()</code>，<code>component4()</code>等等。</p>\n<p><code>componentN()</code>函数需要使用<code>operator</code>操作符标记，可以在解构声明中使用。</p>\n<p>解构声明同样可以在<code>for</code>循环中使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ((a, b) <span class=\"keyword\">in</span> collection) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>变量<code>a</code>和<code>b</code>为集合中元素<code>component1()</code>和<code>component2()</code>的值。</p>\n<h2 id=\"一个函数返回两个值范例\"><a href=\"#一个函数返回两个值范例\" class=\"headerlink\" title=\"一个函数返回两个值范例\"></a>一个函数返回两个值范例</h2><p>如果需要一个函数返回两个值，如：一个返回对象和一些排序状态，Kotlin可以通过声明一个<a href=\"https://kotlinlang.org/docs/reference/data-classes.html\" target=\"_blank\" rel=\"external\">data类</a>并返回它的实例方式。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span></span>(<span class=\"keyword\">val</span> result: <span class=\"built_in\">Int</span> , <span class=\"keyword\">val</span> state: Status)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">function</span><span class=\"params\">(...)</span></span>: Result&#123;</div><div class=\"line\">    <span class=\"comment\">// 计算</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Result(result ,status)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现在可以使用这个函数了</span></div><div class=\"line\"><span class=\"keyword\">val</span> (result , status) = function(...)</div></pre></td></tr></table></figure></p>\n<p>因为解构声明自动为data类声明<code>componentN()</code>函数。</p>\n<blockquote>\n<p>也可以使用标准类<code>Pair</code>（有返回Pair<int ,=\"\" status=\"\">的函数），但通常更好的方式就是使用自己命名的属性。</int></p>\n</blockquote>\n<h2 id=\"结构声明与Map范例\"><a href=\"#结构声明与Map范例\" class=\"headerlink\" title=\"结构声明与Map范例\"></a>结构声明与Map范例</h2><p>下面示例可能是迭代Map的好的方式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>((key , value ) <span class=\"keyword\">in</span> map)&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>想要这样做，需要：</p>\n<ul>\n<li>添加Map中值队列的<code>iterator()</code>函数</li>\n<li>添加元素键值对的<code>component1()</code>和<code>component2()</code>函数</li>\n</ul>\n<p>实际上，Kotlin标准库已经准备这些扩展：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;K, V&gt;</span> Map<span class=\"type\">&lt;K, V&gt;</span>.<span class=\"title\">iterator</span><span class=\"params\">()</span></span>: Iterator&lt;Map.Entry&lt;K, V&gt;&gt; = entrySet().iterator()</div><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;K, V&gt;</span> Map.Entry<span class=\"type\">&lt;K, V&gt;</span>.<span class=\"title\">component1</span><span class=\"params\">()</span></span> = getKey()</div><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;K, V&gt;</span> Map.Entry<span class=\"type\">&lt;K, V&gt;</span>.<span class=\"title\">component2</span><span class=\"params\">()</span></span> = getValue()</div></pre></td></tr></table></figure></p>\n<p>因此可以自由在<code>for</code>循环中对Map使用解构声明（与data类集合一样）</p>\n<h2 id=\"未使用变量的下划线表示（从1-1开始）\"><a href=\"#未使用变量的下划线表示（从1-1开始）\" class=\"headerlink\" title=\"未使用变量的下划线表示（从1.1开始）\"></a>未使用变量的下划线表示（从1.1开始）</h2><p>如果不需要在解构声明中使用某个变量，可以使用下划线来替代<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> (_, status) = getResult()</div></pre></td></tr></table></figure></p>\n<h2 id=\"解构声明与Lambda表达式（从1-1起）\"><a href=\"#解构声明与Lambda表达式（从1-1起）\" class=\"headerlink\" title=\"解构声明与Lambda表达式（从1.1起）\"></a>解构声明与Lambda表达式（从1.1起）</h2><p>可以在Lambda表达式中使用解构声明，如果Lambda中有Pair类型参数（或<code>Map.Entry</code>等提供<code>componentN</code>函数的类型），可以将单独这个参数在圆括号中进行解构声明。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.mapValues &#123; entry -&gt; <span class=\"string\">\"<span class=\"subst\">$&#123;entry.value&#125;</span>!\"</span> &#125;</div><div class=\"line\">map.mapValues &#123; (key, value) -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意声明两个参数与一个参数的解构声明不同</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; a -&gt; ... &#125; <span class=\"comment\">// 单个参数</span></div><div class=\"line\">&#123; a, b -&gt; ... &#125; <span class=\"comment\">// 两个参数</span></div><div class=\"line\">&#123; (a, b) -&gt; ... &#125; <span class=\"comment\">// 解构声明</span></div><div class=\"line\">&#123; (a, b), c -&gt; ... &#125; <span class=\"comment\">// 解构声明和单个参数组合</span></div></pre></td></tr></table></figure>\n<p>如果未使用组件某个解构参数，使用下划线替代属性名<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.mapValues &#123; (_, value) -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<p>可以为整个解构参数或单个解构参数指定类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.mapValues &#123; (_, value): Map.Entry&lt;<span class=\"built_in\">Int</span>, String&gt; -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div><div class=\"line\"></div><div class=\"line\">map.mapValues &#123; (_, value: String) -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">JavaScript解构赋值</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解构声明\"><a href=\"#解构声明\" class=\"headerlink\" title=\"解构声明\"></a>解构声明</h1><p>Kotlin可以将一个对象解构为多个变量<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> (name, age) = person</div></pre></td></tr></table></figure></p>\n<p>这种语法被称为解构声明。解构声明一次创建多个变量。比如声明<code>name</code>和<code>age</code>两个新的变量，可以单独使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(name)</div><div class=\"line\">println(age)</div></pre></td></tr></table></figure></p>\n<p>解构声明最终编译为下面的代码<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> name = person.component1()</div><div class=\"line\"><span class=\"keyword\">val</span> age = person.component2()</div></pre></td></tr></table></figure></p>\n<p><code>component1()</code>和<code>component2()</code>函数是Kotlin中广泛使用的惯例原则的例子（如<code>+</code>、<code>*</code> 操作符，<code>for</code>循环等）。解构声明右侧能放任意对象，只要可以调用所需的组件函数，如组件<code>component3()</code>，<code>component4()</code>等等。</p>\n<p><code>componentN()</code>函数需要使用<code>operator</code>操作符标记，可以在解构声明中使用。</p>\n<p>解构声明同样可以在<code>for</code>循环中使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ((a, b) <span class=\"keyword\">in</span> collection) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>变量<code>a</code>和<code>b</code>为集合中元素<code>component1()</code>和<code>component2()</code>的值。</p>\n<h2 id=\"一个函数返回两个值范例\"><a href=\"#一个函数返回两个值范例\" class=\"headerlink\" title=\"一个函数返回两个值范例\"></a>一个函数返回两个值范例</h2><p>如果需要一个函数返回两个值，如：一个返回对象和一些排序状态，Kotlin可以通过声明一个<a href=\"https://kotlinlang.org/docs/reference/data-classes.html\" target=\"_blank\" rel=\"external\">data类</a>并返回它的实例方式。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span></span>(<span class=\"keyword\">val</span> result: <span class=\"built_in\">Int</span> , <span class=\"keyword\">val</span> state: Status)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">function</span><span class=\"params\">(...)</span></span>: Result&#123;</div><div class=\"line\">    <span class=\"comment\">// 计算</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Result(result ,status)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现在可以使用这个函数了</span></div><div class=\"line\"><span class=\"keyword\">val</span> (result , status) = function(...)</div></pre></td></tr></table></figure></p>\n<p>因为解构声明自动为data类声明<code>componentN()</code>函数。</p>\n<blockquote>\n<p>也可以使用标准类<code>Pair</code>（有返回Pair<int ,=\"\" status=\"\">的函数），但通常更好的方式就是使用自己命名的属性。</int></p>\n</blockquote>\n<h2 id=\"结构声明与Map范例\"><a href=\"#结构声明与Map范例\" class=\"headerlink\" title=\"结构声明与Map范例\"></a>结构声明与Map范例</h2><p>下面示例可能是迭代Map的好的方式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>((key , value ) <span class=\"keyword\">in</span> map)&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>想要这样做，需要：</p>\n<ul>\n<li>添加Map中值队列的<code>iterator()</code>函数</li>\n<li>添加元素键值对的<code>component1()</code>和<code>component2()</code>函数</li>\n</ul>\n<p>实际上，Kotlin标准库已经准备这些扩展：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;K, V&gt;</span> Map<span class=\"type\">&lt;K, V&gt;</span>.<span class=\"title\">iterator</span><span class=\"params\">()</span></span>: Iterator&lt;Map.Entry&lt;K, V&gt;&gt; = entrySet().iterator()</div><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;K, V&gt;</span> Map.Entry<span class=\"type\">&lt;K, V&gt;</span>.<span class=\"title\">component1</span><span class=\"params\">()</span></span> = getKey()</div><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;K, V&gt;</span> Map.Entry<span class=\"type\">&lt;K, V&gt;</span>.<span class=\"title\">component2</span><span class=\"params\">()</span></span> = getValue()</div></pre></td></tr></table></figure></p>\n<p>因此可以自由在<code>for</code>循环中对Map使用解构声明（与data类集合一样）</p>\n<h2 id=\"未使用变量的下划线表示（从1-1开始）\"><a href=\"#未使用变量的下划线表示（从1-1开始）\" class=\"headerlink\" title=\"未使用变量的下划线表示（从1.1开始）\"></a>未使用变量的下划线表示（从1.1开始）</h2><p>如果不需要在解构声明中使用某个变量，可以使用下划线来替代<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> (_, status) = getResult()</div></pre></td></tr></table></figure></p>\n<h2 id=\"解构声明与Lambda表达式（从1-1起）\"><a href=\"#解构声明与Lambda表达式（从1-1起）\" class=\"headerlink\" title=\"解构声明与Lambda表达式（从1.1起）\"></a>解构声明与Lambda表达式（从1.1起）</h2><p>可以在Lambda表达式中使用解构声明，如果Lambda中有Pair类型参数（或<code>Map.Entry</code>等提供<code>componentN</code>函数的类型），可以将单独这个参数在圆括号中进行解构声明。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.mapValues &#123; entry -&gt; <span class=\"string\">\"<span class=\"subst\">$&#123;entry.value&#125;</span>!\"</span> &#125;</div><div class=\"line\">map.mapValues &#123; (key, value) -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意声明两个参数与一个参数的解构声明不同</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; a -&gt; ... &#125; <span class=\"comment\">// 单个参数</span></div><div class=\"line\">&#123; a, b -&gt; ... &#125; <span class=\"comment\">// 两个参数</span></div><div class=\"line\">&#123; (a, b) -&gt; ... &#125; <span class=\"comment\">// 解构声明</span></div><div class=\"line\">&#123; (a, b), c -&gt; ... &#125; <span class=\"comment\">// 解构声明和单个参数组合</span></div></pre></td></tr></table></figure>\n<p>如果未使用组件某个解构参数，使用下划线替代属性名<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.mapValues &#123; (_, value) -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<p>可以为整个解构参数或单个解构参数指定类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.mapValues &#123; (_, value): Map.Entry&lt;<span class=\"built_in\">Int</span>, String&gt; -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div><div class=\"line\"></div><div class=\"line\">map.mapValues &#123; (_, value: String) -&gt; <span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">JavaScript解构赋值</a></p>\n"},{"title":"Kotlin基础之高阶函数与Lambdas","date":"2017-06-21T07:53:18.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"## 高阶函数\n在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：\n- 接受一个或多个函数作为输入\n- 输出一个函数\n定义一个高阶函数，参数为Lock类型对象和一个函数。函数执行时获取锁，运行函数参数，执行结束释放锁。\n\n```kotlin\nfun <T> lock(lock: Lock , body: () -> T){\n  lock.lock()\n  try{\n    return body()\n  } \n  finaly{\n    lock.unlock()\n  }\n}\n```\n`body`为函数类型对象：`() -> T`。表示无参函数，并且返回值类型为T。\n\n调用`lock`函数，可以传入另外一个函数作为参数（参考[`函数引用`](https://kotlinlang.org/docs/reference/reflection.html#function-references)）\n\n```kotlin\nfun toBeSynchronized() = sharedResource.operation()\nval result = lock(lock, ::toBeSynchronized)\n```\n更加方便的方式是传入[`lambda表达式`](https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions)\n```kotlin\nval result = lock(lock, { sharedResource.operation() })\n```\nLambda表达式\n- Lambda表达式要用花括号包裹\n- 参数在`->` 之前声明（参数可能省略）\n- 执行内容跟在 `->` 之后（如果提供的话）\n\n在Kotlin中，如果函数最后参数为函数类型，可以在括号外部传入Lambda表达式作为指定的参数\n\n```kotlin\nlock (lock) { sharedResource.operation() }\n```\n\n高阶函数的另外一个例子：`map()`\n\n```kotlin\nfun <T, R> List<T>.map(transform: (T) -> R): List<R> {\n    val result = arrayListOf<R>()\n    for (item in this)\n        result.add(transform(item))\n    return result\n}\n```\nmap 调用\n```kotlin\nval doubled = inits.map{ value > value * 2}\n```\n\n> 如果lambda是函数调用的唯一参数，花括号可以完全省略。\n\n### it : 单个参数的隐式名称\n如果函数只有一个参数，则可以忽略声明函数参数（与`->`一起），用`it`来替代：\n```kotlin\nints.map{ it * 2}\n```\n因此可以写成查询表达式形式的代码\n```kotlin\nstrings.filter { it.length == 5 }\n       .sortBy { it }\n       .map { it.toUpperCase() }\n```\n### 下划线替代未使用的参数\n如果lambda参数未使用，可以使用下划线来替代\n```kotlin\nmap.forEach { _, value -> println(\"$value!\") }\n```\n\n### Lambdas中的解构（since 1.1）\nLambdas解构参考[`解构声明`](https://kotlinlang.org/docs/reference/multi-declarations.html#destructuring-in-lambdas-since-11)\n\n## 内联函数\n有时可使用内联函数来提升高阶函数性能，[`内联函数`](https://kotlinlang.org/docs/reference/inline-functions.html)\n\n## Lambda表达式和匿名函数\nLambda表达式和匿名函数都是`函数常量`。用表达式作为参数，无须额外声明函数。\n```kotlin\nmax(strings, { a, b -> a.length < b.length })\n```\n函数`max`是一个高阶函数，第二个参数是函数类型的值。等同于\n```kotlin\nfun compare(a: String, b: String): Boolean = a.length < b.length\n```\n\n### 函数类型\n对于接受函数作为参数的高阶函数，要给参数执行函数类型。例如上面的`max`函数的定义\n```kotlin\nfun <T> max(collection: Collection<T>, less: (T, T) -> Boolean): T? {\n    var max: T? = null\n    for (it in collection)\n        if (max == null || less(max, it))\n            max = it\n    return max\n}\n```\n参数`less`的类型就是`(T, T) -> Boolean`。即：比较两个T类型的变量的大小的函数，如果第一个比第二个小则返回`true`\n\n在代码中，`less`用作函数，调用时传入两个T类型的参数。\n\n这个函数类型也可以有具名参数\n```kotlin\nval compare: (x: T, y: T) -> Int = ...\n```\n\n### Lambda表达式的语法\n\nLambda表达式的完整语法形式,比如函数类型常量\n```kotlin\nval sum = { x: Int, y: Int -> x + y }\n```\nLambda表达式总以花括号包裹。完整语法形式中：\n- 参数在圆括号中声明，参数类型可选\n- 表达式体在`->` 符号之后。\n- 如果返回类型不是`Unit`，表达式体中最后（可能为单个）的表达式被视为返回值。\n\n如果忽略所有可选注解，则Lambda表达式为\n```kotlin\nval sum: (Int, Int) -> Int = { x, y -> x + y }\n```\n有单独一个参数的Lambda表达式很常见。如果Kotlin能够识别函数签名，则允许不声明这个唯一的参数，使用参数隐式声明`it`\n```kotlin\nints.filter { it > 0 } //  常量类型为'(it: Int) -> Boolean'\n```\nKotlin使用[`qualified return`](https://kotlinlang.org/docs/reference/returns.html#return-at-labels)语法，显式指定返回值类型。否则，隐式使用返回最后一个表达式的值。因此下面两段代码效果相同。\n```kotlin\nints.filter {\n    val shouldFilter = it > 0 \n    shouldFilter\n}\n\nints.filter {\n    val shouldFilter = it > 0 \n    return@filter shouldFilter\n}\n```\n> 如果函数以另外一个函数作为最后一个参数，lambda表达式则可以在参数列表外使用。参考[`callSuffix`](https://kotlinlang.org/docs/reference/grammar.html#callSuffix)语法\n\n### 匿名函数\n上面Lambda表达式语法中，没有讲到关于Kotlin指定函数的返回类型能力。在多数情况中，没有必要执行函数返回类型，因为Kotlin可以自动推断。但是如果需要显式指定类型，可以通过`匿名函数`来实现。\n```kotlin\nfun(x: Int, y: Int): Int = x + y\n```\n匿名函数与常规函数声明看起来非常相似，除了忽略了函数名。函数体可以是表达式，也可以是代码块\n```kotlin\nfun(x: Int, y: Int): Int {\n    return x + y\n}\n```\n\n指定参数和返回值类型方式与常规函数相同，如果根据上下文可以推断出类型，可以省略参数类型。\n```kotlin\nints.filter(fun(item) = item > 0)\n```\n返回值类型推断与正常函数相同：带有表达式体的匿名函数返回类型自动推断；带有代码块的匿名函数返回类型要显式指定（或默认为`Unit`）。\n\n> 匿名函数总要用括号传参。在括号外传参的方式只适应于Lambda表达式\n\nLambda表达式和匿名表达式一个不同点是：非局部返回行为，即没有标签的返回声明语句从声明有`fun`关键字的函数中返回。\n所以Lambda表达式中的返回语句会从封闭函数中返回，而匿名函数的返回语句返回匿名函数本身。\n\n### 闭包\n闭包（Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。\n\nKotlin中Lambda表达式与匿名函数（[`本地函数`](https://kotlinlang.org/docs/reference/functions.html#local-functions)、[`对象表达式`](https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions)亦同）可以访问它的闭包，如外部作用域中声明的变量。与Java不同，可以修改闭包中的变量。\n\n```kotlin\nvar sum = 0\nints.filter { it > 0 }.forEach {\n    sum += it\n}\nprint(sum)\n```\n### 带有接收者的函数常量\nKotlin可以调用带有接收者的函数常量。在函数常量的函数体中，可以不使用任何额外限定符，调用接收者的方法，这与扩展函数相似：允许访问函数体内部接收者的成员。其中一个例子[`Type-safe Groovy-style builders.`](https://kotlinlang.org/docs/reference/type-safe-builders.html)\n\n这种函数常量类型实际是带有接收者的函数类型\n```kotlin\nsum : Int.(other: Int) -> Int\n```\n如果函数常量是接收者的一个方法，则可以直接调用。\n```kotlin\n1.sum(2)\n```\n匿名函数语法可以直接指定函数常量接收者类型。可以声明带有接收者的函数类型变量，并在之后调用。\n```kotlin\nval sum = fun Int.(other: Int): Int = this + other\n```\n当可以从上下文中推断接收者类型时，Lambda表达式可以用作带有接收者的函数常量。\n```kotlin\nclass HTML {\n    fun body(){...}\n}\n\nfun html(init: HTML.() -> Unit): Unit{\n    val html = HTML() // create the receiver object\n    html.init()\n    return html\n}\n\nhtml {    // lambda with receiver begins here\n   body() // calling a method on the receiver object \n}\n```","source":"_posts/Kotlin基础之高阶函数与Lambdas.md","raw":"---\ntitle: Kotlin基础之高阶函数与Lambdas\ndate: 2017-06-21 15:53:18\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n## 高阶函数\n在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：\n- 接受一个或多个函数作为输入\n- 输出一个函数\n定义一个高阶函数，参数为Lock类型对象和一个函数。函数执行时获取锁，运行函数参数，执行结束释放锁。\n\n```kotlin\nfun <T> lock(lock: Lock , body: () -> T){\n  lock.lock()\n  try{\n    return body()\n  } \n  finaly{\n    lock.unlock()\n  }\n}\n```\n`body`为函数类型对象：`() -> T`。表示无参函数，并且返回值类型为T。\n\n调用`lock`函数，可以传入另外一个函数作为参数（参考[`函数引用`](https://kotlinlang.org/docs/reference/reflection.html#function-references)）\n\n```kotlin\nfun toBeSynchronized() = sharedResource.operation()\nval result = lock(lock, ::toBeSynchronized)\n```\n更加方便的方式是传入[`lambda表达式`](https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions)\n```kotlin\nval result = lock(lock, { sharedResource.operation() })\n```\nLambda表达式\n- Lambda表达式要用花括号包裹\n- 参数在`->` 之前声明（参数可能省略）\n- 执行内容跟在 `->` 之后（如果提供的话）\n\n在Kotlin中，如果函数最后参数为函数类型，可以在括号外部传入Lambda表达式作为指定的参数\n\n```kotlin\nlock (lock) { sharedResource.operation() }\n```\n\n高阶函数的另外一个例子：`map()`\n\n```kotlin\nfun <T, R> List<T>.map(transform: (T) -> R): List<R> {\n    val result = arrayListOf<R>()\n    for (item in this)\n        result.add(transform(item))\n    return result\n}\n```\nmap 调用\n```kotlin\nval doubled = inits.map{ value > value * 2}\n```\n\n> 如果lambda是函数调用的唯一参数，花括号可以完全省略。\n\n### it : 单个参数的隐式名称\n如果函数只有一个参数，则可以忽略声明函数参数（与`->`一起），用`it`来替代：\n```kotlin\nints.map{ it * 2}\n```\n因此可以写成查询表达式形式的代码\n```kotlin\nstrings.filter { it.length == 5 }\n       .sortBy { it }\n       .map { it.toUpperCase() }\n```\n### 下划线替代未使用的参数\n如果lambda参数未使用，可以使用下划线来替代\n```kotlin\nmap.forEach { _, value -> println(\"$value!\") }\n```\n\n### Lambdas中的解构（since 1.1）\nLambdas解构参考[`解构声明`](https://kotlinlang.org/docs/reference/multi-declarations.html#destructuring-in-lambdas-since-11)\n\n## 内联函数\n有时可使用内联函数来提升高阶函数性能，[`内联函数`](https://kotlinlang.org/docs/reference/inline-functions.html)\n\n## Lambda表达式和匿名函数\nLambda表达式和匿名函数都是`函数常量`。用表达式作为参数，无须额外声明函数。\n```kotlin\nmax(strings, { a, b -> a.length < b.length })\n```\n函数`max`是一个高阶函数，第二个参数是函数类型的值。等同于\n```kotlin\nfun compare(a: String, b: String): Boolean = a.length < b.length\n```\n\n### 函数类型\n对于接受函数作为参数的高阶函数，要给参数执行函数类型。例如上面的`max`函数的定义\n```kotlin\nfun <T> max(collection: Collection<T>, less: (T, T) -> Boolean): T? {\n    var max: T? = null\n    for (it in collection)\n        if (max == null || less(max, it))\n            max = it\n    return max\n}\n```\n参数`less`的类型就是`(T, T) -> Boolean`。即：比较两个T类型的变量的大小的函数，如果第一个比第二个小则返回`true`\n\n在代码中，`less`用作函数，调用时传入两个T类型的参数。\n\n这个函数类型也可以有具名参数\n```kotlin\nval compare: (x: T, y: T) -> Int = ...\n```\n\n### Lambda表达式的语法\n\nLambda表达式的完整语法形式,比如函数类型常量\n```kotlin\nval sum = { x: Int, y: Int -> x + y }\n```\nLambda表达式总以花括号包裹。完整语法形式中：\n- 参数在圆括号中声明，参数类型可选\n- 表达式体在`->` 符号之后。\n- 如果返回类型不是`Unit`，表达式体中最后（可能为单个）的表达式被视为返回值。\n\n如果忽略所有可选注解，则Lambda表达式为\n```kotlin\nval sum: (Int, Int) -> Int = { x, y -> x + y }\n```\n有单独一个参数的Lambda表达式很常见。如果Kotlin能够识别函数签名，则允许不声明这个唯一的参数，使用参数隐式声明`it`\n```kotlin\nints.filter { it > 0 } //  常量类型为'(it: Int) -> Boolean'\n```\nKotlin使用[`qualified return`](https://kotlinlang.org/docs/reference/returns.html#return-at-labels)语法，显式指定返回值类型。否则，隐式使用返回最后一个表达式的值。因此下面两段代码效果相同。\n```kotlin\nints.filter {\n    val shouldFilter = it > 0 \n    shouldFilter\n}\n\nints.filter {\n    val shouldFilter = it > 0 \n    return@filter shouldFilter\n}\n```\n> 如果函数以另外一个函数作为最后一个参数，lambda表达式则可以在参数列表外使用。参考[`callSuffix`](https://kotlinlang.org/docs/reference/grammar.html#callSuffix)语法\n\n### 匿名函数\n上面Lambda表达式语法中，没有讲到关于Kotlin指定函数的返回类型能力。在多数情况中，没有必要执行函数返回类型，因为Kotlin可以自动推断。但是如果需要显式指定类型，可以通过`匿名函数`来实现。\n```kotlin\nfun(x: Int, y: Int): Int = x + y\n```\n匿名函数与常规函数声明看起来非常相似，除了忽略了函数名。函数体可以是表达式，也可以是代码块\n```kotlin\nfun(x: Int, y: Int): Int {\n    return x + y\n}\n```\n\n指定参数和返回值类型方式与常规函数相同，如果根据上下文可以推断出类型，可以省略参数类型。\n```kotlin\nints.filter(fun(item) = item > 0)\n```\n返回值类型推断与正常函数相同：带有表达式体的匿名函数返回类型自动推断；带有代码块的匿名函数返回类型要显式指定（或默认为`Unit`）。\n\n> 匿名函数总要用括号传参。在括号外传参的方式只适应于Lambda表达式\n\nLambda表达式和匿名表达式一个不同点是：非局部返回行为，即没有标签的返回声明语句从声明有`fun`关键字的函数中返回。\n所以Lambda表达式中的返回语句会从封闭函数中返回，而匿名函数的返回语句返回匿名函数本身。\n\n### 闭包\n闭包（Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。\n\nKotlin中Lambda表达式与匿名函数（[`本地函数`](https://kotlinlang.org/docs/reference/functions.html#local-functions)、[`对象表达式`](https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions)亦同）可以访问它的闭包，如外部作用域中声明的变量。与Java不同，可以修改闭包中的变量。\n\n```kotlin\nvar sum = 0\nints.filter { it > 0 }.forEach {\n    sum += it\n}\nprint(sum)\n```\n### 带有接收者的函数常量\nKotlin可以调用带有接收者的函数常量。在函数常量的函数体中，可以不使用任何额外限定符，调用接收者的方法，这与扩展函数相似：允许访问函数体内部接收者的成员。其中一个例子[`Type-safe Groovy-style builders.`](https://kotlinlang.org/docs/reference/type-safe-builders.html)\n\n这种函数常量类型实际是带有接收者的函数类型\n```kotlin\nsum : Int.(other: Int) -> Int\n```\n如果函数常量是接收者的一个方法，则可以直接调用。\n```kotlin\n1.sum(2)\n```\n匿名函数语法可以直接指定函数常量接收者类型。可以声明带有接收者的函数类型变量，并在之后调用。\n```kotlin\nval sum = fun Int.(other: Int): Int = this + other\n```\n当可以从上下文中推断接收者类型时，Lambda表达式可以用作带有接收者的函数常量。\n```kotlin\nclass HTML {\n    fun body(){...}\n}\n\nfun html(init: HTML.() -> Unit): Unit{\n    val html = HTML() // create the receiver object\n    html.init()\n    return html\n}\n\nhtml {    // lambda with receiver begins here\n   body() // calling a method on the receiver object \n}\n```","slug":"Kotlin基础之高阶函数与Lambdas","published":1,"updated":"2017-07-03T07:46:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxp000ec0m3r8b68jqk","content":"<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数<br>定义一个高阶函数，参数为Lock类型对象和一个函数。函数执行时获取锁，运行函数参数，执行结束释放锁。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">lock</span><span class=\"params\">(lock: <span class=\"type\">Lock</span> , body: ()</span></span> -&gt; T)&#123;</div><div class=\"line\">  lock.lock()</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> body()</div><div class=\"line\">  &#125; </div><div class=\"line\">  finaly&#123;</div><div class=\"line\">    lock.unlock()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>body</code>为函数类型对象：<code>() -&gt; T</code>。表示无参函数，并且返回值类型为T。</p>\n<p>调用<code>lock</code>函数，可以传入另外一个函数作为参数（参考<a href=\"https://kotlinlang.org/docs/reference/reflection.html#function-references\" target=\"_blank\" rel=\"external\"><code>函数引用</code></a>）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toBeSynchronized</span><span class=\"params\">()</span></span> = sharedResource.operation()</div><div class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, ::toBeSynchronized)</div></pre></td></tr></table></figure>\n<p>更加方便的方式是传入<a href=\"https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions\" target=\"_blank\" rel=\"external\"><code>lambda表达式</code></a><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, &#123; sharedResource.operation() &#125;)</div></pre></td></tr></table></figure></p>\n<p>Lambda表达式</p>\n<ul>\n<li>Lambda表达式要用花括号包裹</li>\n<li>参数在<code>-&gt;</code> 之前声明（参数可能省略）</li>\n<li>执行内容跟在 <code>-&gt;</code> 之后（如果提供的话）</li>\n</ul>\n<p>在Kotlin中，如果函数最后参数为函数类型，可以在括号外部传入Lambda表达式作为指定的参数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lock (lock) &#123; sharedResource.operation() &#125;</div></pre></td></tr></table></figure>\n<p>高阶函数的另外一个例子：<code>map()</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> List<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">map</span><span class=\"params\">(transform: (<span class=\"type\">T</span>)</span></span> -&gt; R): List&lt;R&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = arrayListOf&lt;R&gt;()</div><div class=\"line\">    <span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)</div><div class=\"line\">        result.add(transform(item))</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>map 调用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> doubled = inits.map&#123; value &gt; value * <span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果lambda是函数调用的唯一参数，花括号可以完全省略。</p>\n</blockquote>\n<h3 id=\"it-单个参数的隐式名称\"><a href=\"#it-单个参数的隐式名称\" class=\"headerlink\" title=\"it : 单个参数的隐式名称\"></a>it : 单个参数的隐式名称</h3><p>如果函数只有一个参数，则可以忽略声明函数参数（与<code>-&gt;</code>一起），用<code>it</code>来替代：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.map&#123; it * <span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>因此可以写成查询表达式形式的代码<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings.filter &#123; it.length == <span class=\"number\">5</span> &#125;</div><div class=\"line\">       .sortBy &#123; it &#125;</div><div class=\"line\">       .map &#123; it.toUpperCase() &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"下划线替代未使用的参数\"><a href=\"#下划线替代未使用的参数\" class=\"headerlink\" title=\"下划线替代未使用的参数\"></a>下划线替代未使用的参数</h3><p>如果lambda参数未使用，可以使用下划线来替代<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.forEach &#123; _, value -&gt; println(<span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span>) &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Lambdas中的解构（since-1-1）\"><a href=\"#Lambdas中的解构（since-1-1）\" class=\"headerlink\" title=\"Lambdas中的解构（since 1.1）\"></a>Lambdas中的解构（since 1.1）</h3><p>Lambdas解构参考<a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html#destructuring-in-lambdas-since-11\" target=\"_blank\" rel=\"external\"><code>解构声明</code></a></p>\n<h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2><p>有时可使用内联函数来提升高阶函数性能，<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html\" target=\"_blank\" rel=\"external\"><code>内联函数</code></a></p>\n<h2 id=\"Lambda表达式和匿名函数\"><a href=\"#Lambda表达式和匿名函数\" class=\"headerlink\" title=\"Lambda表达式和匿名函数\"></a>Lambda表达式和匿名函数</h2><p>Lambda表达式和匿名函数都是<code>函数常量</code>。用表达式作为参数，无须额外声明函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">max(strings, &#123; a, b -&gt; a.length &lt; b.length &#125;)</div></pre></td></tr></table></figure></p>\n<p>函数<code>max</code>是一个高阶函数，第二个参数是函数类型的值。等同于<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compare</span><span class=\"params\">(a: <span class=\"type\">String</span>, b: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> = a.length &lt; b.length</div></pre></td></tr></table></figure></p>\n<h3 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h3><p>对于接受函数作为参数的高阶函数，要给参数执行函数类型。例如上面的<code>max</code>函数的定义<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">max</span><span class=\"params\">(collection: <span class=\"type\">Collection</span>&lt;<span class=\"type\">T</span>&gt;, less: (<span class=\"type\">T</span>, T)</span></span> -&gt; <span class=\"built_in\">Boolean</span>): T? &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> max: T? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (it <span class=\"keyword\">in</span> collection)</div><div class=\"line\">        <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span> || less(max, it))</div><div class=\"line\">            max = it</div><div class=\"line\">    <span class=\"keyword\">return</span> max</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参数<code>less</code>的类型就是<code>(T, T) -&gt; Boolean</code>。即：比较两个T类型的变量的大小的函数，如果第一个比第二个小则返回<code>true</code></p>\n<p>在代码中，<code>less</code>用作函数，调用时传入两个T类型的参数。</p>\n<p>这个函数类型也可以有具名参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> compare: (x: T, y: T) -&gt; <span class=\"built_in\">Int</span> = ...</div></pre></td></tr></table></figure></p>\n<h3 id=\"Lambda表达式的语法\"><a href=\"#Lambda表达式的语法\" class=\"headerlink\" title=\"Lambda表达式的语法\"></a>Lambda表达式的语法</h3><p>Lambda表达式的完整语法形式,比如函数类型常量<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> sum = &#123; x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span> -&gt; x + y &#125;</div></pre></td></tr></table></figure></p>\n<p>Lambda表达式总以花括号包裹。完整语法形式中：</p>\n<ul>\n<li>参数在圆括号中声明，参数类型可选</li>\n<li>表达式体在<code>-&gt;</code> 符号之后。</li>\n<li>如果返回类型不是<code>Unit</code>，表达式体中最后（可能为单个）的表达式被视为返回值。</li>\n</ul>\n<p>如果忽略所有可选注解，则Lambda表达式为<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> sum: (<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span> = &#123; x, y -&gt; x + y &#125;</div></pre></td></tr></table></figure></p>\n<p>有单独一个参数的Lambda表达式很常见。如果Kotlin能够识别函数签名，则允许不声明这个唯一的参数，使用参数隐式声明<code>it</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.filter &#123; it &gt; <span class=\"number\">0</span> &#125; <span class=\"comment\">//  常量类型为'(it: Int) -&gt; Boolean'</span></div></pre></td></tr></table></figure></p>\n<p>Kotlin使用<a href=\"https://kotlinlang.org/docs/reference/returns.html#return-at-labels\" target=\"_blank\" rel=\"external\"><code>qualified return</code></a>语法，显式指定返回值类型。否则，隐式使用返回最后一个表达式的值。因此下面两段代码效果相同。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.filter &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> shouldFilter = it &gt; <span class=\"number\">0</span> </div><div class=\"line\">    shouldFilter</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ints.filter &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> shouldFilter = it &gt; <span class=\"number\">0</span> </div><div class=\"line\">    <span class=\"keyword\">return</span><span class=\"symbol\">@filter</span> shouldFilter</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果函数以另外一个函数作为最后一个参数，lambda表达式则可以在参数列表外使用。参考<a href=\"https://kotlinlang.org/docs/reference/grammar.html#callSuffix\" target=\"_blank\" rel=\"external\"><code>callSuffix</code></a>语法</p>\n</blockquote>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>上面Lambda表达式语法中，没有讲到关于Kotlin指定函数的返回类型能力。在多数情况中，没有必要执行函数返回类型，因为Kotlin可以自动推断。但是如果需要显式指定类型，可以通过<code>匿名函数</code>来实现。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = x + y</div></pre></td></tr></table></figure></p>\n<p>匿名函数与常规函数声明看起来非常相似，除了忽略了函数名。函数体可以是表达式，也可以是代码块<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>指定参数和返回值类型方式与常规函数相同，如果根据上下文可以推断出类型，可以省略参数类型。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.filter(<span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(item)</span></span> = item &gt; <span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>返回值类型推断与正常函数相同：带有表达式体的匿名函数返回类型自动推断；带有代码块的匿名函数返回类型要显式指定（或默认为<code>Unit</code>）。</p>\n<blockquote>\n<p>匿名函数总要用括号传参。在括号外传参的方式只适应于Lambda表达式</p>\n</blockquote>\n<p>Lambda表达式和匿名表达式一个不同点是：非局部返回行为，即没有标签的返回声明语句从声明有<code>fun</code>关键字的函数中返回。<br>所以Lambda表达式中的返回语句会从封闭函数中返回，而匿名函数的返回语句返回匿名函数本身。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包（Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</p>\n<p>Kotlin中Lambda表达式与匿名函数（<a href=\"https://kotlinlang.org/docs/reference/functions.html#local-functions\" target=\"_blank\" rel=\"external\"><code>本地函数</code></a>、<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions\" target=\"_blank\" rel=\"external\"><code>对象表达式</code></a>亦同）可以访问它的闭包，如外部作用域中声明的变量。与Java不同，可以修改闭包中的变量。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></div><div class=\"line\">ints.filter &#123; it &gt; <span class=\"number\">0</span> &#125;.forEach &#123;</div><div class=\"line\">    sum += it</div><div class=\"line\">&#125;</div><div class=\"line\">print(sum)</div></pre></td></tr></table></figure>\n<h3 id=\"带有接收者的函数常量\"><a href=\"#带有接收者的函数常量\" class=\"headerlink\" title=\"带有接收者的函数常量\"></a>带有接收者的函数常量</h3><p>Kotlin可以调用带有接收者的函数常量。在函数常量的函数体中，可以不使用任何额外限定符，调用接收者的方法，这与扩展函数相似：允许访问函数体内部接收者的成员。其中一个例子<a href=\"https://kotlinlang.org/docs/reference/type-safe-builders.html\" target=\"_blank\" rel=\"external\"><code>Type-safe Groovy-style builders.</code></a></p>\n<p>这种函数常量类型实际是带有接收者的函数类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum : <span class=\"built_in\">Int</span>.(other: <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span></div></pre></td></tr></table></figure></p>\n<p>如果函数常量是接收者的一个方法，则可以直接调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>sum(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<p>匿名函数语法可以直接指定函数常量接收者类型。可以声明带有接收者的函数类型变量，并在之后调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> sum = <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"params\">(other: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">this</span> + other</div></pre></td></tr></table></figure></p>\n<p>当可以从上下文中推断接收者类型时，Lambda表达式可以用作带有接收者的函数常量。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTML</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">body</span><span class=\"params\">()</span></span>&#123;...&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">(init: <span class=\"type\">HTML</span>.()</span></span> -&gt; <span class=\"built_in\">Unit</span>): <span class=\"built_in\">Unit</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> html = HTML() <span class=\"comment\">// create the receiver object</span></div><div class=\"line\">    html.init()</div><div class=\"line\">    <span class=\"keyword\">return</span> html</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">html &#123;    <span class=\"comment\">// lambda with receiver begins here</span></div><div class=\"line\">   body() <span class=\"comment\">// calling a method on the receiver object </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数<br>定义一个高阶函数，参数为Lock类型对象和一个函数。函数执行时获取锁，运行函数参数，执行结束释放锁。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">lock</span><span class=\"params\">(lock: <span class=\"type\">Lock</span> , body: ()</span></span> -&gt; T)&#123;</div><div class=\"line\">  lock.lock()</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> body()</div><div class=\"line\">  &#125; </div><div class=\"line\">  finaly&#123;</div><div class=\"line\">    lock.unlock()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>body</code>为函数类型对象：<code>() -&gt; T</code>。表示无参函数，并且返回值类型为T。</p>\n<p>调用<code>lock</code>函数，可以传入另外一个函数作为参数（参考<a href=\"https://kotlinlang.org/docs/reference/reflection.html#function-references\" target=\"_blank\" rel=\"external\"><code>函数引用</code></a>）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toBeSynchronized</span><span class=\"params\">()</span></span> = sharedResource.operation()</div><div class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, ::toBeSynchronized)</div></pre></td></tr></table></figure>\n<p>更加方便的方式是传入<a href=\"https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions\" target=\"_blank\" rel=\"external\"><code>lambda表达式</code></a><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> result = lock(lock, &#123; sharedResource.operation() &#125;)</div></pre></td></tr></table></figure></p>\n<p>Lambda表达式</p>\n<ul>\n<li>Lambda表达式要用花括号包裹</li>\n<li>参数在<code>-&gt;</code> 之前声明（参数可能省略）</li>\n<li>执行内容跟在 <code>-&gt;</code> 之后（如果提供的话）</li>\n</ul>\n<p>在Kotlin中，如果函数最后参数为函数类型，可以在括号外部传入Lambda表达式作为指定的参数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lock (lock) &#123; sharedResource.operation() &#125;</div></pre></td></tr></table></figure>\n<p>高阶函数的另外一个例子：<code>map()</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> List<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">map</span><span class=\"params\">(transform: (<span class=\"type\">T</span>)</span></span> -&gt; R): List&lt;R&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = arrayListOf&lt;R&gt;()</div><div class=\"line\">    <span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)</div><div class=\"line\">        result.add(transform(item))</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>map 调用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> doubled = inits.map&#123; value &gt; value * <span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果lambda是函数调用的唯一参数，花括号可以完全省略。</p>\n</blockquote>\n<h3 id=\"it-单个参数的隐式名称\"><a href=\"#it-单个参数的隐式名称\" class=\"headerlink\" title=\"it : 单个参数的隐式名称\"></a>it : 单个参数的隐式名称</h3><p>如果函数只有一个参数，则可以忽略声明函数参数（与<code>-&gt;</code>一起），用<code>it</code>来替代：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.map&#123; it * <span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>因此可以写成查询表达式形式的代码<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings.filter &#123; it.length == <span class=\"number\">5</span> &#125;</div><div class=\"line\">       .sortBy &#123; it &#125;</div><div class=\"line\">       .map &#123; it.toUpperCase() &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"下划线替代未使用的参数\"><a href=\"#下划线替代未使用的参数\" class=\"headerlink\" title=\"下划线替代未使用的参数\"></a>下划线替代未使用的参数</h3><p>如果lambda参数未使用，可以使用下划线来替代<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.forEach &#123; _, value -&gt; println(<span class=\"string\">\"<span class=\"variable\">$value</span>!\"</span>) &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Lambdas中的解构（since-1-1）\"><a href=\"#Lambdas中的解构（since-1-1）\" class=\"headerlink\" title=\"Lambdas中的解构（since 1.1）\"></a>Lambdas中的解构（since 1.1）</h3><p>Lambdas解构参考<a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html#destructuring-in-lambdas-since-11\" target=\"_blank\" rel=\"external\"><code>解构声明</code></a></p>\n<h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2><p>有时可使用内联函数来提升高阶函数性能，<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html\" target=\"_blank\" rel=\"external\"><code>内联函数</code></a></p>\n<h2 id=\"Lambda表达式和匿名函数\"><a href=\"#Lambda表达式和匿名函数\" class=\"headerlink\" title=\"Lambda表达式和匿名函数\"></a>Lambda表达式和匿名函数</h2><p>Lambda表达式和匿名函数都是<code>函数常量</code>。用表达式作为参数，无须额外声明函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">max(strings, &#123; a, b -&gt; a.length &lt; b.length &#125;)</div></pre></td></tr></table></figure></p>\n<p>函数<code>max</code>是一个高阶函数，第二个参数是函数类型的值。等同于<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compare</span><span class=\"params\">(a: <span class=\"type\">String</span>, b: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> = a.length &lt; b.length</div></pre></td></tr></table></figure></p>\n<h3 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h3><p>对于接受函数作为参数的高阶函数，要给参数执行函数类型。例如上面的<code>max</code>函数的定义<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">max</span><span class=\"params\">(collection: <span class=\"type\">Collection</span>&lt;<span class=\"type\">T</span>&gt;, less: (<span class=\"type\">T</span>, T)</span></span> -&gt; <span class=\"built_in\">Boolean</span>): T? &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> max: T? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (it <span class=\"keyword\">in</span> collection)</div><div class=\"line\">        <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span> || less(max, it))</div><div class=\"line\">            max = it</div><div class=\"line\">    <span class=\"keyword\">return</span> max</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参数<code>less</code>的类型就是<code>(T, T) -&gt; Boolean</code>。即：比较两个T类型的变量的大小的函数，如果第一个比第二个小则返回<code>true</code></p>\n<p>在代码中，<code>less</code>用作函数，调用时传入两个T类型的参数。</p>\n<p>这个函数类型也可以有具名参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> compare: (x: T, y: T) -&gt; <span class=\"built_in\">Int</span> = ...</div></pre></td></tr></table></figure></p>\n<h3 id=\"Lambda表达式的语法\"><a href=\"#Lambda表达式的语法\" class=\"headerlink\" title=\"Lambda表达式的语法\"></a>Lambda表达式的语法</h3><p>Lambda表达式的完整语法形式,比如函数类型常量<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> sum = &#123; x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span> -&gt; x + y &#125;</div></pre></td></tr></table></figure></p>\n<p>Lambda表达式总以花括号包裹。完整语法形式中：</p>\n<ul>\n<li>参数在圆括号中声明，参数类型可选</li>\n<li>表达式体在<code>-&gt;</code> 符号之后。</li>\n<li>如果返回类型不是<code>Unit</code>，表达式体中最后（可能为单个）的表达式被视为返回值。</li>\n</ul>\n<p>如果忽略所有可选注解，则Lambda表达式为<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> sum: (<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span> = &#123; x, y -&gt; x + y &#125;</div></pre></td></tr></table></figure></p>\n<p>有单独一个参数的Lambda表达式很常见。如果Kotlin能够识别函数签名，则允许不声明这个唯一的参数，使用参数隐式声明<code>it</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.filter &#123; it &gt; <span class=\"number\">0</span> &#125; <span class=\"comment\">//  常量类型为'(it: Int) -&gt; Boolean'</span></div></pre></td></tr></table></figure></p>\n<p>Kotlin使用<a href=\"https://kotlinlang.org/docs/reference/returns.html#return-at-labels\" target=\"_blank\" rel=\"external\"><code>qualified return</code></a>语法，显式指定返回值类型。否则，隐式使用返回最后一个表达式的值。因此下面两段代码效果相同。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.filter &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> shouldFilter = it &gt; <span class=\"number\">0</span> </div><div class=\"line\">    shouldFilter</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ints.filter &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> shouldFilter = it &gt; <span class=\"number\">0</span> </div><div class=\"line\">    <span class=\"keyword\">return</span><span class=\"symbol\">@filter</span> shouldFilter</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果函数以另外一个函数作为最后一个参数，lambda表达式则可以在参数列表外使用。参考<a href=\"https://kotlinlang.org/docs/reference/grammar.html#callSuffix\" target=\"_blank\" rel=\"external\"><code>callSuffix</code></a>语法</p>\n</blockquote>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>上面Lambda表达式语法中，没有讲到关于Kotlin指定函数的返回类型能力。在多数情况中，没有必要执行函数返回类型，因为Kotlin可以自动推断。但是如果需要显式指定类型，可以通过<code>匿名函数</code>来实现。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = x + y</div></pre></td></tr></table></figure></p>\n<p>匿名函数与常规函数声明看起来非常相似，除了忽略了函数名。函数体可以是表达式，也可以是代码块<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>指定参数和返回值类型方式与常规函数相同，如果根据上下文可以推断出类型，可以省略参数类型。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ints.filter(<span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(item)</span></span> = item &gt; <span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>返回值类型推断与正常函数相同：带有表达式体的匿名函数返回类型自动推断；带有代码块的匿名函数返回类型要显式指定（或默认为<code>Unit</code>）。</p>\n<blockquote>\n<p>匿名函数总要用括号传参。在括号外传参的方式只适应于Lambda表达式</p>\n</blockquote>\n<p>Lambda表达式和匿名表达式一个不同点是：非局部返回行为，即没有标签的返回声明语句从声明有<code>fun</code>关键字的函数中返回。<br>所以Lambda表达式中的返回语句会从封闭函数中返回，而匿名函数的返回语句返回匿名函数本身。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包（Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</p>\n<p>Kotlin中Lambda表达式与匿名函数（<a href=\"https://kotlinlang.org/docs/reference/functions.html#local-functions\" target=\"_blank\" rel=\"external\"><code>本地函数</code></a>、<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions\" target=\"_blank\" rel=\"external\"><code>对象表达式</code></a>亦同）可以访问它的闭包，如外部作用域中声明的变量。与Java不同，可以修改闭包中的变量。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></div><div class=\"line\">ints.filter &#123; it &gt; <span class=\"number\">0</span> &#125;.forEach &#123;</div><div class=\"line\">    sum += it</div><div class=\"line\">&#125;</div><div class=\"line\">print(sum)</div></pre></td></tr></table></figure>\n<h3 id=\"带有接收者的函数常量\"><a href=\"#带有接收者的函数常量\" class=\"headerlink\" title=\"带有接收者的函数常量\"></a>带有接收者的函数常量</h3><p>Kotlin可以调用带有接收者的函数常量。在函数常量的函数体中，可以不使用任何额外限定符，调用接收者的方法，这与扩展函数相似：允许访问函数体内部接收者的成员。其中一个例子<a href=\"https://kotlinlang.org/docs/reference/type-safe-builders.html\" target=\"_blank\" rel=\"external\"><code>Type-safe Groovy-style builders.</code></a></p>\n<p>这种函数常量类型实际是带有接收者的函数类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum : <span class=\"built_in\">Int</span>.(other: <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span></div></pre></td></tr></table></figure></p>\n<p>如果函数常量是接收者的一个方法，则可以直接调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>sum(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<p>匿名函数语法可以直接指定函数常量接收者类型。可以声明带有接收者的函数类型变量，并在之后调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> sum = <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"params\">(other: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">this</span> + other</div></pre></td></tr></table></figure></p>\n<p>当可以从上下文中推断接收者类型时，Lambda表达式可以用作带有接收者的函数常量。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTML</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">body</span><span class=\"params\">()</span></span>&#123;...&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">(init: <span class=\"type\">HTML</span>.()</span></span> -&gt; <span class=\"built_in\">Unit</span>): <span class=\"built_in\">Unit</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> html = HTML() <span class=\"comment\">// create the receiver object</span></div><div class=\"line\">    html.init()</div><div class=\"line\">    <span class=\"keyword\">return</span> html</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">html &#123;    <span class=\"comment\">// lambda with receiver begins here</span></div><div class=\"line\">   body() <span class=\"comment\">// calling a method on the receiver object </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Kotlin基础之跳转与条件循环表达式","date":"2017-07-03T07:47:55.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"\n# 跳转\nKotlin有三种结构的跳转表达式\n- return. return默认返回最近的闭合函数或[`匿名函数`](https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions)\n- break. 结束最近闭合循环\n- continue. 执行最近闭合循环下一步\n\n所有跳转表达式可在大的表达式中使用\n```kotlin\nval s = person.name ?: return\n```\n跳转表达式的类型为[`Nothing类型`](https://kotlinlang.org/docs/reference/exceptions.html#the-nothing-type)\n\n## Break和Continue 标注\nkotlin中任意表达式都可以用标注来标记，以`标识符`+`@`的形式来表示标注，如：`abc@` ，`fooBar@`都是有效的标注（[`参考语法`](https://kotlinlang.org/docs/reference/grammar.html#labelReference)）。把标注放在表达式后，即完成对表达式的标记。\n```kotlin\nloop@ for(i in 1..100){\n  // ...\n}\n```\n使用标注限制beak和continue\n```kotlin\nloop@ for(i in 1..100){\n    for(j in 1..100){\n        if(...) break@loop\n    }\n}\n```\n有限制标注的break表达式会跳转到标注对应的循环执行点。`continue`则执行对应循环的下一步迭代。\n\n## 在标注处Return\n使用函数常量，局部函数和对象表达式，Kotlin可以实现内嵌函数。returns使用标注可以从外部函数返回，其中一个用处就是从Lambda表达式中返回。\n```kotlin\nfun foo(){\n  ints.forEach{\n    if( it == 0 ) return\n    print(it)\n  }\n}\n```\n`return表达式`从最近闭合函数中返回，如`foo`\n\n> 非局部函数只支持传入[`内联函数`](https://kotlinlang.org/docs/reference/inline-functions.html)的Lambda表达式。\n\n如果只想要从Lambda表达式返回，可以通过使用标注限制return\n```kotlin\nfun foo(){\n    ints.forEach lit@{\n        if( it == 0 ) return@lit\n        print(it)\n    }\n}\n```\n上面即可实现只从Lambda表达式中返回，更为方便的是：可以使用隐式标注，标注与调用Lambda表达式的函数名相同。\n```kotlin\nfun foo(){\n    ints.forEach {\n      if( it == 0 ) return@forEach\n      print(it)\n    }\n\n```\n这种情况下，可以使用[`匿名函数`](https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions)来替换Lambda表达式。匿名函数中的返回语句只返回匿名函数本身。\n```kotlin\nfun foo(){\n  ints.forEach(fun(value: Int){\n      if( value == 0 ) return value\n      print(value)\n  })\n}\n```\n有返回值时，解析器优先处理限制返回语句，如：\n```kotlin\nreturn@a 1\n\n```\n表示在标注`a`处返回`1`而不是返回标注的表达式`@a 1`\n\n# 条件循环\n## if 表达式\n在Kotlin中，if为表达式，如返回具体值。不支持三目运算（condition ? then : else ），因为普通的if表达式即能完成三目的目的。\n```kotlin\n// 经典方式\nvar max = a\nif( a < b ) max = b\n\n// 与else\nvar max: Int\nif(a > b){\n    max = a\n} else {\n    max = b\n}\n\n// 表达式\nval max = if( a > b ) a else b\n```\n如果条件分支是代码块，则最后一个表达式为代码块的值\n```kotlin\nval max = if(a > b){\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n\n```\n如果使用if作为表达式非条件语句时（如：返回if表达式的值或将if赋值给变量），则须有else条件分支。详见[`if语法`](https://kotlinlang.org/docs/reference/grammar.html#if)\n\n## When表达式\n`when`替代了`switch`操作符。when的一个简单形式：\n```kotlin\nwhen(x){\n  1 -> print(\" x == 1\")\n  2 -> print(\" x == 2\")\n  else -> {  // Note the block\n    print(\"x is neither 1 nor 2\")\n  }\n}\n```\nwhen按照顺便比较参数与分支条件直到满足条件。when可以用作表达式或语句。用作表达式时，满足条件的分支对应值则是整个表达式的值。用作语句时，分支的值都会被忽略（如`if`相似，每个分支都可以是代码块，分支的值是代码块中最后一个表达式的值。）\n\n如果没有满足条件的分支，则执行else分支。when用作表达式时，必须要有else分支，除非编译器可以证明所有分支条件都被覆盖到。\n\n如果多个分支处理方式相同，则可以使用逗号组合这些分支：\n```kotlin\nwhen(x){\n  0 , 1 -> print(\"x == 0 or x == 1\")\n  else -> print(\"otherwise\")\n}\n```\n可以使用任意（不仅仅是常量）表达式作为分支条件\n```kotlin\nwhen(x){\n  parseInt(s) -> print(\"s encodes x\")\n  else -> print(\"s does not encode x\")\n \n}\n```\n分支条件可以检查集合或[`range`](https://kotlinlang.org/docs/reference/ranges.html)是否存在指定的参数值\n```kotlin\nwhen(x){\n    in 1..10 -> print(\"x is in the range\")\n    in validNumbers -> print(\"x is valid\")\n    !in 10..20 -> print(\"x is outsize the range\")\n    else -> print(\"none of the above\")\n}\n```\n也可以用来检查是否是指定的类型参数，因为[`智能转换`](https://kotlinlang.org/docs/reference/typecasts.html#smart-casts)，不使用类型检查就可以访问类型的属性和方法。\n```kotlin \nfun hasPrefix(x: Any) = when(x){\n    is String -> x.startWith(\"prefix\")\n    else -> false\n}\n```\n`when`也可以替代`if-else`if控制链。如果没有任何参数，分支条件则是简单boolean表达式，表达式值为true时则执行对应分支。\n```kotlin\nwhen {\n    x.isOdd() -> print(\"x is odd\")\n    x.isEven() -> print(\"x is even\")\n    else -> print(\"x is funny\")\n}\n```\n跟多关于When,查看[`when语法`](https://kotlinlang.org/docs/reference/grammar.html#when)\n\n## for循环\nfor循环能够迭代提供迭代器的任意对象。语法：\n```kotlin\nfor(item in collection) print(item)\n```\n循环体可以是代码块\n```kotlin\nfor(item in collection){\n  // ...\n}\n```\nfor循环能够迭代任何提供迭代器的对象\n- 有成员或扩展函数`iterator()`，并且返回类型为：\n    - 有成员或扩展函数`next()` 且\n    - 有成员或扩展函数`hasNex()`，返回类型为Boolean\n\n这三个函数都被标记为`operator`\n\n迭代数组的`for`循环被会编译成基于index的循环，而无须创建一个迭代器对象。\n\n使用index来迭代数组或列表\n```kotlin\nfor( i in array.indices){\n  print(array[i])\n}\n```\n> `iteration through a range`会被编译优化，无须创建额外对象。\n\n可用`withIndex`库函数实现index迭代\n```kotlin\nfor((index, value) in array.withIndex()){\n    println(\"the element at $index is $ value\")\n}\n```\n查看[`for循环语法`](https://kotlinlang.org/docs/reference/grammar.html#for)\n\n## While循环\nwhile 和 do..while\n```kotlin\nwhile(x > 0){\n    x--\n}\n\ndo{\n  val y = retrieveData()\n} while ( y != null)  // a little different\n```\n查看[`while语法`](https://kotlinlang.org/docs/reference/grammar.html#while)\n\n## break与continue\nKotlin支持循环break和continue操作，参考`跳转`一节中的文档。\n","source":"_posts/Kotlin基础之跳转与条件循环表达式.md","raw":"---\ntitle: Kotlin基础之跳转与条件循环表达式\ndate: 2017-07-03 15:47:55\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n\n# 跳转\nKotlin有三种结构的跳转表达式\n- return. return默认返回最近的闭合函数或[`匿名函数`](https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions)\n- break. 结束最近闭合循环\n- continue. 执行最近闭合循环下一步\n\n所有跳转表达式可在大的表达式中使用\n```kotlin\nval s = person.name ?: return\n```\n跳转表达式的类型为[`Nothing类型`](https://kotlinlang.org/docs/reference/exceptions.html#the-nothing-type)\n\n## Break和Continue 标注\nkotlin中任意表达式都可以用标注来标记，以`标识符`+`@`的形式来表示标注，如：`abc@` ，`fooBar@`都是有效的标注（[`参考语法`](https://kotlinlang.org/docs/reference/grammar.html#labelReference)）。把标注放在表达式后，即完成对表达式的标记。\n```kotlin\nloop@ for(i in 1..100){\n  // ...\n}\n```\n使用标注限制beak和continue\n```kotlin\nloop@ for(i in 1..100){\n    for(j in 1..100){\n        if(...) break@loop\n    }\n}\n```\n有限制标注的break表达式会跳转到标注对应的循环执行点。`continue`则执行对应循环的下一步迭代。\n\n## 在标注处Return\n使用函数常量，局部函数和对象表达式，Kotlin可以实现内嵌函数。returns使用标注可以从外部函数返回，其中一个用处就是从Lambda表达式中返回。\n```kotlin\nfun foo(){\n  ints.forEach{\n    if( it == 0 ) return\n    print(it)\n  }\n}\n```\n`return表达式`从最近闭合函数中返回，如`foo`\n\n> 非局部函数只支持传入[`内联函数`](https://kotlinlang.org/docs/reference/inline-functions.html)的Lambda表达式。\n\n如果只想要从Lambda表达式返回，可以通过使用标注限制return\n```kotlin\nfun foo(){\n    ints.forEach lit@{\n        if( it == 0 ) return@lit\n        print(it)\n    }\n}\n```\n上面即可实现只从Lambda表达式中返回，更为方便的是：可以使用隐式标注，标注与调用Lambda表达式的函数名相同。\n```kotlin\nfun foo(){\n    ints.forEach {\n      if( it == 0 ) return@forEach\n      print(it)\n    }\n\n```\n这种情况下，可以使用[`匿名函数`](https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions)来替换Lambda表达式。匿名函数中的返回语句只返回匿名函数本身。\n```kotlin\nfun foo(){\n  ints.forEach(fun(value: Int){\n      if( value == 0 ) return value\n      print(value)\n  })\n}\n```\n有返回值时，解析器优先处理限制返回语句，如：\n```kotlin\nreturn@a 1\n\n```\n表示在标注`a`处返回`1`而不是返回标注的表达式`@a 1`\n\n# 条件循环\n## if 表达式\n在Kotlin中，if为表达式，如返回具体值。不支持三目运算（condition ? then : else ），因为普通的if表达式即能完成三目的目的。\n```kotlin\n// 经典方式\nvar max = a\nif( a < b ) max = b\n\n// 与else\nvar max: Int\nif(a > b){\n    max = a\n} else {\n    max = b\n}\n\n// 表达式\nval max = if( a > b ) a else b\n```\n如果条件分支是代码块，则最后一个表达式为代码块的值\n```kotlin\nval max = if(a > b){\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n\n```\n如果使用if作为表达式非条件语句时（如：返回if表达式的值或将if赋值给变量），则须有else条件分支。详见[`if语法`](https://kotlinlang.org/docs/reference/grammar.html#if)\n\n## When表达式\n`when`替代了`switch`操作符。when的一个简单形式：\n```kotlin\nwhen(x){\n  1 -> print(\" x == 1\")\n  2 -> print(\" x == 2\")\n  else -> {  // Note the block\n    print(\"x is neither 1 nor 2\")\n  }\n}\n```\nwhen按照顺便比较参数与分支条件直到满足条件。when可以用作表达式或语句。用作表达式时，满足条件的分支对应值则是整个表达式的值。用作语句时，分支的值都会被忽略（如`if`相似，每个分支都可以是代码块，分支的值是代码块中最后一个表达式的值。）\n\n如果没有满足条件的分支，则执行else分支。when用作表达式时，必须要有else分支，除非编译器可以证明所有分支条件都被覆盖到。\n\n如果多个分支处理方式相同，则可以使用逗号组合这些分支：\n```kotlin\nwhen(x){\n  0 , 1 -> print(\"x == 0 or x == 1\")\n  else -> print(\"otherwise\")\n}\n```\n可以使用任意（不仅仅是常量）表达式作为分支条件\n```kotlin\nwhen(x){\n  parseInt(s) -> print(\"s encodes x\")\n  else -> print(\"s does not encode x\")\n \n}\n```\n分支条件可以检查集合或[`range`](https://kotlinlang.org/docs/reference/ranges.html)是否存在指定的参数值\n```kotlin\nwhen(x){\n    in 1..10 -> print(\"x is in the range\")\n    in validNumbers -> print(\"x is valid\")\n    !in 10..20 -> print(\"x is outsize the range\")\n    else -> print(\"none of the above\")\n}\n```\n也可以用来检查是否是指定的类型参数，因为[`智能转换`](https://kotlinlang.org/docs/reference/typecasts.html#smart-casts)，不使用类型检查就可以访问类型的属性和方法。\n```kotlin \nfun hasPrefix(x: Any) = when(x){\n    is String -> x.startWith(\"prefix\")\n    else -> false\n}\n```\n`when`也可以替代`if-else`if控制链。如果没有任何参数，分支条件则是简单boolean表达式，表达式值为true时则执行对应分支。\n```kotlin\nwhen {\n    x.isOdd() -> print(\"x is odd\")\n    x.isEven() -> print(\"x is even\")\n    else -> print(\"x is funny\")\n}\n```\n跟多关于When,查看[`when语法`](https://kotlinlang.org/docs/reference/grammar.html#when)\n\n## for循环\nfor循环能够迭代提供迭代器的任意对象。语法：\n```kotlin\nfor(item in collection) print(item)\n```\n循环体可以是代码块\n```kotlin\nfor(item in collection){\n  // ...\n}\n```\nfor循环能够迭代任何提供迭代器的对象\n- 有成员或扩展函数`iterator()`，并且返回类型为：\n    - 有成员或扩展函数`next()` 且\n    - 有成员或扩展函数`hasNex()`，返回类型为Boolean\n\n这三个函数都被标记为`operator`\n\n迭代数组的`for`循环被会编译成基于index的循环，而无须创建一个迭代器对象。\n\n使用index来迭代数组或列表\n```kotlin\nfor( i in array.indices){\n  print(array[i])\n}\n```\n> `iteration through a range`会被编译优化，无须创建额外对象。\n\n可用`withIndex`库函数实现index迭代\n```kotlin\nfor((index, value) in array.withIndex()){\n    println(\"the element at $index is $ value\")\n}\n```\n查看[`for循环语法`](https://kotlinlang.org/docs/reference/grammar.html#for)\n\n## While循环\nwhile 和 do..while\n```kotlin\nwhile(x > 0){\n    x--\n}\n\ndo{\n  val y = retrieveData()\n} while ( y != null)  // a little different\n```\n查看[`while语法`](https://kotlinlang.org/docs/reference/grammar.html#while)\n\n## break与continue\nKotlin支持循环break和continue操作，参考`跳转`一节中的文档。\n","slug":"Kotlin基础之跳转与条件循环表达式","published":1,"updated":"2017-07-03T07:47:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxq000hc0m3w3x33ewl","content":"<h1 id=\"跳转\"><a href=\"#跳转\" class=\"headerlink\" title=\"跳转\"></a>跳转</h1><p>Kotlin有三种结构的跳转表达式</p>\n<ul>\n<li>return. return默认返回最近的闭合函数或<a href=\"https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions\" target=\"_blank\" rel=\"external\"><code>匿名函数</code></a></li>\n<li>break. 结束最近闭合循环</li>\n<li>continue. 执行最近闭合循环下一步</li>\n</ul>\n<p>所有跳转表达式可在大的表达式中使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> s = person.name ?: <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n<p>跳转表达式的类型为<a href=\"https://kotlinlang.org/docs/reference/exceptions.html#the-nothing-type\" target=\"_blank\" rel=\"external\"><code>Nothing类型</code></a></p>\n<h2 id=\"Break和Continue-标注\"><a href=\"#Break和Continue-标注\" class=\"headerlink\" title=\"Break和Continue 标注\"></a>Break和Continue 标注</h2><p>kotlin中任意表达式都可以用标注来标记，以<code>标识符</code>+<code>@</code>的形式来表示标注，如：<code>abc@</code> ，<code>fooBar@</code>都是有效的标注（<a href=\"https://kotlinlang.org/docs/reference/grammar.html#labelReference\" target=\"_blank\" rel=\"external\"><code>参考语法</code></a>）。把标注放在表达式后，即完成对表达式的标记。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">loop@</span> <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>)&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用标注限制beak和continue<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">loop@</span> <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(j <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(...) <span class=\"keyword\">break</span><span class=\"symbol\">@loop</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有限制标注的break表达式会跳转到标注对应的循环执行点。<code>continue</code>则执行对应循环的下一步迭代。</p>\n<h2 id=\"在标注处Return\"><a href=\"#在标注处Return\" class=\"headerlink\" title=\"在标注处Return\"></a>在标注处Return</h2><p>使用函数常量，局部函数和对象表达式，Kotlin可以实现内嵌函数。returns使用标注可以从外部函数返回，其中一个用处就是从Lambda表达式中返回。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  ints.forEach&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( it == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span></div><div class=\"line\">    print(it)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>return表达式</code>从最近闭合函数中返回，如<code>foo</code></p>\n<blockquote>\n<p>非局部函数只支持传入<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html\" target=\"_blank\" rel=\"external\"><code>内联函数</code></a>的Lambda表达式。</p>\n</blockquote>\n<p>如果只想要从Lambda表达式返回，可以通过使用标注限制return<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ints.forEach <span class=\"symbol\">lit@</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( it == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span><span class=\"symbol\">@lit</span></div><div class=\"line\">        print(it)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面即可实现只从Lambda表达式中返回，更为方便的是：可以使用隐式标注，标注与调用Lambda表达式的函数名相同。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ints.forEach &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>( it == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span><span class=\"symbol\">@forEach</span></div><div class=\"line\">      print(it)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这种情况下，可以使用<a href=\"https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions\" target=\"_blank\" rel=\"external\"><code>匿名函数</code></a>来替换Lambda表达式。匿名函数中的返回语句只返回匿名函数本身。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  ints.forEach(<span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(value: <span class=\"type\">Int</span>)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>( value == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> value</div><div class=\"line\">      print(value)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有返回值时，解析器优先处理限制返回语句，如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span><span class=\"symbol\">@a</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>表示在标注<code>a</code>处返回<code>1</code>而不是返回标注的表达式<code>@a 1</code></p>\n<h1 id=\"条件循环\"><a href=\"#条件循环\" class=\"headerlink\" title=\"条件循环\"></a>条件循环</h1><h2 id=\"if-表达式\"><a href=\"#if-表达式\" class=\"headerlink\" title=\"if 表达式\"></a>if 表达式</h2><p>在Kotlin中，if为表达式，如返回具体值。不支持三目运算（condition ? then : else ），因为普通的if表达式即能完成三目的目的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 经典方式</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = a</div><div class=\"line\"><span class=\"keyword\">if</span>( a &lt; b ) max = b</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 与else</span></div><div class=\"line\"><span class=\"keyword\">var</span> max: <span class=\"built_in\">Int</span></div><div class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</div><div class=\"line\">    max = a</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    max = b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 表达式</span></div><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span>( a &gt; b ) a <span class=\"keyword\">else</span> b</div></pre></td></tr></table></figure></p>\n<p>如果条件分支是代码块，则最后一个表达式为代码块的值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span>(a &gt; b)&#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose a\"</span>)</div><div class=\"line\">    a</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose b\"</span>)</div><div class=\"line\">    b</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果使用if作为表达式非条件语句时（如：返回if表达式的值或将if赋值给变量），则须有else条件分支。详见<a href=\"https://kotlinlang.org/docs/reference/grammar.html#if\" target=\"_blank\" rel=\"external\"><code>if语法</code></a></p>\n<h2 id=\"When表达式\"><a href=\"#When表达式\" class=\"headerlink\" title=\"When表达式\"></a>When表达式</h2><p><code>when</code>替代了<code>switch</code>操作符。when的一个简单形式：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">  <span class=\"number\">1</span> -&gt; print(<span class=\"string\">\" x == 1\"</span>)</div><div class=\"line\">  <span class=\"number\">2</span> -&gt; print(<span class=\"string\">\" x == 2\"</span>)</div><div class=\"line\">  <span class=\"keyword\">else</span> -&gt; &#123;  <span class=\"comment\">// Note the block</span></div><div class=\"line\">    print(<span class=\"string\">\"x is neither 1 nor 2\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>when按照顺便比较参数与分支条件直到满足条件。when可以用作表达式或语句。用作表达式时，满足条件的分支对应值则是整个表达式的值。用作语句时，分支的值都会被忽略（如<code>if</code>相似，每个分支都可以是代码块，分支的值是代码块中最后一个表达式的值。）</p>\n<p>如果没有满足条件的分支，则执行else分支。when用作表达式时，必须要有else分支，除非编译器可以证明所有分支条件都被覆盖到。</p>\n<p>如果多个分支处理方式相同，则可以使用逗号组合这些分支：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">  <span class=\"number\">0</span> , <span class=\"number\">1</span> -&gt; print(<span class=\"string\">\"x == 0 or x == 1\"</span>)</div><div class=\"line\">  <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"otherwise\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以使用任意（不仅仅是常量）表达式作为分支条件<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">  parseInt(s) -&gt; print(<span class=\"string\">\"s encodes x\"</span>)</div><div class=\"line\">  <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"s does not encode x\"</span>)</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分支条件可以检查集合或<a href=\"https://kotlinlang.org/docs/reference/ranges.html\" target=\"_blank\" rel=\"external\"><code>range</code></a>是否存在指定的参数值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">    <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; print(<span class=\"string\">\"x is in the range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">in</span> validNumbers -&gt; print(<span class=\"string\">\"x is valid\"</span>)</div><div class=\"line\">    !<span class=\"keyword\">in</span> <span class=\"number\">10.</span><span class=\"number\">.20</span> -&gt; print(<span class=\"string\">\"x is outsize the range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"none of the above\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以用来检查是否是指定的类型参数，因为<a href=\"https://kotlinlang.org/docs/reference/typecasts.html#smart-casts\" target=\"_blank\" rel=\"external\"><code>智能转换</code></a>，不使用类型检查就可以访问类型的属性和方法。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hasPrefix</span><span class=\"params\">(x: <span class=\"type\">Any</span>)</span></span> = <span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">    <span class=\"keyword\">is</span> String -&gt; x.startWith(<span class=\"string\">\"prefix\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>when</code>也可以替代<code>if-else</code>if控制链。如果没有任何参数，分支条件则是简单boolean表达式，表达式值为true时则执行对应分支。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span> &#123;</div><div class=\"line\">    x.isOdd() -&gt; print(<span class=\"string\">\"x is odd\"</span>)</div><div class=\"line\">    x.isEven() -&gt; print(<span class=\"string\">\"x is even\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"x is funny\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>跟多关于When,查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#when\" target=\"_blank\" rel=\"external\"><code>when语法</code></a></p>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p>for循环能够迭代提供迭代器的任意对象。语法：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> collection) print(item)</div></pre></td></tr></table></figure></p>\n<p>循环体可以是代码块<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> collection)&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for循环能够迭代任何提供迭代器的对象</p>\n<ul>\n<li>有成员或扩展函数<code>iterator()</code>，并且返回类型为：<ul>\n<li>有成员或扩展函数<code>next()</code> 且</li>\n<li>有成员或扩展函数<code>hasNex()</code>，返回类型为Boolean</li>\n</ul>\n</li>\n</ul>\n<p>这三个函数都被标记为<code>operator</code></p>\n<p>迭代数组的<code>for</code>循环被会编译成基于index的循环，而无须创建一个迭代器对象。</p>\n<p>使用index来迭代数组或列表<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>( i <span class=\"keyword\">in</span> array.indices)&#123;</div><div class=\"line\">  print(array[i])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>iteration through a range</code>会被编译优化，无须创建额外对象。</p>\n</blockquote>\n<p>可用<code>withIndex</code>库函数实现index迭代<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>((index, value) <span class=\"keyword\">in</span> array.withIndex())&#123;</div><div class=\"line\">    println(<span class=\"string\">\"the element at <span class=\"variable\">$index</span> is $ value\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#for\" target=\"_blank\" rel=\"external\"><code>for循环语法</code></a></p>\n<h2 id=\"While循环\"><a href=\"#While循环\" class=\"headerlink\" title=\"While循环\"></a>While循环</h2><p>while 和 do..while<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    x--</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">do</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> y = retrieveData()</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> ( y != <span class=\"literal\">null</span>)  <span class=\"comment\">// a little different</span></div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#while\" target=\"_blank\" rel=\"external\"><code>while语法</code></a></p>\n<h2 id=\"break与continue\"><a href=\"#break与continue\" class=\"headerlink\" title=\"break与continue\"></a>break与continue</h2><p>Kotlin支持循环break和continue操作，参考<code>跳转</code>一节中的文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"跳转\"><a href=\"#跳转\" class=\"headerlink\" title=\"跳转\"></a>跳转</h1><p>Kotlin有三种结构的跳转表达式</p>\n<ul>\n<li>return. return默认返回最近的闭合函数或<a href=\"https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions\" target=\"_blank\" rel=\"external\"><code>匿名函数</code></a></li>\n<li>break. 结束最近闭合循环</li>\n<li>continue. 执行最近闭合循环下一步</li>\n</ul>\n<p>所有跳转表达式可在大的表达式中使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> s = person.name ?: <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n<p>跳转表达式的类型为<a href=\"https://kotlinlang.org/docs/reference/exceptions.html#the-nothing-type\" target=\"_blank\" rel=\"external\"><code>Nothing类型</code></a></p>\n<h2 id=\"Break和Continue-标注\"><a href=\"#Break和Continue-标注\" class=\"headerlink\" title=\"Break和Continue 标注\"></a>Break和Continue 标注</h2><p>kotlin中任意表达式都可以用标注来标记，以<code>标识符</code>+<code>@</code>的形式来表示标注，如：<code>abc@</code> ，<code>fooBar@</code>都是有效的标注（<a href=\"https://kotlinlang.org/docs/reference/grammar.html#labelReference\" target=\"_blank\" rel=\"external\"><code>参考语法</code></a>）。把标注放在表达式后，即完成对表达式的标记。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">loop@</span> <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>)&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用标注限制beak和continue<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">loop@</span> <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(j <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(...) <span class=\"keyword\">break</span><span class=\"symbol\">@loop</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有限制标注的break表达式会跳转到标注对应的循环执行点。<code>continue</code>则执行对应循环的下一步迭代。</p>\n<h2 id=\"在标注处Return\"><a href=\"#在标注处Return\" class=\"headerlink\" title=\"在标注处Return\"></a>在标注处Return</h2><p>使用函数常量，局部函数和对象表达式，Kotlin可以实现内嵌函数。returns使用标注可以从外部函数返回，其中一个用处就是从Lambda表达式中返回。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  ints.forEach&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( it == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span></div><div class=\"line\">    print(it)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>return表达式</code>从最近闭合函数中返回，如<code>foo</code></p>\n<blockquote>\n<p>非局部函数只支持传入<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html\" target=\"_blank\" rel=\"external\"><code>内联函数</code></a>的Lambda表达式。</p>\n</blockquote>\n<p>如果只想要从Lambda表达式返回，可以通过使用标注限制return<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ints.forEach <span class=\"symbol\">lit@</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( it == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span><span class=\"symbol\">@lit</span></div><div class=\"line\">        print(it)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面即可实现只从Lambda表达式中返回，更为方便的是：可以使用隐式标注，标注与调用Lambda表达式的函数名相同。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ints.forEach &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>( it == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span><span class=\"symbol\">@forEach</span></div><div class=\"line\">      print(it)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这种情况下，可以使用<a href=\"https://kotlinlang.org/docs/reference/lambdas.html#anonymous-functions\" target=\"_blank\" rel=\"external\"><code>匿名函数</code></a>来替换Lambda表达式。匿名函数中的返回语句只返回匿名函数本身。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  ints.forEach(<span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(value: <span class=\"type\">Int</span>)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>( value == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> value</div><div class=\"line\">      print(value)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有返回值时，解析器优先处理限制返回语句，如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span><span class=\"symbol\">@a</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>表示在标注<code>a</code>处返回<code>1</code>而不是返回标注的表达式<code>@a 1</code></p>\n<h1 id=\"条件循环\"><a href=\"#条件循环\" class=\"headerlink\" title=\"条件循环\"></a>条件循环</h1><h2 id=\"if-表达式\"><a href=\"#if-表达式\" class=\"headerlink\" title=\"if 表达式\"></a>if 表达式</h2><p>在Kotlin中，if为表达式，如返回具体值。不支持三目运算（condition ? then : else ），因为普通的if表达式即能完成三目的目的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 经典方式</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = a</div><div class=\"line\"><span class=\"keyword\">if</span>( a &lt; b ) max = b</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 与else</span></div><div class=\"line\"><span class=\"keyword\">var</span> max: <span class=\"built_in\">Int</span></div><div class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</div><div class=\"line\">    max = a</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    max = b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 表达式</span></div><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span>( a &gt; b ) a <span class=\"keyword\">else</span> b</div></pre></td></tr></table></figure></p>\n<p>如果条件分支是代码块，则最后一个表达式为代码块的值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span>(a &gt; b)&#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose a\"</span>)</div><div class=\"line\">    a</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose b\"</span>)</div><div class=\"line\">    b</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果使用if作为表达式非条件语句时（如：返回if表达式的值或将if赋值给变量），则须有else条件分支。详见<a href=\"https://kotlinlang.org/docs/reference/grammar.html#if\" target=\"_blank\" rel=\"external\"><code>if语法</code></a></p>\n<h2 id=\"When表达式\"><a href=\"#When表达式\" class=\"headerlink\" title=\"When表达式\"></a>When表达式</h2><p><code>when</code>替代了<code>switch</code>操作符。when的一个简单形式：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">  <span class=\"number\">1</span> -&gt; print(<span class=\"string\">\" x == 1\"</span>)</div><div class=\"line\">  <span class=\"number\">2</span> -&gt; print(<span class=\"string\">\" x == 2\"</span>)</div><div class=\"line\">  <span class=\"keyword\">else</span> -&gt; &#123;  <span class=\"comment\">// Note the block</span></div><div class=\"line\">    print(<span class=\"string\">\"x is neither 1 nor 2\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>when按照顺便比较参数与分支条件直到满足条件。when可以用作表达式或语句。用作表达式时，满足条件的分支对应值则是整个表达式的值。用作语句时，分支的值都会被忽略（如<code>if</code>相似，每个分支都可以是代码块，分支的值是代码块中最后一个表达式的值。）</p>\n<p>如果没有满足条件的分支，则执行else分支。when用作表达式时，必须要有else分支，除非编译器可以证明所有分支条件都被覆盖到。</p>\n<p>如果多个分支处理方式相同，则可以使用逗号组合这些分支：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">  <span class=\"number\">0</span> , <span class=\"number\">1</span> -&gt; print(<span class=\"string\">\"x == 0 or x == 1\"</span>)</div><div class=\"line\">  <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"otherwise\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以使用任意（不仅仅是常量）表达式作为分支条件<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">  parseInt(s) -&gt; print(<span class=\"string\">\"s encodes x\"</span>)</div><div class=\"line\">  <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"s does not encode x\"</span>)</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分支条件可以检查集合或<a href=\"https://kotlinlang.org/docs/reference/ranges.html\" target=\"_blank\" rel=\"external\"><code>range</code></a>是否存在指定的参数值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">    <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; print(<span class=\"string\">\"x is in the range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">in</span> validNumbers -&gt; print(<span class=\"string\">\"x is valid\"</span>)</div><div class=\"line\">    !<span class=\"keyword\">in</span> <span class=\"number\">10.</span><span class=\"number\">.20</span> -&gt; print(<span class=\"string\">\"x is outsize the range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"none of the above\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以用来检查是否是指定的类型参数，因为<a href=\"https://kotlinlang.org/docs/reference/typecasts.html#smart-casts\" target=\"_blank\" rel=\"external\"><code>智能转换</code></a>，不使用类型检查就可以访问类型的属性和方法。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hasPrefix</span><span class=\"params\">(x: <span class=\"type\">Any</span>)</span></span> = <span class=\"keyword\">when</span>(x)&#123;</div><div class=\"line\">    <span class=\"keyword\">is</span> String -&gt; x.startWith(<span class=\"string\">\"prefix\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>when</code>也可以替代<code>if-else</code>if控制链。如果没有任何参数，分支条件则是简单boolean表达式，表达式值为true时则执行对应分支。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span> &#123;</div><div class=\"line\">    x.isOdd() -&gt; print(<span class=\"string\">\"x is odd\"</span>)</div><div class=\"line\">    x.isEven() -&gt; print(<span class=\"string\">\"x is even\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"x is funny\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>跟多关于When,查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#when\" target=\"_blank\" rel=\"external\"><code>when语法</code></a></p>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p>for循环能够迭代提供迭代器的任意对象。语法：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> collection) print(item)</div></pre></td></tr></table></figure></p>\n<p>循环体可以是代码块<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> collection)&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for循环能够迭代任何提供迭代器的对象</p>\n<ul>\n<li>有成员或扩展函数<code>iterator()</code>，并且返回类型为：<ul>\n<li>有成员或扩展函数<code>next()</code> 且</li>\n<li>有成员或扩展函数<code>hasNex()</code>，返回类型为Boolean</li>\n</ul>\n</li>\n</ul>\n<p>这三个函数都被标记为<code>operator</code></p>\n<p>迭代数组的<code>for</code>循环被会编译成基于index的循环，而无须创建一个迭代器对象。</p>\n<p>使用index来迭代数组或列表<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>( i <span class=\"keyword\">in</span> array.indices)&#123;</div><div class=\"line\">  print(array[i])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>iteration through a range</code>会被编译优化，无须创建额外对象。</p>\n</blockquote>\n<p>可用<code>withIndex</code>库函数实现index迭代<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>((index, value) <span class=\"keyword\">in</span> array.withIndex())&#123;</div><div class=\"line\">    println(<span class=\"string\">\"the element at <span class=\"variable\">$index</span> is $ value\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#for\" target=\"_blank\" rel=\"external\"><code>for循环语法</code></a></p>\n<h2 id=\"While循环\"><a href=\"#While循环\" class=\"headerlink\" title=\"While循环\"></a>While循环</h2><p>while 和 do..while<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    x--</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">do</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> y = retrieveData()</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> ( y != <span class=\"literal\">null</span>)  <span class=\"comment\">// a little different</span></div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#while\" target=\"_blank\" rel=\"external\"><code>while语法</code></a></p>\n<h2 id=\"break与continue\"><a href=\"#break与continue\" class=\"headerlink\" title=\"break与continue\"></a>break与continue</h2><p>Kotlin支持循环break和continue操作，参考<code>跳转</code>一节中的文档。</p>\n"},{"title":"Kotlin基础之类、继承、可见性修饰符","date":"2017-07-03T07:48:46.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 类与继承\n\n## 类\n在Kotlin中使用class声明类\n\n```kotlin\nclass Invoice {\n}\n```\n类声明由类名，类头部（指定类型参数，首要构造等）和用大括号包裹的类体组成。类头部和类体为可选；如果无类体，可省略花括号\n```kotlin\nclass Empty\n```\n\n## 构造器\nKotlin的类可以有一个首要构造器和多个次要构造器。首要构造是类头部的一部分，跟在类名之后（参数类型可选）\n```kotlin\nclass Person constructor(firstName: String) {\n}\n```\n如果首要构造没有任何注解或可见修饰符，`constructor`关键字可省略。\n```kotlin\nclass Person(firstName: String){\n    \n}\n```\n首要构造不能含有任何代码。初始代码可以放在初始块中，初始块使用`init`前缀修饰：\n```kotlin\nclass Customer(name: String){\n    init {\n        logger.info(\"Customer initialized with value ${name}\")\n    }\n}\n```\n> 首要构造的参数可以在init代码块中使用，也可以用来初始化类中声明的属性\n\n```kotlin\nclass Customer(name: String) {\n    val customerKey = name.toUpperCase()\n}\n```\n事实上，Kotlin有个简明语法在首要构造器中初始话声明的属性\n```kotlin\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n    // ...\n}\n```\n与常规属性一样，声明在首要构造的属性可以是可变的（var）或只读（val）\n\n如果构造器有注解或可见修饰符，在构则要加上`constructor`关键字。\n```kotlin\nclass Customer public @Inject constructor(name: String) { ... }\n```\n更多查看[`可见性修饰符`](https://kotlinlang.org/docs/reference/visibility-modifiers.html#constructors)\n\n## 次要构造器\n\n类可以声明次要构造器，使用`custructor`前缀修饰\n```kotlin\nclass Person {\n    constructor(parent: Person) {\n        parent.children.add(this)\n    }\n}\n```\n如果类有首要构造，每个次要构造器都需要委托给首要构造或间接地通过其他次要构造器。使用`this`关键字完成委托。\n```kotlin\nclass Person(val name: String) {\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n```\n如果不是抽象类并且没有声明任何构造器，则生成一个无参首要构造。构造器可见性为public。如果不希望有public类型构造器，则需要声明一个空的非默认可见性的首要构造器\n```kotlin\nclass DontCreateMe private constructor () {\n}\n```\n> 在JVM上，如果首要构造所有参数都有默认值，编译器生成一个使用默认值的额外参数构造器。可以让kotlin和像`Jackson`或`JPA`这样创建类的实例的库一起使用。\n\n    class Customer(val customerName: String = \"\")\n    \n## 创建类的实例\n像常规函数一样调用构造器，来创建一个类的实例\n```kotlin\nval invoice = Invoice()\n\nval customer = Customer(\"Joe Smith\")\n\n```\n> kotlin 没有`new`关键字\n\n查看关于创建[`嵌套类`](https://kotlinlang.org/docs/reference/nested-classes.html)的描述\n\n## 类成员\n类包含\n- 构造器和初始块\n- [函数](https://kotlinlang.org/docs/reference/functions.html)\n- [属性](https://kotlinlang.org/docs/reference/properties.html)\n- [嵌套和内部类](https://kotlinlang.org/docs/reference/nested-classes.html)\n- [对象声明](https://kotlinlang.org/docs/reference/object-declarations.html)\n\n## 继承\n所有Kotlin类都有一个共通的超类Any。\n```kotlin\nclass Example // Implicitly inherits from Any\n```\n`Any`不是`java.lang.Object`;除了`equals()`，`hashCode()`，`toString()`，没有其他的成员。详情查看[`Java协同`](https://kotlinlang.org/docs/reference/java-interop.html#object-methods)小节\n\n在类头部的尾部来声明明确的父类类型\n```kotlin\nopen class Base(p: Int)\nclass Derived(p: Int) : Base(p)\n```\n如果类有一个首要构造，则必须使用首要构造器初始化基类。\n\n如果类没有首要构造器，则每个次要构造器使用`super`关键字初始化基类或委托给其他构造执行。\n> 不同次要构造器可以调用不同基类构造\n\n```kotlin\nclass MyView : View {\n    constructor(ctx: Context) : super(ctx)\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)\n}\n```\n类的`open`注解与Java的`final`意义相反：允许其他类继承本类。kotlin默认的所有类都是final类型，对应[`Effective Java`](http://www.oracle.com/technetwork/java/effectivejava-136174.html)中第17条：`要么为继承而设计，并提供文档说明，要么就禁止继承`。\n## 复写方法\n如上面说到，Kotlin 力求事情明确。与Java不同，Kotlin需要明确的可复写的成员（Koltin称为open）和复写\n```kotlin\nopen class Base {\n    open fun v() {}\n    fun nv() {}\n}\nclass Derived() : Base() {\n    override fun v() {}\n}\n```\n`Derived.v()`需要`override`，如果缺失，编译则给出抗议。如果函数没有`open`注解，如`Base.nv()`，则在子类中声明相同签名的方法，无论使用或不使用`override`注解都是非法的。在final类（没有使用`open`注解）中，禁止注解open成员。\n\n标记为`override`的成员函数可以被子类复写。如果禁止复写，使用`final`关键字\n```kotlin\nopen class AnotherDerived() : Base() {\n    final override fun v() {}\n}\n```\n## 复写属性\n复写属性原理与复写方法相似；超类中声明的属性并在派生类中重新声明，必须使用`override`在前面标记，并且具有兼容的类型。每个声明的属性可以被有初始化操作或有`getter`方法的属性复写。\n```kotlin\nopen class Foo {\n    open val x: Int get { ... }\n}\n\nclass Bar1 : Foo() {\n    override val x: Int = ...\n}\n```\n可以使用var属性来复写val属性，反过来不可。因为val属性本质上声明了getter方法，复写为`var`属性在派生类中声明了`setter`方法\n\n> 可以在首要构造器中使用`override`关键字来声明属性\n\n```kotlin\ninterface Foo {\n    val count: Int\n}\n\nclass Bar1(override val count: Int) : Foo\n\nclass Bar2 : Foo {\n    override var count: Int = 0\n}\n```\n\n## 复写规则\nKoltin定义了实现继承的规则。如果类继承它直接超类的相同成员的多个实现，则必须复写这个方法并且提供自己实现。为了表示采用的继承实现父型，需要使用`super`修饰尖括号中的超类类型，如：`super<Base>`\n```kotlin\nopen class A{\n    open fun f(){ print(\"A\") }\n    fun a() { print(\"a\") }\n}\n\nopen class B{\n    fun f(){ print(\"B\") }\n    funcb() { print(\"b\") }\n}\n\nclass C() : A() , B{\n    // The compiler requires f() to be overridden:\n    override fun f() {\n        super<A>.f() // call to A.f()\n        super<B>.f() // call to B.f()\n    }\n}\n```\n同时继承A和B，对于函数`a()`和函数`b()`没有问题，因为`C`只继承了这些函数一个实现。但是对于函数`f()`，有`C`的两个实现，因此必须要复写`f()`，并由`C`提供自己的显示来消除歧义。\n\n## 抽象类\n类和它一些成员可以声明为`abstract`。抽象成员在当前类没有具体实现。\n> 不言而喻，抽象类或抽象函数无须使用open注解\n\n可以使用抽象来复写非抽象的open函数\n\n```kotlin\nopen class Base {\n    open fun f() {}\n}\n\nabstract class Derived : Base() {\n    override abstract fun f()\n}\n```\n\n## 伴生对象\n与Java，C++不同的是，Kotlin没有静态方法。在多数类中，建议使用包级函数替代。\n\n如果需要写一个不用类的实例来调用的函数，但要通过访问类的内部信息（如：工厂方法），可以在类中写作为[`对象声明`](https://kotlinlang.org/docs/reference/object-declarations.html)成员。\n\n更为特殊的情况，如果在类中声明[`伴生对象`](https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects)，就可以只使用类的名称作为限定符来调用成员，就好像Java/C#中调用静态方法那样。\n\n# 可见性修饰符\n\n类、对象、接口、构造器、函数、属性和他们的`setter`都可以有可见性修饰符（Getters与属性相同的修饰符）。Kotlin有四种可见性修饰符：`private`，`protected`，`internal`和`public`。默认可见性为`public`。\n\n## 包\n函数，属性，和类，对象和接口都可以在上层中声明。如：直接在包中\n```kotlin\n// file name: example.kt\npackage foo\n\nfun baz() {}\nclass Bar {}\n```\n\n- 如果没有指定任何可见性修饰符，默认为`public`，意味：声明随处可见\n- 如果标记为`private`，则只在声明的文件中可见\n- 如果标记为`internal`，则在相同[`模块`](https://kotlinlang.org/docs/reference/visibility-modifiers.html#modules)中可见\n- 标记为`protected`，则不能为顶层访问\n```kotlin\n// file name: example.kt\npackage foo\nprivate fun foo() {} // 在example.kt内部可访问\npublic var bar: Int = 5 // 在任何地方可见\n private set         // setter 方法只在example.kt中可见\ninternal val baz = 6 // 在相同module中可见\n```\n## 类与接口\n对于类中声明的成员\n- private：只在声明的类中可见（包括类所有的成员函数）\n- protected：与private相似，但子类也可访问\n- internal：相同模块的任何client都访问类的internal成员\n- public：任何client都可访问类的public成员\n\n> Java开发注意：在kotlin中，外部类无法访问内部类的私有成员\n\n如果复写`protected`成员且没有显式指定可见修饰符，复写后的成员也具有`protected`可见性。\n```kotlin\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a 不可见\n    // b, c 和 d 可见\n    // Nested 和 e 可见\n\n    override val b = 5   // 'b' 为 protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b 不可见\n    // o.c 和 o.d are 可见（相同模块）\n    // Outer.Nested 不可见且 Nested::e 也不可见\n}\n```\n## 构造器\n使用下面的语法来指定类的首要构造器的可见性\n> 需要显式添加`constructor`关键字\n\n```kotlin\nclass C private constructor(a: Int) { ... }\n```\n类C的构造器为私有。默认的构造器都为`public`属性，也说明了只要可访问类，就能使用对应类的构造器。（如 internal类型的类，只在相同模块中访问）\n\n## 局部变量\n局部变量，函数和类没有可见性修饰符\n## 模块\n`internal`修饰符表示成员只能被相同模块访问。明确地说，Kotlin的模块是共同编译的一组文件：\n- `IntelliJ IDEA`模块\n- Maven或Gradle项目\n- 使用Ant构建编译的文件","source":"_posts/Kotlin基础之类、继承、可见性修饰符.md","raw":"---\ntitle: Kotlin基础之类、继承、可见性修饰符\ndate: 2017-07-03 15:48:46\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 类与继承\n\n## 类\n在Kotlin中使用class声明类\n\n```kotlin\nclass Invoice {\n}\n```\n类声明由类名，类头部（指定类型参数，首要构造等）和用大括号包裹的类体组成。类头部和类体为可选；如果无类体，可省略花括号\n```kotlin\nclass Empty\n```\n\n## 构造器\nKotlin的类可以有一个首要构造器和多个次要构造器。首要构造是类头部的一部分，跟在类名之后（参数类型可选）\n```kotlin\nclass Person constructor(firstName: String) {\n}\n```\n如果首要构造没有任何注解或可见修饰符，`constructor`关键字可省略。\n```kotlin\nclass Person(firstName: String){\n    \n}\n```\n首要构造不能含有任何代码。初始代码可以放在初始块中，初始块使用`init`前缀修饰：\n```kotlin\nclass Customer(name: String){\n    init {\n        logger.info(\"Customer initialized with value ${name}\")\n    }\n}\n```\n> 首要构造的参数可以在init代码块中使用，也可以用来初始化类中声明的属性\n\n```kotlin\nclass Customer(name: String) {\n    val customerKey = name.toUpperCase()\n}\n```\n事实上，Kotlin有个简明语法在首要构造器中初始话声明的属性\n```kotlin\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n    // ...\n}\n```\n与常规属性一样，声明在首要构造的属性可以是可变的（var）或只读（val）\n\n如果构造器有注解或可见修饰符，在构则要加上`constructor`关键字。\n```kotlin\nclass Customer public @Inject constructor(name: String) { ... }\n```\n更多查看[`可见性修饰符`](https://kotlinlang.org/docs/reference/visibility-modifiers.html#constructors)\n\n## 次要构造器\n\n类可以声明次要构造器，使用`custructor`前缀修饰\n```kotlin\nclass Person {\n    constructor(parent: Person) {\n        parent.children.add(this)\n    }\n}\n```\n如果类有首要构造，每个次要构造器都需要委托给首要构造或间接地通过其他次要构造器。使用`this`关键字完成委托。\n```kotlin\nclass Person(val name: String) {\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n```\n如果不是抽象类并且没有声明任何构造器，则生成一个无参首要构造。构造器可见性为public。如果不希望有public类型构造器，则需要声明一个空的非默认可见性的首要构造器\n```kotlin\nclass DontCreateMe private constructor () {\n}\n```\n> 在JVM上，如果首要构造所有参数都有默认值，编译器生成一个使用默认值的额外参数构造器。可以让kotlin和像`Jackson`或`JPA`这样创建类的实例的库一起使用。\n\n    class Customer(val customerName: String = \"\")\n    \n## 创建类的实例\n像常规函数一样调用构造器，来创建一个类的实例\n```kotlin\nval invoice = Invoice()\n\nval customer = Customer(\"Joe Smith\")\n\n```\n> kotlin 没有`new`关键字\n\n查看关于创建[`嵌套类`](https://kotlinlang.org/docs/reference/nested-classes.html)的描述\n\n## 类成员\n类包含\n- 构造器和初始块\n- [函数](https://kotlinlang.org/docs/reference/functions.html)\n- [属性](https://kotlinlang.org/docs/reference/properties.html)\n- [嵌套和内部类](https://kotlinlang.org/docs/reference/nested-classes.html)\n- [对象声明](https://kotlinlang.org/docs/reference/object-declarations.html)\n\n## 继承\n所有Kotlin类都有一个共通的超类Any。\n```kotlin\nclass Example // Implicitly inherits from Any\n```\n`Any`不是`java.lang.Object`;除了`equals()`，`hashCode()`，`toString()`，没有其他的成员。详情查看[`Java协同`](https://kotlinlang.org/docs/reference/java-interop.html#object-methods)小节\n\n在类头部的尾部来声明明确的父类类型\n```kotlin\nopen class Base(p: Int)\nclass Derived(p: Int) : Base(p)\n```\n如果类有一个首要构造，则必须使用首要构造器初始化基类。\n\n如果类没有首要构造器，则每个次要构造器使用`super`关键字初始化基类或委托给其他构造执行。\n> 不同次要构造器可以调用不同基类构造\n\n```kotlin\nclass MyView : View {\n    constructor(ctx: Context) : super(ctx)\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)\n}\n```\n类的`open`注解与Java的`final`意义相反：允许其他类继承本类。kotlin默认的所有类都是final类型，对应[`Effective Java`](http://www.oracle.com/technetwork/java/effectivejava-136174.html)中第17条：`要么为继承而设计，并提供文档说明，要么就禁止继承`。\n## 复写方法\n如上面说到，Kotlin 力求事情明确。与Java不同，Kotlin需要明确的可复写的成员（Koltin称为open）和复写\n```kotlin\nopen class Base {\n    open fun v() {}\n    fun nv() {}\n}\nclass Derived() : Base() {\n    override fun v() {}\n}\n```\n`Derived.v()`需要`override`，如果缺失，编译则给出抗议。如果函数没有`open`注解，如`Base.nv()`，则在子类中声明相同签名的方法，无论使用或不使用`override`注解都是非法的。在final类（没有使用`open`注解）中，禁止注解open成员。\n\n标记为`override`的成员函数可以被子类复写。如果禁止复写，使用`final`关键字\n```kotlin\nopen class AnotherDerived() : Base() {\n    final override fun v() {}\n}\n```\n## 复写属性\n复写属性原理与复写方法相似；超类中声明的属性并在派生类中重新声明，必须使用`override`在前面标记，并且具有兼容的类型。每个声明的属性可以被有初始化操作或有`getter`方法的属性复写。\n```kotlin\nopen class Foo {\n    open val x: Int get { ... }\n}\n\nclass Bar1 : Foo() {\n    override val x: Int = ...\n}\n```\n可以使用var属性来复写val属性，反过来不可。因为val属性本质上声明了getter方法，复写为`var`属性在派生类中声明了`setter`方法\n\n> 可以在首要构造器中使用`override`关键字来声明属性\n\n```kotlin\ninterface Foo {\n    val count: Int\n}\n\nclass Bar1(override val count: Int) : Foo\n\nclass Bar2 : Foo {\n    override var count: Int = 0\n}\n```\n\n## 复写规则\nKoltin定义了实现继承的规则。如果类继承它直接超类的相同成员的多个实现，则必须复写这个方法并且提供自己实现。为了表示采用的继承实现父型，需要使用`super`修饰尖括号中的超类类型，如：`super<Base>`\n```kotlin\nopen class A{\n    open fun f(){ print(\"A\") }\n    fun a() { print(\"a\") }\n}\n\nopen class B{\n    fun f(){ print(\"B\") }\n    funcb() { print(\"b\") }\n}\n\nclass C() : A() , B{\n    // The compiler requires f() to be overridden:\n    override fun f() {\n        super<A>.f() // call to A.f()\n        super<B>.f() // call to B.f()\n    }\n}\n```\n同时继承A和B，对于函数`a()`和函数`b()`没有问题，因为`C`只继承了这些函数一个实现。但是对于函数`f()`，有`C`的两个实现，因此必须要复写`f()`，并由`C`提供自己的显示来消除歧义。\n\n## 抽象类\n类和它一些成员可以声明为`abstract`。抽象成员在当前类没有具体实现。\n> 不言而喻，抽象类或抽象函数无须使用open注解\n\n可以使用抽象来复写非抽象的open函数\n\n```kotlin\nopen class Base {\n    open fun f() {}\n}\n\nabstract class Derived : Base() {\n    override abstract fun f()\n}\n```\n\n## 伴生对象\n与Java，C++不同的是，Kotlin没有静态方法。在多数类中，建议使用包级函数替代。\n\n如果需要写一个不用类的实例来调用的函数，但要通过访问类的内部信息（如：工厂方法），可以在类中写作为[`对象声明`](https://kotlinlang.org/docs/reference/object-declarations.html)成员。\n\n更为特殊的情况，如果在类中声明[`伴生对象`](https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects)，就可以只使用类的名称作为限定符来调用成员，就好像Java/C#中调用静态方法那样。\n\n# 可见性修饰符\n\n类、对象、接口、构造器、函数、属性和他们的`setter`都可以有可见性修饰符（Getters与属性相同的修饰符）。Kotlin有四种可见性修饰符：`private`，`protected`，`internal`和`public`。默认可见性为`public`。\n\n## 包\n函数，属性，和类，对象和接口都可以在上层中声明。如：直接在包中\n```kotlin\n// file name: example.kt\npackage foo\n\nfun baz() {}\nclass Bar {}\n```\n\n- 如果没有指定任何可见性修饰符，默认为`public`，意味：声明随处可见\n- 如果标记为`private`，则只在声明的文件中可见\n- 如果标记为`internal`，则在相同[`模块`](https://kotlinlang.org/docs/reference/visibility-modifiers.html#modules)中可见\n- 标记为`protected`，则不能为顶层访问\n```kotlin\n// file name: example.kt\npackage foo\nprivate fun foo() {} // 在example.kt内部可访问\npublic var bar: Int = 5 // 在任何地方可见\n private set         // setter 方法只在example.kt中可见\ninternal val baz = 6 // 在相同module中可见\n```\n## 类与接口\n对于类中声明的成员\n- private：只在声明的类中可见（包括类所有的成员函数）\n- protected：与private相似，但子类也可访问\n- internal：相同模块的任何client都访问类的internal成员\n- public：任何client都可访问类的public成员\n\n> Java开发注意：在kotlin中，外部类无法访问内部类的私有成员\n\n如果复写`protected`成员且没有显式指定可见修饰符，复写后的成员也具有`protected`可见性。\n```kotlin\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a 不可见\n    // b, c 和 d 可见\n    // Nested 和 e 可见\n\n    override val b = 5   // 'b' 为 protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b 不可见\n    // o.c 和 o.d are 可见（相同模块）\n    // Outer.Nested 不可见且 Nested::e 也不可见\n}\n```\n## 构造器\n使用下面的语法来指定类的首要构造器的可见性\n> 需要显式添加`constructor`关键字\n\n```kotlin\nclass C private constructor(a: Int) { ... }\n```\n类C的构造器为私有。默认的构造器都为`public`属性，也说明了只要可访问类，就能使用对应类的构造器。（如 internal类型的类，只在相同模块中访问）\n\n## 局部变量\n局部变量，函数和类没有可见性修饰符\n## 模块\n`internal`修饰符表示成员只能被相同模块访问。明确地说，Kotlin的模块是共同编译的一组文件：\n- `IntelliJ IDEA`模块\n- Maven或Gradle项目\n- 使用Ant构建编译的文件","slug":"Kotlin基础之类、继承、可见性修饰符","published":1,"updated":"2017-07-03T07:48:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxr000jc0m3vj5qet0m","content":"<h1 id=\"类与继承\"><a href=\"#类与继承\" class=\"headerlink\" title=\"类与继承\"></a>类与继承</h1><h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>在Kotlin中使用class声明类</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoice</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类声明由类名，类头部（指定类型参数，首要构造等）和用大括号包裹的类体组成。类头部和类体为可选；如果无类体，可省略花括号<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span></span></div></pre></td></tr></table></figure></p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>Kotlin的类可以有一个首要构造器和多个次要构造器。首要构造是类头部的一部分，跟在类名之后（参数类型可选）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">constructor</span></span>(firstName: String) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果首要构造没有任何注解或可见修饰符，<code>constructor</code>关键字可省略。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(firstName: String)&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首要构造不能含有任何代码。初始代码可以放在初始块中，初始块使用<code>init</code>前缀修饰：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span>(name: String)&#123;</div><div class=\"line\">    init &#123;</div><div class=\"line\">        logger.info(<span class=\"string\">\"Customer initialized with value <span class=\"subst\">$&#123;name&#125;</span>\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>首要构造的参数可以在init代码块中使用，也可以用来初始化类中声明的属性</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span>(name: String) &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> customerKey = name.toUpperCase()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>事实上，Kotlin有个简明语法在首要构造器中初始话声明的属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> firstName: String, <span class=\"keyword\">val</span> lastName: String, <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>与常规属性一样，声明在首要构造的属性可以是可变的（var）或只读（val）</p>\n<p>如果构造器有注解或可见修饰符，在构则要加上<code>constructor</code>关键字。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> <span class=\"keyword\">public</span> <span class=\"meta\">@Inject</span> <span class=\"keyword\">constructor</span></span>(name: String) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>更多查看<a href=\"https://kotlinlang.org/docs/reference/visibility-modifiers.html#constructors\" target=\"_blank\" rel=\"external\"><code>可见性修饰符</code></a></p>\n<h2 id=\"次要构造器\"><a href=\"#次要构造器\" class=\"headerlink\" title=\"次要构造器\"></a>次要构造器</h2><p>类可以声明次要构造器，使用<code>custructor</code>前缀修饰<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(parent: Person) &#123;</div><div class=\"line\">        parent.children.add(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果类有首要构造，每个次要构造器都需要委托给首要构造或间接地通过其他次要构造器。使用<code>this</code>关键字完成委托。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String) &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, parent: Person) : <span class=\"keyword\">this</span>(name) &#123;</div><div class=\"line\">        parent.children.add(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不是抽象类并且没有声明任何构造器，则生成一个无参首要构造。构造器可见性为public。如果不希望有public类型构造器，则需要声明一个空的非默认可见性的首要构造器<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DontCreateMe</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span> </span>() &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在JVM上，如果首要构造所有参数都有默认值，编译器生成一个使用默认值的额外参数构造器。可以让kotlin和像<code>Jackson</code>或<code>JPA</code>这样创建类的实例的库一起使用。</p>\n</blockquote>\n<pre><code>class Customer(val customerName: String = &quot;&quot;)\n</code></pre><h2 id=\"创建类的实例\"><a href=\"#创建类的实例\" class=\"headerlink\" title=\"创建类的实例\"></a>创建类的实例</h2><p>像常规函数一样调用构造器，来创建一个类的实例<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> invoice = Invoice()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> customer = Customer(<span class=\"string\">\"Joe Smith\"</span>)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>kotlin 没有<code>new</code>关键字</p>\n</blockquote>\n<p>查看关于创建<a href=\"https://kotlinlang.org/docs/reference/nested-classes.html\" target=\"_blank\" rel=\"external\"><code>嵌套类</code></a>的描述</p>\n<h2 id=\"类成员\"><a href=\"#类成员\" class=\"headerlink\" title=\"类成员\"></a>类成员</h2><p>类包含</p>\n<ul>\n<li>构造器和初始块</li>\n<li><a href=\"https://kotlinlang.org/docs/reference/functions.html\" target=\"_blank\" rel=\"external\">函数</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"external\">属性</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/nested-classes.html\" target=\"_blank\" rel=\"external\">嵌套和内部类</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/object-declarations.html\" target=\"_blank\" rel=\"external\">对象声明</a></li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>所有Kotlin类都有一个共通的超类Any。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> // <span class=\"title\">Implicitly</span> <span class=\"title\">inherits</span> <span class=\"title\">from</span> <span class=\"title\">Any</span></span></div></pre></td></tr></table></figure></p>\n<p><code>Any</code>不是<code>java.lang.Object</code>;除了<code>equals()</code>，<code>hashCode()</code>，<code>toString()</code>，没有其他的成员。详情查看<a href=\"https://kotlinlang.org/docs/reference/java-interop.html#object-methods\" target=\"_blank\" rel=\"external\"><code>Java协同</code></a>小节</p>\n<p>在类头部的尾部来声明明确的父类类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span>(p: <span class=\"built_in\">Int</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span></span>(p: <span class=\"built_in\">Int</span>) : Base(p)</div></pre></td></tr></table></figure></p>\n<p>如果类有一个首要构造，则必须使用首要构造器初始化基类。</p>\n<p>如果类没有首要构造器，则每个次要构造器使用<code>super</code>关键字初始化基类或委托给其他构造执行。</p>\n<blockquote>\n<p>不同次要构造器可以调用不同基类构造</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyView</span> : <span class=\"type\">View &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(ctx: Context) : <span class=\"keyword\">super</span>(ctx)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(ctx: Context, attrs: AttributeSet) : <span class=\"keyword\">super</span>(ctx, attrs)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类的<code>open</code>注解与Java的<code>final</code>意义相反：允许其他类继承本类。kotlin默认的所有类都是final类型，对应<a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\" target=\"_blank\" rel=\"external\"><code>Effective Java</code></a>中第17条：<code>要么为继承而设计，并提供文档说明，要么就禁止继承</code>。</p>\n<h2 id=\"复写方法\"><a href=\"#复写方法\" class=\"headerlink\" title=\"复写方法\"></a>复写方法</h2><p>如上面说到，Kotlin 力求事情明确。与Java不同，Kotlin需要明确的可复写的成员（Koltin称为open）和复写<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">nv</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span></span>() : Base() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Derived.v()</code>需要<code>override</code>，如果缺失，编译则给出抗议。如果函数没有<code>open</code>注解，如<code>Base.nv()</code>，则在子类中声明相同签名的方法，无论使用或不使用<code>override</code>注解都是非法的。在final类（没有使用<code>open</code>注解）中，禁止注解open成员。</p>\n<p>标记为<code>override</code>的成员函数可以被子类复写。如果禁止复写，使用<code>final</code>关键字<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnotherDerived</span></span>() : Base() &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"复写属性\"><a href=\"#复写属性\" class=\"headerlink\" title=\"复写属性\"></a>复写属性</h2><p>复写属性原理与复写方法相似；超类中声明的属性并在派生类中重新声明，必须使用<code>override</code>在前面标记，并且具有兼容的类型。每个声明的属性可以被有初始化操作或有<code>getter</code>方法的属性复写。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span> <span class=\"keyword\">get</span> &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar1</span> : <span class=\"type\">Foo</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span> = ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以使用var属性来复写val属性，反过来不可。因为val属性本质上声明了getter方法，复写为<code>var</code>属性在派生类中声明了<code>setter</code>方法</p>\n<blockquote>\n<p>可以在首要构造器中使用<code>override</code>关键字来声明属性</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> count: <span class=\"built_in\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar1</span></span>(<span class=\"keyword\">override</span> <span class=\"keyword\">val</span> count: <span class=\"built_in\">Int</span>) : Foo</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar2</span> : <span class=\"type\">Foo &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> count: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"复写规则\"><a href=\"#复写规则\" class=\"headerlink\" title=\"复写规则\"></a>复写规则</h2><p>Koltin定义了实现继承的规则。如果类继承它直接超类的相同成员的多个实现，则必须复写这个方法并且提供自己实现。为了表示采用的继承实现父型，需要使用<code>super</code>修饰尖括号中的超类类型，如：<code>super&lt;Base&gt;</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123; print(<span class=\"string\">\"A\"</span>) &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"a\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123; print(<span class=\"string\">\"B\"</span>) &#125;</div><div class=\"line\">    funcb() &#123; print(<span class=\"string\">\"b\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>() : A() , B&#123;</div><div class=\"line\">    <span class=\"comment\">// The compiler requires f() to be overridden:</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;A&gt;.f() <span class=\"comment\">// call to A.f()</span></div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.f() <span class=\"comment\">// call to B.f()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同时继承A和B，对于函数<code>a()</code>和函数<code>b()</code>没有问题，因为<code>C</code>只继承了这些函数一个实现。但是对于函数<code>f()</code>，有<code>C</code>的两个实现，因此必须要复写<code>f()</code>，并由<code>C</code>提供自己的显示来消除歧义。</p>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>类和它一些成员可以声明为<code>abstract</code>。抽象成员在当前类没有具体实现。</p>\n<blockquote>\n<p>不言而喻，抽象类或抽象函数无须使用open注解</p>\n</blockquote>\n<p>可以使用抽象来复写非抽象的open函数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> : <span class=\"type\">Base</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h2><p>与Java，C++不同的是，Kotlin没有静态方法。在多数类中，建议使用包级函数替代。</p>\n<p>如果需要写一个不用类的实例来调用的函数，但要通过访问类的内部信息（如：工厂方法），可以在类中写作为<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html\" target=\"_blank\" rel=\"external\"><code>对象声明</code></a>成员。</p>\n<p>更为特殊的情况，如果在类中声明<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects\" target=\"_blank\" rel=\"external\"><code>伴生对象</code></a>，就可以只使用类的名称作为限定符来调用成员，就好像Java/C#中调用静态方法那样。</p>\n<h1 id=\"可见性修饰符\"><a href=\"#可见性修饰符\" class=\"headerlink\" title=\"可见性修饰符\"></a>可见性修饰符</h1><p>类、对象、接口、构造器、函数、属性和他们的<code>setter</code>都可以有可见性修饰符（Getters与属性相同的修饰符）。Kotlin有四种可见性修饰符：<code>private</code>，<code>protected</code>，<code>internal</code>和<code>public</code>。默认可见性为<code>public</code>。</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><p>函数，属性，和类，对象和接口都可以在上层中声明。如：直接在包中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file name: example.kt</span></div><div class=\"line\"><span class=\"keyword\">package</span> foo</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">baz</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>如果没有指定任何可见性修饰符，默认为<code>public</code>，意味：声明随处可见</li>\n<li>如果标记为<code>private</code>，则只在声明的文件中可见</li>\n<li>如果标记为<code>internal</code>，则在相同<a href=\"https://kotlinlang.org/docs/reference/visibility-modifiers.html#modules\" target=\"_blank\" rel=\"external\"><code>模块</code></a>中可见</li>\n<li>标记为<code>protected</code>，则不能为顶层访问<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file name: example.kt</span></div><div class=\"line\"><span class=\"keyword\">package</span> foo</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125; <span class=\"comment\">// 在example.kt内部可访问</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> bar: <span class=\"built_in\">Int</span> = <span class=\"number\">5</span> <span class=\"comment\">// 在任何地方可见</span></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>         <span class=\"comment\">// setter 方法只在example.kt中可见</span></div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">val</span> baz = <span class=\"number\">6</span> <span class=\"comment\">// 在相同module中可见</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"类与接口\"><a href=\"#类与接口\" class=\"headerlink\" title=\"类与接口\"></a>类与接口</h2><p>对于类中声明的成员</p>\n<ul>\n<li>private：只在声明的类中可见（包括类所有的成员函数）</li>\n<li>protected：与private相似，但子类也可访问</li>\n<li>internal：相同模块的任何client都访问类的internal成员</li>\n<li>public：任何client都可访问类的public成员</li>\n</ul>\n<blockquote>\n<p>Java开发注意：在kotlin中，外部类无法访问内部类的私有成员</p>\n</blockquote>\n<p>如果复写<code>protected</code>成员且没有显式指定可见修饰符，复写后的成员也具有<code>protected</code>可见性。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> a = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"keyword\">val</span> b = <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">val</span> c = <span class=\"number\">3</span></div><div class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"number\">4</span>  <span class=\"comment\">// public by default</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nested</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">val</span> e: <span class=\"built_in\">Int</span> = <span class=\"number\">5</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subclass</span> : <span class=\"type\">Outer</span></span>() &#123;</div><div class=\"line\">    <span class=\"comment\">// a 不可见</span></div><div class=\"line\">    <span class=\"comment\">// b, c 和 d 可见</span></div><div class=\"line\">    <span class=\"comment\">// Nested 和 e 可见</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> b = <span class=\"number\">5</span>   <span class=\"comment\">// 'b' 为 protected</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unrelated</span></span>(o: Outer) &#123;</div><div class=\"line\">    <span class=\"comment\">// o.a, o.b 不可见</span></div><div class=\"line\">    <span class=\"comment\">// o.c 和 o.d are 可见（相同模块）</span></div><div class=\"line\">    <span class=\"comment\">// Outer.Nested 不可见且 Nested::e 也不可见</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"构造器-1\"><a href=\"#构造器-1\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>使用下面的语法来指定类的首要构造器的可见性</p>\n<blockquote>\n<p>需要显式添加<code>constructor</code>关键字</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>(a: <span class=\"built_in\">Int</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>类C的构造器为私有。默认的构造器都为<code>public</code>属性，也说明了只要可访问类，就能使用对应类的构造器。（如 internal类型的类，只在相同模块中访问）</p>\n<h2 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h2><p>局部变量，函数和类没有可见性修饰符</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p><code>internal</code>修饰符表示成员只能被相同模块访问。明确地说，Kotlin的模块是共同编译的一组文件：</p>\n<ul>\n<li><code>IntelliJ IDEA</code>模块</li>\n<li>Maven或Gradle项目</li>\n<li>使用Ant构建编译的文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"类与继承\"><a href=\"#类与继承\" class=\"headerlink\" title=\"类与继承\"></a>类与继承</h1><h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>在Kotlin中使用class声明类</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoice</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类声明由类名，类头部（指定类型参数，首要构造等）和用大括号包裹的类体组成。类头部和类体为可选；如果无类体，可省略花括号<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span></span></div></pre></td></tr></table></figure></p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>Kotlin的类可以有一个首要构造器和多个次要构造器。首要构造是类头部的一部分，跟在类名之后（参数类型可选）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">constructor</span></span>(firstName: String) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果首要构造没有任何注解或可见修饰符，<code>constructor</code>关键字可省略。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(firstName: String)&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首要构造不能含有任何代码。初始代码可以放在初始块中，初始块使用<code>init</code>前缀修饰：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span>(name: String)&#123;</div><div class=\"line\">    init &#123;</div><div class=\"line\">        logger.info(<span class=\"string\">\"Customer initialized with value <span class=\"subst\">$&#123;name&#125;</span>\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>首要构造的参数可以在init代码块中使用，也可以用来初始化类中声明的属性</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span>(name: String) &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> customerKey = name.toUpperCase()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>事实上，Kotlin有个简明语法在首要构造器中初始话声明的属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> firstName: String, <span class=\"keyword\">val</span> lastName: String, <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>与常规属性一样，声明在首要构造的属性可以是可变的（var）或只读（val）</p>\n<p>如果构造器有注解或可见修饰符，在构则要加上<code>constructor</code>关键字。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> <span class=\"keyword\">public</span> <span class=\"meta\">@Inject</span> <span class=\"keyword\">constructor</span></span>(name: String) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>更多查看<a href=\"https://kotlinlang.org/docs/reference/visibility-modifiers.html#constructors\" target=\"_blank\" rel=\"external\"><code>可见性修饰符</code></a></p>\n<h2 id=\"次要构造器\"><a href=\"#次要构造器\" class=\"headerlink\" title=\"次要构造器\"></a>次要构造器</h2><p>类可以声明次要构造器，使用<code>custructor</code>前缀修饰<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(parent: Person) &#123;</div><div class=\"line\">        parent.children.add(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果类有首要构造，每个次要构造器都需要委托给首要构造或间接地通过其他次要构造器。使用<code>this</code>关键字完成委托。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String) &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, parent: Person) : <span class=\"keyword\">this</span>(name) &#123;</div><div class=\"line\">        parent.children.add(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不是抽象类并且没有声明任何构造器，则生成一个无参首要构造。构造器可见性为public。如果不希望有public类型构造器，则需要声明一个空的非默认可见性的首要构造器<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DontCreateMe</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span> </span>() &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在JVM上，如果首要构造所有参数都有默认值，编译器生成一个使用默认值的额外参数构造器。可以让kotlin和像<code>Jackson</code>或<code>JPA</code>这样创建类的实例的库一起使用。</p>\n</blockquote>\n<pre><code>class Customer(val customerName: String = &quot;&quot;)\n</code></pre><h2 id=\"创建类的实例\"><a href=\"#创建类的实例\" class=\"headerlink\" title=\"创建类的实例\"></a>创建类的实例</h2><p>像常规函数一样调用构造器，来创建一个类的实例<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> invoice = Invoice()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> customer = Customer(<span class=\"string\">\"Joe Smith\"</span>)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>kotlin 没有<code>new</code>关键字</p>\n</blockquote>\n<p>查看关于创建<a href=\"https://kotlinlang.org/docs/reference/nested-classes.html\" target=\"_blank\" rel=\"external\"><code>嵌套类</code></a>的描述</p>\n<h2 id=\"类成员\"><a href=\"#类成员\" class=\"headerlink\" title=\"类成员\"></a>类成员</h2><p>类包含</p>\n<ul>\n<li>构造器和初始块</li>\n<li><a href=\"https://kotlinlang.org/docs/reference/functions.html\" target=\"_blank\" rel=\"external\">函数</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"external\">属性</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/nested-classes.html\" target=\"_blank\" rel=\"external\">嵌套和内部类</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/object-declarations.html\" target=\"_blank\" rel=\"external\">对象声明</a></li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>所有Kotlin类都有一个共通的超类Any。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> // <span class=\"title\">Implicitly</span> <span class=\"title\">inherits</span> <span class=\"title\">from</span> <span class=\"title\">Any</span></span></div></pre></td></tr></table></figure></p>\n<p><code>Any</code>不是<code>java.lang.Object</code>;除了<code>equals()</code>，<code>hashCode()</code>，<code>toString()</code>，没有其他的成员。详情查看<a href=\"https://kotlinlang.org/docs/reference/java-interop.html#object-methods\" target=\"_blank\" rel=\"external\"><code>Java协同</code></a>小节</p>\n<p>在类头部的尾部来声明明确的父类类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span>(p: <span class=\"built_in\">Int</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span></span>(p: <span class=\"built_in\">Int</span>) : Base(p)</div></pre></td></tr></table></figure></p>\n<p>如果类有一个首要构造，则必须使用首要构造器初始化基类。</p>\n<p>如果类没有首要构造器，则每个次要构造器使用<code>super</code>关键字初始化基类或委托给其他构造执行。</p>\n<blockquote>\n<p>不同次要构造器可以调用不同基类构造</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyView</span> : <span class=\"type\">View &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(ctx: Context) : <span class=\"keyword\">super</span>(ctx)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(ctx: Context, attrs: AttributeSet) : <span class=\"keyword\">super</span>(ctx, attrs)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类的<code>open</code>注解与Java的<code>final</code>意义相反：允许其他类继承本类。kotlin默认的所有类都是final类型，对应<a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\" target=\"_blank\" rel=\"external\"><code>Effective Java</code></a>中第17条：<code>要么为继承而设计，并提供文档说明，要么就禁止继承</code>。</p>\n<h2 id=\"复写方法\"><a href=\"#复写方法\" class=\"headerlink\" title=\"复写方法\"></a>复写方法</h2><p>如上面说到，Kotlin 力求事情明确。与Java不同，Kotlin需要明确的可复写的成员（Koltin称为open）和复写<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">nv</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span></span>() : Base() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Derived.v()</code>需要<code>override</code>，如果缺失，编译则给出抗议。如果函数没有<code>open</code>注解，如<code>Base.nv()</code>，则在子类中声明相同签名的方法，无论使用或不使用<code>override</code>注解都是非法的。在final类（没有使用<code>open</code>注解）中，禁止注解open成员。</p>\n<p>标记为<code>override</code>的成员函数可以被子类复写。如果禁止复写，使用<code>final</code>关键字<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnotherDerived</span></span>() : Base() &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"复写属性\"><a href=\"#复写属性\" class=\"headerlink\" title=\"复写属性\"></a>复写属性</h2><p>复写属性原理与复写方法相似；超类中声明的属性并在派生类中重新声明，必须使用<code>override</code>在前面标记，并且具有兼容的类型。每个声明的属性可以被有初始化操作或有<code>getter</code>方法的属性复写。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span> <span class=\"keyword\">get</span> &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar1</span> : <span class=\"type\">Foo</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span> = ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以使用var属性来复写val属性，反过来不可。因为val属性本质上声明了getter方法，复写为<code>var</code>属性在派生类中声明了<code>setter</code>方法</p>\n<blockquote>\n<p>可以在首要构造器中使用<code>override</code>关键字来声明属性</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> count: <span class=\"built_in\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar1</span></span>(<span class=\"keyword\">override</span> <span class=\"keyword\">val</span> count: <span class=\"built_in\">Int</span>) : Foo</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar2</span> : <span class=\"type\">Foo &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> count: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"复写规则\"><a href=\"#复写规则\" class=\"headerlink\" title=\"复写规则\"></a>复写规则</h2><p>Koltin定义了实现继承的规则。如果类继承它直接超类的相同成员的多个实现，则必须复写这个方法并且提供自己实现。为了表示采用的继承实现父型，需要使用<code>super</code>修饰尖括号中的超类类型，如：<code>super&lt;Base&gt;</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123; print(<span class=\"string\">\"A\"</span>) &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"a\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123; print(<span class=\"string\">\"B\"</span>) &#125;</div><div class=\"line\">    funcb() &#123; print(<span class=\"string\">\"b\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>() : A() , B&#123;</div><div class=\"line\">    <span class=\"comment\">// The compiler requires f() to be overridden:</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;A&gt;.f() <span class=\"comment\">// call to A.f()</span></div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.f() <span class=\"comment\">// call to B.f()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同时继承A和B，对于函数<code>a()</code>和函数<code>b()</code>没有问题，因为<code>C</code>只继承了这些函数一个实现。但是对于函数<code>f()</code>，有<code>C</code>的两个实现，因此必须要复写<code>f()</code>，并由<code>C</code>提供自己的显示来消除歧义。</p>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>类和它一些成员可以声明为<code>abstract</code>。抽象成员在当前类没有具体实现。</p>\n<blockquote>\n<p>不言而喻，抽象类或抽象函数无须使用open注解</p>\n</blockquote>\n<p>可以使用抽象来复写非抽象的open函数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> : <span class=\"type\">Base</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h2><p>与Java，C++不同的是，Kotlin没有静态方法。在多数类中，建议使用包级函数替代。</p>\n<p>如果需要写一个不用类的实例来调用的函数，但要通过访问类的内部信息（如：工厂方法），可以在类中写作为<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html\" target=\"_blank\" rel=\"external\"><code>对象声明</code></a>成员。</p>\n<p>更为特殊的情况，如果在类中声明<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects\" target=\"_blank\" rel=\"external\"><code>伴生对象</code></a>，就可以只使用类的名称作为限定符来调用成员，就好像Java/C#中调用静态方法那样。</p>\n<h1 id=\"可见性修饰符\"><a href=\"#可见性修饰符\" class=\"headerlink\" title=\"可见性修饰符\"></a>可见性修饰符</h1><p>类、对象、接口、构造器、函数、属性和他们的<code>setter</code>都可以有可见性修饰符（Getters与属性相同的修饰符）。Kotlin有四种可见性修饰符：<code>private</code>，<code>protected</code>，<code>internal</code>和<code>public</code>。默认可见性为<code>public</code>。</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><p>函数，属性，和类，对象和接口都可以在上层中声明。如：直接在包中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file name: example.kt</span></div><div class=\"line\"><span class=\"keyword\">package</span> foo</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">baz</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>如果没有指定任何可见性修饰符，默认为<code>public</code>，意味：声明随处可见</li>\n<li>如果标记为<code>private</code>，则只在声明的文件中可见</li>\n<li>如果标记为<code>internal</code>，则在相同<a href=\"https://kotlinlang.org/docs/reference/visibility-modifiers.html#modules\" target=\"_blank\" rel=\"external\"><code>模块</code></a>中可见</li>\n<li>标记为<code>protected</code>，则不能为顶层访问<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file name: example.kt</span></div><div class=\"line\"><span class=\"keyword\">package</span> foo</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125; <span class=\"comment\">// 在example.kt内部可访问</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> bar: <span class=\"built_in\">Int</span> = <span class=\"number\">5</span> <span class=\"comment\">// 在任何地方可见</span></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>         <span class=\"comment\">// setter 方法只在example.kt中可见</span></div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">val</span> baz = <span class=\"number\">6</span> <span class=\"comment\">// 在相同module中可见</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"类与接口\"><a href=\"#类与接口\" class=\"headerlink\" title=\"类与接口\"></a>类与接口</h2><p>对于类中声明的成员</p>\n<ul>\n<li>private：只在声明的类中可见（包括类所有的成员函数）</li>\n<li>protected：与private相似，但子类也可访问</li>\n<li>internal：相同模块的任何client都访问类的internal成员</li>\n<li>public：任何client都可访问类的public成员</li>\n</ul>\n<blockquote>\n<p>Java开发注意：在kotlin中，外部类无法访问内部类的私有成员</p>\n</blockquote>\n<p>如果复写<code>protected</code>成员且没有显式指定可见修饰符，复写后的成员也具有<code>protected</code>可见性。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> a = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"keyword\">val</span> b = <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">val</span> c = <span class=\"number\">3</span></div><div class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"number\">4</span>  <span class=\"comment\">// public by default</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nested</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">val</span> e: <span class=\"built_in\">Int</span> = <span class=\"number\">5</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subclass</span> : <span class=\"type\">Outer</span></span>() &#123;</div><div class=\"line\">    <span class=\"comment\">// a 不可见</span></div><div class=\"line\">    <span class=\"comment\">// b, c 和 d 可见</span></div><div class=\"line\">    <span class=\"comment\">// Nested 和 e 可见</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> b = <span class=\"number\">5</span>   <span class=\"comment\">// 'b' 为 protected</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unrelated</span></span>(o: Outer) &#123;</div><div class=\"line\">    <span class=\"comment\">// o.a, o.b 不可见</span></div><div class=\"line\">    <span class=\"comment\">// o.c 和 o.d are 可见（相同模块）</span></div><div class=\"line\">    <span class=\"comment\">// Outer.Nested 不可见且 Nested::e 也不可见</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"构造器-1\"><a href=\"#构造器-1\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>使用下面的语法来指定类的首要构造器的可见性</p>\n<blockquote>\n<p>需要显式添加<code>constructor</code>关键字</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>(a: <span class=\"built_in\">Int</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>类C的构造器为私有。默认的构造器都为<code>public</code>属性，也说明了只要可访问类，就能使用对应类的构造器。（如 internal类型的类，只在相同模块中访问）</p>\n<h2 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h2><p>局部变量，函数和类没有可见性修饰符</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p><code>internal</code>修饰符表示成员只能被相同模块访问。明确地说，Kotlin的模块是共同编译的一组文件：</p>\n<ul>\n<li><code>IntelliJ IDEA</code>模块</li>\n<li>Maven或Gradle项目</li>\n<li>使用Ant构建编译的文件</li>\n</ul>\n"},{"title":"Kotlin基础之泛型","date":"2017-07-03T07:49:52.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 泛型\n与Java一样，Koltin的类也有类型参数\n```kotlin\nclass Box<T>(t: T){\n    var value = t\n}\n```\n常规来说，创建这样的类，需要提供具体的类型\n```kotlin\nval box: Box<Int> = Box<Int>(1)\n```\n当类型可以从构造参数或其他上下文中推断出时，可以忽略类型参数\n```kotlin\nval box = Box(1) // 1 has type Int, so the compiler figures out that we are talking about Box<Int>\n```\n## 变型\nJava类型系统中最复杂的其中一个部分就是通配符类型（[`Java泛型FAQ`](http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html)）。而Kotlin没有任何的通配符类型，它使用`声明处变型`和`类型投影`两种方式替代。\n\n通配符 - 使用问号表示的类型参数，表示未知类型的类型约束方法。\n\n首先，先思考为什么Java需要这些难以理解的通配符。[`Effective Java`](http://www.oracle.com/technetwork/java/effectivejava-136174.html)解释了这个问题，第28条：使用受限通配符来增加API灵活性。首先，Java中泛型为不可变类型，意味`List<String>`不是`List<Object>`的子类型。为什么这样？如果List为可变量，`List<>`不会比Java的数组更好，并且下面的代码能够成功编译，但在运行时会引起异常。\n```kotlin\n// Java\nList<String> strs = new ArrayList<String>();\nList<Object> objs = strs; // 会引起错误，Java禁止这样使用。\nobjs.add(1);  // Here we put an Integer into a list of Strings\nString s = strs.get(0); // 类转换异常：无法将Integer转换为String\n\n```\n所以Java禁止这样做，目的是保证运行时安全。但会有一些影响。比如：`Collection`接口的`addAll()`方法，这个方法的签名是什么？我们直觉上会这样做：\n```kotlin\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<E> items);\n}\n```\n考虑到运行时安全，我们无法做到像下面的简单操作。\n```kotlin\n// Java\nvoid copyAll(Collection<Object> to, Collection<String> from) {\n  to.addAll(from); // !!! Would not compile with the naive declaration of addAll:\n                   //       Collection<String> is not a subtype of Collection<Object>\n}\n```\n> 在Java中学到的教训，就是[`Effective Java 第25条`](http://www.oracle.com/technetwork/java/effectivejava-136174.html)：Prefer lists to arrays\n\n实际上，`addAll()`的方法签名是：\n```kotlin\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<? extends E> items);\n}\n```\n通配符参数`? extends E`表明方法接收类型为`E`的子类集合，而非`E`本身。意味着可以安全读取集合中为`E`的值（集合的元素类型为`E`的子类实例），但无法写入`E`，因为我们不知道对象是否是E未知的子类。作为交换，我们希望得到这些行为：`Collection<String>`为`Collection<? extends Object>`子类型，带有`extends`或`upper`限制的通配符让类型变为[`协变`](https://msdn.microsoft.com/zh-cn/library/dd799517.aspx)。\n\n理解这点很简单：如果只从集合中获取item，可使用`String`的集合来读取`Object`。相反，如果只向集合放入item，可以向`Object`集合中放入`String`类型。Java中使用`List<Object>`表示`List<? super String>`的超类。\n\n后一个被称为协变量，只能调用基于`List<? super String>`，且使用`String`作为参数的方法（如：可以调用`add(String)`或`set(int, String)`）,而如果你调用`List<T>`返回的`T`，只能获取到Object类型，而不是`String`。\n\n`Joshua Bloch`成只能读取的对象为`生产者`，只能写入的对象为`消费者`。他建议:`为了最大化灵活性，在表示消费者和生产者的输入参数上使用通配符类型`，并提供下面的话来方便记忆：\n\n`PECS`：表示Producer-Extends， Consumer-Super。\n\n> 如果使用生产者对象，比如说`List<? extends Foo>`，不能在这个对象上调用`add()`或`set`方法,但并不表示这个对象是不变的：如不会禁止调用`clear()`来清空list，因为`clear()`没有任何参数。通配符（或其他变型的类型）能够保证类型安全，非可变则是完全不同的说法。\n\n## 声明点变型\n\n假设现有一个`Source<T>`泛型接口，没有使用`T`作为参数的方法，只有一个返回`T`的方法\n```kotlin\n// Java\ninterface Source<T> {\n  T nextT();\n}\n```\n那么使用`Source<Object>`的变型来存储`Source<String>`实例引用是类型安全的（因为没有消费者方法）。但是Java仍会禁止这样做：\n\n```java\n// Java\nvoid demo(Source<String> strs) {\n  Source<Object> objects = strs; // !!! Not allowed in Java\n  // ...\n}\n```\n可以声明`Source<? extends Object>`来解决。\n\n在Kotlin中，使用`声明点变型`(declaration-site variance)向编译器解释。使用`out`修饰符注解类型`T`,确保只返回（生产者）`Source<T>`成员，而从不写入（消费）。\n```kotlin\nabstract class Source<out T> {\n    abstract fun nextT(): T\n}\n\nfun demo(strs: Source<String>) {\n    val objects: Source<Any> = strs // This is OK, since T is an out-parameter\n    // ...\n}\n```\n泛型规则：当类`C`的泛型参数`T`声明为`out`时，表示T只能出现在C成员的输出位置，作为交换，`C<Base>`是`C<Derived>`类型安全的超类。\n\n称类`C`是参数`T`的协变量，或`T`是协变量类型参数。可以认为类`C`是`T`的生产者，而不是`T`的消费者。\n\n`out`修饰符称为变型注解，因为它提供了类型参数声明点，因此称之为声明点类型。\n\n除了`out`，kotlin提供了一个补充的变型注解：`in`。让类型参数变为`逆变量`：只能消费，从不生产。`Comparable`就是`协变量`一个很好的例子。\n```kotlin\nabstract class Comparable<in T> {\n    abstract fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable<Number>) {\n    x.compareTo(1.0) // 1.0 has type Double, which is a subtype of Number\n    // Thus, we can assign x to a variable of type Comparable<Double>\n    val y: Comparable<Double> = x // OK!\n}\n\n```\n## 类型投影\n使用处变型：类型投影\n声明类型参数T为*out*很方便，避免在使用处子类型化。但一些类实际时无法限制只返回`T`，`Array`就是一个很好的例子：\n```kotlin\nclass Array<T>(val size: Int){\n    fun get(index: Int): T{ /*...*/}\n    fun set(index: Int , value: T){/*...*/}\n}\n```\n`Array`类既不是T的协变，也不是T的逆变，导致不够灵活。考虑下面的函数：\n```kotlin\nfun copy(from: Array<Any> , to: Array<Any>){\n    assert(from.size == to.size)\n    for(i in from.indices)\n        to[i] = from[i]\n    \n}\n```\n函数应该是从拷贝数组中数据到另一个数组，下面将函数用在实际中：\n```kotlin\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3){ \"\"}\ncopy(ints , ant) // 错误：expects(Array<Any>, Array<Any>)\n```\n遇到了相同的问题：`Array<T>`是不变的，`T`类型的数组，所以`Array<Int>`和`Array<Any>`都不是对方的子类。因为copy可能会坏事，可能会进行写操作，比如像`from`写入String，而实际上这里传入的是`Int`数组，运行时就能出现`ClassCastException`异常。\n\n因此，只需要保证`copy`不会做坏事，禁止向`from`写数据，可以这样做：\n```kotlin\nfun copy(from: Array<out Any> , to: Array<Any>){\n    //...\n}\n```\n这样做法被称为`类型投影`(type projection)，也是说`from`不是一个简单数组，而是受限（投影）类型：只能够调用那些返回类型为`T`的方法，在这种情况意味着只能调用`get`，这也是使用`使用出变型`的目的，对应java的`Array<? extends Object>`，但是是通过一个更为简单的方法。\n\n也可以使用`in`来投影类型\n```kotlin\nfun fill(dest: Array<in String> , value: String){\n    // ...\n}\n```\n\n`Array<in String>`对应Java的`Array<? super String>`。如向`fill`函数传入`CharSequence`或`Object`数组。\n\n\n## 星号投影\n有时不知道类型参数任何信息，但仍希望安全地使用。此时安全地定义投影的泛型，每个泛型的具体实例都是泛型的子类型。\n为此，Kotlin提供称为`星号投影`的语法\n- 对于`Foo<out T>`，`T`为带有上界`TUpper`的协变量，`Foo<*>`等价于`Foo<out TUpper>`。意味着`T`类型未知时，可以安全地读取`Foo<*>`中`TUpper`的值\n- 对于`Foo<in T>`，`T`为逆变类型参数，`Foo<*>`等价于`Foo<in Nothing>`，意味着当`T`类型未知时，无法安全写入`Foo<*>`\n- 对于`Foo<T>`，`T`为不可变类型参数，带有上界`TUpper`，`Foo<*>`等价于`Foo<out TUpper>`用于读取和`Foo<in Nothing>`用于写入值。\n\n如果泛型有多个类型参数，则每个都可以独立投影。比如，如果类型声明为`interface Function<in T, out U>`，可以设想下面的星号投影\n\n- `Function<*, String>` 意味 `Function<in Nothing, String>`\n- `Function<Int, *> ` 意味 `Function<Int, out Any?>`\n- `Function<*, *>` 意味 `Function<in Nothing, out Any?>`\n\n> 星号投影与Java`raw`类型相似，但是安全。\n\n## 泛型函数\n不仅类可以有类型参数，函数也可以有。函数的类型参数在函数名之前声明：\n```kotlin\nfun <T> SingletonList(item: T ): List<T>{\n    // ...\n}\n\nfun <T> T.basicToString() : String { // 扩展函数\n    // ...\n}\n```\n调用泛型函数，在调用的函数名之后指定具体类型参数\n```kotlin\nval l = SingletonList<Int>(1)\n```\n\n## 泛型约束\n\n所有可以被指定类型参数替代的类型，都可以使用泛型约束进行限制。\n\n## 上界\n最常见的泛型约束就是上界，对应java的extends关键字\n\n```kotlin\nfun <T : Comparable<T>> sort(list: List<T>){\n    // ...\n}\n```\n在冒号之后指定的类型就是上界，只有`Comparable<T>`子类才能替换`T`。如：\n\n```kotlin\nsort(listOf(1, 2, 3)) // 可以。Int是Comparable<Int>的子类\nsort(listOf(HashMap<Int, String>()))  // 错误。HashMap<Int, String>不是Comparable<HashMap<Int, String>>的子类\n```\n默认上界类型为`Any?`。尖括号中只允许指定一个上界。可使用`where`条件语句指定超过一个的上界\n\n```kotlin\nfun <T> cloneWhenGreater(list: List<T> , threshold: T): List<T> \n    where T : Comparable ,\n          T : Cloneable {\n    return list.filter{it -> threshold }.map { it.clone()}              \n}\n```\n\n## 参考\n\n[里氏替换原则](https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99)\n\n[协变与逆变](https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98)\n\n[泛型中的协变和逆变](https://msdn.microsoft.com/zh-cn/library/dd799517.aspx)","source":"_posts/Kotlin基础之泛型.md","raw":"---\ntitle: Kotlin基础之泛型\ndate: 2017-07-03 15:49:52\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 泛型\n与Java一样，Koltin的类也有类型参数\n```kotlin\nclass Box<T>(t: T){\n    var value = t\n}\n```\n常规来说，创建这样的类，需要提供具体的类型\n```kotlin\nval box: Box<Int> = Box<Int>(1)\n```\n当类型可以从构造参数或其他上下文中推断出时，可以忽略类型参数\n```kotlin\nval box = Box(1) // 1 has type Int, so the compiler figures out that we are talking about Box<Int>\n```\n## 变型\nJava类型系统中最复杂的其中一个部分就是通配符类型（[`Java泛型FAQ`](http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html)）。而Kotlin没有任何的通配符类型，它使用`声明处变型`和`类型投影`两种方式替代。\n\n通配符 - 使用问号表示的类型参数，表示未知类型的类型约束方法。\n\n首先，先思考为什么Java需要这些难以理解的通配符。[`Effective Java`](http://www.oracle.com/technetwork/java/effectivejava-136174.html)解释了这个问题，第28条：使用受限通配符来增加API灵活性。首先，Java中泛型为不可变类型，意味`List<String>`不是`List<Object>`的子类型。为什么这样？如果List为可变量，`List<>`不会比Java的数组更好，并且下面的代码能够成功编译，但在运行时会引起异常。\n```kotlin\n// Java\nList<String> strs = new ArrayList<String>();\nList<Object> objs = strs; // 会引起错误，Java禁止这样使用。\nobjs.add(1);  // Here we put an Integer into a list of Strings\nString s = strs.get(0); // 类转换异常：无法将Integer转换为String\n\n```\n所以Java禁止这样做，目的是保证运行时安全。但会有一些影响。比如：`Collection`接口的`addAll()`方法，这个方法的签名是什么？我们直觉上会这样做：\n```kotlin\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<E> items);\n}\n```\n考虑到运行时安全，我们无法做到像下面的简单操作。\n```kotlin\n// Java\nvoid copyAll(Collection<Object> to, Collection<String> from) {\n  to.addAll(from); // !!! Would not compile with the naive declaration of addAll:\n                   //       Collection<String> is not a subtype of Collection<Object>\n}\n```\n> 在Java中学到的教训，就是[`Effective Java 第25条`](http://www.oracle.com/technetwork/java/effectivejava-136174.html)：Prefer lists to arrays\n\n实际上，`addAll()`的方法签名是：\n```kotlin\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<? extends E> items);\n}\n```\n通配符参数`? extends E`表明方法接收类型为`E`的子类集合，而非`E`本身。意味着可以安全读取集合中为`E`的值（集合的元素类型为`E`的子类实例），但无法写入`E`，因为我们不知道对象是否是E未知的子类。作为交换，我们希望得到这些行为：`Collection<String>`为`Collection<? extends Object>`子类型，带有`extends`或`upper`限制的通配符让类型变为[`协变`](https://msdn.microsoft.com/zh-cn/library/dd799517.aspx)。\n\n理解这点很简单：如果只从集合中获取item，可使用`String`的集合来读取`Object`。相反，如果只向集合放入item，可以向`Object`集合中放入`String`类型。Java中使用`List<Object>`表示`List<? super String>`的超类。\n\n后一个被称为协变量，只能调用基于`List<? super String>`，且使用`String`作为参数的方法（如：可以调用`add(String)`或`set(int, String)`）,而如果你调用`List<T>`返回的`T`，只能获取到Object类型，而不是`String`。\n\n`Joshua Bloch`成只能读取的对象为`生产者`，只能写入的对象为`消费者`。他建议:`为了最大化灵活性，在表示消费者和生产者的输入参数上使用通配符类型`，并提供下面的话来方便记忆：\n\n`PECS`：表示Producer-Extends， Consumer-Super。\n\n> 如果使用生产者对象，比如说`List<? extends Foo>`，不能在这个对象上调用`add()`或`set`方法,但并不表示这个对象是不变的：如不会禁止调用`clear()`来清空list，因为`clear()`没有任何参数。通配符（或其他变型的类型）能够保证类型安全，非可变则是完全不同的说法。\n\n## 声明点变型\n\n假设现有一个`Source<T>`泛型接口，没有使用`T`作为参数的方法，只有一个返回`T`的方法\n```kotlin\n// Java\ninterface Source<T> {\n  T nextT();\n}\n```\n那么使用`Source<Object>`的变型来存储`Source<String>`实例引用是类型安全的（因为没有消费者方法）。但是Java仍会禁止这样做：\n\n```java\n// Java\nvoid demo(Source<String> strs) {\n  Source<Object> objects = strs; // !!! Not allowed in Java\n  // ...\n}\n```\n可以声明`Source<? extends Object>`来解决。\n\n在Kotlin中，使用`声明点变型`(declaration-site variance)向编译器解释。使用`out`修饰符注解类型`T`,确保只返回（生产者）`Source<T>`成员，而从不写入（消费）。\n```kotlin\nabstract class Source<out T> {\n    abstract fun nextT(): T\n}\n\nfun demo(strs: Source<String>) {\n    val objects: Source<Any> = strs // This is OK, since T is an out-parameter\n    // ...\n}\n```\n泛型规则：当类`C`的泛型参数`T`声明为`out`时，表示T只能出现在C成员的输出位置，作为交换，`C<Base>`是`C<Derived>`类型安全的超类。\n\n称类`C`是参数`T`的协变量，或`T`是协变量类型参数。可以认为类`C`是`T`的生产者，而不是`T`的消费者。\n\n`out`修饰符称为变型注解，因为它提供了类型参数声明点，因此称之为声明点类型。\n\n除了`out`，kotlin提供了一个补充的变型注解：`in`。让类型参数变为`逆变量`：只能消费，从不生产。`Comparable`就是`协变量`一个很好的例子。\n```kotlin\nabstract class Comparable<in T> {\n    abstract fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable<Number>) {\n    x.compareTo(1.0) // 1.0 has type Double, which is a subtype of Number\n    // Thus, we can assign x to a variable of type Comparable<Double>\n    val y: Comparable<Double> = x // OK!\n}\n\n```\n## 类型投影\n使用处变型：类型投影\n声明类型参数T为*out*很方便，避免在使用处子类型化。但一些类实际时无法限制只返回`T`，`Array`就是一个很好的例子：\n```kotlin\nclass Array<T>(val size: Int){\n    fun get(index: Int): T{ /*...*/}\n    fun set(index: Int , value: T){/*...*/}\n}\n```\n`Array`类既不是T的协变，也不是T的逆变，导致不够灵活。考虑下面的函数：\n```kotlin\nfun copy(from: Array<Any> , to: Array<Any>){\n    assert(from.size == to.size)\n    for(i in from.indices)\n        to[i] = from[i]\n    \n}\n```\n函数应该是从拷贝数组中数据到另一个数组，下面将函数用在实际中：\n```kotlin\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3){ \"\"}\ncopy(ints , ant) // 错误：expects(Array<Any>, Array<Any>)\n```\n遇到了相同的问题：`Array<T>`是不变的，`T`类型的数组，所以`Array<Int>`和`Array<Any>`都不是对方的子类。因为copy可能会坏事，可能会进行写操作，比如像`from`写入String，而实际上这里传入的是`Int`数组，运行时就能出现`ClassCastException`异常。\n\n因此，只需要保证`copy`不会做坏事，禁止向`from`写数据，可以这样做：\n```kotlin\nfun copy(from: Array<out Any> , to: Array<Any>){\n    //...\n}\n```\n这样做法被称为`类型投影`(type projection)，也是说`from`不是一个简单数组，而是受限（投影）类型：只能够调用那些返回类型为`T`的方法，在这种情况意味着只能调用`get`，这也是使用`使用出变型`的目的，对应java的`Array<? extends Object>`，但是是通过一个更为简单的方法。\n\n也可以使用`in`来投影类型\n```kotlin\nfun fill(dest: Array<in String> , value: String){\n    // ...\n}\n```\n\n`Array<in String>`对应Java的`Array<? super String>`。如向`fill`函数传入`CharSequence`或`Object`数组。\n\n\n## 星号投影\n有时不知道类型参数任何信息，但仍希望安全地使用。此时安全地定义投影的泛型，每个泛型的具体实例都是泛型的子类型。\n为此，Kotlin提供称为`星号投影`的语法\n- 对于`Foo<out T>`，`T`为带有上界`TUpper`的协变量，`Foo<*>`等价于`Foo<out TUpper>`。意味着`T`类型未知时，可以安全地读取`Foo<*>`中`TUpper`的值\n- 对于`Foo<in T>`，`T`为逆变类型参数，`Foo<*>`等价于`Foo<in Nothing>`，意味着当`T`类型未知时，无法安全写入`Foo<*>`\n- 对于`Foo<T>`，`T`为不可变类型参数，带有上界`TUpper`，`Foo<*>`等价于`Foo<out TUpper>`用于读取和`Foo<in Nothing>`用于写入值。\n\n如果泛型有多个类型参数，则每个都可以独立投影。比如，如果类型声明为`interface Function<in T, out U>`，可以设想下面的星号投影\n\n- `Function<*, String>` 意味 `Function<in Nothing, String>`\n- `Function<Int, *> ` 意味 `Function<Int, out Any?>`\n- `Function<*, *>` 意味 `Function<in Nothing, out Any?>`\n\n> 星号投影与Java`raw`类型相似，但是安全。\n\n## 泛型函数\n不仅类可以有类型参数，函数也可以有。函数的类型参数在函数名之前声明：\n```kotlin\nfun <T> SingletonList(item: T ): List<T>{\n    // ...\n}\n\nfun <T> T.basicToString() : String { // 扩展函数\n    // ...\n}\n```\n调用泛型函数，在调用的函数名之后指定具体类型参数\n```kotlin\nval l = SingletonList<Int>(1)\n```\n\n## 泛型约束\n\n所有可以被指定类型参数替代的类型，都可以使用泛型约束进行限制。\n\n## 上界\n最常见的泛型约束就是上界，对应java的extends关键字\n\n```kotlin\nfun <T : Comparable<T>> sort(list: List<T>){\n    // ...\n}\n```\n在冒号之后指定的类型就是上界，只有`Comparable<T>`子类才能替换`T`。如：\n\n```kotlin\nsort(listOf(1, 2, 3)) // 可以。Int是Comparable<Int>的子类\nsort(listOf(HashMap<Int, String>()))  // 错误。HashMap<Int, String>不是Comparable<HashMap<Int, String>>的子类\n```\n默认上界类型为`Any?`。尖括号中只允许指定一个上界。可使用`where`条件语句指定超过一个的上界\n\n```kotlin\nfun <T> cloneWhenGreater(list: List<T> , threshold: T): List<T> \n    where T : Comparable ,\n          T : Cloneable {\n    return list.filter{it -> threshold }.map { it.clone()}              \n}\n```\n\n## 参考\n\n[里氏替换原则](https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99)\n\n[协变与逆变](https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98)\n\n[泛型中的协变和逆变](https://msdn.microsoft.com/zh-cn/library/dd799517.aspx)","slug":"Kotlin基础之泛型","published":1,"updated":"2017-07-03T07:49:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxs000lc0m3w72v8myx","content":"<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>与Java一样，Koltin的类也有类型参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"type\">T</span>&gt;</span>(t: T)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>常规来说，创建这样的类，需要提供具体的类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> box: Box&lt;<span class=\"built_in\">Int</span>&gt; = Box&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>当类型可以从构造参数或其他上下文中推断出时，可以忽略类型参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> box = Box(<span class=\"number\">1</span>) <span class=\"comment\">// 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"变型\"><a href=\"#变型\" class=\"headerlink\" title=\"变型\"></a>变型</h2><p>Java类型系统中最复杂的其中一个部分就是通配符类型（<a href=\"http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html\" target=\"_blank\" rel=\"external\"><code>Java泛型FAQ</code></a>）。而Kotlin没有任何的通配符类型，它使用<code>声明处变型</code>和<code>类型投影</code>两种方式替代。</p>\n<p>通配符 - 使用问号表示的类型参数，表示未知类型的类型约束方法。</p>\n<p>首先，先思考为什么Java需要这些难以理解的通配符。<a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\" target=\"_blank\" rel=\"external\"><code>Effective Java</code></a>解释了这个问题，第28条：使用受限通配符来增加API灵活性。首先，Java中泛型为不可变类型，意味<code>List&lt;String&gt;</code>不是<code>List&lt;Object&gt;</code>的子类型。为什么这样？如果List为可变量，<code>List&lt;&gt;</code>不会比Java的数组更好，并且下面的代码能够成功编译，但在运行时会引起异常。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">List&lt;String&gt; strs = new ArrayList&lt;String&gt;();</div><div class=\"line\">List&lt;Object&gt; objs = strs; <span class=\"comment\">// 会引起错误，Java禁止这样使用。</span></div><div class=\"line\">objs.add(<span class=\"number\">1</span>);  <span class=\"comment\">// Here we put an Integer into a list of Strings</span></div><div class=\"line\">String s = strs.<span class=\"keyword\">get</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 类转换异常：无法将Integer转换为String</span></div></pre></td></tr></table></figure></p>\n<p>所以Java禁止这样做，目的是保证运行时安全。但会有一些影响。比如：<code>Collection</code>接口的<code>addAll()</code>方法，这个方法的签名是什么？我们直觉上会这样做：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"type\">E</span>&gt; ... </span>&#123;</div><div class=\"line\">  void addAll(Collection&lt;E&gt; items);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>考虑到运行时安全，我们无法做到像下面的简单操作。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">void copyAll(Collection&lt;Object&gt; to, Collection&lt;String&gt; from) &#123;</div><div class=\"line\">  to.addAll(from); <span class=\"comment\">// !!! Would not compile with the naive declaration of addAll:</span></div><div class=\"line\">                   <span class=\"comment\">//       Collection&lt;String&gt; is not a subtype of Collection&lt;Object&gt;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在Java中学到的教训，就是<a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\" target=\"_blank\" rel=\"external\"><code>Effective Java 第25条</code></a>：Prefer lists to arrays</p>\n</blockquote>\n<p>实际上，<code>addAll()</code>的方法签名是：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"type\">E</span>&gt; ... </span>&#123;</div><div class=\"line\">  void addAll(Collection&lt;? extends E&gt; items);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通配符参数<code>? extends E</code>表明方法接收类型为<code>E</code>的子类集合，而非<code>E</code>本身。意味着可以安全读取集合中为<code>E</code>的值（集合的元素类型为<code>E</code>的子类实例），但无法写入<code>E</code>，因为我们不知道对象是否是E未知的子类。作为交换，我们希望得到这些行为：<code>Collection&lt;String&gt;</code>为<code>Collection&lt;? extends Object&gt;</code>子类型，带有<code>extends</code>或<code>upper</code>限制的通配符让类型变为<a href=\"https://msdn.microsoft.com/zh-cn/library/dd799517.aspx\" target=\"_blank\" rel=\"external\"><code>协变</code></a>。</p>\n<p>理解这点很简单：如果只从集合中获取item，可使用<code>String</code>的集合来读取<code>Object</code>。相反，如果只向集合放入item，可以向<code>Object</code>集合中放入<code>String</code>类型。Java中使用<code>List&lt;Object&gt;</code>表示<code>List&lt;? super String&gt;</code>的超类。</p>\n<p>后一个被称为协变量，只能调用基于<code>List&lt;? super String&gt;</code>，且使用<code>String</code>作为参数的方法（如：可以调用<code>add(String)</code>或<code>set(int, String)</code>）,而如果你调用<code>List&lt;T&gt;</code>返回的<code>T</code>，只能获取到Object类型，而不是<code>String</code>。</p>\n<p><code>Joshua Bloch</code>成只能读取的对象为<code>生产者</code>，只能写入的对象为<code>消费者</code>。他建议:<code>为了最大化灵活性，在表示消费者和生产者的输入参数上使用通配符类型</code>，并提供下面的话来方便记忆：</p>\n<p><code>PECS</code>：表示Producer-Extends， Consumer-Super。</p>\n<blockquote>\n<p>如果使用生产者对象，比如说<code>List&lt;? extends Foo&gt;</code>，不能在这个对象上调用<code>add()</code>或<code>set</code>方法,但并不表示这个对象是不变的：如不会禁止调用<code>clear()</code>来清空list，因为<code>clear()</code>没有任何参数。通配符（或其他变型的类型）能够保证类型安全，非可变则是完全不同的说法。</p>\n</blockquote>\n<h2 id=\"声明点变型\"><a href=\"#声明点变型\" class=\"headerlink\" title=\"声明点变型\"></a>声明点变型</h2><p>假设现有一个<code>Source&lt;T&gt;</code>泛型接口，没有使用<code>T</code>作为参数的方法，只有一个返回<code>T</code>的方法<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Source</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</div><div class=\"line\">  T nextT();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么使用<code>Source&lt;Object&gt;</code>的变型来存储<code>Source&lt;String&gt;</code>实例引用是类型安全的（因为没有消费者方法）。但是Java仍会禁止这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">(Source&lt;String&gt; strs)</span> </span>&#123;</div><div class=\"line\">  Source&lt;Object&gt; objects = strs; <span class=\"comment\">// !!! Not allowed in Java</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以声明<code>Source&lt;? extends Object&gt;</code>来解决。</p>\n<p>在Kotlin中，使用<code>声明点变型</code>(declaration-site variance)向编译器解释。使用<code>out</code>修饰符注解类型<code>T</code>,确保只返回（生产者）<code>Source&lt;T&gt;</code>成员，而从不写入（消费）。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">nextT</span><span class=\"params\">()</span></span>: T</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">demo</span><span class=\"params\">(strs: <span class=\"type\">Source</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> objects: Source&lt;Any&gt; = strs <span class=\"comment\">// This is OK, since T is an out-parameter</span></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>泛型规则：当类<code>C</code>的泛型参数<code>T</code>声明为<code>out</code>时，表示T只能出现在C成员的输出位置，作为交换，<code>C&lt;Base&gt;</code>是<code>C&lt;Derived&gt;</code>类型安全的超类。</p>\n<p>称类<code>C</code>是参数<code>T</code>的协变量，或<code>T</code>是协变量类型参数。可以认为类<code>C</code>是<code>T</code>的生产者，而不是<code>T</code>的消费者。</p>\n<p><code>out</code>修饰符称为变型注解，因为它提供了类型参数声明点，因此称之为声明点类型。</p>\n<p>除了<code>out</code>，kotlin提供了一个补充的变型注解：<code>in</code>。让类型参数变为<code>逆变量</code>：只能消费，从不生产。<code>Comparable</code>就是<code>协变量</code>一个很好的例子。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparable</span>&lt;<span class=\"type\">in T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compareTo</span><span class=\"params\">(other: <span class=\"type\">T</span>)</span></span>: <span class=\"built_in\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">demo</span><span class=\"params\">(x: <span class=\"type\">Comparable</span>&lt;<span class=\"type\">Number</span>&gt;)</span></span> &#123;</div><div class=\"line\">    x.compareTo(<span class=\"number\">1.0</span>) <span class=\"comment\">// 1.0 has type Double, which is a subtype of Number</span></div><div class=\"line\">    <span class=\"comment\">// Thus, we can assign x to a variable of type Comparable&lt;Double&gt;</span></div><div class=\"line\">    <span class=\"keyword\">val</span> y: Comparable&lt;<span class=\"built_in\">Double</span>&gt; = x <span class=\"comment\">// OK!</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"类型投影\"><a href=\"#类型投影\" class=\"headerlink\" title=\"类型投影\"></a>类型投影</h2><p>使用处变型：类型投影<br>声明类型参数T为<em>out</em>很方便，避免在使用处子类型化。但一些类实际时无法限制只返回<code>T</code>，<code>Array</code>就是一个很好的例子：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"keyword\">val</span> size: <span class=\"built_in\">Int</span>)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(index: <span class=\"type\">Int</span>)</span></span>: T&#123; <span class=\"comment\">/*...*/</span>&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">set</span><span class=\"params\">(index: <span class=\"type\">Int</span> , value: <span class=\"type\">T</span>)</span></span>&#123;<span class=\"comment\">/*...*/</span>&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Array</code>类既不是T的协变，也不是T的逆变，导致不够灵活。考虑下面的函数：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copy</span><span class=\"params\">(from: <span class=\"type\">Array</span>&lt;<span class=\"type\">Any</span>&gt; , to: <span class=\"type\">Array</span>&lt;<span class=\"type\">Any</span>&gt;)</span></span>&#123;</div><div class=\"line\">    assert(from.size == to.size)</div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> from.indices)</div><div class=\"line\">        to[i] = from[i]</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>函数应该是从拷贝数组中数据到另一个数组，下面将函数用在实际中：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> ints: Array&lt;<span class=\"built_in\">Int</span>&gt; = arrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> any = Array&lt;Any&gt;(<span class=\"number\">3</span>)&#123; <span class=\"string\">\"\"</span>&#125;</div><div class=\"line\">copy(ints , ant) <span class=\"comment\">// 错误：expects(Array&lt;Any&gt;, Array&lt;Any&gt;)</span></div></pre></td></tr></table></figure></p>\n<p>遇到了相同的问题：<code>Array&lt;T&gt;</code>是不变的，<code>T</code>类型的数组，所以<code>Array&lt;Int&gt;</code>和<code>Array&lt;Any&gt;</code>都不是对方的子类。因为copy可能会坏事，可能会进行写操作，比如像<code>from</code>写入String，而实际上这里传入的是<code>Int</code>数组，运行时就能出现<code>ClassCastException</code>异常。</p>\n<p>因此，只需要保证<code>copy</code>不会做坏事，禁止向<code>from</code>写数据，可以这样做：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copy</span><span class=\"params\">(from: <span class=\"type\">Array</span>&lt;<span class=\"type\">out</span> <span class=\"type\">Any</span>&gt; , to: <span class=\"type\">Array</span>&lt;<span class=\"type\">Any</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样做法被称为<code>类型投影</code>(type projection)，也是说<code>from</code>不是一个简单数组，而是受限（投影）类型：只能够调用那些返回类型为<code>T</code>的方法，在这种情况意味着只能调用<code>get</code>，这也是使用<code>使用出变型</code>的目的，对应java的<code>Array&lt;? extends Object&gt;</code>，但是是通过一个更为简单的方法。</p>\n<p>也可以使用<code>in</code>来投影类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fill</span><span class=\"params\">(dest: <span class=\"type\">Array</span>&lt;<span class=\"type\">in</span> <span class=\"type\">String</span>&gt; , value: <span class=\"type\">String</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Array&lt;in String&gt;</code>对应Java的<code>Array&lt;? super String&gt;</code>。如向<code>fill</code>函数传入<code>CharSequence</code>或<code>Object</code>数组。</p>\n<h2 id=\"星号投影\"><a href=\"#星号投影\" class=\"headerlink\" title=\"星号投影\"></a>星号投影</h2><p>有时不知道类型参数任何信息，但仍希望安全地使用。此时安全地定义投影的泛型，每个泛型的具体实例都是泛型的子类型。<br>为此，Kotlin提供称为<code>星号投影</code>的语法</p>\n<ul>\n<li>对于<code>Foo&lt;out T&gt;</code>，<code>T</code>为带有上界<code>TUpper</code>的协变量，<code>Foo&lt;*&gt;</code>等价于<code>Foo&lt;out TUpper&gt;</code>。意味着<code>T</code>类型未知时，可以安全地读取<code>Foo&lt;*&gt;</code>中<code>TUpper</code>的值</li>\n<li>对于<code>Foo&lt;in T&gt;</code>，<code>T</code>为逆变类型参数，<code>Foo&lt;*&gt;</code>等价于<code>Foo&lt;in Nothing&gt;</code>，意味着当<code>T</code>类型未知时，无法安全写入<code>Foo&lt;*&gt;</code></li>\n<li>对于<code>Foo&lt;T&gt;</code>，<code>T</code>为不可变类型参数，带有上界<code>TUpper</code>，<code>Foo&lt;*&gt;</code>等价于<code>Foo&lt;out TUpper&gt;</code>用于读取和<code>Foo&lt;in Nothing&gt;</code>用于写入值。</li>\n</ul>\n<p>如果泛型有多个类型参数，则每个都可以独立投影。比如，如果类型声明为<code>interface Function&lt;in T, out U&gt;</code>，可以设想下面的星号投影</p>\n<ul>\n<li><code>Function&lt;*, String&gt;</code> 意味 <code>Function&lt;in Nothing, String&gt;</code></li>\n<li><code>Function&lt;Int, *&gt;</code> 意味 <code>Function&lt;Int, out Any?&gt;</code></li>\n<li><code>Function&lt;*, *&gt;</code> 意味 <code>Function&lt;in Nothing, out Any?&gt;</code></li>\n</ul>\n<blockquote>\n<p>星号投影与Java<code>raw</code>类型相似，但是安全。</p>\n</blockquote>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><p>不仅类可以有类型参数，函数也可以有。函数的类型参数在函数名之前声明：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">SingletonList</span><span class=\"params\">(item: <span class=\"type\">T</span> )</span></span>: List&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> T.<span class=\"title\">basicToString</span><span class=\"params\">()</span></span> : String &#123; <span class=\"comment\">// 扩展函数</span></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用泛型函数，在调用的函数名之后指定具体类型参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> l = SingletonList&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h2><p>所有可以被指定类型参数替代的类型，都可以使用泛型约束进行限制。</p>\n<h2 id=\"上界\"><a href=\"#上界\" class=\"headerlink\" title=\"上界\"></a>上界</h2><p>最常见的泛型约束就是上界，对应java的extends关键字</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"title\">sort</span><span class=\"params\">(list: <span class=\"type\">List</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在冒号之后指定的类型就是上界，只有<code>Comparable&lt;T&gt;</code>子类才能替换<code>T</code>。如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// 可以。Int是Comparable&lt;Int&gt;的子类</span></div><div class=\"line\">sort(listOf(HashMap&lt;<span class=\"built_in\">Int</span>, String&gt;()))  <span class=\"comment\">// 错误。HashMap&lt;Int, String&gt;不是Comparable&lt;HashMap&lt;Int, String&gt;&gt;的子类</span></div></pre></td></tr></table></figure>\n<p>默认上界类型为<code>Any?</code>。尖括号中只允许指定一个上界。可使用<code>where</code>条件语句指定超过一个的上界</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">cloneWhenGreater</span><span class=\"params\">(list: <span class=\"type\">List</span>&lt;<span class=\"type\">T</span>&gt; , threshold: <span class=\"type\">T</span>)</span></span>: List&lt;T&gt; </div><div class=\"line\">    where T : Comparable ,</div><div class=\"line\">          T : Cloneable &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> list.filter&#123;it -&gt; threshold &#125;.map &#123; it.clone()&#125;              </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"external\">里氏替换原则</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98\" target=\"_blank\" rel=\"external\">协变与逆变</a></p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/dd799517.aspx\" target=\"_blank\" rel=\"external\">泛型中的协变和逆变</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>与Java一样，Koltin的类也有类型参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"type\">T</span>&gt;</span>(t: T)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>常规来说，创建这样的类，需要提供具体的类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> box: Box&lt;<span class=\"built_in\">Int</span>&gt; = Box&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>当类型可以从构造参数或其他上下文中推断出时，可以忽略类型参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> box = Box(<span class=\"number\">1</span>) <span class=\"comment\">// 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"变型\"><a href=\"#变型\" class=\"headerlink\" title=\"变型\"></a>变型</h2><p>Java类型系统中最复杂的其中一个部分就是通配符类型（<a href=\"http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html\" target=\"_blank\" rel=\"external\"><code>Java泛型FAQ</code></a>）。而Kotlin没有任何的通配符类型，它使用<code>声明处变型</code>和<code>类型投影</code>两种方式替代。</p>\n<p>通配符 - 使用问号表示的类型参数，表示未知类型的类型约束方法。</p>\n<p>首先，先思考为什么Java需要这些难以理解的通配符。<a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\" target=\"_blank\" rel=\"external\"><code>Effective Java</code></a>解释了这个问题，第28条：使用受限通配符来增加API灵活性。首先，Java中泛型为不可变类型，意味<code>List&lt;String&gt;</code>不是<code>List&lt;Object&gt;</code>的子类型。为什么这样？如果List为可变量，<code>List&lt;&gt;</code>不会比Java的数组更好，并且下面的代码能够成功编译，但在运行时会引起异常。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">List&lt;String&gt; strs = new ArrayList&lt;String&gt;();</div><div class=\"line\">List&lt;Object&gt; objs = strs; <span class=\"comment\">// 会引起错误，Java禁止这样使用。</span></div><div class=\"line\">objs.add(<span class=\"number\">1</span>);  <span class=\"comment\">// Here we put an Integer into a list of Strings</span></div><div class=\"line\">String s = strs.<span class=\"keyword\">get</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 类转换异常：无法将Integer转换为String</span></div></pre></td></tr></table></figure></p>\n<p>所以Java禁止这样做，目的是保证运行时安全。但会有一些影响。比如：<code>Collection</code>接口的<code>addAll()</code>方法，这个方法的签名是什么？我们直觉上会这样做：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"type\">E</span>&gt; ... </span>&#123;</div><div class=\"line\">  void addAll(Collection&lt;E&gt; items);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>考虑到运行时安全，我们无法做到像下面的简单操作。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">void copyAll(Collection&lt;Object&gt; to, Collection&lt;String&gt; from) &#123;</div><div class=\"line\">  to.addAll(from); <span class=\"comment\">// !!! Would not compile with the naive declaration of addAll:</span></div><div class=\"line\">                   <span class=\"comment\">//       Collection&lt;String&gt; is not a subtype of Collection&lt;Object&gt;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在Java中学到的教训，就是<a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\" target=\"_blank\" rel=\"external\"><code>Effective Java 第25条</code></a>：Prefer lists to arrays</p>\n</blockquote>\n<p>实际上，<code>addAll()</code>的方法签名是：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"type\">E</span>&gt; ... </span>&#123;</div><div class=\"line\">  void addAll(Collection&lt;? extends E&gt; items);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通配符参数<code>? extends E</code>表明方法接收类型为<code>E</code>的子类集合，而非<code>E</code>本身。意味着可以安全读取集合中为<code>E</code>的值（集合的元素类型为<code>E</code>的子类实例），但无法写入<code>E</code>，因为我们不知道对象是否是E未知的子类。作为交换，我们希望得到这些行为：<code>Collection&lt;String&gt;</code>为<code>Collection&lt;? extends Object&gt;</code>子类型，带有<code>extends</code>或<code>upper</code>限制的通配符让类型变为<a href=\"https://msdn.microsoft.com/zh-cn/library/dd799517.aspx\" target=\"_blank\" rel=\"external\"><code>协变</code></a>。</p>\n<p>理解这点很简单：如果只从集合中获取item，可使用<code>String</code>的集合来读取<code>Object</code>。相反，如果只向集合放入item，可以向<code>Object</code>集合中放入<code>String</code>类型。Java中使用<code>List&lt;Object&gt;</code>表示<code>List&lt;? super String&gt;</code>的超类。</p>\n<p>后一个被称为协变量，只能调用基于<code>List&lt;? super String&gt;</code>，且使用<code>String</code>作为参数的方法（如：可以调用<code>add(String)</code>或<code>set(int, String)</code>）,而如果你调用<code>List&lt;T&gt;</code>返回的<code>T</code>，只能获取到Object类型，而不是<code>String</code>。</p>\n<p><code>Joshua Bloch</code>成只能读取的对象为<code>生产者</code>，只能写入的对象为<code>消费者</code>。他建议:<code>为了最大化灵活性，在表示消费者和生产者的输入参数上使用通配符类型</code>，并提供下面的话来方便记忆：</p>\n<p><code>PECS</code>：表示Producer-Extends， Consumer-Super。</p>\n<blockquote>\n<p>如果使用生产者对象，比如说<code>List&lt;? extends Foo&gt;</code>，不能在这个对象上调用<code>add()</code>或<code>set</code>方法,但并不表示这个对象是不变的：如不会禁止调用<code>clear()</code>来清空list，因为<code>clear()</code>没有任何参数。通配符（或其他变型的类型）能够保证类型安全，非可变则是完全不同的说法。</p>\n</blockquote>\n<h2 id=\"声明点变型\"><a href=\"#声明点变型\" class=\"headerlink\" title=\"声明点变型\"></a>声明点变型</h2><p>假设现有一个<code>Source&lt;T&gt;</code>泛型接口，没有使用<code>T</code>作为参数的方法，只有一个返回<code>T</code>的方法<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Source</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</div><div class=\"line\">  T nextT();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么使用<code>Source&lt;Object&gt;</code>的变型来存储<code>Source&lt;String&gt;</code>实例引用是类型安全的（因为没有消费者方法）。但是Java仍会禁止这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">(Source&lt;String&gt; strs)</span> </span>&#123;</div><div class=\"line\">  Source&lt;Object&gt; objects = strs; <span class=\"comment\">// !!! Not allowed in Java</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以声明<code>Source&lt;? extends Object&gt;</code>来解决。</p>\n<p>在Kotlin中，使用<code>声明点变型</code>(declaration-site variance)向编译器解释。使用<code>out</code>修饰符注解类型<code>T</code>,确保只返回（生产者）<code>Source&lt;T&gt;</code>成员，而从不写入（消费）。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">nextT</span><span class=\"params\">()</span></span>: T</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">demo</span><span class=\"params\">(strs: <span class=\"type\">Source</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> objects: Source&lt;Any&gt; = strs <span class=\"comment\">// This is OK, since T is an out-parameter</span></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>泛型规则：当类<code>C</code>的泛型参数<code>T</code>声明为<code>out</code>时，表示T只能出现在C成员的输出位置，作为交换，<code>C&lt;Base&gt;</code>是<code>C&lt;Derived&gt;</code>类型安全的超类。</p>\n<p>称类<code>C</code>是参数<code>T</code>的协变量，或<code>T</code>是协变量类型参数。可以认为类<code>C</code>是<code>T</code>的生产者，而不是<code>T</code>的消费者。</p>\n<p><code>out</code>修饰符称为变型注解，因为它提供了类型参数声明点，因此称之为声明点类型。</p>\n<p>除了<code>out</code>，kotlin提供了一个补充的变型注解：<code>in</code>。让类型参数变为<code>逆变量</code>：只能消费，从不生产。<code>Comparable</code>就是<code>协变量</code>一个很好的例子。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comparable</span>&lt;<span class=\"type\">in T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compareTo</span><span class=\"params\">(other: <span class=\"type\">T</span>)</span></span>: <span class=\"built_in\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">demo</span><span class=\"params\">(x: <span class=\"type\">Comparable</span>&lt;<span class=\"type\">Number</span>&gt;)</span></span> &#123;</div><div class=\"line\">    x.compareTo(<span class=\"number\">1.0</span>) <span class=\"comment\">// 1.0 has type Double, which is a subtype of Number</span></div><div class=\"line\">    <span class=\"comment\">// Thus, we can assign x to a variable of type Comparable&lt;Double&gt;</span></div><div class=\"line\">    <span class=\"keyword\">val</span> y: Comparable&lt;<span class=\"built_in\">Double</span>&gt; = x <span class=\"comment\">// OK!</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"类型投影\"><a href=\"#类型投影\" class=\"headerlink\" title=\"类型投影\"></a>类型投影</h2><p>使用处变型：类型投影<br>声明类型参数T为<em>out</em>很方便，避免在使用处子类型化。但一些类实际时无法限制只返回<code>T</code>，<code>Array</code>就是一个很好的例子：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"keyword\">val</span> size: <span class=\"built_in\">Int</span>)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(index: <span class=\"type\">Int</span>)</span></span>: T&#123; <span class=\"comment\">/*...*/</span>&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">set</span><span class=\"params\">(index: <span class=\"type\">Int</span> , value: <span class=\"type\">T</span>)</span></span>&#123;<span class=\"comment\">/*...*/</span>&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Array</code>类既不是T的协变，也不是T的逆变，导致不够灵活。考虑下面的函数：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copy</span><span class=\"params\">(from: <span class=\"type\">Array</span>&lt;<span class=\"type\">Any</span>&gt; , to: <span class=\"type\">Array</span>&lt;<span class=\"type\">Any</span>&gt;)</span></span>&#123;</div><div class=\"line\">    assert(from.size == to.size)</div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> from.indices)</div><div class=\"line\">        to[i] = from[i]</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>函数应该是从拷贝数组中数据到另一个数组，下面将函数用在实际中：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> ints: Array&lt;<span class=\"built_in\">Int</span>&gt; = arrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> any = Array&lt;Any&gt;(<span class=\"number\">3</span>)&#123; <span class=\"string\">\"\"</span>&#125;</div><div class=\"line\">copy(ints , ant) <span class=\"comment\">// 错误：expects(Array&lt;Any&gt;, Array&lt;Any&gt;)</span></div></pre></td></tr></table></figure></p>\n<p>遇到了相同的问题：<code>Array&lt;T&gt;</code>是不变的，<code>T</code>类型的数组，所以<code>Array&lt;Int&gt;</code>和<code>Array&lt;Any&gt;</code>都不是对方的子类。因为copy可能会坏事，可能会进行写操作，比如像<code>from</code>写入String，而实际上这里传入的是<code>Int</code>数组，运行时就能出现<code>ClassCastException</code>异常。</p>\n<p>因此，只需要保证<code>copy</code>不会做坏事，禁止向<code>from</code>写数据，可以这样做：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copy</span><span class=\"params\">(from: <span class=\"type\">Array</span>&lt;<span class=\"type\">out</span> <span class=\"type\">Any</span>&gt; , to: <span class=\"type\">Array</span>&lt;<span class=\"type\">Any</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样做法被称为<code>类型投影</code>(type projection)，也是说<code>from</code>不是一个简单数组，而是受限（投影）类型：只能够调用那些返回类型为<code>T</code>的方法，在这种情况意味着只能调用<code>get</code>，这也是使用<code>使用出变型</code>的目的，对应java的<code>Array&lt;? extends Object&gt;</code>，但是是通过一个更为简单的方法。</p>\n<p>也可以使用<code>in</code>来投影类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fill</span><span class=\"params\">(dest: <span class=\"type\">Array</span>&lt;<span class=\"type\">in</span> <span class=\"type\">String</span>&gt; , value: <span class=\"type\">String</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Array&lt;in String&gt;</code>对应Java的<code>Array&lt;? super String&gt;</code>。如向<code>fill</code>函数传入<code>CharSequence</code>或<code>Object</code>数组。</p>\n<h2 id=\"星号投影\"><a href=\"#星号投影\" class=\"headerlink\" title=\"星号投影\"></a>星号投影</h2><p>有时不知道类型参数任何信息，但仍希望安全地使用。此时安全地定义投影的泛型，每个泛型的具体实例都是泛型的子类型。<br>为此，Kotlin提供称为<code>星号投影</code>的语法</p>\n<ul>\n<li>对于<code>Foo&lt;out T&gt;</code>，<code>T</code>为带有上界<code>TUpper</code>的协变量，<code>Foo&lt;*&gt;</code>等价于<code>Foo&lt;out TUpper&gt;</code>。意味着<code>T</code>类型未知时，可以安全地读取<code>Foo&lt;*&gt;</code>中<code>TUpper</code>的值</li>\n<li>对于<code>Foo&lt;in T&gt;</code>，<code>T</code>为逆变类型参数，<code>Foo&lt;*&gt;</code>等价于<code>Foo&lt;in Nothing&gt;</code>，意味着当<code>T</code>类型未知时，无法安全写入<code>Foo&lt;*&gt;</code></li>\n<li>对于<code>Foo&lt;T&gt;</code>，<code>T</code>为不可变类型参数，带有上界<code>TUpper</code>，<code>Foo&lt;*&gt;</code>等价于<code>Foo&lt;out TUpper&gt;</code>用于读取和<code>Foo&lt;in Nothing&gt;</code>用于写入值。</li>\n</ul>\n<p>如果泛型有多个类型参数，则每个都可以独立投影。比如，如果类型声明为<code>interface Function&lt;in T, out U&gt;</code>，可以设想下面的星号投影</p>\n<ul>\n<li><code>Function&lt;*, String&gt;</code> 意味 <code>Function&lt;in Nothing, String&gt;</code></li>\n<li><code>Function&lt;Int, *&gt;</code> 意味 <code>Function&lt;Int, out Any?&gt;</code></li>\n<li><code>Function&lt;*, *&gt;</code> 意味 <code>Function&lt;in Nothing, out Any?&gt;</code></li>\n</ul>\n<blockquote>\n<p>星号投影与Java<code>raw</code>类型相似，但是安全。</p>\n</blockquote>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><p>不仅类可以有类型参数，函数也可以有。函数的类型参数在函数名之前声明：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">SingletonList</span><span class=\"params\">(item: <span class=\"type\">T</span> )</span></span>: List&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> T.<span class=\"title\">basicToString</span><span class=\"params\">()</span></span> : String &#123; <span class=\"comment\">// 扩展函数</span></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用泛型函数，在调用的函数名之后指定具体类型参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> l = SingletonList&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h2><p>所有可以被指定类型参数替代的类型，都可以使用泛型约束进行限制。</p>\n<h2 id=\"上界\"><a href=\"#上界\" class=\"headerlink\" title=\"上界\"></a>上界</h2><p>最常见的泛型约束就是上界，对应java的extends关键字</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"title\">sort</span><span class=\"params\">(list: <span class=\"type\">List</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在冒号之后指定的类型就是上界，只有<code>Comparable&lt;T&gt;</code>子类才能替换<code>T</code>。如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort(listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// 可以。Int是Comparable&lt;Int&gt;的子类</span></div><div class=\"line\">sort(listOf(HashMap&lt;<span class=\"built_in\">Int</span>, String&gt;()))  <span class=\"comment\">// 错误。HashMap&lt;Int, String&gt;不是Comparable&lt;HashMap&lt;Int, String&gt;&gt;的子类</span></div></pre></td></tr></table></figure>\n<p>默认上界类型为<code>Any?</code>。尖括号中只允许指定一个上界。可使用<code>where</code>条件语句指定超过一个的上界</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">cloneWhenGreater</span><span class=\"params\">(list: <span class=\"type\">List</span>&lt;<span class=\"type\">T</span>&gt; , threshold: <span class=\"type\">T</span>)</span></span>: List&lt;T&gt; </div><div class=\"line\">    where T : Comparable ,</div><div class=\"line\">          T : Cloneable &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> list.filter&#123;it -&gt; threshold &#125;.map &#123; it.clone()&#125;              </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"external\">里氏替换原则</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98\" target=\"_blank\" rel=\"external\">协变与逆变</a></p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/dd799517.aspx\" target=\"_blank\" rel=\"external\">泛型中的协变和逆变</a></p>\n"},{"title":"Kotlin基础之数据类、密封类、嵌套类和枚举类","date":"2017-07-03T07:49:27.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 数据类\n我们经常创建只用来存储数据的类。在这样的类中，一些标准功能常由数据来驱动。这些类在Kotlin中使用`data`修饰符标记为***数据类***\n```kotlin\ndata class User(val name: String, val age: Int)\n```\n编译器自动驱动在私有构造中声明的所有属性，生成为成员。\n- `equals()`和`hashCode()`函数对\n- `User(name=John, age=42)`形式的`toString()`方法\n- 相关声明顺序的属性，对应的[`组件函数`](https://kotlinlang.org/docs/reference/multi-declarations.html)\n- `copy()`函数\n如果类中或基类中已显式定义对应的函数，则不会额生成。\n\n为了保证生成代码的一致性和意义性，数据类需要满足以下条件：\n- 首要构造器至少要有一个参数\n- 所有首要构造器参数都要标记为`val`或`var`\n- 数据类不能是抽象，open，密封或内部类型。\n- （在1.1之前）数据类只能实现接口\n\n从1.1开始，数据类可以继承其他类（参考[`密封类`](https://kotlinlang.org/docs/reference/sealed-classes.html)）\n在JVM上，如果生成的类需要无参构造，则要为参数指定默认值（参考[`构造器`](https://kotlinlang.org/docs/reference/classes.html#constructors)）\n\n```kotlin\ndata class User(val name: String = \"\", val age: Int = 0)\n```\n## 类的拷贝\n我们常常拷贝一个对象，修改一部分属性且保留剩余的属性。`copy`函数就是为了这一目的创建。比如上面的`User`类，它的`copy`函数可能就是：\n```kotlin\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)    \n```\n然后就可以这样写：\n\n```kotlin\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = jack.copy(age = 2)\n```\n## 数据类与解构声明\n数据类生成的组件函数可以能够用在[`解构`](https://kotlinlang.org/docs/reference/multi-declarations.html)声明中。\n```kotlin\nval jane = User(\"Jane\", 35) \nval (name, age) = jane\nprintln(\"$name, $age years of age\") // prints \"Jane, 35 years of age\"\n```\n\n## 标准数据类\n标准库提供了`Pair`和`Triple`。在大多数情况中，命名的数据类是更好的选择，因为具有意义的属性名，他们可以让代码更具有可读性。\n\n# 密封类\n当值是只是限定类型组中的一种时，可使用密封类表示受限的类层次。从某种意义上来说，密封类是枚举类的扩展类型：枚举类型值的限定集合，但枚举类型只能单独实例，而密封类的子类可有包含状态的多个实例。\n\n声明密封类，在类名前加上`sealed`修饰符。密封类可以有子类，但所有子类都必须在密封类对应的文件中声明。（在Kotlin1.1之前，规则更加严格：类必须在密封类中声明）。\n```kotlin\nsealed class Expr\ndata class Const(val number: Double) : Expr()\ndata class Sum(val e1: Expr, val e2: Expr) : Expr()\nobject NotANumber : Expr()\n```\nKotlin 1.1新特性：数据类可继承其他类包括密封类。\n\n> 继承密封类子类的类可以位于任何地方，不仅仅可以在同文件中。\n\n密封类的主要好处就是在[`when表达式`](https://kotlinlang.org/docs/reference/control-flow.html#when-expression)中使用。如果能够覆盖所有条件，而不用在条件语句中添加`else`代码块。\n\n```kotlin\nfun eval(expr: Expr): Double = when(expr) {\n    is Const -> expr.number\n    is Sum -> eval(expr.e1) + eval(expr.e2)\n    NotANumber -> Double.NaN\n    // 无须 `else` 字句，因为已经覆盖所有条件\n}\n```\n\n# 嵌套类\n\n类可以嵌套在其他类中\n```kotlin\nclass Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n\n## 内部类\n嵌套类可使用`inner`标记，访问外部类成员。内部类持有外部类引用\n```kotlin\nclass Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n\n查看[`this表达式`](https://kotlinlang.org/docs/reference/this-expressions.html)解释inner类中的this问题。\n\n## 匿名内部类\n\n匿名内部类是使用[`对象表达式`](https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions)创建的实例\n\n```kotlin\nwindow.addMouseListener(object: MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n        // ...\n    }\n              \n    override fun mouseEntered(e: MouseEvent) {\n        // ...\n    }\n})\n```\n如果对象是函数式Java接口实例（如：只有一个抽象方法的Java接口），可使用前缀接口类型的Lambda表达式。\n```kotlin\nval listener = ActionListener { println(\"clicked\")}\n```\n\n# 枚举类\n枚举类最基本的用法就是实现类型安全的枚举\n```koltin\nenum class Direction {\n    NORTH, SOUTH, WEST, EAST\n}\n```\n每个枚举常量都是一个对象，枚举常量使用逗号分隔。\n\n## 初始化\n因为每个枚举都是枚举类的实例，都可初始化。\n```kotlin\nenum class Color(val rgb: Int) {\n        RED(0xFF0000),\n        GREEN(0x00FF00),\n        BLUE(0x0000FF)\n}\n```\n\n## 匿名枚举类\n枚举类可声明自己的匿名类\n```kotlin\nenum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\n```\n对应的方法，与复写基本方法一致。\n> 枚举类只要定义任意成员，都要使用分号区分定义枚举常量与成员。\n\n## 枚举常量的使用\n\n与Java相似，Kotlin的枚举常量也有综合方法来列取枚举常量，通过常量名来获取常量值。这些方法的签名如下所示（假设枚举类名为`EnumClass`）：\n```kotlin\nEnumClass.valueOf(value: String): EnumClass\nEnumClass.values(): Array<EnumClass>\n```\n如果给定名称不满足枚举类中的任一枚举常量，会抛出`IllegalArgumentException`异常。\n\n从Kotlin 1.1起，可以通过一般方法来访问枚举中常量：`enumValues<T>()`与`enumValueOf<T>()`函数\n```kotlin\nenum class RGB { RED, GREEN, BLUE }\n\ninline fun <reified T : Enum<T>> printAllValues() {\n    print(enumValues<T>().joinToString { it.name })\n}\n\nprintAllValues<RGB>() // prints RED, GREEN, BLUE\n```\n每个枚举常量都有属性来获取枚举名称和在枚举类中声明的位置。\n\n```kotlin\nval name: String\nval ordinal: Int\n```\n枚举常量实现了[`Comparable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparable/index.html)接口，按照在枚举类中定的顺序自然排序。","source":"_posts/Kotlin基础之数据类、密封类、嵌套类和枚举类.md","raw":"---\ntitle: Kotlin基础之数据类、密封类、嵌套类和枚举类\ndate: 2017-07-03 15:49:27\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 数据类\n我们经常创建只用来存储数据的类。在这样的类中，一些标准功能常由数据来驱动。这些类在Kotlin中使用`data`修饰符标记为***数据类***\n```kotlin\ndata class User(val name: String, val age: Int)\n```\n编译器自动驱动在私有构造中声明的所有属性，生成为成员。\n- `equals()`和`hashCode()`函数对\n- `User(name=John, age=42)`形式的`toString()`方法\n- 相关声明顺序的属性，对应的[`组件函数`](https://kotlinlang.org/docs/reference/multi-declarations.html)\n- `copy()`函数\n如果类中或基类中已显式定义对应的函数，则不会额生成。\n\n为了保证生成代码的一致性和意义性，数据类需要满足以下条件：\n- 首要构造器至少要有一个参数\n- 所有首要构造器参数都要标记为`val`或`var`\n- 数据类不能是抽象，open，密封或内部类型。\n- （在1.1之前）数据类只能实现接口\n\n从1.1开始，数据类可以继承其他类（参考[`密封类`](https://kotlinlang.org/docs/reference/sealed-classes.html)）\n在JVM上，如果生成的类需要无参构造，则要为参数指定默认值（参考[`构造器`](https://kotlinlang.org/docs/reference/classes.html#constructors)）\n\n```kotlin\ndata class User(val name: String = \"\", val age: Int = 0)\n```\n## 类的拷贝\n我们常常拷贝一个对象，修改一部分属性且保留剩余的属性。`copy`函数就是为了这一目的创建。比如上面的`User`类，它的`copy`函数可能就是：\n```kotlin\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)    \n```\n然后就可以这样写：\n\n```kotlin\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = jack.copy(age = 2)\n```\n## 数据类与解构声明\n数据类生成的组件函数可以能够用在[`解构`](https://kotlinlang.org/docs/reference/multi-declarations.html)声明中。\n```kotlin\nval jane = User(\"Jane\", 35) \nval (name, age) = jane\nprintln(\"$name, $age years of age\") // prints \"Jane, 35 years of age\"\n```\n\n## 标准数据类\n标准库提供了`Pair`和`Triple`。在大多数情况中，命名的数据类是更好的选择，因为具有意义的属性名，他们可以让代码更具有可读性。\n\n# 密封类\n当值是只是限定类型组中的一种时，可使用密封类表示受限的类层次。从某种意义上来说，密封类是枚举类的扩展类型：枚举类型值的限定集合，但枚举类型只能单独实例，而密封类的子类可有包含状态的多个实例。\n\n声明密封类，在类名前加上`sealed`修饰符。密封类可以有子类，但所有子类都必须在密封类对应的文件中声明。（在Kotlin1.1之前，规则更加严格：类必须在密封类中声明）。\n```kotlin\nsealed class Expr\ndata class Const(val number: Double) : Expr()\ndata class Sum(val e1: Expr, val e2: Expr) : Expr()\nobject NotANumber : Expr()\n```\nKotlin 1.1新特性：数据类可继承其他类包括密封类。\n\n> 继承密封类子类的类可以位于任何地方，不仅仅可以在同文件中。\n\n密封类的主要好处就是在[`when表达式`](https://kotlinlang.org/docs/reference/control-flow.html#when-expression)中使用。如果能够覆盖所有条件，而不用在条件语句中添加`else`代码块。\n\n```kotlin\nfun eval(expr: Expr): Double = when(expr) {\n    is Const -> expr.number\n    is Sum -> eval(expr.e1) + eval(expr.e2)\n    NotANumber -> Double.NaN\n    // 无须 `else` 字句，因为已经覆盖所有条件\n}\n```\n\n# 嵌套类\n\n类可以嵌套在其他类中\n```kotlin\nclass Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n\n## 内部类\n嵌套类可使用`inner`标记，访问外部类成员。内部类持有外部类引用\n```kotlin\nclass Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n\n查看[`this表达式`](https://kotlinlang.org/docs/reference/this-expressions.html)解释inner类中的this问题。\n\n## 匿名内部类\n\n匿名内部类是使用[`对象表达式`](https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions)创建的实例\n\n```kotlin\nwindow.addMouseListener(object: MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n        // ...\n    }\n              \n    override fun mouseEntered(e: MouseEvent) {\n        // ...\n    }\n})\n```\n如果对象是函数式Java接口实例（如：只有一个抽象方法的Java接口），可使用前缀接口类型的Lambda表达式。\n```kotlin\nval listener = ActionListener { println(\"clicked\")}\n```\n\n# 枚举类\n枚举类最基本的用法就是实现类型安全的枚举\n```koltin\nenum class Direction {\n    NORTH, SOUTH, WEST, EAST\n}\n```\n每个枚举常量都是一个对象，枚举常量使用逗号分隔。\n\n## 初始化\n因为每个枚举都是枚举类的实例，都可初始化。\n```kotlin\nenum class Color(val rgb: Int) {\n        RED(0xFF0000),\n        GREEN(0x00FF00),\n        BLUE(0x0000FF)\n}\n```\n\n## 匿名枚举类\n枚举类可声明自己的匿名类\n```kotlin\nenum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\n```\n对应的方法，与复写基本方法一致。\n> 枚举类只要定义任意成员，都要使用分号区分定义枚举常量与成员。\n\n## 枚举常量的使用\n\n与Java相似，Kotlin的枚举常量也有综合方法来列取枚举常量，通过常量名来获取常量值。这些方法的签名如下所示（假设枚举类名为`EnumClass`）：\n```kotlin\nEnumClass.valueOf(value: String): EnumClass\nEnumClass.values(): Array<EnumClass>\n```\n如果给定名称不满足枚举类中的任一枚举常量，会抛出`IllegalArgumentException`异常。\n\n从Kotlin 1.1起，可以通过一般方法来访问枚举中常量：`enumValues<T>()`与`enumValueOf<T>()`函数\n```kotlin\nenum class RGB { RED, GREEN, BLUE }\n\ninline fun <reified T : Enum<T>> printAllValues() {\n    print(enumValues<T>().joinToString { it.name })\n}\n\nprintAllValues<RGB>() // prints RED, GREEN, BLUE\n```\n每个枚举常量都有属性来获取枚举名称和在枚举类中声明的位置。\n\n```kotlin\nval name: String\nval ordinal: Int\n```\n枚举常量实现了[`Comparable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparable/index.html)接口，按照在枚举类中定的顺序自然排序。","slug":"Kotlin基础之数据类、密封类、嵌套类和枚举类","published":1,"updated":"2017-07-03T07:49:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxt000nc0m37re00thi","content":"<h1 id=\"数据类\"><a href=\"#数据类\" class=\"headerlink\" title=\"数据类\"></a>数据类</h1><p>我们经常创建只用来存储数据的类。在这样的类中，一些标准功能常由数据来驱动。这些类在Kotlin中使用<code>data</code>修饰符标记为<strong><em>数据类</em></strong><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</div></pre></td></tr></table></figure></p>\n<p>编译器自动驱动在私有构造中声明的所有属性，生成为成员。</p>\n<ul>\n<li><code>equals()</code>和<code>hashCode()</code>函数对</li>\n<li><code>User(name=John, age=42)</code>形式的<code>toString()</code>方法</li>\n<li>相关声明顺序的属性，对应的<a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html\" target=\"_blank\" rel=\"external\"><code>组件函数</code></a></li>\n<li><code>copy()</code>函数<br>如果类中或基类中已显式定义对应的函数，则不会额生成。</li>\n</ul>\n<p>为了保证生成代码的一致性和意义性，数据类需要满足以下条件：</p>\n<ul>\n<li>首要构造器至少要有一个参数</li>\n<li>所有首要构造器参数都要标记为<code>val</code>或<code>var</code></li>\n<li>数据类不能是抽象，open，密封或内部类型。</li>\n<li>（在1.1之前）数据类只能实现接口</li>\n</ul>\n<p>从1.1开始，数据类可以继承其他类（参考<a href=\"https://kotlinlang.org/docs/reference/sealed-classes.html\" target=\"_blank\" rel=\"external\"><code>密封类</code></a>）<br>在JVM上，如果生成的类需要无参构造，则要为参数指定默认值（参考<a href=\"https://kotlinlang.org/docs/reference/classes.html#constructors\" target=\"_blank\" rel=\"external\"><code>构造器</code></a>）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"类的拷贝\"><a href=\"#类的拷贝\" class=\"headerlink\" title=\"类的拷贝\"></a>类的拷贝</h2><p>我们常常拷贝一个对象，修改一部分属性且保留剩余的属性。<code>copy</code>函数就是为了这一目的创建。比如上面的<code>User</code>类，它的<code>copy</code>函数可能就是：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copy</span><span class=\"params\">(name: <span class=\"type\">String</span> = this.name, age: <span class=\"type\">Int</span> = this.age)</span></span> = User(name, age)</div></pre></td></tr></table></figure></p>\n<p>然后就可以这样写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> jack = User(name = <span class=\"string\">\"Jack\"</span>, age = <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> olderJack = jack.copy(age = <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"数据类与解构声明\"><a href=\"#数据类与解构声明\" class=\"headerlink\" title=\"数据类与解构声明\"></a>数据类与解构声明</h2><p>数据类生成的组件函数可以能够用在<a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html\" target=\"_blank\" rel=\"external\"><code>解构</code></a>声明中。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> jane = User(<span class=\"string\">\"Jane\"</span>, <span class=\"number\">35</span>) </div><div class=\"line\"><span class=\"keyword\">val</span> (name, age) = jane</div><div class=\"line\">println(<span class=\"string\">\"<span class=\"variable\">$name</span>, <span class=\"variable\">$age</span> years of age\"</span>) <span class=\"comment\">// prints \"Jane, 35 years of age\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"标准数据类\"><a href=\"#标准数据类\" class=\"headerlink\" title=\"标准数据类\"></a>标准数据类</h2><p>标准库提供了<code>Pair</code>和<code>Triple</code>。在大多数情况中，命名的数据类是更好的选择，因为具有意义的属性名，他们可以让代码更具有可读性。</p>\n<h1 id=\"密封类\"><a href=\"#密封类\" class=\"headerlink\" title=\"密封类\"></a>密封类</h1><p>当值是只是限定类型组中的一种时，可使用密封类表示受限的类层次。从某种意义上来说，密封类是枚举类的扩展类型：枚举类型值的限定集合，但枚举类型只能单独实例，而密封类的子类可有包含状态的多个实例。</p>\n<p>声明密封类，在类名前加上<code>sealed</code>修饰符。密封类可以有子类，但所有子类都必须在密封类对应的文件中声明。（在Kotlin1.1之前，规则更加严格：类必须在密封类中声明）。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Const</span></span>(<span class=\"keyword\">val</span> number: <span class=\"built_in\">Double</span>) : Expr()</div><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span>(<span class=\"keyword\">val</span> e1: Expr, <span class=\"keyword\">val</span> e2: Expr) : Expr()</div><div class=\"line\"><span class=\"keyword\">object</span> NotANumber : Expr()</div></pre></td></tr></table></figure></p>\n<p>Kotlin 1.1新特性：数据类可继承其他类包括密封类。</p>\n<blockquote>\n<p>继承密封类子类的类可以位于任何地方，不仅仅可以在同文件中。</p>\n</blockquote>\n<p>密封类的主要好处就是在<a href=\"https://kotlinlang.org/docs/reference/control-flow.html#when-expression\" target=\"_blank\" rel=\"external\"><code>when表达式</code></a>中使用。如果能够覆盖所有条件，而不用在条件语句中添加<code>else</code>代码块。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">eval</span><span class=\"params\">(expr: <span class=\"type\">Expr</span>)</span></span>: <span class=\"built_in\">Double</span> = <span class=\"keyword\">when</span>(expr) &#123;</div><div class=\"line\">    <span class=\"keyword\">is</span> Const -&gt; expr.number</div><div class=\"line\">    <span class=\"keyword\">is</span> Sum -&gt; eval(expr.e1) + eval(expr.e2)</div><div class=\"line\">    NotANumber -&gt; <span class=\"built_in\">Double</span>.NaN</div><div class=\"line\">    <span class=\"comment\">// 无须 `else` 字句，因为已经覆盖所有条件</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h1><p>类可以嵌套在其他类中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bar: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nested</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"number\">2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> demo = Outer.Nested().foo() <span class=\"comment\">// == 2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>嵌套类可使用<code>inner</code>标记，访问外部类成员。内部类持有外部类引用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bar: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span></div><div class=\"line\">    inner <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> = bar</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> demo = Outer().Inner().foo() <span class=\"comment\">// == 1</span></div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/this-expressions.html\" target=\"_blank\" rel=\"external\"><code>this表达式</code></a>解释inner类中的this问题。</p>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><p>匿名内部类是使用<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions\" target=\"_blank\" rel=\"external\"><code>对象表达式</code></a>创建的实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addMouseListener(<span class=\"keyword\">object</span>: MouseAdapter() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">              </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果对象是函数式Java接口实例（如：只有一个抽象方法的Java接口），可使用前缀接口类型的Lambda表达式。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> listener = ActionListener &#123; println(<span class=\"string\">\"clicked\"</span>)&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h1><p>枚举类最基本的用法就是实现类型安全的枚举<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">enum class Direction &#123;</div><div class=\"line\">    NORTH, SOUTH, WEST, EAST</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每个枚举常量都是一个对象，枚举常量使用逗号分隔。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>因为每个枚举都是枚举类的实例，都可初始化。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span></span>(<span class=\"keyword\">val</span> rgb: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">        RED(<span class=\"number\">0xFF0000</span>),</div><div class=\"line\">        GREEN(<span class=\"number\">0x00FF00</span>),</div><div class=\"line\">        BLUE(<span class=\"number\">0x0000FF</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"匿名枚举类\"><a href=\"#匿名枚举类\" class=\"headerlink\" title=\"匿名枚举类\"></a>匿名枚举类</h2><p>枚举类可声明自己的匿名类<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProtocolState</span> </span>&#123;</div><div class=\"line\">    WAITING &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span> = TALKING</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    TALKING &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span> = WAITING</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span>: ProtocolState</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对应的方法，与复写基本方法一致。</p>\n<blockquote>\n<p>枚举类只要定义任意成员，都要使用分号区分定义枚举常量与成员。</p>\n</blockquote>\n<h2 id=\"枚举常量的使用\"><a href=\"#枚举常量的使用\" class=\"headerlink\" title=\"枚举常量的使用\"></a>枚举常量的使用</h2><p>与Java相似，Kotlin的枚举常量也有综合方法来列取枚举常量，通过常量名来获取常量值。这些方法的签名如下所示（假设枚举类名为<code>EnumClass</code>）：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumClass.valueOf(value: String): EnumClass</div><div class=\"line\">EnumClass.values(): Array&lt;EnumClass&gt;</div></pre></td></tr></table></figure></p>\n<p>如果给定名称不满足枚举类中的任一枚举常量，会抛出<code>IllegalArgumentException</code>异常。</p>\n<p>从Kotlin 1.1起，可以通过一般方法来访问枚举中常量：<code>enumValues&lt;T&gt;()</code>与<code>enumValueOf&lt;T&gt;()</code>函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGB</span> </span>&#123; RED, GREEN, BLUE &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T : Enum&lt;T&gt;</span>&gt; <span class=\"title\">printAllValues</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    print(enumValues&lt;T&gt;().joinToString &#123; it.name &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printAllValues&lt;RGB&gt;() <span class=\"comment\">// prints RED, GREEN, BLUE</span></div></pre></td></tr></table></figure></p>\n<p>每个枚举常量都有属性来获取枚举名称和在枚举类中声明的位置。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> name: String</div><div class=\"line\"><span class=\"keyword\">val</span> ordinal: <span class=\"built_in\">Int</span></div></pre></td></tr></table></figure>\n<p>枚举常量实现了<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparable/index.html\" target=\"_blank\" rel=\"external\"><code>Comparable</code></a>接口，按照在枚举类中定的顺序自然排序。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据类\"><a href=\"#数据类\" class=\"headerlink\" title=\"数据类\"></a>数据类</h1><p>我们经常创建只用来存储数据的类。在这样的类中，一些标准功能常由数据来驱动。这些类在Kotlin中使用<code>data</code>修饰符标记为<strong><em>数据类</em></strong><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</div></pre></td></tr></table></figure></p>\n<p>编译器自动驱动在私有构造中声明的所有属性，生成为成员。</p>\n<ul>\n<li><code>equals()</code>和<code>hashCode()</code>函数对</li>\n<li><code>User(name=John, age=42)</code>形式的<code>toString()</code>方法</li>\n<li>相关声明顺序的属性，对应的<a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html\" target=\"_blank\" rel=\"external\"><code>组件函数</code></a></li>\n<li><code>copy()</code>函数<br>如果类中或基类中已显式定义对应的函数，则不会额生成。</li>\n</ul>\n<p>为了保证生成代码的一致性和意义性，数据类需要满足以下条件：</p>\n<ul>\n<li>首要构造器至少要有一个参数</li>\n<li>所有首要构造器参数都要标记为<code>val</code>或<code>var</code></li>\n<li>数据类不能是抽象，open，密封或内部类型。</li>\n<li>（在1.1之前）数据类只能实现接口</li>\n</ul>\n<p>从1.1开始，数据类可以继承其他类（参考<a href=\"https://kotlinlang.org/docs/reference/sealed-classes.html\" target=\"_blank\" rel=\"external\"><code>密封类</code></a>）<br>在JVM上，如果生成的类需要无参构造，则要为参数指定默认值（参考<a href=\"https://kotlinlang.org/docs/reference/classes.html#constructors\" target=\"_blank\" rel=\"external\"><code>构造器</code></a>）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"类的拷贝\"><a href=\"#类的拷贝\" class=\"headerlink\" title=\"类的拷贝\"></a>类的拷贝</h2><p>我们常常拷贝一个对象，修改一部分属性且保留剩余的属性。<code>copy</code>函数就是为了这一目的创建。比如上面的<code>User</code>类，它的<code>copy</code>函数可能就是：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copy</span><span class=\"params\">(name: <span class=\"type\">String</span> = this.name, age: <span class=\"type\">Int</span> = this.age)</span></span> = User(name, age)</div></pre></td></tr></table></figure></p>\n<p>然后就可以这样写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> jack = User(name = <span class=\"string\">\"Jack\"</span>, age = <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> olderJack = jack.copy(age = <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"数据类与解构声明\"><a href=\"#数据类与解构声明\" class=\"headerlink\" title=\"数据类与解构声明\"></a>数据类与解构声明</h2><p>数据类生成的组件函数可以能够用在<a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html\" target=\"_blank\" rel=\"external\"><code>解构</code></a>声明中。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> jane = User(<span class=\"string\">\"Jane\"</span>, <span class=\"number\">35</span>) </div><div class=\"line\"><span class=\"keyword\">val</span> (name, age) = jane</div><div class=\"line\">println(<span class=\"string\">\"<span class=\"variable\">$name</span>, <span class=\"variable\">$age</span> years of age\"</span>) <span class=\"comment\">// prints \"Jane, 35 years of age\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"标准数据类\"><a href=\"#标准数据类\" class=\"headerlink\" title=\"标准数据类\"></a>标准数据类</h2><p>标准库提供了<code>Pair</code>和<code>Triple</code>。在大多数情况中，命名的数据类是更好的选择，因为具有意义的属性名，他们可以让代码更具有可读性。</p>\n<h1 id=\"密封类\"><a href=\"#密封类\" class=\"headerlink\" title=\"密封类\"></a>密封类</h1><p>当值是只是限定类型组中的一种时，可使用密封类表示受限的类层次。从某种意义上来说，密封类是枚举类的扩展类型：枚举类型值的限定集合，但枚举类型只能单独实例，而密封类的子类可有包含状态的多个实例。</p>\n<p>声明密封类，在类名前加上<code>sealed</code>修饰符。密封类可以有子类，但所有子类都必须在密封类对应的文件中声明。（在Kotlin1.1之前，规则更加严格：类必须在密封类中声明）。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Const</span></span>(<span class=\"keyword\">val</span> number: <span class=\"built_in\">Double</span>) : Expr()</div><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span>(<span class=\"keyword\">val</span> e1: Expr, <span class=\"keyword\">val</span> e2: Expr) : Expr()</div><div class=\"line\"><span class=\"keyword\">object</span> NotANumber : Expr()</div></pre></td></tr></table></figure></p>\n<p>Kotlin 1.1新特性：数据类可继承其他类包括密封类。</p>\n<blockquote>\n<p>继承密封类子类的类可以位于任何地方，不仅仅可以在同文件中。</p>\n</blockquote>\n<p>密封类的主要好处就是在<a href=\"https://kotlinlang.org/docs/reference/control-flow.html#when-expression\" target=\"_blank\" rel=\"external\"><code>when表达式</code></a>中使用。如果能够覆盖所有条件，而不用在条件语句中添加<code>else</code>代码块。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">eval</span><span class=\"params\">(expr: <span class=\"type\">Expr</span>)</span></span>: <span class=\"built_in\">Double</span> = <span class=\"keyword\">when</span>(expr) &#123;</div><div class=\"line\">    <span class=\"keyword\">is</span> Const -&gt; expr.number</div><div class=\"line\">    <span class=\"keyword\">is</span> Sum -&gt; eval(expr.e1) + eval(expr.e2)</div><div class=\"line\">    NotANumber -&gt; <span class=\"built_in\">Double</span>.NaN</div><div class=\"line\">    <span class=\"comment\">// 无须 `else` 字句，因为已经覆盖所有条件</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h1><p>类可以嵌套在其他类中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bar: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nested</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"number\">2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> demo = Outer.Nested().foo() <span class=\"comment\">// == 2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>嵌套类可使用<code>inner</code>标记，访问外部类成员。内部类持有外部类引用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bar: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span></div><div class=\"line\">    inner <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> = bar</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> demo = Outer().Inner().foo() <span class=\"comment\">// == 1</span></div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/this-expressions.html\" target=\"_blank\" rel=\"external\"><code>this表达式</code></a>解释inner类中的this问题。</p>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><p>匿名内部类是使用<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions\" target=\"_blank\" rel=\"external\"><code>对象表达式</code></a>创建的实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addMouseListener(<span class=\"keyword\">object</span>: MouseAdapter() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">              </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果对象是函数式Java接口实例（如：只有一个抽象方法的Java接口），可使用前缀接口类型的Lambda表达式。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> listener = ActionListener &#123; println(<span class=\"string\">\"clicked\"</span>)&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h1><p>枚举类最基本的用法就是实现类型安全的枚举<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">enum class Direction &#123;</div><div class=\"line\">    NORTH, SOUTH, WEST, EAST</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每个枚举常量都是一个对象，枚举常量使用逗号分隔。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>因为每个枚举都是枚举类的实例，都可初始化。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span></span>(<span class=\"keyword\">val</span> rgb: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">        RED(<span class=\"number\">0xFF0000</span>),</div><div class=\"line\">        GREEN(<span class=\"number\">0x00FF00</span>),</div><div class=\"line\">        BLUE(<span class=\"number\">0x0000FF</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"匿名枚举类\"><a href=\"#匿名枚举类\" class=\"headerlink\" title=\"匿名枚举类\"></a>匿名枚举类</h2><p>枚举类可声明自己的匿名类<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProtocolState</span> </span>&#123;</div><div class=\"line\">    WAITING &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span> = TALKING</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    TALKING &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span> = WAITING</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">signal</span><span class=\"params\">()</span></span>: ProtocolState</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对应的方法，与复写基本方法一致。</p>\n<blockquote>\n<p>枚举类只要定义任意成员，都要使用分号区分定义枚举常量与成员。</p>\n</blockquote>\n<h2 id=\"枚举常量的使用\"><a href=\"#枚举常量的使用\" class=\"headerlink\" title=\"枚举常量的使用\"></a>枚举常量的使用</h2><p>与Java相似，Kotlin的枚举常量也有综合方法来列取枚举常量，通过常量名来获取常量值。这些方法的签名如下所示（假设枚举类名为<code>EnumClass</code>）：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumClass.valueOf(value: String): EnumClass</div><div class=\"line\">EnumClass.values(): Array&lt;EnumClass&gt;</div></pre></td></tr></table></figure></p>\n<p>如果给定名称不满足枚举类中的任一枚举常量，会抛出<code>IllegalArgumentException</code>异常。</p>\n<p>从Kotlin 1.1起，可以通过一般方法来访问枚举中常量：<code>enumValues&lt;T&gt;()</code>与<code>enumValueOf&lt;T&gt;()</code>函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGB</span> </span>&#123; RED, GREEN, BLUE &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T : Enum&lt;T&gt;</span>&gt; <span class=\"title\">printAllValues</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    print(enumValues&lt;T&gt;().joinToString &#123; it.name &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printAllValues&lt;RGB&gt;() <span class=\"comment\">// prints RED, GREEN, BLUE</span></div></pre></td></tr></table></figure></p>\n<p>每个枚举常量都有属性来获取枚举名称和在枚举类中声明的位置。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> name: String</div><div class=\"line\"><span class=\"keyword\">val</span> ordinal: <span class=\"built_in\">Int</span></div></pre></td></tr></table></figure>\n<p>枚举常量实现了<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparable/index.html\" target=\"_blank\" rel=\"external\"><code>Comparable</code></a>接口，按照在枚举类中定的顺序自然排序。</p>\n"},{"title":"Kotlin基础之字段、接口","date":"2017-07-03T07:49:07.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 属性与字段\n## 属性声明\nKotlin中类拥有属性。用`var`关键字声明为可变属性，或用`val`关键字声明为只读属性。\n\n```kotlin\nclass Address {\n    var name: String = ...\n    var street: String = ...\n    var city: String = ...\n    var state: String? = ...\n    var zip: String = ...\n}\n```\n使用属相，只要像Java的字段一样，通过名称来进行引用。\n```kotlin\nfun copyAddress(address: Address): Address {\n    val result = Address() // 初始化对象，无`new`关键字\n    result.name = address.name // accessors are called\n    result.street = address.street\n    // ...\n    return result\n}\n```\n\n## Getter、Setter方法\n声明属性的完整语法\n```kotlin\nvar <propertyName>[: <PropertyType>] [= <property_initializer>]\n    [<getter>]\n    [<setter>]\n```\n初始化，getter和setter都为可选项。如果属性类型可以从初始化（或从getter的返回值）中推断出，则可省略属性的`PropertyType`\n\n```kotlin\nvar allByDefault: Int? // 错误：需要显式初始化。getter和setter默认\nvar initialized = 1  // Int类型，默认getter和setter\n```\n只读属性声明的语法与可变属性有两处不同：\n1. val\n2. 没有setter函数\n```kotlin\nval simple: Int? // 类型为Int，默认getter方法， 必须在构造器中初始化\nval inferredType = 1 // Int类型，默认getter\n\n```\n与普通函数相似，在属性声明中，也可以自定义访问方法。如自定义`getter`\n```kotlin\nval isEmpty: Boolean\n    get() = this.size == 0\n```\n自定义的`setter`\n```kotlin\nvar stringRepresentation: String\n    get() = this.toString()\n    set(value) {\n        setDataFromString(value) // parses the string and assigns values to other properties\n    }\n```\n依照惯例，setter参数名为`value`，也可以选择期望的属性名。\n\n从Kotlin 1.1起，如果可以从getter推断类型，则属性类型可以省略\n```kotlin\nval isEmpty get() = this.size == 0  // has type Boolean\n```\n如果需要改变访问器的可见性或注解属性，但不需要改变默认实现，可以不定义访问器的代码块\n```kotlin\nvar setterVisibility: String = \"abc\"\n    private set // setter 为 private且为默认实现\n\nvar setterWithAnnotation: Any? = null\n    @Inject set // 使用Inject注解setter\n```\n\n## Backing字段\nKoltin的类没有字段，有时在使用自定义访问器时有个Backing字段很有必要。为此，Kotlin提供了一个自动的backing字段，可以使用`field`修饰来访问\n```kotlin\nvar counter = 0 // 初始化值直接写给backing字段\n  set(value){\n    if( value > 0 ) field = value\n  }\n```\n`field`修饰符只能用在属性访问器中\n\n如果使用至少一个访问器的默认实现，会为属性生成一个Backing字段，或自定义访问器通过`field`修饰符来引用。\n\n下面情况下，就不会有Backing字段\n```kotlin\nval isEmpty: Boolean\n    get() = this.size == 0 \n```\n\n## Backing属性\n如果不满足`隐式Backing字段`条件，可以退而求其次，持有Backing属性\n```kotlin\nprivate var _table: Map<String, Int>? = null\n\npublic val table: Map<String , Int>\n    get(){\n        if(_table == null){\n            _table = HashMap() // Type parameters are inferred\n        }\n        return _table ?: throw AssertionError(\"Set to null by another thread\")\n    }\n```\n从各个方面来看，这一点与Java相同，因为用默认getter和setter来访问属性已经过优化，不会引入函数调用开销。\n\n## 编译时常量\n编译时常量是编译时已知的属性值，使用`const`修饰符来标记为*编译时常量*。此时的属性需要完全满足以下条件\n- 对象的顶层或成员\n- 通过String类型值或基本类型进行初始化\n- 无自定义getter\n\n这样的属性可用于注解。\n```kotlin\nconst val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n```\n\n## 懒初始化属性\n正常情况，非空类型的属性声明必须在构造器中声明。但是在少数情况时，这样做并不方便。如：属性可以通过依赖注入或在单元测试的`setup`方法中进行初始化，在这种情况，没办法在构造器中进行非空初始化，但仍希望在类中引用属性时，避免进行非空检查。\n\n此时，可以使用`lateinit`修饰符标记属性\n```kotlin\npublic class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // dereference directly\n    }\n}\n```\n这个修饰符只能用在类体（非首要构造器）中声明为`var`类型的属性，并且属性不能有自定义的`getter`和`setter`方法。属性类型必须为非空并且不能为基本类型。\n\n访问未初始化的`lateinit`属性会抛出`访问未初始化属性`的异常。\n\n## Overriding属性\n查看[`Overriding属性`](https://kotlinlang.org/docs/reference/classes.html#overriding-properties)\n\n## 委托属性\n最常见属性的种类是从Backing字段读取（或写入）的属性。另一种是有自定义getter和setter，可实现属性任意行为的属性。介于两者之间的有些操作属性的常见模式，如：`lazy values` , `给定指定key返回map对应的值`，`访问数据库`，`通知访问的监听`等等。\n这些常见行为模式可以使用[`委托属性`](https://kotlinlang.org/docs/reference/delegated-properties.html)库来实现。\n\n# 接口\n Kotlin的接口与Java 8非常相似，包含一些抽象方法的声明和实现。与抽象类不同的是，接口无法存储状态。接口可以有属性，但是只能是抽象的或提供具体实现的访问器。\n \n接口使用`interface`关键字来标识\n```kotlin\ninterface MyInterface{\n    fun bar()\n    \n    fun foo(){\n        // optional body\n    }\n}\n```\n\n## 接口实现\n类与对象可以实现一个或多个接口\n```kotlin\nclass Child : MyInterface {\n    override fun bar() {\n        // body\n    }\n}\n```\n\n## 接口属性\n可以在接口中声明属性。接口中声明的属性可以为抽象类型或提供具体访问器的实现。接口中声明的属性不能有Backing字段，所以接口中声明的访问器无法引用Backing字段。\n\n```kotlin\ninterface MyInterface {\n    val prop: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(prop)\n    }\n}\n\nclass Child : MyInterface {\n    override val prop: Int = 29\n}\n```\n\n## 解决接口复写冲突\n当在超类中声明多种类型时，继承这些接口时可能会出现复写相同方法情况：\n```kotlin\ninterface A {\n    fun foo() { print(\"A\") }\n    fun bar()\n}\n\ninterface B {\n    fun foo() { print(\"B\") }\n    fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n    override fun bar() { print(\"bar\") }\n}\n\nclass D : A, B {\n    override fun foo() {\n        super<A>.foo()\n        super<B>.foo()\n    }\n\n    override fun bar() {\n        super<B>.bar()\n    }\n}\n```\n接口A和接口B都声明了函数`foo`和`bar`，全部实现了`foo`，但只有B实现了`bar`。C类继承了A，所以需要复写方法`bar`并提供实现。\n\n类D实现了A和B，需要实现A和B中的所有方法并指定`D`如何实现。这个规则适应于单一实现的继承（`bar`），也适应多实现（`foo`）。","source":"_posts/Kotlin基础之属性与字段、接口.md","raw":"---\ntitle: Kotlin基础之字段、接口\ndate: 2017-07-03 15:49:07\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 属性与字段\n## 属性声明\nKotlin中类拥有属性。用`var`关键字声明为可变属性，或用`val`关键字声明为只读属性。\n\n```kotlin\nclass Address {\n    var name: String = ...\n    var street: String = ...\n    var city: String = ...\n    var state: String? = ...\n    var zip: String = ...\n}\n```\n使用属相，只要像Java的字段一样，通过名称来进行引用。\n```kotlin\nfun copyAddress(address: Address): Address {\n    val result = Address() // 初始化对象，无`new`关键字\n    result.name = address.name // accessors are called\n    result.street = address.street\n    // ...\n    return result\n}\n```\n\n## Getter、Setter方法\n声明属性的完整语法\n```kotlin\nvar <propertyName>[: <PropertyType>] [= <property_initializer>]\n    [<getter>]\n    [<setter>]\n```\n初始化，getter和setter都为可选项。如果属性类型可以从初始化（或从getter的返回值）中推断出，则可省略属性的`PropertyType`\n\n```kotlin\nvar allByDefault: Int? // 错误：需要显式初始化。getter和setter默认\nvar initialized = 1  // Int类型，默认getter和setter\n```\n只读属性声明的语法与可变属性有两处不同：\n1. val\n2. 没有setter函数\n```kotlin\nval simple: Int? // 类型为Int，默认getter方法， 必须在构造器中初始化\nval inferredType = 1 // Int类型，默认getter\n\n```\n与普通函数相似，在属性声明中，也可以自定义访问方法。如自定义`getter`\n```kotlin\nval isEmpty: Boolean\n    get() = this.size == 0\n```\n自定义的`setter`\n```kotlin\nvar stringRepresentation: String\n    get() = this.toString()\n    set(value) {\n        setDataFromString(value) // parses the string and assigns values to other properties\n    }\n```\n依照惯例，setter参数名为`value`，也可以选择期望的属性名。\n\n从Kotlin 1.1起，如果可以从getter推断类型，则属性类型可以省略\n```kotlin\nval isEmpty get() = this.size == 0  // has type Boolean\n```\n如果需要改变访问器的可见性或注解属性，但不需要改变默认实现，可以不定义访问器的代码块\n```kotlin\nvar setterVisibility: String = \"abc\"\n    private set // setter 为 private且为默认实现\n\nvar setterWithAnnotation: Any? = null\n    @Inject set // 使用Inject注解setter\n```\n\n## Backing字段\nKoltin的类没有字段，有时在使用自定义访问器时有个Backing字段很有必要。为此，Kotlin提供了一个自动的backing字段，可以使用`field`修饰来访问\n```kotlin\nvar counter = 0 // 初始化值直接写给backing字段\n  set(value){\n    if( value > 0 ) field = value\n  }\n```\n`field`修饰符只能用在属性访问器中\n\n如果使用至少一个访问器的默认实现，会为属性生成一个Backing字段，或自定义访问器通过`field`修饰符来引用。\n\n下面情况下，就不会有Backing字段\n```kotlin\nval isEmpty: Boolean\n    get() = this.size == 0 \n```\n\n## Backing属性\n如果不满足`隐式Backing字段`条件，可以退而求其次，持有Backing属性\n```kotlin\nprivate var _table: Map<String, Int>? = null\n\npublic val table: Map<String , Int>\n    get(){\n        if(_table == null){\n            _table = HashMap() // Type parameters are inferred\n        }\n        return _table ?: throw AssertionError(\"Set to null by another thread\")\n    }\n```\n从各个方面来看，这一点与Java相同，因为用默认getter和setter来访问属性已经过优化，不会引入函数调用开销。\n\n## 编译时常量\n编译时常量是编译时已知的属性值，使用`const`修饰符来标记为*编译时常量*。此时的属性需要完全满足以下条件\n- 对象的顶层或成员\n- 通过String类型值或基本类型进行初始化\n- 无自定义getter\n\n这样的属性可用于注解。\n```kotlin\nconst val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n```\n\n## 懒初始化属性\n正常情况，非空类型的属性声明必须在构造器中声明。但是在少数情况时，这样做并不方便。如：属性可以通过依赖注入或在单元测试的`setup`方法中进行初始化，在这种情况，没办法在构造器中进行非空初始化，但仍希望在类中引用属性时，避免进行非空检查。\n\n此时，可以使用`lateinit`修饰符标记属性\n```kotlin\npublic class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // dereference directly\n    }\n}\n```\n这个修饰符只能用在类体（非首要构造器）中声明为`var`类型的属性，并且属性不能有自定义的`getter`和`setter`方法。属性类型必须为非空并且不能为基本类型。\n\n访问未初始化的`lateinit`属性会抛出`访问未初始化属性`的异常。\n\n## Overriding属性\n查看[`Overriding属性`](https://kotlinlang.org/docs/reference/classes.html#overriding-properties)\n\n## 委托属性\n最常见属性的种类是从Backing字段读取（或写入）的属性。另一种是有自定义getter和setter，可实现属性任意行为的属性。介于两者之间的有些操作属性的常见模式，如：`lazy values` , `给定指定key返回map对应的值`，`访问数据库`，`通知访问的监听`等等。\n这些常见行为模式可以使用[`委托属性`](https://kotlinlang.org/docs/reference/delegated-properties.html)库来实现。\n\n# 接口\n Kotlin的接口与Java 8非常相似，包含一些抽象方法的声明和实现。与抽象类不同的是，接口无法存储状态。接口可以有属性，但是只能是抽象的或提供具体实现的访问器。\n \n接口使用`interface`关键字来标识\n```kotlin\ninterface MyInterface{\n    fun bar()\n    \n    fun foo(){\n        // optional body\n    }\n}\n```\n\n## 接口实现\n类与对象可以实现一个或多个接口\n```kotlin\nclass Child : MyInterface {\n    override fun bar() {\n        // body\n    }\n}\n```\n\n## 接口属性\n可以在接口中声明属性。接口中声明的属性可以为抽象类型或提供具体访问器的实现。接口中声明的属性不能有Backing字段，所以接口中声明的访问器无法引用Backing字段。\n\n```kotlin\ninterface MyInterface {\n    val prop: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(prop)\n    }\n}\n\nclass Child : MyInterface {\n    override val prop: Int = 29\n}\n```\n\n## 解决接口复写冲突\n当在超类中声明多种类型时，继承这些接口时可能会出现复写相同方法情况：\n```kotlin\ninterface A {\n    fun foo() { print(\"A\") }\n    fun bar()\n}\n\ninterface B {\n    fun foo() { print(\"B\") }\n    fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n    override fun bar() { print(\"bar\") }\n}\n\nclass D : A, B {\n    override fun foo() {\n        super<A>.foo()\n        super<B>.foo()\n    }\n\n    override fun bar() {\n        super<B>.bar()\n    }\n}\n```\n接口A和接口B都声明了函数`foo`和`bar`，全部实现了`foo`，但只有B实现了`bar`。C类继承了A，所以需要复写方法`bar`并提供实现。\n\n类D实现了A和B，需要实现A和B中的所有方法并指定`D`如何实现。这个规则适应于单一实现的继承（`bar`），也适应多实现（`foo`）。","slug":"Kotlin基础之属性与字段、接口","published":1,"updated":"2017-07-03T07:49:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxu000pc0m33sbjjrz4","content":"<h1 id=\"属性与字段\"><a href=\"#属性与字段\" class=\"headerlink\" title=\"属性与字段\"></a>属性与字段</h1><h2 id=\"属性声明\"><a href=\"#属性声明\" class=\"headerlink\" title=\"属性声明\"></a>属性声明</h2><p>Kotlin中类拥有属性。用<code>var</code>关键字声明为可变属性，或用<code>val</code>关键字声明为只读属性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> street: String = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> city: String = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> state: String? = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> zip: String = ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用属相，只要像Java的字段一样，通过名称来进行引用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copyAddress</span><span class=\"params\">(address: <span class=\"type\">Address</span>)</span></span>: Address &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = Address() <span class=\"comment\">// 初始化对象，无`new`关键字</span></div><div class=\"line\">    result.name = address.name <span class=\"comment\">// accessors are called</span></div><div class=\"line\">    result.street = address.street</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Getter、Setter方法\"><a href=\"#Getter、Setter方法\" class=\"headerlink\" title=\"Getter、Setter方法\"></a>Getter、Setter方法</h2><p>声明属性的完整语法<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</div><div class=\"line\">    [&lt;getter&gt;]</div><div class=\"line\">    [&lt;setter&gt;]</div></pre></td></tr></table></figure></p>\n<p>初始化，getter和setter都为可选项。如果属性类型可以从初始化（或从getter的返回值）中推断出，则可省略属性的<code>PropertyType</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> allByDefault: <span class=\"built_in\">Int</span>? <span class=\"comment\">// 错误：需要显式初始化。getter和setter默认</span></div><div class=\"line\"><span class=\"keyword\">var</span> initialized = <span class=\"number\">1</span>  <span class=\"comment\">// Int类型，默认getter和setter</span></div></pre></td></tr></table></figure>\n<p>只读属性声明的语法与可变属性有两处不同：</p>\n<ol>\n<li>val</li>\n<li>没有setter函数<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> simple: <span class=\"built_in\">Int</span>? <span class=\"comment\">// 类型为Int，默认getter方法， 必须在构造器中初始化</span></div><div class=\"line\"><span class=\"keyword\">val</span> inferredType = <span class=\"number\">1</span> <span class=\"comment\">// Int类型，默认getter</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>与普通函数相似，在属性声明中，也可以自定义访问方法。如自定义<code>getter</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> isEmpty: <span class=\"built_in\">Boolean</span></div><div class=\"line\">    <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>自定义的<code>setter</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stringRepresentation: String</div><div class=\"line\">    <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.toString()</div><div class=\"line\">    <span class=\"keyword\">set</span>(value) &#123;</div><div class=\"line\">        setDataFromString(value) <span class=\"comment\">// parses the string and assigns values to other properties</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>依照惯例，setter参数名为<code>value</code>，也可以选择期望的属性名。</p>\n<p>从Kotlin 1.1起，如果可以从getter推断类型，则属性类型可以省略<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> isEmpty <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span>  <span class=\"comment\">// has type Boolean</span></div></pre></td></tr></table></figure></p>\n<p>如果需要改变访问器的可见性或注解属性，但不需要改变默认实现，可以不定义访问器的代码块<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> setterVisibility: String = <span class=\"string\">\"abc\"</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">set</span> <span class=\"comment\">// setter 为 private且为默认实现</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> setterWithAnnotation: Any? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span> <span class=\"keyword\">set</span> <span class=\"comment\">// 使用Inject注解setter</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Backing字段\"><a href=\"#Backing字段\" class=\"headerlink\" title=\"Backing字段\"></a>Backing字段</h2><p>Koltin的类没有字段，有时在使用自定义访问器时有个Backing字段很有必要。为此，Kotlin提供了一个自动的backing字段，可以使用<code>field</code>修饰来访问<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span> <span class=\"comment\">// 初始化值直接写给backing字段</span></div><div class=\"line\">  <span class=\"keyword\">set</span>(value)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( value &gt; <span class=\"number\">0</span> ) field = value</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>field</code>修饰符只能用在属性访问器中</p>\n<p>如果使用至少一个访问器的默认实现，会为属性生成一个Backing字段，或自定义访问器通过<code>field</code>修饰符来引用。</p>\n<p>下面情况下，就不会有Backing字段<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> isEmpty: <span class=\"built_in\">Boolean</span></div><div class=\"line\">    <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Backing属性\"><a href=\"#Backing属性\" class=\"headerlink\" title=\"Backing属性\"></a>Backing属性</h2><p>如果不满足<code>隐式Backing字段</code>条件，可以退而求其次，持有Backing属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> _table: Map&lt;String, <span class=\"built_in\">Int</span>&gt;? = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">val</span> table: Map&lt;String , <span class=\"built_in\">Int</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">get</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(_table == <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">            _table = HashMap() <span class=\"comment\">// Type parameters are inferred</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> _table ?: <span class=\"keyword\">throw</span> AssertionError(<span class=\"string\">\"Set to null by another thread\"</span>)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从各个方面来看，这一点与Java相同，因为用默认getter和setter来访问属性已经过优化，不会引入函数调用开销。</p>\n<h2 id=\"编译时常量\"><a href=\"#编译时常量\" class=\"headerlink\" title=\"编译时常量\"></a>编译时常量</h2><p>编译时常量是编译时已知的属性值，使用<code>const</code>修饰符来标记为<em>编译时常量</em>。此时的属性需要完全满足以下条件</p>\n<ul>\n<li>对象的顶层或成员</li>\n<li>通过String类型值或基本类型进行初始化</li>\n<li>无自定义getter</li>\n</ul>\n<p>这样的属性可用于注解。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">const <span class=\"keyword\">val</span> SUBSYSTEM_DEPRECATED: String = <span class=\"string\">\"This subsystem is deprecated\"</span></div><div class=\"line\"><span class=\"meta\">@Deprecated(SUBSYSTEM_DEPRECATED)</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"懒初始化属性\"><a href=\"#懒初始化属性\" class=\"headerlink\" title=\"懒初始化属性\"></a>懒初始化属性</h2><p>正常情况，非空类型的属性声明必须在构造器中声明。但是在少数情况时，这样做并不方便。如：属性可以通过依赖注入或在单元测试的<code>setup</code>方法中进行初始化，在这种情况，没办法在构造器中进行非空初始化，但仍希望在类中引用属性时，避免进行非空检查。</p>\n<p>此时，可以使用<code>lateinit</code>修饰符标记属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> subject: TestSubject</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SetUp</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        subject = TestSubject()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        subject.method()  <span class=\"comment\">// dereference directly</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个修饰符只能用在类体（非首要构造器）中声明为<code>var</code>类型的属性，并且属性不能有自定义的<code>getter</code>和<code>setter</code>方法。属性类型必须为非空并且不能为基本类型。</p>\n<p>访问未初始化的<code>lateinit</code>属性会抛出<code>访问未初始化属性</code>的异常。</p>\n<h2 id=\"Overriding属性\"><a href=\"#Overriding属性\" class=\"headerlink\" title=\"Overriding属性\"></a>Overriding属性</h2><p>查看<a href=\"https://kotlinlang.org/docs/reference/classes.html#overriding-properties\" target=\"_blank\" rel=\"external\"><code>Overriding属性</code></a></p>\n<h2 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h2><p>最常见属性的种类是从Backing字段读取（或写入）的属性。另一种是有自定义getter和setter，可实现属性任意行为的属性。介于两者之间的有些操作属性的常见模式，如：<code>lazy values</code> , <code>给定指定key返回map对应的值</code>，<code>访问数据库</code>，<code>通知访问的监听</code>等等。<br>这些常见行为模式可以使用<a href=\"https://kotlinlang.org/docs/reference/delegated-properties.html\" target=\"_blank\" rel=\"external\"><code>委托属性</code></a>库来实现。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p> Kotlin的接口与Java 8非常相似，包含一些抽象方法的声明和实现。与抽象类不同的是，接口无法存储状态。接口可以有属性，但是只能是抽象的或提供具体实现的访问器。</p>\n<p>接口使用<code>interface</code>关键字来标识<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// optional body</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"接口实现\"><a href=\"#接口实现\" class=\"headerlink\" title=\"接口实现\"></a>接口实现</h2><p>类与对象可以实现一个或多个接口<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> : <span class=\"type\">MyInterface &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// body</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"接口属性\"><a href=\"#接口属性\" class=\"headerlink\" title=\"接口属性\"></a>接口属性</h2><p>可以在接口中声明属性。接口中声明的属性可以为抽象类型或提供具体访问器的实现。接口中声明的属性不能有Backing字段，所以接口中声明的访问器无法引用Backing字段。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> prop: <span class=\"built_in\">Int</span> <span class=\"comment\">// abstract</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> propertyWithImplementation: String</div><div class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"string\">\"foo\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        print(prop)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> : <span class=\"type\">MyInterface &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> prop: <span class=\"built_in\">Int</span> = <span class=\"number\">29</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"解决接口复写冲突\"><a href=\"#解决接口复写冲突\" class=\"headerlink\" title=\"解决接口复写冲突\"></a>解决接口复写冲突</h2><p>当在超类中声明多种类型时，继承这些接口时可能会出现复写相同方法情况：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"A\"</span>) &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"B\"</span>) &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"bar\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> : <span class=\"type\">A &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"bar\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> : <span class=\"type\">A</span>, <span class=\"type\">B &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;A&gt;.foo()</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.foo()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.bar()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接口A和接口B都声明了函数<code>foo</code>和<code>bar</code>，全部实现了<code>foo</code>，但只有B实现了<code>bar</code>。C类继承了A，所以需要复写方法<code>bar</code>并提供实现。</p>\n<p>类D实现了A和B，需要实现A和B中的所有方法并指定<code>D</code>如何实现。这个规则适应于单一实现的继承（<code>bar</code>），也适应多实现（<code>foo</code>）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"属性与字段\"><a href=\"#属性与字段\" class=\"headerlink\" title=\"属性与字段\"></a>属性与字段</h1><h2 id=\"属性声明\"><a href=\"#属性声明\" class=\"headerlink\" title=\"属性声明\"></a>属性声明</h2><p>Kotlin中类拥有属性。用<code>var</code>关键字声明为可变属性，或用<code>val</code>关键字声明为只读属性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> street: String = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> city: String = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> state: String? = ...</div><div class=\"line\">    <span class=\"keyword\">var</span> zip: String = ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用属相，只要像Java的字段一样，通过名称来进行引用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">copyAddress</span><span class=\"params\">(address: <span class=\"type\">Address</span>)</span></span>: Address &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = Address() <span class=\"comment\">// 初始化对象，无`new`关键字</span></div><div class=\"line\">    result.name = address.name <span class=\"comment\">// accessors are called</span></div><div class=\"line\">    result.street = address.street</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Getter、Setter方法\"><a href=\"#Getter、Setter方法\" class=\"headerlink\" title=\"Getter、Setter方法\"></a>Getter、Setter方法</h2><p>声明属性的完整语法<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</div><div class=\"line\">    [&lt;getter&gt;]</div><div class=\"line\">    [&lt;setter&gt;]</div></pre></td></tr></table></figure></p>\n<p>初始化，getter和setter都为可选项。如果属性类型可以从初始化（或从getter的返回值）中推断出，则可省略属性的<code>PropertyType</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> allByDefault: <span class=\"built_in\">Int</span>? <span class=\"comment\">// 错误：需要显式初始化。getter和setter默认</span></div><div class=\"line\"><span class=\"keyword\">var</span> initialized = <span class=\"number\">1</span>  <span class=\"comment\">// Int类型，默认getter和setter</span></div></pre></td></tr></table></figure>\n<p>只读属性声明的语法与可变属性有两处不同：</p>\n<ol>\n<li>val</li>\n<li>没有setter函数<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> simple: <span class=\"built_in\">Int</span>? <span class=\"comment\">// 类型为Int，默认getter方法， 必须在构造器中初始化</span></div><div class=\"line\"><span class=\"keyword\">val</span> inferredType = <span class=\"number\">1</span> <span class=\"comment\">// Int类型，默认getter</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>与普通函数相似，在属性声明中，也可以自定义访问方法。如自定义<code>getter</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> isEmpty: <span class=\"built_in\">Boolean</span></div><div class=\"line\">    <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>自定义的<code>setter</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stringRepresentation: String</div><div class=\"line\">    <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.toString()</div><div class=\"line\">    <span class=\"keyword\">set</span>(value) &#123;</div><div class=\"line\">        setDataFromString(value) <span class=\"comment\">// parses the string and assigns values to other properties</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>依照惯例，setter参数名为<code>value</code>，也可以选择期望的属性名。</p>\n<p>从Kotlin 1.1起，如果可以从getter推断类型，则属性类型可以省略<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> isEmpty <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span>  <span class=\"comment\">// has type Boolean</span></div></pre></td></tr></table></figure></p>\n<p>如果需要改变访问器的可见性或注解属性，但不需要改变默认实现，可以不定义访问器的代码块<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> setterVisibility: String = <span class=\"string\">\"abc\"</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">set</span> <span class=\"comment\">// setter 为 private且为默认实现</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> setterWithAnnotation: Any? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span> <span class=\"keyword\">set</span> <span class=\"comment\">// 使用Inject注解setter</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Backing字段\"><a href=\"#Backing字段\" class=\"headerlink\" title=\"Backing字段\"></a>Backing字段</h2><p>Koltin的类没有字段，有时在使用自定义访问器时有个Backing字段很有必要。为此，Kotlin提供了一个自动的backing字段，可以使用<code>field</code>修饰来访问<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span> <span class=\"comment\">// 初始化值直接写给backing字段</span></div><div class=\"line\">  <span class=\"keyword\">set</span>(value)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( value &gt; <span class=\"number\">0</span> ) field = value</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>field</code>修饰符只能用在属性访问器中</p>\n<p>如果使用至少一个访问器的默认实现，会为属性生成一个Backing字段，或自定义访问器通过<code>field</code>修饰符来引用。</p>\n<p>下面情况下，就不会有Backing字段<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> isEmpty: <span class=\"built_in\">Boolean</span></div><div class=\"line\">    <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Backing属性\"><a href=\"#Backing属性\" class=\"headerlink\" title=\"Backing属性\"></a>Backing属性</h2><p>如果不满足<code>隐式Backing字段</code>条件，可以退而求其次，持有Backing属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> _table: Map&lt;String, <span class=\"built_in\">Int</span>&gt;? = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">val</span> table: Map&lt;String , <span class=\"built_in\">Int</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">get</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(_table == <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">            _table = HashMap() <span class=\"comment\">// Type parameters are inferred</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> _table ?: <span class=\"keyword\">throw</span> AssertionError(<span class=\"string\">\"Set to null by another thread\"</span>)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从各个方面来看，这一点与Java相同，因为用默认getter和setter来访问属性已经过优化，不会引入函数调用开销。</p>\n<h2 id=\"编译时常量\"><a href=\"#编译时常量\" class=\"headerlink\" title=\"编译时常量\"></a>编译时常量</h2><p>编译时常量是编译时已知的属性值，使用<code>const</code>修饰符来标记为<em>编译时常量</em>。此时的属性需要完全满足以下条件</p>\n<ul>\n<li>对象的顶层或成员</li>\n<li>通过String类型值或基本类型进行初始化</li>\n<li>无自定义getter</li>\n</ul>\n<p>这样的属性可用于注解。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">const <span class=\"keyword\">val</span> SUBSYSTEM_DEPRECATED: String = <span class=\"string\">\"This subsystem is deprecated\"</span></div><div class=\"line\"><span class=\"meta\">@Deprecated(SUBSYSTEM_DEPRECATED)</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"懒初始化属性\"><a href=\"#懒初始化属性\" class=\"headerlink\" title=\"懒初始化属性\"></a>懒初始化属性</h2><p>正常情况，非空类型的属性声明必须在构造器中声明。但是在少数情况时，这样做并不方便。如：属性可以通过依赖注入或在单元测试的<code>setup</code>方法中进行初始化，在这种情况，没办法在构造器中进行非空初始化，但仍希望在类中引用属性时，避免进行非空检查。</p>\n<p>此时，可以使用<code>lateinit</code>修饰符标记属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> subject: TestSubject</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SetUp</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        subject = TestSubject()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        subject.method()  <span class=\"comment\">// dereference directly</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个修饰符只能用在类体（非首要构造器）中声明为<code>var</code>类型的属性，并且属性不能有自定义的<code>getter</code>和<code>setter</code>方法。属性类型必须为非空并且不能为基本类型。</p>\n<p>访问未初始化的<code>lateinit</code>属性会抛出<code>访问未初始化属性</code>的异常。</p>\n<h2 id=\"Overriding属性\"><a href=\"#Overriding属性\" class=\"headerlink\" title=\"Overriding属性\"></a>Overriding属性</h2><p>查看<a href=\"https://kotlinlang.org/docs/reference/classes.html#overriding-properties\" target=\"_blank\" rel=\"external\"><code>Overriding属性</code></a></p>\n<h2 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h2><p>最常见属性的种类是从Backing字段读取（或写入）的属性。另一种是有自定义getter和setter，可实现属性任意行为的属性。介于两者之间的有些操作属性的常见模式，如：<code>lazy values</code> , <code>给定指定key返回map对应的值</code>，<code>访问数据库</code>，<code>通知访问的监听</code>等等。<br>这些常见行为模式可以使用<a href=\"https://kotlinlang.org/docs/reference/delegated-properties.html\" target=\"_blank\" rel=\"external\"><code>委托属性</code></a>库来实现。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p> Kotlin的接口与Java 8非常相似，包含一些抽象方法的声明和实现。与抽象类不同的是，接口无法存储状态。接口可以有属性，但是只能是抽象的或提供具体实现的访问器。</p>\n<p>接口使用<code>interface</code>关键字来标识<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// optional body</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"接口实现\"><a href=\"#接口实现\" class=\"headerlink\" title=\"接口实现\"></a>接口实现</h2><p>类与对象可以实现一个或多个接口<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> : <span class=\"type\">MyInterface &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// body</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"接口属性\"><a href=\"#接口属性\" class=\"headerlink\" title=\"接口属性\"></a>接口属性</h2><p>可以在接口中声明属性。接口中声明的属性可以为抽象类型或提供具体访问器的实现。接口中声明的属性不能有Backing字段，所以接口中声明的访问器无法引用Backing字段。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> prop: <span class=\"built_in\">Int</span> <span class=\"comment\">// abstract</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> propertyWithImplementation: String</div><div class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"string\">\"foo\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        print(prop)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> : <span class=\"type\">MyInterface &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> prop: <span class=\"built_in\">Int</span> = <span class=\"number\">29</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"解决接口复写冲突\"><a href=\"#解决接口复写冲突\" class=\"headerlink\" title=\"解决接口复写冲突\"></a>解决接口复写冲突</h2><p>当在超类中声明多种类型时，继承这些接口时可能会出现复写相同方法情况：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"A\"</span>) &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"B\"</span>) &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"bar\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> : <span class=\"type\">A &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123; print(<span class=\"string\">\"bar\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> : <span class=\"type\">A</span>, <span class=\"type\">B &#123;</span></span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;A&gt;.foo()</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.foo()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.bar()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接口A和接口B都声明了函数<code>foo</code>和<code>bar</code>，全部实现了<code>foo</code>，但只有B实现了<code>bar</code>。C类继承了A，所以需要复写方法<code>bar</code>并提供实现。</p>\n<p>类D实现了A和B，需要实现A和B中的所有方法并指定<code>D</code>如何实现。这个规则适应于单一实现的继承（<code>bar</code>），也适应多实现（<code>foo</code>）。</p>\n"},{"title":"Kotlin基础之扩展","date":"2017-07-06T02:26:45.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 扩展\nKoltin提供与C#和Gosu类似的扩展类的功能，无须继承类或类似装饰者的设计模式。通过称为`扩展`的特殊声明实现。\n\n支持扩展函数和扩展属性\n\n## 扩展函数\n使用**接收者类型**在函数名前声明扩展函数（接收者类型为要扩展的类型）。\n\n为`MutableList<Int>`添加`swap`函数\n```kotlin\nfun MutableList<Int>.swap(index1: Int , index2: Int){\n    val tmp = this[index1] // 'this' 对应list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n```\n扩展函数中的`this`关键字对应`接收者对象`(在`.`之前的对象)。这样，就可以调用`MutableList<Int>`的`swap()`函数了。\n```kotlin\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'\n```\n函数适应于任意`MutableList<T>`，因此也可以这样做：\n```kotlin\nfun <T> MutableList<T>.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // 'this' 对应list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n\n```\n\n在函数名前声明泛型类型，参考[函数泛型](https://kotlinlang.org/docs/reference/generics.html)\n\n## 静态处理扩展\n扩展实际不会修改扩展的类型。通过定义扩展，无须向类中插入新的成员，只要使用`点表达式`就可以给这个类型创建新的可调用函数。\n\n需要强调的是，扩展函数是静态分发，也就是说，扩展函数不是接收者类型虚拟的。意味着扩展函数由表达式类型调用时函数来决定，而不是由运行时的运行结果类型决定是否被调用。如：\n```kotlin\nopen class C\n\nclass D: C()\n\nfun C.foo() = \"c\"\n\nfun D.foo() = \"d\"\n\nfun printFoo(c: C) {\n    println(c.foo())\n}\n\nprintFoo(D())\n\n```\n例子中输出结果为\"c\"，所以扩展函数只被声明时类调用。\n\n如果类有成员函数与类的扩展函数有相同的名称和参数，则类成员函数具有较高的优先级。如：\n```kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo() { println(\"extension\") }\n```\n如果调用C类型的`c.foo()`，会输出\"member\"，而非\"extension\"。\n\n然而，如果有相同名称，但是签名不同（参数不同），则扩展函数会复写成员函数。\n\n```kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo(i: Int) { println(\"extension\") }\n```\n调用`C().foo(1)`则会输出\"extension\"\n\n## 可为空的接收者\n扩展可用可为空的接收者定义。这样的扩展可被空值的对象变量调用，可在代码体中进行`this == null` 检查。所以Kotlin允许调用toString函数，而不用进行非空检查。\n```kotlin\nfun Any?.toString(): String {\n    if (this == null) return \"null\"\n    // after the null check, 'this' is autocast to a non-null type, so the toString() below\n    // resolves to the member function of the Any class\n    return toString()\n}\n```\n\n## 扩展属性\n与扩展函数相同，Kotlin还支持扩展属性\n```kotlin\nval <T> List<T>.lastIndex: Int\n    get() = size - 1\n```\n\n> 因为扩展没有向类中插入成员，因此扩展属性没有有效方法来拥有一个`backing`字段。这也就解释了对于扩展属性，初始化是不允许的，只能通过显性提供getter和setter方法来定义\n\n```kotlin\nval Foo.bar = 1 // 错。不允许为扩展属性进行初始化。\n```\n\n## 伴生对象\n如果类中定义伴生对象，也可以为伴生对象定义扩展函数和扩展属性\n```kotlin\nclass MyClass{\n    companion object{ } // 称为伴生\n}\n\nfun MyClass.Companion.foo(){\n    // ..\n}\n```\n与伴生对象常规成员类似，可以只使用类名作为限定符来调用方法。\n```kotlin\nMyClass.foo()\n```\n\n## 扩展作用域\n多数情况下在顶层定义扩展，如在包的根目录中\n```kotlin\npackage foo.bar\n \nfun Baz.goo() { ... } \n```\n在声明的包外使用扩展，需要在调用出导入：\n```kotlin\npackage com.example.usage\nimport foo.bar.goo  // 导入名称为\"goo\"的所有扩展\nimport foo.bar.*    // 导入foo.bar中所有扩展\n\nfun usage(baz: Baz){\n    baz.goo()\n}\n```\n查看[Imports](https://kotlinlang.org/docs/reference/packages.html#imports)更多信息。\n\n## 声明扩展作为成员\n在一个类可以为另外一个类声明扩展，在这样扩展中，会有多个隐性接收者对象成员，无须修饰进行访问。声明扩展的类的实例被称为`分发接收者`，扩展方法对应的接收者类型实例被称为`扩展接收者`。\n```kotlin\nclass D{\n    fun bar() { ... }\n}\n\nclass C{\n    fun baz() { ... }\n    \n    fun D.foo() {\n        bar()   // calls D.bar\n        baz()   // calls C.baz\n    }\n    \n    fun caller(d: D) {\n        d.foo()   // call the extension function\n    }\n}\n```\n如果`分发接收者`和`扩展接收者`成员命名冲突，优先使用扩展接收者的成员。可以使用[限定符](https://kotlinlang.org/docs/reference/this-expressions.html#qualified)语法引用分发接收者成员。\n```kotlin\nclass C{\n    fun D.foo(){\n        toString() // 调用D.toString()\n        this@C.toString() // 调用C.toString()\n    }\n}\n```\n声明为成员的扩展，可声明为`open`，被子类复写。意味着对于分发接收者类型，函数分发是虚的；对于扩展接收者类型，函数分发是静态的。\n```kotlin\nopen class D{\n    \n}\n\nclass D1 : D(){\n    \n}\n\nopen class C {\n    open fun D.foo(){\n        println(\"D.foo in C\")\n    }\n    \n    open fun D1.foo(){\n        println(\"D1.foo in C\")\n    }\n    \n    fun caller(d: D){\n        d.foo() // 调用扩展函数\n    }\n}\n\nclass C1 : C(){\n    override fun D.foo(){\n        println(\"D.foo in C1\")\n    }\n    \n     override fun D1.foo() {\n        println(\"D1.foo in C1\")\n    }\n    \n}\n\nC().caller(D()) // print \"D.foo in C\"\nC1().caller(D()) // prints \"D.foo in C1\" - 分发接收者是虚拟处理的\nC().caller(D1()) // prints \"D.foo in C\" - 扩展接收者是静态处理的\n\n```\n## 动机\n在Java中，我们常用`*Utils`命名的类：`FileUtils`、`StringUtils`等等。`java.util.Collections`也一样。这些Utils类最让人讨厌的部分就是使用的代码像这样：\n```java\n// Java\nCollections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))\n```\n静态导入调用方法，省略类名。\n```kotlin\n// Java\nswap(list, binarySearch(list, max(otherList)), max(list))\n```\n这样会有点好处，但是对于IDE的代码补全的帮助很少或没有帮助。如果能够像下面那样做，那么会更好：\n```kotlin\n// Java\nlist.swap(list.binarySearch(otherList.max()), list.max())\n```\n但是又不想实现list内部所有可能的方法，这也是扩展函数的有用的地方。","source":"_posts/Kotlin基础之扩展.md","raw":"---\ntitle: Kotlin基础之扩展\ndate: 2017-07-06 10:26:45\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 扩展\nKoltin提供与C#和Gosu类似的扩展类的功能，无须继承类或类似装饰者的设计模式。通过称为`扩展`的特殊声明实现。\n\n支持扩展函数和扩展属性\n\n## 扩展函数\n使用**接收者类型**在函数名前声明扩展函数（接收者类型为要扩展的类型）。\n\n为`MutableList<Int>`添加`swap`函数\n```kotlin\nfun MutableList<Int>.swap(index1: Int , index2: Int){\n    val tmp = this[index1] // 'this' 对应list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n```\n扩展函数中的`this`关键字对应`接收者对象`(在`.`之前的对象)。这样，就可以调用`MutableList<Int>`的`swap()`函数了。\n```kotlin\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'\n```\n函数适应于任意`MutableList<T>`，因此也可以这样做：\n```kotlin\nfun <T> MutableList<T>.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // 'this' 对应list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n\n```\n\n在函数名前声明泛型类型，参考[函数泛型](https://kotlinlang.org/docs/reference/generics.html)\n\n## 静态处理扩展\n扩展实际不会修改扩展的类型。通过定义扩展，无须向类中插入新的成员，只要使用`点表达式`就可以给这个类型创建新的可调用函数。\n\n需要强调的是，扩展函数是静态分发，也就是说，扩展函数不是接收者类型虚拟的。意味着扩展函数由表达式类型调用时函数来决定，而不是由运行时的运行结果类型决定是否被调用。如：\n```kotlin\nopen class C\n\nclass D: C()\n\nfun C.foo() = \"c\"\n\nfun D.foo() = \"d\"\n\nfun printFoo(c: C) {\n    println(c.foo())\n}\n\nprintFoo(D())\n\n```\n例子中输出结果为\"c\"，所以扩展函数只被声明时类调用。\n\n如果类有成员函数与类的扩展函数有相同的名称和参数，则类成员函数具有较高的优先级。如：\n```kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo() { println(\"extension\") }\n```\n如果调用C类型的`c.foo()`，会输出\"member\"，而非\"extension\"。\n\n然而，如果有相同名称，但是签名不同（参数不同），则扩展函数会复写成员函数。\n\n```kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo(i: Int) { println(\"extension\") }\n```\n调用`C().foo(1)`则会输出\"extension\"\n\n## 可为空的接收者\n扩展可用可为空的接收者定义。这样的扩展可被空值的对象变量调用，可在代码体中进行`this == null` 检查。所以Kotlin允许调用toString函数，而不用进行非空检查。\n```kotlin\nfun Any?.toString(): String {\n    if (this == null) return \"null\"\n    // after the null check, 'this' is autocast to a non-null type, so the toString() below\n    // resolves to the member function of the Any class\n    return toString()\n}\n```\n\n## 扩展属性\n与扩展函数相同，Kotlin还支持扩展属性\n```kotlin\nval <T> List<T>.lastIndex: Int\n    get() = size - 1\n```\n\n> 因为扩展没有向类中插入成员，因此扩展属性没有有效方法来拥有一个`backing`字段。这也就解释了对于扩展属性，初始化是不允许的，只能通过显性提供getter和setter方法来定义\n\n```kotlin\nval Foo.bar = 1 // 错。不允许为扩展属性进行初始化。\n```\n\n## 伴生对象\n如果类中定义伴生对象，也可以为伴生对象定义扩展函数和扩展属性\n```kotlin\nclass MyClass{\n    companion object{ } // 称为伴生\n}\n\nfun MyClass.Companion.foo(){\n    // ..\n}\n```\n与伴生对象常规成员类似，可以只使用类名作为限定符来调用方法。\n```kotlin\nMyClass.foo()\n```\n\n## 扩展作用域\n多数情况下在顶层定义扩展，如在包的根目录中\n```kotlin\npackage foo.bar\n \nfun Baz.goo() { ... } \n```\n在声明的包外使用扩展，需要在调用出导入：\n```kotlin\npackage com.example.usage\nimport foo.bar.goo  // 导入名称为\"goo\"的所有扩展\nimport foo.bar.*    // 导入foo.bar中所有扩展\n\nfun usage(baz: Baz){\n    baz.goo()\n}\n```\n查看[Imports](https://kotlinlang.org/docs/reference/packages.html#imports)更多信息。\n\n## 声明扩展作为成员\n在一个类可以为另外一个类声明扩展，在这样扩展中，会有多个隐性接收者对象成员，无须修饰进行访问。声明扩展的类的实例被称为`分发接收者`，扩展方法对应的接收者类型实例被称为`扩展接收者`。\n```kotlin\nclass D{\n    fun bar() { ... }\n}\n\nclass C{\n    fun baz() { ... }\n    \n    fun D.foo() {\n        bar()   // calls D.bar\n        baz()   // calls C.baz\n    }\n    \n    fun caller(d: D) {\n        d.foo()   // call the extension function\n    }\n}\n```\n如果`分发接收者`和`扩展接收者`成员命名冲突，优先使用扩展接收者的成员。可以使用[限定符](https://kotlinlang.org/docs/reference/this-expressions.html#qualified)语法引用分发接收者成员。\n```kotlin\nclass C{\n    fun D.foo(){\n        toString() // 调用D.toString()\n        this@C.toString() // 调用C.toString()\n    }\n}\n```\n声明为成员的扩展，可声明为`open`，被子类复写。意味着对于分发接收者类型，函数分发是虚的；对于扩展接收者类型，函数分发是静态的。\n```kotlin\nopen class D{\n    \n}\n\nclass D1 : D(){\n    \n}\n\nopen class C {\n    open fun D.foo(){\n        println(\"D.foo in C\")\n    }\n    \n    open fun D1.foo(){\n        println(\"D1.foo in C\")\n    }\n    \n    fun caller(d: D){\n        d.foo() // 调用扩展函数\n    }\n}\n\nclass C1 : C(){\n    override fun D.foo(){\n        println(\"D.foo in C1\")\n    }\n    \n     override fun D1.foo() {\n        println(\"D1.foo in C1\")\n    }\n    \n}\n\nC().caller(D()) // print \"D.foo in C\"\nC1().caller(D()) // prints \"D.foo in C1\" - 分发接收者是虚拟处理的\nC().caller(D1()) // prints \"D.foo in C\" - 扩展接收者是静态处理的\n\n```\n## 动机\n在Java中，我们常用`*Utils`命名的类：`FileUtils`、`StringUtils`等等。`java.util.Collections`也一样。这些Utils类最让人讨厌的部分就是使用的代码像这样：\n```java\n// Java\nCollections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))\n```\n静态导入调用方法，省略类名。\n```kotlin\n// Java\nswap(list, binarySearch(list, max(otherList)), max(list))\n```\n这样会有点好处，但是对于IDE的代码补全的帮助很少或没有帮助。如果能够像下面那样做，那么会更好：\n```kotlin\n// Java\nlist.swap(list.binarySearch(otherList.max()), list.max())\n```\n但是又不想实现list内部所有可能的方法，这也是扩展函数的有用的地方。","slug":"Kotlin基础之扩展","published":1,"updated":"2017-07-06T02:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxv000rc0m3r1yals3f","content":"<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>Koltin提供与C#和Gosu类似的扩展类的功能，无须继承类或类似装饰者的设计模式。通过称为<code>扩展</code>的特殊声明实现。</p>\n<p>支持扩展函数和扩展属性</p>\n<h2 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h2><p>使用<strong>接收者类型</strong>在函数名前声明扩展函数（接收者类型为要扩展的类型）。</p>\n<p>为<code>MutableList&lt;Int&gt;</code>添加<code>swap</code>函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> MutableList<span class=\"type\">&lt;Int&gt;</span>.<span class=\"title\">swap</span><span class=\"params\">(index1: <span class=\"type\">Int</span> , index2: <span class=\"type\">Int</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> tmp = <span class=\"keyword\">this</span>[index1] <span class=\"comment\">// 'this' 对应list</span></div><div class=\"line\">    <span class=\"keyword\">this</span>[index1] = <span class=\"keyword\">this</span>[index2]</div><div class=\"line\">    <span class=\"keyword\">this</span>[index2] = tmp</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>扩展函数中的<code>this</code>关键字对应<code>接收者对象</code>(在<code>.</code>之前的对象)。这样，就可以调用<code>MutableList&lt;Int&gt;</code>的<code>swap()</code>函数了。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> l = mutableListOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">l.swap(<span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 'this' inside 'swap()' will hold the value of 'l'</span></div></pre></td></tr></table></figure></p>\n<p>函数适应于任意<code>MutableList&lt;T&gt;</code>，因此也可以这样做：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> MutableList<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">swap</span><span class=\"params\">(index1: <span class=\"type\">Int</span>, index2: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> tmp = <span class=\"keyword\">this</span>[index1] <span class=\"comment\">// 'this' 对应list</span></div><div class=\"line\">    <span class=\"keyword\">this</span>[index1] = <span class=\"keyword\">this</span>[index2]</div><div class=\"line\">    <span class=\"keyword\">this</span>[index2] = tmp</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在函数名前声明泛型类型，参考<a href=\"https://kotlinlang.org/docs/reference/generics.html\" target=\"_blank\" rel=\"external\">函数泛型</a></p>\n<h2 id=\"静态处理扩展\"><a href=\"#静态处理扩展\" class=\"headerlink\" title=\"静态处理扩展\"></a>静态处理扩展</h2><p>扩展实际不会修改扩展的类型。通过定义扩展，无须向类中插入新的成员，只要使用<code>点表达式</code>就可以给这个类型创建新的可调用函数。</p>\n<p>需要强调的是，扩展函数是静态分发，也就是说，扩展函数不是接收者类型虚拟的。意味着扩展函数由表达式类型调用时函数来决定，而不是由运行时的运行结果类型决定是否被调用。如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>: <span class=\"type\">C</span></span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> C.<span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"string\">\"c\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"string\">\"d\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printFoo</span><span class=\"params\">(c: <span class=\"type\">C</span>)</span></span> &#123;</div><div class=\"line\">    println(c.foo())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printFoo(D())</div></pre></td></tr></table></figure></p>\n<p>例子中输出结果为”c”，所以扩展函数只被声明时类调用。</p>\n<p>如果类有成员函数与类的扩展函数有相同的名称和参数，则类成员函数具有较高的优先级。如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; println(<span class=\"string\">\"member\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> C.<span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; println(<span class=\"string\">\"extension\"</span>) &#125;</div></pre></td></tr></table></figure></p>\n<p>如果调用C类型的<code>c.foo()</code>，会输出”member”，而非”extension”。</p>\n<p>然而，如果有相同名称，但是签名不同（参数不同），则扩展函数会复写成员函数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; println(<span class=\"string\">\"member\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> C.<span class=\"title\">foo</span><span class=\"params\">(i: <span class=\"type\">Int</span>)</span></span> &#123; println(<span class=\"string\">\"extension\"</span>) &#125;</div></pre></td></tr></table></figure>\n<p>调用<code>C().foo(1)</code>则会输出”extension”</p>\n<h2 id=\"可为空的接收者\"><a href=\"#可为空的接收者\" class=\"headerlink\" title=\"可为空的接收者\"></a>可为空的接收者</h2><p>扩展可用可为空的接收者定义。这样的扩展可被空值的对象变量调用，可在代码体中进行<code>this == null</code> 检查。所以Kotlin允许调用toString函数，而不用进行非空检查。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Any?.<span class=\"title\">toString</span><span class=\"params\">()</span></span>: String &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span></div><div class=\"line\">    <span class=\"comment\">// after the null check, 'this' is autocast to a non-null type, so the toString() below</span></div><div class=\"line\">    <span class=\"comment\">// resolves to the member function of the Any class</span></div><div class=\"line\">    <span class=\"keyword\">return</span> toString()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩展属性\"><a href=\"#扩展属性\" class=\"headerlink\" title=\"扩展属性\"></a>扩展属性</h2><p>与扩展函数相同，Kotlin还支持扩展属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> &lt;T&gt; List&lt;T&gt;.lastIndex: <span class=\"built_in\">Int</span></div><div class=\"line\">    <span class=\"keyword\">get</span>() = size - <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>因为扩展没有向类中插入成员，因此扩展属性没有有效方法来拥有一个<code>backing</code>字段。这也就解释了对于扩展属性，初始化是不允许的，只能通过显性提供getter和setter方法来定义</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> Foo.bar = <span class=\"number\">1</span> <span class=\"comment\">// 错。不允许为扩展属性进行初始化。</span></div></pre></td></tr></table></figure>\n<h2 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h2><p>如果类中定义伴生对象，也可以为伴生对象定义扩展函数和扩展属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123; &#125; <span class=\"comment\">// 称为伴生</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> MyClass.Companion.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ..</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>与伴生对象常规成员类似，可以只使用类名作为限定符来调用方法。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyClass.foo()</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩展作用域\"><a href=\"#扩展作用域\" class=\"headerlink\" title=\"扩展作用域\"></a>扩展作用域</h2><p>多数情况下在顶层定义扩展，如在包的根目录中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> foo.bar</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Baz.<span class=\"title\">goo</span><span class=\"params\">()</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>在声明的包外使用扩展，需要在调用出导入：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.usage</div><div class=\"line\"><span class=\"keyword\">import</span> foo.bar.goo  <span class=\"comment\">// 导入名称为\"goo\"的所有扩展</span></div><div class=\"line\"><span class=\"keyword\">import</span> foo.bar.*    <span class=\"comment\">// 导入foo.bar中所有扩展</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">usage</span><span class=\"params\">(baz: <span class=\"type\">Baz</span>)</span></span>&#123;</div><div class=\"line\">    baz.goo()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/packages.html#imports\" target=\"_blank\" rel=\"external\">Imports</a>更多信息。</p>\n<h2 id=\"声明扩展作为成员\"><a href=\"#声明扩展作为成员\" class=\"headerlink\" title=\"声明扩展作为成员\"></a>声明扩展作为成员</h2><p>在一个类可以为另外一个类声明扩展，在这样扩展中，会有多个隐性接收者对象成员，无须修饰进行访问。声明扩展的类的实例被称为<code>分发接收者</code>，扩展方法对应的接收者类型实例被称为<code>扩展接收者</code>。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">baz</span><span class=\"params\">()</span></span> &#123; ... &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        bar()   <span class=\"comment\">// calls D.bar</span></div><div class=\"line\">        baz()   <span class=\"comment\">// calls C.baz</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">caller</span><span class=\"params\">(d: <span class=\"type\">D</span>)</span></span> &#123;</div><div class=\"line\">        d.foo()   <span class=\"comment\">// call the extension function</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果<code>分发接收者</code>和<code>扩展接收者</code>成员命名冲突，优先使用扩展接收者的成员。可以使用<a href=\"https://kotlinlang.org/docs/reference/this-expressions.html#qualified\" target=\"_blank\" rel=\"external\">限定符</a>语法引用分发接收者成员。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        toString() <span class=\"comment\">// 调用D.toString()</span></div><div class=\"line\">        <span class=\"keyword\">this</span><span class=\"symbol\">@C</span>.toString() <span class=\"comment\">// 调用C.toString()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>声明为成员的扩展，可声明为<code>open</code>，被子类复写。意味着对于分发接收者类型，函数分发是虚的；对于扩展接收者类型，函数分发是静态的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D1</span> : <span class=\"type\">D</span></span>()&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"D.foo in C\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> D1.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"D1.foo in C\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">caller</span><span class=\"params\">(d: <span class=\"type\">D</span>)</span></span>&#123;</div><div class=\"line\">        d.foo() <span class=\"comment\">// 调用扩展函数</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C1</span> : <span class=\"type\">C</span></span>()&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"D.foo in C1\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> D1.<span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        println(<span class=\"string\">\"D1.foo in C1\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">C().caller(D()) <span class=\"comment\">// print \"D.foo in C\"</span></div><div class=\"line\">C1().caller(D()) <span class=\"comment\">// prints \"D.foo in C1\" - 分发接收者是虚拟处理的</span></div><div class=\"line\">C().caller(D1()) <span class=\"comment\">// prints \"D.foo in C\" - 扩展接收者是静态处理的</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在Java中，我们常用<code>*Utils</code>命名的类：<code>FileUtils</code>、<code>StringUtils</code>等等。<code>java.util.Collections</code>也一样。这些Utils类最让人讨厌的部分就是使用的代码像这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">Collections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))</div></pre></td></tr></table></figure></p>\n<p>静态导入调用方法，省略类名。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">swap(list, binarySearch(list, max(otherList)), max(list))</div></pre></td></tr></table></figure></p>\n<p>这样会有点好处，但是对于IDE的代码补全的帮助很少或没有帮助。如果能够像下面那样做，那么会更好：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">list.swap(list.binarySearch(otherList.max()), list.max())</div></pre></td></tr></table></figure></p>\n<p>但是又不想实现list内部所有可能的方法，这也是扩展函数的有用的地方。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>Koltin提供与C#和Gosu类似的扩展类的功能，无须继承类或类似装饰者的设计模式。通过称为<code>扩展</code>的特殊声明实现。</p>\n<p>支持扩展函数和扩展属性</p>\n<h2 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h2><p>使用<strong>接收者类型</strong>在函数名前声明扩展函数（接收者类型为要扩展的类型）。</p>\n<p>为<code>MutableList&lt;Int&gt;</code>添加<code>swap</code>函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> MutableList<span class=\"type\">&lt;Int&gt;</span>.<span class=\"title\">swap</span><span class=\"params\">(index1: <span class=\"type\">Int</span> , index2: <span class=\"type\">Int</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> tmp = <span class=\"keyword\">this</span>[index1] <span class=\"comment\">// 'this' 对应list</span></div><div class=\"line\">    <span class=\"keyword\">this</span>[index1] = <span class=\"keyword\">this</span>[index2]</div><div class=\"line\">    <span class=\"keyword\">this</span>[index2] = tmp</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>扩展函数中的<code>this</code>关键字对应<code>接收者对象</code>(在<code>.</code>之前的对象)。这样，就可以调用<code>MutableList&lt;Int&gt;</code>的<code>swap()</code>函数了。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> l = mutableListOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">l.swap(<span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 'this' inside 'swap()' will hold the value of 'l'</span></div></pre></td></tr></table></figure></p>\n<p>函数适应于任意<code>MutableList&lt;T&gt;</code>，因此也可以这样做：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> MutableList<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">swap</span><span class=\"params\">(index1: <span class=\"type\">Int</span>, index2: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> tmp = <span class=\"keyword\">this</span>[index1] <span class=\"comment\">// 'this' 对应list</span></div><div class=\"line\">    <span class=\"keyword\">this</span>[index1] = <span class=\"keyword\">this</span>[index2]</div><div class=\"line\">    <span class=\"keyword\">this</span>[index2] = tmp</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在函数名前声明泛型类型，参考<a href=\"https://kotlinlang.org/docs/reference/generics.html\" target=\"_blank\" rel=\"external\">函数泛型</a></p>\n<h2 id=\"静态处理扩展\"><a href=\"#静态处理扩展\" class=\"headerlink\" title=\"静态处理扩展\"></a>静态处理扩展</h2><p>扩展实际不会修改扩展的类型。通过定义扩展，无须向类中插入新的成员，只要使用<code>点表达式</code>就可以给这个类型创建新的可调用函数。</p>\n<p>需要强调的是，扩展函数是静态分发，也就是说，扩展函数不是接收者类型虚拟的。意味着扩展函数由表达式类型调用时函数来决定，而不是由运行时的运行结果类型决定是否被调用。如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>: <span class=\"type\">C</span></span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> C.<span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"string\">\"c\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"string\">\"d\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printFoo</span><span class=\"params\">(c: <span class=\"type\">C</span>)</span></span> &#123;</div><div class=\"line\">    println(c.foo())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printFoo(D())</div></pre></td></tr></table></figure></p>\n<p>例子中输出结果为”c”，所以扩展函数只被声明时类调用。</p>\n<p>如果类有成员函数与类的扩展函数有相同的名称和参数，则类成员函数具有较高的优先级。如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; println(<span class=\"string\">\"member\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> C.<span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; println(<span class=\"string\">\"extension\"</span>) &#125;</div></pre></td></tr></table></figure></p>\n<p>如果调用C类型的<code>c.foo()</code>，会输出”member”，而非”extension”。</p>\n<p>然而，如果有相同名称，但是签名不同（参数不同），则扩展函数会复写成员函数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123; println(<span class=\"string\">\"member\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> C.<span class=\"title\">foo</span><span class=\"params\">(i: <span class=\"type\">Int</span>)</span></span> &#123; println(<span class=\"string\">\"extension\"</span>) &#125;</div></pre></td></tr></table></figure>\n<p>调用<code>C().foo(1)</code>则会输出”extension”</p>\n<h2 id=\"可为空的接收者\"><a href=\"#可为空的接收者\" class=\"headerlink\" title=\"可为空的接收者\"></a>可为空的接收者</h2><p>扩展可用可为空的接收者定义。这样的扩展可被空值的对象变量调用，可在代码体中进行<code>this == null</code> 检查。所以Kotlin允许调用toString函数，而不用进行非空检查。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Any?.<span class=\"title\">toString</span><span class=\"params\">()</span></span>: String &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span></div><div class=\"line\">    <span class=\"comment\">// after the null check, 'this' is autocast to a non-null type, so the toString() below</span></div><div class=\"line\">    <span class=\"comment\">// resolves to the member function of the Any class</span></div><div class=\"line\">    <span class=\"keyword\">return</span> toString()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩展属性\"><a href=\"#扩展属性\" class=\"headerlink\" title=\"扩展属性\"></a>扩展属性</h2><p>与扩展函数相同，Kotlin还支持扩展属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> &lt;T&gt; List&lt;T&gt;.lastIndex: <span class=\"built_in\">Int</span></div><div class=\"line\">    <span class=\"keyword\">get</span>() = size - <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>因为扩展没有向类中插入成员，因此扩展属性没有有效方法来拥有一个<code>backing</code>字段。这也就解释了对于扩展属性，初始化是不允许的，只能通过显性提供getter和setter方法来定义</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> Foo.bar = <span class=\"number\">1</span> <span class=\"comment\">// 错。不允许为扩展属性进行初始化。</span></div></pre></td></tr></table></figure>\n<h2 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h2><p>如果类中定义伴生对象，也可以为伴生对象定义扩展函数和扩展属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123; &#125; <span class=\"comment\">// 称为伴生</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> MyClass.Companion.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ..</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>与伴生对象常规成员类似，可以只使用类名作为限定符来调用方法。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyClass.foo()</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩展作用域\"><a href=\"#扩展作用域\" class=\"headerlink\" title=\"扩展作用域\"></a>扩展作用域</h2><p>多数情况下在顶层定义扩展，如在包的根目录中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> foo.bar</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Baz.<span class=\"title\">goo</span><span class=\"params\">()</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>在声明的包外使用扩展，需要在调用出导入：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.usage</div><div class=\"line\"><span class=\"keyword\">import</span> foo.bar.goo  <span class=\"comment\">// 导入名称为\"goo\"的所有扩展</span></div><div class=\"line\"><span class=\"keyword\">import</span> foo.bar.*    <span class=\"comment\">// 导入foo.bar中所有扩展</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">usage</span><span class=\"params\">(baz: <span class=\"type\">Baz</span>)</span></span>&#123;</div><div class=\"line\">    baz.goo()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看<a href=\"https://kotlinlang.org/docs/reference/packages.html#imports\" target=\"_blank\" rel=\"external\">Imports</a>更多信息。</p>\n<h2 id=\"声明扩展作为成员\"><a href=\"#声明扩展作为成员\" class=\"headerlink\" title=\"声明扩展作为成员\"></a>声明扩展作为成员</h2><p>在一个类可以为另外一个类声明扩展，在这样扩展中，会有多个隐性接收者对象成员，无须修饰进行访问。声明扩展的类的实例被称为<code>分发接收者</code>，扩展方法对应的接收者类型实例被称为<code>扩展接收者</code>。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">baz</span><span class=\"params\">()</span></span> &#123; ... &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        bar()   <span class=\"comment\">// calls D.bar</span></div><div class=\"line\">        baz()   <span class=\"comment\">// calls C.baz</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">caller</span><span class=\"params\">(d: <span class=\"type\">D</span>)</span></span> &#123;</div><div class=\"line\">        d.foo()   <span class=\"comment\">// call the extension function</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果<code>分发接收者</code>和<code>扩展接收者</code>成员命名冲突，优先使用扩展接收者的成员。可以使用<a href=\"https://kotlinlang.org/docs/reference/this-expressions.html#qualified\" target=\"_blank\" rel=\"external\">限定符</a>语法引用分发接收者成员。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        toString() <span class=\"comment\">// 调用D.toString()</span></div><div class=\"line\">        <span class=\"keyword\">this</span><span class=\"symbol\">@C</span>.toString() <span class=\"comment\">// 调用C.toString()</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>声明为成员的扩展，可声明为<code>open</code>，被子类复写。意味着对于分发接收者类型，函数分发是虚的；对于扩展接收者类型，函数分发是静态的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D1</span> : <span class=\"type\">D</span></span>()&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"D.foo in C\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> D1.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"D1.foo in C\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">caller</span><span class=\"params\">(d: <span class=\"type\">D</span>)</span></span>&#123;</div><div class=\"line\">        d.foo() <span class=\"comment\">// 调用扩展函数</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C1</span> : <span class=\"type\">C</span></span>()&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> D.<span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"D.foo in C1\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> D1.<span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        println(<span class=\"string\">\"D1.foo in C1\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">C().caller(D()) <span class=\"comment\">// print \"D.foo in C\"</span></div><div class=\"line\">C1().caller(D()) <span class=\"comment\">// prints \"D.foo in C1\" - 分发接收者是虚拟处理的</span></div><div class=\"line\">C().caller(D1()) <span class=\"comment\">// prints \"D.foo in C\" - 扩展接收者是静态处理的</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在Java中，我们常用<code>*Utils</code>命名的类：<code>FileUtils</code>、<code>StringUtils</code>等等。<code>java.util.Collections</code>也一样。这些Utils类最让人讨厌的部分就是使用的代码像这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">Collections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))</div></pre></td></tr></table></figure></p>\n<p>静态导入调用方法，省略类名。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">swap(list, binarySearch(list, max(otherList)), max(list))</div></pre></td></tr></table></figure></p>\n<p>这样会有点好处，但是对于IDE的代码补全的帮助很少或没有帮助。如果能够像下面那样做，那么会更好：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Java</span></div><div class=\"line\">list.swap(list.binarySearch(otherList.max()), list.max())</div></pre></td></tr></table></figure></p>\n<p>但是又不想实现list内部所有可能的方法，这也是扩展函数的有用的地方。</p>\n"},{"title":"Kotlin基础之对象表达式与声明","date":"2017-07-06T02:27:24.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 对象声明与表达式\n有时需要创建类稍微修改的对象，不用显性声明类的子类。Java使用匿名内部类来处理，Kotlin使用对象表达式和对象声明概括。\n\n## 对象表达式\n创建继承某类的匿名类对象：\n```kotlin\nwindow.addMouseListener(object: MouseAdapter(){\n    override fun mouseClicked(e: MouseEvent){\n        // ...\n    }\n    \n    override fun mouseEntered(e: MouseEvent){\n        // ..\n    }\n})\n```\n如果超类有构造器，则需要传入合适的参数。多个超类在冒号之后使用逗号分隔\n```kotlin\nopen class A(x: Int){\n    public open val y: Int = x\n}\n\ninterface B {...}\n\nval ab: A = object : A(1) , B{\n    override val y = 15\n}\n```\n如果只需要一个对象，没有任何超类，则可以进行简化\n```kotlin\nfun foo(){\n    val adHoc = object {\n        var y: Int = 0\n        var x: Int = 0\n    }\n    \n    print(adHoc.x + adHoc.y)\n}\n```\n> 用作类型的匿名对象，只能在局部和私有声明中。如果使用匿名对象作为public函数的返回值，或public属性的类型，则函数或属性的实际类型实际为匿名类的超类或Any（未声明任何超类）。匿名对象添加的成员不能被访问。\n\n```kotlin\nclass C{\n    // 私有函数，所以返回类型为匿名对象类型\n    private fun foo() = object {\n        val x: String = \"x\"\n    }\n    \n    // Public函数，返回类型为Any\n    fun publicFoo = object {\n        val x: String = \"x\"\n    }\n    \n    fun bar() {\n        val x1: String = foo().x  // 有效\n        val x2: String = publicFoo().x // 错误：无法引用x\n    }\n}\n```\n\n就像Java的匿名内部类，对象表达式中代码可访问闭合作用域中的变量（与Java不同是变量无须限制为final）\n\n```kotlin\nfun countClicks(window: JComponent){\n    var clickCount = 0\n    var enterCount = 0\n    \n    window.addMouseListener(object : MouseAdapter){\n        override fun mouseClicked(e: MouseEvent){\n            clickCount++\n        }\n        \n        overried fun mouseEntered(e: MouseEvent){\n            enterCount++\n        }\n    }\n    \n    // ...\n}\n```\n## 对象声明\n[单例](http://en.wikipedia.org/wiki/Singleton_pattern)是一个很有用的模式，Kotlin声明单例很简单\n```kotlin\nobject DataProviderManager {\n    fun registerDataProvider(provider: DataProvider) {\n        // ...\n    }\n\n    val allDataProviders: Collection<DataProvider>\n        get() = // ...\n}\n```\n这种形式被称为*对象声明*，名称跟在关键字`object`之后。与变量声明类似，对象声明非表达式，因此不能使用赋值语句的右侧。\n\n引用对象，直接使用它的名称\n```kotlin\nDataProviderManager.registerDataProvider(...)\n```\n这样对象可以有超类\n```kotlin\nobject DefaultListener : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n        // ...\n    }\n\n    override fun mouseEntered(e: MouseEvent) {\n        // ...\n    }\n}\n```\n> 不能声明为局部对象（如直接在函数内部声明），但可以在其他对象声明中或非内部类中声明。\n\n### 伴生对象\n\n可以用`companion`关键字在类中声明对象\n```kotlin\nclass MyClass {\n    companion object Factory {\n        fun create(): MyClass = MyClass()\n    }\n}\n```\n伴生对象成员可只使用类名作为限定符调用\n```kotlin\nval instance = MyClass.create()\n```\n伴生对象名可以忽略，使用`Companion`\n```kotlin\nclass MyClass{\n    companion object {\n        \n    }\n}\n\nval x = MyClass.Companion\n```\n> 注：即使伴生对象成员看起来像其他语言中的静态成员，在运行时这些仍然是真正对象的实例成员，并且可以实现接口\n\n```kotlin\ninterface Factory<T>{\n    fun create(): T\n}\n\nclass MyClass {\n    companion object : Factory<MyClass> {\n        override fun create: MyClass = MyClass()\n    }\n}\n```\n然而在JVM上，如果使用`@JvmStatic`注解，伴生对象可以生成真正的静态成员和字段。\n\n## 对象表达式与声明语义不同\n1. 对象表达式使用时立即执行或初始化\n2. 对象声明在第一次访问时，懒初始化。\n3. 当对应类被加载时，则初始化伴生对象，符合Java静态初始化语义。\n\n","source":"_posts/Kotlin基础之对象表达式与声明.md","raw":"---\ntitle: Kotlin基础之对象表达式与声明\ndate: 2017-07-06 10:27:24\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 对象声明与表达式\n有时需要创建类稍微修改的对象，不用显性声明类的子类。Java使用匿名内部类来处理，Kotlin使用对象表达式和对象声明概括。\n\n## 对象表达式\n创建继承某类的匿名类对象：\n```kotlin\nwindow.addMouseListener(object: MouseAdapter(){\n    override fun mouseClicked(e: MouseEvent){\n        // ...\n    }\n    \n    override fun mouseEntered(e: MouseEvent){\n        // ..\n    }\n})\n```\n如果超类有构造器，则需要传入合适的参数。多个超类在冒号之后使用逗号分隔\n```kotlin\nopen class A(x: Int){\n    public open val y: Int = x\n}\n\ninterface B {...}\n\nval ab: A = object : A(1) , B{\n    override val y = 15\n}\n```\n如果只需要一个对象，没有任何超类，则可以进行简化\n```kotlin\nfun foo(){\n    val adHoc = object {\n        var y: Int = 0\n        var x: Int = 0\n    }\n    \n    print(adHoc.x + adHoc.y)\n}\n```\n> 用作类型的匿名对象，只能在局部和私有声明中。如果使用匿名对象作为public函数的返回值，或public属性的类型，则函数或属性的实际类型实际为匿名类的超类或Any（未声明任何超类）。匿名对象添加的成员不能被访问。\n\n```kotlin\nclass C{\n    // 私有函数，所以返回类型为匿名对象类型\n    private fun foo() = object {\n        val x: String = \"x\"\n    }\n    \n    // Public函数，返回类型为Any\n    fun publicFoo = object {\n        val x: String = \"x\"\n    }\n    \n    fun bar() {\n        val x1: String = foo().x  // 有效\n        val x2: String = publicFoo().x // 错误：无法引用x\n    }\n}\n```\n\n就像Java的匿名内部类，对象表达式中代码可访问闭合作用域中的变量（与Java不同是变量无须限制为final）\n\n```kotlin\nfun countClicks(window: JComponent){\n    var clickCount = 0\n    var enterCount = 0\n    \n    window.addMouseListener(object : MouseAdapter){\n        override fun mouseClicked(e: MouseEvent){\n            clickCount++\n        }\n        \n        overried fun mouseEntered(e: MouseEvent){\n            enterCount++\n        }\n    }\n    \n    // ...\n}\n```\n## 对象声明\n[单例](http://en.wikipedia.org/wiki/Singleton_pattern)是一个很有用的模式，Kotlin声明单例很简单\n```kotlin\nobject DataProviderManager {\n    fun registerDataProvider(provider: DataProvider) {\n        // ...\n    }\n\n    val allDataProviders: Collection<DataProvider>\n        get() = // ...\n}\n```\n这种形式被称为*对象声明*，名称跟在关键字`object`之后。与变量声明类似，对象声明非表达式，因此不能使用赋值语句的右侧。\n\n引用对象，直接使用它的名称\n```kotlin\nDataProviderManager.registerDataProvider(...)\n```\n这样对象可以有超类\n```kotlin\nobject DefaultListener : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n        // ...\n    }\n\n    override fun mouseEntered(e: MouseEvent) {\n        // ...\n    }\n}\n```\n> 不能声明为局部对象（如直接在函数内部声明），但可以在其他对象声明中或非内部类中声明。\n\n### 伴生对象\n\n可以用`companion`关键字在类中声明对象\n```kotlin\nclass MyClass {\n    companion object Factory {\n        fun create(): MyClass = MyClass()\n    }\n}\n```\n伴生对象成员可只使用类名作为限定符调用\n```kotlin\nval instance = MyClass.create()\n```\n伴生对象名可以忽略，使用`Companion`\n```kotlin\nclass MyClass{\n    companion object {\n        \n    }\n}\n\nval x = MyClass.Companion\n```\n> 注：即使伴生对象成员看起来像其他语言中的静态成员，在运行时这些仍然是真正对象的实例成员，并且可以实现接口\n\n```kotlin\ninterface Factory<T>{\n    fun create(): T\n}\n\nclass MyClass {\n    companion object : Factory<MyClass> {\n        override fun create: MyClass = MyClass()\n    }\n}\n```\n然而在JVM上，如果使用`@JvmStatic`注解，伴生对象可以生成真正的静态成员和字段。\n\n## 对象表达式与声明语义不同\n1. 对象表达式使用时立即执行或初始化\n2. 对象声明在第一次访问时，懒初始化。\n3. 当对应类被加载时，则初始化伴生对象，符合Java静态初始化语义。\n\n","slug":"Kotlin基础之对象表达式与声明","published":1,"updated":"2017-07-06T02:27:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxw000tc0m3wjyndmnq","content":"<h1 id=\"对象声明与表达式\"><a href=\"#对象声明与表达式\" class=\"headerlink\" title=\"对象声明与表达式\"></a>对象声明与表达式</h1><p>有时需要创建类稍微修改的对象，不用显性声明类的子类。Java使用匿名内部类来处理，Kotlin使用对象表达式和对象声明概括。</p>\n<h2 id=\"对象表达式\"><a href=\"#对象表达式\" class=\"headerlink\" title=\"对象表达式\"></a>对象表达式</h2><p>创建继承某类的匿名类对象：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addMouseListener(<span class=\"keyword\">object</span>: MouseAdapter()&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ..</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>如果超类有构造器，则需要传入合适的参数。多个超类在冒号之后使用逗号分隔<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>(x: <span class=\"built_in\">Int</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">open</span> <span class=\"keyword\">val</span> y: <span class=\"built_in\">Int</span> = x</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> ab: A = <span class=\"keyword\">object</span> : A(<span class=\"number\">1</span>) , B&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> y = <span class=\"number\">15</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果只需要一个对象，没有任何超类，则可以进行简化<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> adHoc = <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> y: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">var</span> x: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    print(adHoc.x + adHoc.y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>用作类型的匿名对象，只能在局部和私有声明中。如果使用匿名对象作为public函数的返回值，或public属性的类型，则函数或属性的实际类型实际为匿名类的超类或Any（未声明任何超类）。匿名对象添加的成员不能被访问。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 私有函数，所以返回类型为匿名对象类型</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> x: String = <span class=\"string\">\"x\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Public函数，返回类型为Any</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> publicFoo = <span class=\"keyword\">object</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">val</span> x: String = <span class=\"string\">\"x\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> x1: String = foo().x  <span class=\"comment\">// 有效</span></div><div class=\"line\">        <span class=\"keyword\">val</span> x2: String = publicFoo().x <span class=\"comment\">// 错误：无法引用x</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就像Java的匿名内部类，对象表达式中代码可访问闭合作用域中的变量（与Java不同是变量无须限制为final）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">countClicks</span><span class=\"params\">(window: <span class=\"type\">JComponent</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> clickCount = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> enterCount = <span class=\"number\">0</span></div><div class=\"line\">    </div><div class=\"line\">    window.addMouseListener(<span class=\"keyword\">object</span> : MouseAdapter)&#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">            clickCount++</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        overried <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">            enterCount++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对象声明\"><a href=\"#对象声明\" class=\"headerlink\" title=\"对象声明\"></a>对象声明</h2><p><a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" target=\"_blank\" rel=\"external\">单例</a>是一个很有用的模式，Kotlin声明单例很简单<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> DataProviderManager &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerDataProvider</span><span class=\"params\">(provider: <span class=\"type\">DataProvider</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> allDataProviders: Collection&lt;DataProvider&gt;</div><div class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种形式被称为<em>对象声明</em>，名称跟在关键字<code>object</code>之后。与变量声明类似，对象声明非表达式，因此不能使用赋值语句的右侧。</p>\n<p>引用对象，直接使用它的名称<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataProviderManager.registerDataProvider(...)</div></pre></td></tr></table></figure></p>\n<p>这样对象可以有超类<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> DefaultListener : MouseAdapter() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>不能声明为局部对象（如直接在函数内部声明），但可以在其他对象声明中或非内部类中声明。</p>\n</blockquote>\n<h3 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h3><p>可以用<code>companion</code>关键字在类中声明对象<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> Factory &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>: MyClass = MyClass()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>伴生对象成员可只使用类名作为限定符调用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> instance = MyClass.create()</div></pre></td></tr></table></figure></p>\n<p>伴生对象名可以忽略，使用<code>Companion</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> x = MyClass.Companion</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：即使伴生对象成员看起来像其他语言中的静态成员，在运行时这些仍然是真正对象的实例成员，并且可以实现接口</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Factory&lt;T&gt;&#123;</div><div class=\"line\">    fun create(): T</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MyClass &#123;</div><div class=\"line\">    companion object : Factory&lt;MyClass&gt; &#123;</div><div class=\"line\">        override fun create: MyClass = MyClass()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而在JVM上，如果使用<code>@JvmStatic</code>注解，伴生对象可以生成真正的静态成员和字段。</p>\n<h2 id=\"对象表达式与声明语义不同\"><a href=\"#对象表达式与声明语义不同\" class=\"headerlink\" title=\"对象表达式与声明语义不同\"></a>对象表达式与声明语义不同</h2><ol>\n<li>对象表达式使用时立即执行或初始化</li>\n<li>对象声明在第一次访问时，懒初始化。</li>\n<li>当对应类被加载时，则初始化伴生对象，符合Java静态初始化语义。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"对象声明与表达式\"><a href=\"#对象声明与表达式\" class=\"headerlink\" title=\"对象声明与表达式\"></a>对象声明与表达式</h1><p>有时需要创建类稍微修改的对象，不用显性声明类的子类。Java使用匿名内部类来处理，Kotlin使用对象表达式和对象声明概括。</p>\n<h2 id=\"对象表达式\"><a href=\"#对象表达式\" class=\"headerlink\" title=\"对象表达式\"></a>对象表达式</h2><p>创建继承某类的匿名类对象：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addMouseListener(<span class=\"keyword\">object</span>: MouseAdapter()&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ..</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>如果超类有构造器，则需要传入合适的参数。多个超类在冒号之后使用逗号分隔<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>(x: <span class=\"built_in\">Int</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">open</span> <span class=\"keyword\">val</span> y: <span class=\"built_in\">Int</span> = x</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> ab: A = <span class=\"keyword\">object</span> : A(<span class=\"number\">1</span>) , B&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> y = <span class=\"number\">15</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果只需要一个对象，没有任何超类，则可以进行简化<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> adHoc = <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> y: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">var</span> x: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    print(adHoc.x + adHoc.y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>用作类型的匿名对象，只能在局部和私有声明中。如果使用匿名对象作为public函数的返回值，或public属性的类型，则函数或属性的实际类型实际为匿名类的超类或Any（未声明任何超类）。匿名对象添加的成员不能被访问。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 私有函数，所以返回类型为匿名对象类型</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> = <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> x: String = <span class=\"string\">\"x\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Public函数，返回类型为Any</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> publicFoo = <span class=\"keyword\">object</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">val</span> x: String = <span class=\"string\">\"x\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> x1: String = foo().x  <span class=\"comment\">// 有效</span></div><div class=\"line\">        <span class=\"keyword\">val</span> x2: String = publicFoo().x <span class=\"comment\">// 错误：无法引用x</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就像Java的匿名内部类，对象表达式中代码可访问闭合作用域中的变量（与Java不同是变量无须限制为final）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">countClicks</span><span class=\"params\">(window: <span class=\"type\">JComponent</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> clickCount = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> enterCount = <span class=\"number\">0</span></div><div class=\"line\">    </div><div class=\"line\">    window.addMouseListener(<span class=\"keyword\">object</span> : MouseAdapter)&#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">            clickCount++</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        overried <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span>&#123;</div><div class=\"line\">            enterCount++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对象声明\"><a href=\"#对象声明\" class=\"headerlink\" title=\"对象声明\"></a>对象声明</h2><p><a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" target=\"_blank\" rel=\"external\">单例</a>是一个很有用的模式，Kotlin声明单例很简单<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> DataProviderManager &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerDataProvider</span><span class=\"params\">(provider: <span class=\"type\">DataProvider</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> allDataProviders: Collection&lt;DataProvider&gt;</div><div class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种形式被称为<em>对象声明</em>，名称跟在关键字<code>object</code>之后。与变量声明类似，对象声明非表达式，因此不能使用赋值语句的右侧。</p>\n<p>引用对象，直接使用它的名称<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataProviderManager.registerDataProvider(...)</div></pre></td></tr></table></figure></p>\n<p>这样对象可以有超类<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> DefaultListener : MouseAdapter() &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseClicked</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mouseEntered</span><span class=\"params\">(e: <span class=\"type\">MouseEvent</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>不能声明为局部对象（如直接在函数内部声明），但可以在其他对象声明中或非内部类中声明。</p>\n</blockquote>\n<h3 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h3><p>可以用<code>companion</code>关键字在类中声明对象<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> Factory &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>: MyClass = MyClass()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>伴生对象成员可只使用类名作为限定符调用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> instance = MyClass.create()</div></pre></td></tr></table></figure></p>\n<p>伴生对象名可以忽略，使用<code>Companion</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> x = MyClass.Companion</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：即使伴生对象成员看起来像其他语言中的静态成员，在运行时这些仍然是真正对象的实例成员，并且可以实现接口</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Factory&lt;T&gt;&#123;</div><div class=\"line\">    fun create(): T</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MyClass &#123;</div><div class=\"line\">    companion object : Factory&lt;MyClass&gt; &#123;</div><div class=\"line\">        override fun create: MyClass = MyClass()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而在JVM上，如果使用<code>@JvmStatic</code>注解，伴生对象可以生成真正的静态成员和字段。</p>\n<h2 id=\"对象表达式与声明语义不同\"><a href=\"#对象表达式与声明语义不同\" class=\"headerlink\" title=\"对象表达式与声明语义不同\"></a>对象表达式与声明语义不同</h2><ol>\n<li>对象表达式使用时立即执行或初始化</li>\n<li>对象声明在第一次访问时，懒初始化。</li>\n<li>当对应类被加载时，则初始化伴生对象，符合Java静态初始化语义。</li>\n</ol>\n"},{"title":"Kotlin基础之委托及委托属性","date":"2017-07-06T02:27:37.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 委托\n## 类委托\n[委托模式](https://en.wikipedia.org/wiki/Delegation_pattern)是替换继承的较好的设计模式，Kotlin天生支持委托模式，无须任何模板代码。类`Derived`可以继承`Base`接口，委托所有public方法给指定对象\n```kotlin\ninterface Base {\n    fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override fun print() { print(x)}\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>){\n    val b = BaseImpl(10)\n    \n    Derived(b).print() // 输出10\n}\n\n```\n`Derived`的超类列表中的`by`语句表示`b`会内部存储在`Derived`中，编译器会为`b`生成接口`Base`所有方法。\n\n> 复写可以与期望一样生效：编译器使用复写方法替换委托对象中的方法。如果在`Derived`中添加`override fun print() { print(\"abc\") }`，程序则会输出`abc`，而不是`10`\n\n## 委托属性\n有一些普通类型属性，尽管可以在需要时每次手动实现，如果可以一次实现所有将会更好并放入到库中。包括：\n1. 懒属性：只在第一次访问计算的值\n2. 观察属性：监听属性变化的通知\n3. 在map中存储属性，不是每个属性单个一个字段。\n\n为了覆盖这些案例，Kotlin支持委托属性\n```kotlin\nclass Example {\n    var p: String by Delegate()\n}\n```\n语法为：`val/var <property name>: <Type> by <expression>`。跟在`by`之后的表达式为`Delegate`，因为属性对应的`get()`和`set()`则被委托给它的`getValue`和`setValue`方法。属性委托不用实现任何接口，但是要提供`getValue`和`setValue`方法（var类型属性）。比如\n```kotlin\nclass Delegate {\n    operator fun getValue(thisRef: Any? , property: KProperty<*>): String{\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n    \n    operator fun setValue(thisRef: Any? , property: KProperty<*>, value: String){\n        println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n    }\n}\n```\n当读取委托给实例`Delegate`的`p`，则会调用`Delegate`的`getValue()`方法，它的第一个参数为`p`的对象，第二个参数持有`p`自己的描述（可以使用它的属性名）。如\n```kotlin\nval e = Example()\nprintln(e.p)\n```\n输出结果\n```kotlin\nExample@33a17727, thank you for delegating ‘p’ to me!\n```\n类似地，如果给`p`赋值，则调用`setValue()`函数，前两个参数一样，第三个为赋予的值\n```kotlin\ne.p = \"NEW\"\n```\n输出结果\n```kotlin\nNEW has been assigned to ‘p’ in Example@33a17727.\n```\n> 从Koltin 1.1开始，可以在函数中或代码块中声明委托属性。\n\n## 标准委托\nKotlin标准库提供几种有用类型的工厂方法，\n\n### 懒委托\n`lazy()`函数输入lambda，返回`Lazy<T>`实例，可以作为实现懒属性的委托：第一次调用执行传入`lazy()`的lambda，并记住结果，之后调用get()，只返回记住的结果\n```kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n输出结果\n```kotlin\ncomputed!\nHello\nHello\n```\n懒属性默认为同步赋值：只在一个线程中求值，所有线程都会看到相同的值。如果不需要同步初始化委托，那么多个线程可以同时执行，将`LazyThreadSafetyMode.PUBLICATION`作为参数传递给`lazy`函数。如果能够保证初始化在单线程中执行，那么可以使用`LazyThreadSafetyMode.NONE`模式，但不能保证线程安全和相关开销。\n\n## 观察者\n[Delegates.observable()](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/observable.html)有两个参数：初始值和修改处理Handler。每次给属性赋值时，都会调用handler（在赋值执行之后）。Handler有三个参数：被赋值的属性，旧值和新值\n```kotlin\nimport kotlin.properties.Delegate\n\nclass User {\n    var name: String by Delegate.observable(\"<no name>\"){\n        prop , old , new -> \n        println(\"$old -> $new\")\n    }\n}\n\nfun main(args: Array<String>){\n    val user = User()\n    user.name = \"first\"\n    user.name = \"second\"\n}\n```\n输出结果\n\n```kotlin\n<no name> -> first\nfirst -> second\n```\n如果希望拦截赋值并禁止它，使用[vetoable()](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html)替换`observable`。传给`vetoable`的handler在给属性赋新值前执行。\n\n\n## 在Map中存储新值\n我们通常使用Map来存储属性值，在应用中很常见，如解析JSON或其他动态的事。可以使用map实例本身作为委托属性的委托者。\n```kotlin\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n```\n构造器使用Map作为它的参数\n```kotlin\nval user = User(mapOf(\n    \"name\" to \"John Doe\" , \n    \"age\"  to 25\n))\n```\n委托属性按照属性名从Map中取值\n```kotlin\nprintln(user.name) // Prints \"John Doe\"\nprintln(user.age)  // Prints 25\n```\n对于`var`属性，使用`MutableMap`来替换只读的`Map`\n```kotlin\nclass MutableUser(val map: MutableMap<String, Any?>) {\n    var name: String by map\n    var age: Int     by map\n}\n```\n## 局部委托属性（从1.1开始）\n从1.1开始可以声明局部变量为委托属性，如：创建局部懒属性\n```kotlin\nfun example(compute: () -> Foo){\n    val memoizedFoo by lazy(computeFoo)\n    if (someCondition && memoizedFoo.isValid()) {\n        memoizedFoo.doSomething()\n    }\n}\n```\n`memoizedFoo`属性只在第一次访问时进行计算，如果`someCondition`失败，则不会计算变量。\n\n## 属性委托要求\n下面总结委托对象的要求\n1. 对于只读属性（val），委托对象提供名为`getValue`的函数，并带有下面几个参数\n    - `thisRef` - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）\n    - `property` - 必须为`KProperty<*>`或其子类\n    - 函数返回值必须与属性或其子类属性一致\n\n2. 对于可变属性（var）, 委托对象需要额外提供名为`setValue`的函数，并带有下面几个参数\n    - `thisRef` - 必须与`getValue()`一样\n    - `property` - 与`getValue()`一样\n    - 新值 - 类型必须与属性对象的超类一致\n    \n`getValue()`和（或）`setValue()`可能会作为委托对象的成员函数或扩展函数，当需要委托属性给对象时（没有这些函数）时，扩展函数会比较方便。这两种函数都需要使用`operator`关键字来标记。\n\n委托类可以实现`ReadOnlyProperty`或`ReadWriteProperty`其中一个接口，包含需要的`operator`方法。Kotlin标准库声明了这些接口。\n```kotlin\ninterface ReadOnlyProperty<in R, out T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n}\n\ninterface ReadWriteProperty<in R, T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n    operator fun setValue(thisRef: R, property: KProperty<*>, value: T)\n}\n```\n\n## 转换规则\n每个委托属性的内在机制：Kotlin编译器会生成一个辅助属性，并委托给为委托属性。例如：`prop`会生成`prop$delegate`隐藏属性，访问者的代码只委托给了附加的属性：\n```kotlin\nclass C{\n    var prop: Type by MyDelegate()\n}\n\n// 编译器会生成下面的代码\nclass C{\n    private val prop$delegate = MyDelegate()\n    var prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n        set(value: Type) = prop$delegate.setValue(this, this::prop, value)\n}\n```\nKoltin编译器提供有关prop的所有的必要信息：第一个参数`this`是外部类C的引用，`this::prop`是`KProperty`类型的反射对象，描述`prop`。\n> `this::prop`语法表示直接[绑定调用](https://kotlinlang.org/docs/reference/reflection.html#bound-function-and-property-references-since-11)代码中的应用，在Kotlin1.1后可用\n\n## 提供委托（从1.1开始）\n\n定义`provideDelegate`操作函数，可以继承创建对象给委托属性的逻辑。如果给在`by`右边使用的对象，定了成员函数或扩展函数`provideDelegate`，则创建委托属性时调用这个函数。\n\n使用`provideDelegate`的一种情况就是：在创建属性时，检查属性一致性，不仅仅是在`getter`和`setter`中。\n\n如：希望在绑定前，检查属性名，可以这样做\n```kotlin\nclass ResourceLoader<T>(id: ResourceID<T>) {\n    operator fun provideDelegate(\n            thisRef: MyUI,\n            prop: KProperty<*>\n    ): ReadOnlyProperty<MyUI, T> {\n        checkProperty(thisRef, prop.name)\n        // create delegate\n    }\n\n    private fun checkProperty(thisRef: MyUI, name: String) { ... }\n}\n\nfun <T> bindResource(id: ResourceID<T>): ResourceLoader<T> { ... }\n\nclass MyUI {\n    val image by bindResource(ResourceID.image_id)\n    val text by bindResource(ResourceID.text_id)\n}\n\n```\n\n`provideDelegate`参数与`getValue`一样\n- `thisRef` - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）\n- `property` - 必须为`KProperty<*>`或其子类\n\n在创建`MyUI`实例时，调用每个属性的`provideDelegate`方法，立即执行必要的验证\n\n不能够拦截`property`和委托类的绑定操作，可以显性传入属性名来达到这个效果。\n\n```kotlin\nclass MyUI {\n    val image by bindResource(ResourceID.image_id, \"image\")\n    val text by bindResource(ResourceID.text_id, \"text\")\n}\n\nfun <T> MyUI.bindResource(\n        id: ResourceID<T>,\n        propertyName: String\n): ReadOnlyProperty<MyUI, T> {\n   checkProperty(this, propertyName)\n   // create delegate\n}\n```\n在生成的代码中，`provideDelegate`方法用来初始化`prop$delegate`属性。对比上面`val prop: Type by MyDelegate()`未声明`provideDelegate`方式生成的代码：\n```kotlin\nclass C {\n    var prop: Type by MyDelegate()\n}\n\n// 编译器生成下面的代码\n// 提供provideDelegate函数时\nclass C {\n    // 调用 \"provideDelegate\" 创建 \"delegate\" 属性\n    private val prop$delegate = MyDelegate().provideDelegate(this, this::prop)\n    val prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n}\n```\n> `provideDelegate`方法只影响辅助属性的创建，不影响生成的getter和setter代码。\n\n","source":"_posts/Kotlin基础之委托及委托属性.md","raw":"---\ntitle: Kotlin基础之委托及委托属性\ndate: 2017-07-06 10:27:37\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 委托\n## 类委托\n[委托模式](https://en.wikipedia.org/wiki/Delegation_pattern)是替换继承的较好的设计模式，Kotlin天生支持委托模式，无须任何模板代码。类`Derived`可以继承`Base`接口，委托所有public方法给指定对象\n```kotlin\ninterface Base {\n    fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override fun print() { print(x)}\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>){\n    val b = BaseImpl(10)\n    \n    Derived(b).print() // 输出10\n}\n\n```\n`Derived`的超类列表中的`by`语句表示`b`会内部存储在`Derived`中，编译器会为`b`生成接口`Base`所有方法。\n\n> 复写可以与期望一样生效：编译器使用复写方法替换委托对象中的方法。如果在`Derived`中添加`override fun print() { print(\"abc\") }`，程序则会输出`abc`，而不是`10`\n\n## 委托属性\n有一些普通类型属性，尽管可以在需要时每次手动实现，如果可以一次实现所有将会更好并放入到库中。包括：\n1. 懒属性：只在第一次访问计算的值\n2. 观察属性：监听属性变化的通知\n3. 在map中存储属性，不是每个属性单个一个字段。\n\n为了覆盖这些案例，Kotlin支持委托属性\n```kotlin\nclass Example {\n    var p: String by Delegate()\n}\n```\n语法为：`val/var <property name>: <Type> by <expression>`。跟在`by`之后的表达式为`Delegate`，因为属性对应的`get()`和`set()`则被委托给它的`getValue`和`setValue`方法。属性委托不用实现任何接口，但是要提供`getValue`和`setValue`方法（var类型属性）。比如\n```kotlin\nclass Delegate {\n    operator fun getValue(thisRef: Any? , property: KProperty<*>): String{\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n    \n    operator fun setValue(thisRef: Any? , property: KProperty<*>, value: String){\n        println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n    }\n}\n```\n当读取委托给实例`Delegate`的`p`，则会调用`Delegate`的`getValue()`方法，它的第一个参数为`p`的对象，第二个参数持有`p`自己的描述（可以使用它的属性名）。如\n```kotlin\nval e = Example()\nprintln(e.p)\n```\n输出结果\n```kotlin\nExample@33a17727, thank you for delegating ‘p’ to me!\n```\n类似地，如果给`p`赋值，则调用`setValue()`函数，前两个参数一样，第三个为赋予的值\n```kotlin\ne.p = \"NEW\"\n```\n输出结果\n```kotlin\nNEW has been assigned to ‘p’ in Example@33a17727.\n```\n> 从Koltin 1.1开始，可以在函数中或代码块中声明委托属性。\n\n## 标准委托\nKotlin标准库提供几种有用类型的工厂方法，\n\n### 懒委托\n`lazy()`函数输入lambda，返回`Lazy<T>`实例，可以作为实现懒属性的委托：第一次调用执行传入`lazy()`的lambda，并记住结果，之后调用get()，只返回记住的结果\n```kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n输出结果\n```kotlin\ncomputed!\nHello\nHello\n```\n懒属性默认为同步赋值：只在一个线程中求值，所有线程都会看到相同的值。如果不需要同步初始化委托，那么多个线程可以同时执行，将`LazyThreadSafetyMode.PUBLICATION`作为参数传递给`lazy`函数。如果能够保证初始化在单线程中执行，那么可以使用`LazyThreadSafetyMode.NONE`模式，但不能保证线程安全和相关开销。\n\n## 观察者\n[Delegates.observable()](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/observable.html)有两个参数：初始值和修改处理Handler。每次给属性赋值时，都会调用handler（在赋值执行之后）。Handler有三个参数：被赋值的属性，旧值和新值\n```kotlin\nimport kotlin.properties.Delegate\n\nclass User {\n    var name: String by Delegate.observable(\"<no name>\"){\n        prop , old , new -> \n        println(\"$old -> $new\")\n    }\n}\n\nfun main(args: Array<String>){\n    val user = User()\n    user.name = \"first\"\n    user.name = \"second\"\n}\n```\n输出结果\n\n```kotlin\n<no name> -> first\nfirst -> second\n```\n如果希望拦截赋值并禁止它，使用[vetoable()](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html)替换`observable`。传给`vetoable`的handler在给属性赋新值前执行。\n\n\n## 在Map中存储新值\n我们通常使用Map来存储属性值，在应用中很常见，如解析JSON或其他动态的事。可以使用map实例本身作为委托属性的委托者。\n```kotlin\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n```\n构造器使用Map作为它的参数\n```kotlin\nval user = User(mapOf(\n    \"name\" to \"John Doe\" , \n    \"age\"  to 25\n))\n```\n委托属性按照属性名从Map中取值\n```kotlin\nprintln(user.name) // Prints \"John Doe\"\nprintln(user.age)  // Prints 25\n```\n对于`var`属性，使用`MutableMap`来替换只读的`Map`\n```kotlin\nclass MutableUser(val map: MutableMap<String, Any?>) {\n    var name: String by map\n    var age: Int     by map\n}\n```\n## 局部委托属性（从1.1开始）\n从1.1开始可以声明局部变量为委托属性，如：创建局部懒属性\n```kotlin\nfun example(compute: () -> Foo){\n    val memoizedFoo by lazy(computeFoo)\n    if (someCondition && memoizedFoo.isValid()) {\n        memoizedFoo.doSomething()\n    }\n}\n```\n`memoizedFoo`属性只在第一次访问时进行计算，如果`someCondition`失败，则不会计算变量。\n\n## 属性委托要求\n下面总结委托对象的要求\n1. 对于只读属性（val），委托对象提供名为`getValue`的函数，并带有下面几个参数\n    - `thisRef` - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）\n    - `property` - 必须为`KProperty<*>`或其子类\n    - 函数返回值必须与属性或其子类属性一致\n\n2. 对于可变属性（var）, 委托对象需要额外提供名为`setValue`的函数，并带有下面几个参数\n    - `thisRef` - 必须与`getValue()`一样\n    - `property` - 与`getValue()`一样\n    - 新值 - 类型必须与属性对象的超类一致\n    \n`getValue()`和（或）`setValue()`可能会作为委托对象的成员函数或扩展函数，当需要委托属性给对象时（没有这些函数）时，扩展函数会比较方便。这两种函数都需要使用`operator`关键字来标记。\n\n委托类可以实现`ReadOnlyProperty`或`ReadWriteProperty`其中一个接口，包含需要的`operator`方法。Kotlin标准库声明了这些接口。\n```kotlin\ninterface ReadOnlyProperty<in R, out T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n}\n\ninterface ReadWriteProperty<in R, T> {\n    operator fun getValue(thisRef: R, property: KProperty<*>): T\n    operator fun setValue(thisRef: R, property: KProperty<*>, value: T)\n}\n```\n\n## 转换规则\n每个委托属性的内在机制：Kotlin编译器会生成一个辅助属性，并委托给为委托属性。例如：`prop`会生成`prop$delegate`隐藏属性，访问者的代码只委托给了附加的属性：\n```kotlin\nclass C{\n    var prop: Type by MyDelegate()\n}\n\n// 编译器会生成下面的代码\nclass C{\n    private val prop$delegate = MyDelegate()\n    var prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n        set(value: Type) = prop$delegate.setValue(this, this::prop, value)\n}\n```\nKoltin编译器提供有关prop的所有的必要信息：第一个参数`this`是外部类C的引用，`this::prop`是`KProperty`类型的反射对象，描述`prop`。\n> `this::prop`语法表示直接[绑定调用](https://kotlinlang.org/docs/reference/reflection.html#bound-function-and-property-references-since-11)代码中的应用，在Kotlin1.1后可用\n\n## 提供委托（从1.1开始）\n\n定义`provideDelegate`操作函数，可以继承创建对象给委托属性的逻辑。如果给在`by`右边使用的对象，定了成员函数或扩展函数`provideDelegate`，则创建委托属性时调用这个函数。\n\n使用`provideDelegate`的一种情况就是：在创建属性时，检查属性一致性，不仅仅是在`getter`和`setter`中。\n\n如：希望在绑定前，检查属性名，可以这样做\n```kotlin\nclass ResourceLoader<T>(id: ResourceID<T>) {\n    operator fun provideDelegate(\n            thisRef: MyUI,\n            prop: KProperty<*>\n    ): ReadOnlyProperty<MyUI, T> {\n        checkProperty(thisRef, prop.name)\n        // create delegate\n    }\n\n    private fun checkProperty(thisRef: MyUI, name: String) { ... }\n}\n\nfun <T> bindResource(id: ResourceID<T>): ResourceLoader<T> { ... }\n\nclass MyUI {\n    val image by bindResource(ResourceID.image_id)\n    val text by bindResource(ResourceID.text_id)\n}\n\n```\n\n`provideDelegate`参数与`getValue`一样\n- `thisRef` - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）\n- `property` - 必须为`KProperty<*>`或其子类\n\n在创建`MyUI`实例时，调用每个属性的`provideDelegate`方法，立即执行必要的验证\n\n不能够拦截`property`和委托类的绑定操作，可以显性传入属性名来达到这个效果。\n\n```kotlin\nclass MyUI {\n    val image by bindResource(ResourceID.image_id, \"image\")\n    val text by bindResource(ResourceID.text_id, \"text\")\n}\n\nfun <T> MyUI.bindResource(\n        id: ResourceID<T>,\n        propertyName: String\n): ReadOnlyProperty<MyUI, T> {\n   checkProperty(this, propertyName)\n   // create delegate\n}\n```\n在生成的代码中，`provideDelegate`方法用来初始化`prop$delegate`属性。对比上面`val prop: Type by MyDelegate()`未声明`provideDelegate`方式生成的代码：\n```kotlin\nclass C {\n    var prop: Type by MyDelegate()\n}\n\n// 编译器生成下面的代码\n// 提供provideDelegate函数时\nclass C {\n    // 调用 \"provideDelegate\" 创建 \"delegate\" 属性\n    private val prop$delegate = MyDelegate().provideDelegate(this, this::prop)\n    val prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n}\n```\n> `provideDelegate`方法只影响辅助属性的创建，不影响生成的getter和setter代码。\n\n","slug":"Kotlin基础之委托及委托属性","published":1,"updated":"2017-07-06T02:27:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxx000vc0m30ymts7lb","content":"<h1 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h1><h2 id=\"类委托\"><a href=\"#类委托\" class=\"headerlink\" title=\"类委托\"></a>类委托</h2><p><a href=\"https://en.wikipedia.org/wiki/Delegation_pattern\" target=\"_blank\" rel=\"external\">委托模式</a>是替换继承的较好的设计模式，Kotlin天生支持委托模式，无须任何模板代码。类<code>Derived</code>可以继承<code>Base</code>接口，委托所有public方法给指定对象<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseImpl</span></span>(<span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span>) : Base &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print</span><span class=\"params\">()</span></span> &#123; print(x)&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span></span>(b: Base) : Base <span class=\"keyword\">by</span> b</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> b = BaseImpl(<span class=\"number\">10</span>)</div><div class=\"line\">    </div><div class=\"line\">    Derived(b).print() <span class=\"comment\">// 输出10</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Derived</code>的超类列表中的<code>by</code>语句表示<code>b</code>会内部存储在<code>Derived</code>中，编译器会为<code>b</code>生成接口<code>Base</code>所有方法。</p>\n<blockquote>\n<p>复写可以与期望一样生效：编译器使用复写方法替换委托对象中的方法。如果在<code>Derived</code>中添加<code>override fun print() { print(&quot;abc&quot;) }</code>，程序则会输出<code>abc</code>，而不是<code>10</code></p>\n</blockquote>\n<h2 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h2><p>有一些普通类型属性，尽管可以在需要时每次手动实现，如果可以一次实现所有将会更好并放入到库中。包括：</p>\n<ol>\n<li>懒属性：只在第一次访问计算的值</li>\n<li>观察属性：监听属性变化的通知</li>\n<li>在map中存储属性，不是每个属性单个一个字段。</li>\n</ol>\n<p>为了覆盖这些案例，Kotlin支持委托属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p: String <span class=\"keyword\">by</span> Delegate()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>语法为：<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code>。跟在<code>by</code>之后的表达式为<code>Delegate</code>，因为属性对应的<code>get()</code>和<code>set()</code>则被委托给它的<code>getValue</code>和<code>setValue</code>方法。属性委托不用实现任何接口，但是要提供<code>getValue</code>和<code>setValue</code>方法（var类型属性）。比如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Delegate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>? , property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"variable\">$thisRef</span>, thank you for delegating '<span class=\"subst\">$&#123;property.name&#125;</span>' to me!\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>? , property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"<span class=\"variable\">$value</span> has been assigned to '<span class=\"subst\">$&#123;property.name&#125;</span> in <span class=\"variable\">$thisRef</span>.'\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当读取委托给实例<code>Delegate</code>的<code>p</code>，则会调用<code>Delegate</code>的<code>getValue()</code>方法，它的第一个参数为<code>p</code>的对象，第二个参数持有<code>p</code>自己的描述（可以使用它的属性名）。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> e = Example()</div><div class=\"line\">println(e.p)</div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">Example@</span><span class=\"number\">33</span>a17727, thank you <span class=\"keyword\">for</span> delegating ‘p’ to me!</div></pre></td></tr></table></figure></p>\n<p>类似地，如果给<code>p</code>赋值，则调用<code>setValue()</code>函数，前两个参数一样，第三个为赋予的值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.p = <span class=\"string\">\"NEW\"</span></div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NEW has been assigned to ‘p’ <span class=\"keyword\">in</span> <span class=\"symbol\">Example@</span><span class=\"number\">33</span>a17727.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>从Koltin 1.1开始，可以在函数中或代码块中声明委托属性。</p>\n</blockquote>\n<h2 id=\"标准委托\"><a href=\"#标准委托\" class=\"headerlink\" title=\"标准委托\"></a>标准委托</h2><p>Kotlin标准库提供几种有用类型的工厂方法，</p>\n<h3 id=\"懒委托\"><a href=\"#懒委托\" class=\"headerlink\" title=\"懒委托\"></a>懒委托</h3><p><code>lazy()</code>函数输入lambda，返回<code>Lazy&lt;T&gt;</code>实例，可以作为实现懒属性的委托：第一次调用执行传入<code>lazy()</code>的lambda，并记住结果，之后调用get()，只返回记住的结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    println(<span class=\"string\">\"computed!\"</span>)</div><div class=\"line\">    <span class=\"string\">\"Hello\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed!</div><div class=\"line\">Hello</div><div class=\"line\">Hello</div></pre></td></tr></table></figure></p>\n<p>懒属性默认为同步赋值：只在一个线程中求值，所有线程都会看到相同的值。如果不需要同步初始化委托，那么多个线程可以同时执行，将<code>LazyThreadSafetyMode.PUBLICATION</code>作为参数传递给<code>lazy</code>函数。如果能够保证初始化在单线程中执行，那么可以使用<code>LazyThreadSafetyMode.NONE</code>模式，但不能保证线程安全和相关开销。</p>\n<h2 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h2><p><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/observable.html\" target=\"_blank\" rel=\"external\">Delegates.observable()</a>有两个参数：初始值和修改处理Handler。每次给属性赋值时，都会调用handler（在赋值执行之后）。Handler有三个参数：被赋值的属性，旧值和新值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> kotlin.properties.Delegate</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> Delegate.observable(<span class=\"string\">\"&lt;no name&gt;\"</span>)&#123;</div><div class=\"line\">        prop , old , new -&gt; </div><div class=\"line\">        println(<span class=\"string\">\"<span class=\"variable\">$old</span> -&gt; <span class=\"variable\">$new</span>\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> user = User()</div><div class=\"line\">    user.name = <span class=\"string\">\"first\"</span></div><div class=\"line\">    user.name = <span class=\"string\">\"second\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;no name&gt; -&gt; first</div><div class=\"line\">first -&gt; second</div></pre></td></tr></table></figure>\n<p>如果希望拦截赋值并禁止它，使用<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html\" target=\"_blank\" rel=\"external\">vetoable()</a>替换<code>observable</code>。传给<code>vetoable</code>的handler在给属性赋新值前执行。</p>\n<h2 id=\"在Map中存储新值\"><a href=\"#在Map中存储新值\" class=\"headerlink\" title=\"在Map中存储新值\"></a>在Map中存储新值</h2><p>我们通常使用Map来存储属性值，在应用中很常见，如解析JSON或其他动态的事。可以使用map实例本身作为委托属性的委托者。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> map: Map&lt;String, Any?&gt;) &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> name: String <span class=\"keyword\">by</span> map</div><div class=\"line\">    <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>构造器使用Map作为它的参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> user = User(mapOf(</div><div class=\"line\">    <span class=\"string\">\"name\"</span> to <span class=\"string\">\"John Doe\"</span> , </div><div class=\"line\">    <span class=\"string\">\"age\"</span>  to <span class=\"number\">25</span></div><div class=\"line\">))</div></pre></td></tr></table></figure></p>\n<p>委托属性按照属性名从Map中取值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(user.name) <span class=\"comment\">// Prints \"John Doe\"</span></div><div class=\"line\">println(user.age)  <span class=\"comment\">// Prints 25</span></div></pre></td></tr></table></figure></p>\n<p>对于<code>var</code>属性，使用<code>MutableMap</code>来替换只读的<code>Map</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutableUser</span></span>(<span class=\"keyword\">val</span> map: MutableMap&lt;String, Any?&gt;) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> map</div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"局部委托属性（从1-1开始）\"><a href=\"#局部委托属性（从1-1开始）\" class=\"headerlink\" title=\"局部委托属性（从1.1开始）\"></a>局部委托属性（从1.1开始）</h2><p>从1.1开始可以声明局部变量为委托属性，如：创建局部懒属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">example</span><span class=\"params\">(compute: ()</span></span> -&gt; Foo)&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> memoizedFoo <span class=\"keyword\">by</span> lazy(computeFoo)</div><div class=\"line\">    <span class=\"keyword\">if</span> (someCondition &amp;&amp; memoizedFoo.isValid()) &#123;</div><div class=\"line\">        memoizedFoo.doSomething()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>memoizedFoo</code>属性只在第一次访问时进行计算，如果<code>someCondition</code>失败，则不会计算变量。</p>\n<h2 id=\"属性委托要求\"><a href=\"#属性委托要求\" class=\"headerlink\" title=\"属性委托要求\"></a>属性委托要求</h2><p>下面总结委托对象的要求</p>\n<ol>\n<li><p>对于只读属性（val），委托对象提供名为<code>getValue</code>的函数，并带有下面几个参数</p>\n<ul>\n<li><code>thisRef</code> - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）</li>\n<li><code>property</code> - 必须为<code>KProperty&lt;*&gt;</code>或其子类</li>\n<li>函数返回值必须与属性或其子类属性一致</li>\n</ul>\n</li>\n<li><p>对于可变属性（var）, 委托对象需要额外提供名为<code>setValue</code>的函数，并带有下面几个参数</p>\n<ul>\n<li><code>thisRef</code> - 必须与<code>getValue()</code>一样</li>\n<li><code>property</code> - 与<code>getValue()</code>一样</li>\n<li>新值 - 类型必须与属性对象的超类一致</li>\n</ul>\n</li>\n</ol>\n<p><code>getValue()</code>和（或）<code>setValue()</code>可能会作为委托对象的成员函数或扩展函数，当需要委托属性给对象时（没有这些函数）时，扩展函数会比较方便。这两种函数都需要使用<code>operator</code>关键字来标记。</p>\n<p>委托类可以实现<code>ReadOnlyProperty</code>或<code>ReadWriteProperty</code>其中一个接口，包含需要的<code>operator</code>方法。Kotlin标准库声明了这些接口。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadOnlyProperty</span>&lt;<span class=\"type\">in R, out T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadWriteProperty</span>&lt;<span class=\"type\">in R, T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">T</span>)</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"转换规则\"><a href=\"#转换规则\" class=\"headerlink\" title=\"转换规则\"></a>转换规则</h2><p>每个委托属性的内在机制：Kotlin编译器会生成一个辅助属性，并委托给为委托属性。例如：<code>prop</code>会生成<code>prop$delegate</code>隐藏属性，访问者的代码只委托给了附加的属性：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop: Type <span class=\"keyword\">by</span> MyDelegate()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译器会生成下面的代码</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> prop$delegate = MyDelegate()</div><div class=\"line\">    <span class=\"keyword\">var</span> prop: Type</div><div class=\"line\">        <span class=\"keyword\">get</span>() = prop$delegate.getValue(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop)</div><div class=\"line\">        <span class=\"keyword\">set</span>(value: Type) = prop$delegate.setValue(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop, value)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Koltin编译器提供有关prop的所有的必要信息：第一个参数<code>this</code>是外部类C的引用，<code>this::prop</code>是<code>KProperty</code>类型的反射对象，描述<code>prop</code>。</p>\n<blockquote>\n<p><code>this::prop</code>语法表示直接<a href=\"https://kotlinlang.org/docs/reference/reflection.html#bound-function-and-property-references-since-11\" target=\"_blank\" rel=\"external\">绑定调用</a>代码中的应用，在Kotlin1.1后可用</p>\n</blockquote>\n<h2 id=\"提供委托（从1-1开始）\"><a href=\"#提供委托（从1-1开始）\" class=\"headerlink\" title=\"提供委托（从1.1开始）\"></a>提供委托（从1.1开始）</h2><p>定义<code>provideDelegate</code>操作函数，可以继承创建对象给委托属性的逻辑。如果给在<code>by</code>右边使用的对象，定了成员函数或扩展函数<code>provideDelegate</code>，则创建委托属性时调用这个函数。</p>\n<p>使用<code>provideDelegate</code>的一种情况就是：在创建属性时，检查属性一致性，不仅仅是在<code>getter</code>和<code>setter</code>中。</p>\n<p>如：希望在绑定前，检查属性名，可以这样做<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceLoader</span>&lt;<span class=\"type\">T</span>&gt;</span>(id: ResourceID&lt;T&gt;) &#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">provideDelegate</span><span class=\"params\">(</span></span></div><div class=\"line\">            thisRef: <span class=\"type\">MyUI</span>,</div><div class=\"line\">            prop: <span class=\"type\">KProperty</span>&lt;*&gt;</div><div class=\"line\">    ): ReadOnlyProperty&lt;MyUI, T&gt; &#123;</div><div class=\"line\">        checkProperty(thisRef, prop.name)</div><div class=\"line\">        <span class=\"comment\">// create delegate</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">checkProperty</span><span class=\"params\">(thisRef: <span class=\"type\">MyUI</span>, name: <span class=\"type\">String</span>)</span></span> &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">bindResource</span><span class=\"params\">(id: <span class=\"type\">ResourceID</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: ResourceLoader&lt;T&gt; &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUI</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> image <span class=\"keyword\">by</span> bindResource(ResourceID.image_id)</div><div class=\"line\">    <span class=\"keyword\">val</span> text <span class=\"keyword\">by</span> bindResource(ResourceID.text_id)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>provideDelegate</code>参数与<code>getValue</code>一样</p>\n<ul>\n<li><code>thisRef</code> - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）</li>\n<li><code>property</code> - 必须为<code>KProperty&lt;*&gt;</code>或其子类</li>\n</ul>\n<p>在创建<code>MyUI</code>实例时，调用每个属性的<code>provideDelegate</code>方法，立即执行必要的验证</p>\n<p>不能够拦截<code>property</code>和委托类的绑定操作，可以显性传入属性名来达到这个效果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUI</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> image <span class=\"keyword\">by</span> bindResource(ResourceID.image_id, <span class=\"string\">\"image\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> text <span class=\"keyword\">by</span> bindResource(ResourceID.text_id, <span class=\"string\">\"text\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> MyUI.<span class=\"title\">bindResource</span><span class=\"params\">(</span></span></div><div class=\"line\">        id: <span class=\"type\">ResourceID</span>&lt;<span class=\"type\">T</span>&gt;,</div><div class=\"line\">        propertyName: <span class=\"type\">String</span></div><div class=\"line\">): ReadOnlyProperty&lt;MyUI, T&gt; &#123;</div><div class=\"line\">   checkProperty(<span class=\"keyword\">this</span>, propertyName)</div><div class=\"line\">   <span class=\"comment\">// create delegate</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在生成的代码中，<code>provideDelegate</code>方法用来初始化<code>prop$delegate</code>属性。对比上面<code>val prop: Type by MyDelegate()</code>未声明<code>provideDelegate</code>方式生成的代码：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop: Type <span class=\"keyword\">by</span> MyDelegate()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译器生成下面的代码</span></div><div class=\"line\"><span class=\"comment\">// 提供provideDelegate函数时</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 调用 \"provideDelegate\" 创建 \"delegate\" 属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> prop$delegate = MyDelegate().provideDelegate(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop)</div><div class=\"line\">    <span class=\"keyword\">val</span> prop: Type</div><div class=\"line\">        <span class=\"keyword\">get</span>() = prop$delegate.getValue(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>provideDelegate</code>方法只影响辅助属性的创建，不影响生成的getter和setter代码。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h1><h2 id=\"类委托\"><a href=\"#类委托\" class=\"headerlink\" title=\"类委托\"></a>类委托</h2><p><a href=\"https://en.wikipedia.org/wiki/Delegation_pattern\" target=\"_blank\" rel=\"external\">委托模式</a>是替换继承的较好的设计模式，Kotlin天生支持委托模式，无须任何模板代码。类<code>Derived</code>可以继承<code>Base</code>接口，委托所有public方法给指定对象<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseImpl</span></span>(<span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span>) : Base &#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print</span><span class=\"params\">()</span></span> &#123; print(x)&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span></span>(b: Base) : Base <span class=\"keyword\">by</span> b</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> b = BaseImpl(<span class=\"number\">10</span>)</div><div class=\"line\">    </div><div class=\"line\">    Derived(b).print() <span class=\"comment\">// 输出10</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Derived</code>的超类列表中的<code>by</code>语句表示<code>b</code>会内部存储在<code>Derived</code>中，编译器会为<code>b</code>生成接口<code>Base</code>所有方法。</p>\n<blockquote>\n<p>复写可以与期望一样生效：编译器使用复写方法替换委托对象中的方法。如果在<code>Derived</code>中添加<code>override fun print() { print(&quot;abc&quot;) }</code>，程序则会输出<code>abc</code>，而不是<code>10</code></p>\n</blockquote>\n<h2 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h2><p>有一些普通类型属性，尽管可以在需要时每次手动实现，如果可以一次实现所有将会更好并放入到库中。包括：</p>\n<ol>\n<li>懒属性：只在第一次访问计算的值</li>\n<li>观察属性：监听属性变化的通知</li>\n<li>在map中存储属性，不是每个属性单个一个字段。</li>\n</ol>\n<p>为了覆盖这些案例，Kotlin支持委托属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p: String <span class=\"keyword\">by</span> Delegate()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>语法为：<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code>。跟在<code>by</code>之后的表达式为<code>Delegate</code>，因为属性对应的<code>get()</code>和<code>set()</code>则被委托给它的<code>getValue</code>和<code>setValue</code>方法。属性委托不用实现任何接口，但是要提供<code>getValue</code>和<code>setValue</code>方法（var类型属性）。比如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Delegate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>? , property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"variable\">$thisRef</span>, thank you for delegating '<span class=\"subst\">$&#123;property.name&#125;</span>' to me!\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>? , property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span>&#123;</div><div class=\"line\">        println(<span class=\"string\">\"<span class=\"variable\">$value</span> has been assigned to '<span class=\"subst\">$&#123;property.name&#125;</span> in <span class=\"variable\">$thisRef</span>.'\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当读取委托给实例<code>Delegate</code>的<code>p</code>，则会调用<code>Delegate</code>的<code>getValue()</code>方法，它的第一个参数为<code>p</code>的对象，第二个参数持有<code>p</code>自己的描述（可以使用它的属性名）。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> e = Example()</div><div class=\"line\">println(e.p)</div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">Example@</span><span class=\"number\">33</span>a17727, thank you <span class=\"keyword\">for</span> delegating ‘p’ to me!</div></pre></td></tr></table></figure></p>\n<p>类似地，如果给<code>p</code>赋值，则调用<code>setValue()</code>函数，前两个参数一样，第三个为赋予的值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">e.p = <span class=\"string\">\"NEW\"</span></div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NEW has been assigned to ‘p’ <span class=\"keyword\">in</span> <span class=\"symbol\">Example@</span><span class=\"number\">33</span>a17727.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>从Koltin 1.1开始，可以在函数中或代码块中声明委托属性。</p>\n</blockquote>\n<h2 id=\"标准委托\"><a href=\"#标准委托\" class=\"headerlink\" title=\"标准委托\"></a>标准委托</h2><p>Kotlin标准库提供几种有用类型的工厂方法，</p>\n<h3 id=\"懒委托\"><a href=\"#懒委托\" class=\"headerlink\" title=\"懒委托\"></a>懒委托</h3><p><code>lazy()</code>函数输入lambda，返回<code>Lazy&lt;T&gt;</code>实例，可以作为实现懒属性的委托：第一次调用执行传入<code>lazy()</code>的lambda，并记住结果，之后调用get()，只返回记住的结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    println(<span class=\"string\">\"computed!\"</span>)</div><div class=\"line\">    <span class=\"string\">\"Hello\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed!</div><div class=\"line\">Hello</div><div class=\"line\">Hello</div></pre></td></tr></table></figure></p>\n<p>懒属性默认为同步赋值：只在一个线程中求值，所有线程都会看到相同的值。如果不需要同步初始化委托，那么多个线程可以同时执行，将<code>LazyThreadSafetyMode.PUBLICATION</code>作为参数传递给<code>lazy</code>函数。如果能够保证初始化在单线程中执行，那么可以使用<code>LazyThreadSafetyMode.NONE</code>模式，但不能保证线程安全和相关开销。</p>\n<h2 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h2><p><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/observable.html\" target=\"_blank\" rel=\"external\">Delegates.observable()</a>有两个参数：初始值和修改处理Handler。每次给属性赋值时，都会调用handler（在赋值执行之后）。Handler有三个参数：被赋值的属性，旧值和新值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> kotlin.properties.Delegate</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> Delegate.observable(<span class=\"string\">\"&lt;no name&gt;\"</span>)&#123;</div><div class=\"line\">        prop , old , new -&gt; </div><div class=\"line\">        println(<span class=\"string\">\"<span class=\"variable\">$old</span> -&gt; <span class=\"variable\">$new</span>\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> user = User()</div><div class=\"line\">    user.name = <span class=\"string\">\"first\"</span></div><div class=\"line\">    user.name = <span class=\"string\">\"second\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;no name&gt; -&gt; first</div><div class=\"line\">first -&gt; second</div></pre></td></tr></table></figure>\n<p>如果希望拦截赋值并禁止它，使用<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html\" target=\"_blank\" rel=\"external\">vetoable()</a>替换<code>observable</code>。传给<code>vetoable</code>的handler在给属性赋新值前执行。</p>\n<h2 id=\"在Map中存储新值\"><a href=\"#在Map中存储新值\" class=\"headerlink\" title=\"在Map中存储新值\"></a>在Map中存储新值</h2><p>我们通常使用Map来存储属性值，在应用中很常见，如解析JSON或其他动态的事。可以使用map实例本身作为委托属性的委托者。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> map: Map&lt;String, Any?&gt;) &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> name: String <span class=\"keyword\">by</span> map</div><div class=\"line\">    <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>构造器使用Map作为它的参数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> user = User(mapOf(</div><div class=\"line\">    <span class=\"string\">\"name\"</span> to <span class=\"string\">\"John Doe\"</span> , </div><div class=\"line\">    <span class=\"string\">\"age\"</span>  to <span class=\"number\">25</span></div><div class=\"line\">))</div></pre></td></tr></table></figure></p>\n<p>委托属性按照属性名从Map中取值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(user.name) <span class=\"comment\">// Prints \"John Doe\"</span></div><div class=\"line\">println(user.age)  <span class=\"comment\">// Prints 25</span></div></pre></td></tr></table></figure></p>\n<p>对于<code>var</code>属性，使用<code>MutableMap</code>来替换只读的<code>Map</code><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutableUser</span></span>(<span class=\"keyword\">val</span> map: MutableMap&lt;String, Any?&gt;) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> map</div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"局部委托属性（从1-1开始）\"><a href=\"#局部委托属性（从1-1开始）\" class=\"headerlink\" title=\"局部委托属性（从1.1开始）\"></a>局部委托属性（从1.1开始）</h2><p>从1.1开始可以声明局部变量为委托属性，如：创建局部懒属性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">example</span><span class=\"params\">(compute: ()</span></span> -&gt; Foo)&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> memoizedFoo <span class=\"keyword\">by</span> lazy(computeFoo)</div><div class=\"line\">    <span class=\"keyword\">if</span> (someCondition &amp;&amp; memoizedFoo.isValid()) &#123;</div><div class=\"line\">        memoizedFoo.doSomething()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>memoizedFoo</code>属性只在第一次访问时进行计算，如果<code>someCondition</code>失败，则不会计算变量。</p>\n<h2 id=\"属性委托要求\"><a href=\"#属性委托要求\" class=\"headerlink\" title=\"属性委托要求\"></a>属性委托要求</h2><p>下面总结委托对象的要求</p>\n<ol>\n<li><p>对于只读属性（val），委托对象提供名为<code>getValue</code>的函数，并带有下面几个参数</p>\n<ul>\n<li><code>thisRef</code> - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）</li>\n<li><code>property</code> - 必须为<code>KProperty&lt;*&gt;</code>或其子类</li>\n<li>函数返回值必须与属性或其子类属性一致</li>\n</ul>\n</li>\n<li><p>对于可变属性（var）, 委托对象需要额外提供名为<code>setValue</code>的函数，并带有下面几个参数</p>\n<ul>\n<li><code>thisRef</code> - 必须与<code>getValue()</code>一样</li>\n<li><code>property</code> - 与<code>getValue()</code>一样</li>\n<li>新值 - 类型必须与属性对象的超类一致</li>\n</ul>\n</li>\n</ol>\n<p><code>getValue()</code>和（或）<code>setValue()</code>可能会作为委托对象的成员函数或扩展函数，当需要委托属性给对象时（没有这些函数）时，扩展函数会比较方便。这两种函数都需要使用<code>operator</code>关键字来标记。</p>\n<p>委托类可以实现<code>ReadOnlyProperty</code>或<code>ReadWriteProperty</code>其中一个接口，包含需要的<code>operator</code>方法。Kotlin标准库声明了这些接口。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadOnlyProperty</span>&lt;<span class=\"type\">in R, out T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadWriteProperty</span>&lt;<span class=\"type\">in R, T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">R</span>, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">T</span>)</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"转换规则\"><a href=\"#转换规则\" class=\"headerlink\" title=\"转换规则\"></a>转换规则</h2><p>每个委托属性的内在机制：Kotlin编译器会生成一个辅助属性，并委托给为委托属性。例如：<code>prop</code>会生成<code>prop$delegate</code>隐藏属性，访问者的代码只委托给了附加的属性：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop: Type <span class=\"keyword\">by</span> MyDelegate()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译器会生成下面的代码</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> prop$delegate = MyDelegate()</div><div class=\"line\">    <span class=\"keyword\">var</span> prop: Type</div><div class=\"line\">        <span class=\"keyword\">get</span>() = prop$delegate.getValue(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop)</div><div class=\"line\">        <span class=\"keyword\">set</span>(value: Type) = prop$delegate.setValue(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop, value)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Koltin编译器提供有关prop的所有的必要信息：第一个参数<code>this</code>是外部类C的引用，<code>this::prop</code>是<code>KProperty</code>类型的反射对象，描述<code>prop</code>。</p>\n<blockquote>\n<p><code>this::prop</code>语法表示直接<a href=\"https://kotlinlang.org/docs/reference/reflection.html#bound-function-and-property-references-since-11\" target=\"_blank\" rel=\"external\">绑定调用</a>代码中的应用，在Kotlin1.1后可用</p>\n</blockquote>\n<h2 id=\"提供委托（从1-1开始）\"><a href=\"#提供委托（从1-1开始）\" class=\"headerlink\" title=\"提供委托（从1.1开始）\"></a>提供委托（从1.1开始）</h2><p>定义<code>provideDelegate</code>操作函数，可以继承创建对象给委托属性的逻辑。如果给在<code>by</code>右边使用的对象，定了成员函数或扩展函数<code>provideDelegate</code>，则创建委托属性时调用这个函数。</p>\n<p>使用<code>provideDelegate</code>的一种情况就是：在创建属性时，检查属性一致性，不仅仅是在<code>getter</code>和<code>setter</code>中。</p>\n<p>如：希望在绑定前，检查属性名，可以这样做<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceLoader</span>&lt;<span class=\"type\">T</span>&gt;</span>(id: ResourceID&lt;T&gt;) &#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">provideDelegate</span><span class=\"params\">(</span></span></div><div class=\"line\">            thisRef: <span class=\"type\">MyUI</span>,</div><div class=\"line\">            prop: <span class=\"type\">KProperty</span>&lt;*&gt;</div><div class=\"line\">    ): ReadOnlyProperty&lt;MyUI, T&gt; &#123;</div><div class=\"line\">        checkProperty(thisRef, prop.name)</div><div class=\"line\">        <span class=\"comment\">// create delegate</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">checkProperty</span><span class=\"params\">(thisRef: <span class=\"type\">MyUI</span>, name: <span class=\"type\">String</span>)</span></span> &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">bindResource</span><span class=\"params\">(id: <span class=\"type\">ResourceID</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: ResourceLoader&lt;T&gt; &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUI</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> image <span class=\"keyword\">by</span> bindResource(ResourceID.image_id)</div><div class=\"line\">    <span class=\"keyword\">val</span> text <span class=\"keyword\">by</span> bindResource(ResourceID.text_id)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>provideDelegate</code>参数与<code>getValue</code>一样</p>\n<ul>\n<li><code>thisRef</code> - 类型必须与属性对象的超类一致（对于扩展属性：扩展的类型）</li>\n<li><code>property</code> - 必须为<code>KProperty&lt;*&gt;</code>或其子类</li>\n</ul>\n<p>在创建<code>MyUI</code>实例时，调用每个属性的<code>provideDelegate</code>方法，立即执行必要的验证</p>\n<p>不能够拦截<code>property</code>和委托类的绑定操作，可以显性传入属性名来达到这个效果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUI</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> image <span class=\"keyword\">by</span> bindResource(ResourceID.image_id, <span class=\"string\">\"image\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> text <span class=\"keyword\">by</span> bindResource(ResourceID.text_id, <span class=\"string\">\"text\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> MyUI.<span class=\"title\">bindResource</span><span class=\"params\">(</span></span></div><div class=\"line\">        id: <span class=\"type\">ResourceID</span>&lt;<span class=\"type\">T</span>&gt;,</div><div class=\"line\">        propertyName: <span class=\"type\">String</span></div><div class=\"line\">): ReadOnlyProperty&lt;MyUI, T&gt; &#123;</div><div class=\"line\">   checkProperty(<span class=\"keyword\">this</span>, propertyName)</div><div class=\"line\">   <span class=\"comment\">// create delegate</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在生成的代码中，<code>provideDelegate</code>方法用来初始化<code>prop$delegate</code>属性。对比上面<code>val prop: Type by MyDelegate()</code>未声明<code>provideDelegate</code>方式生成的代码：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prop: Type <span class=\"keyword\">by</span> MyDelegate()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编译器生成下面的代码</span></div><div class=\"line\"><span class=\"comment\">// 提供provideDelegate函数时</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 调用 \"provideDelegate\" 创建 \"delegate\" 属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> prop$delegate = MyDelegate().provideDelegate(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop)</div><div class=\"line\">    <span class=\"keyword\">val</span> prop: Type</div><div class=\"line\">        <span class=\"keyword\">get</span>() = prop$delegate.getValue(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>::prop)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>provideDelegate</code>方法只影响辅助属性的创建，不影响生成的getter和setter代码。</p>\n</blockquote>\n"},{"title":"Kotlin基础之基础类型与包","date":"2017-07-03T07:48:18.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"# 基础类型\n在Kotlin中，一切皆对象从这种意义上来说，我们可以调用任何变量的属性和方法。有些内嵌类型的实现是经过优化的，但是对于开发者而言看上就是普通的类。这些类型有：数值类型，字符类型，boolean类型，数组类型\n\n## 数值类型\nKotlin使用类似Java的方式处理数值类型，但是与Java不是完全相同。如：不支持数值的隐式扩大转换或在某些情况中字面常量会些许不同。\n\nKotlin内嵌了以下几种数值类型\n\nType | Bit width\n---|---\nDouble | 64\nFloat | 32\nLong | 64\nInt  | 32\nShort| 16\nByte | 18\n\n在Kotlin中，字符常量不属于数值类型\n\n## 字面常量\n整型的字面常量\n- 十进制：123\n    - Long类型后缀L表示：123L\n- 十六进制：0x0F\n- 二进制：0b00001011\n\n> 不支持八进制\n\n支持浮点型数值的常规字符\n- Double：`123.5` ，`123.5e10`\n- Float使用`f`或`F`标记：`123.5f`\n\n## 数字常量中的下划线\n可以在数字中使用下划线，让数字可读性更好。\n```kotlin\nval oneMillion = 1_000_000\nval creditCardNumber = 1234_5678_9012_3456L\nval socialSecurityNumber = 999_99_9999L\nval hexBytes = 0xFF_EC_DE_5E\nval bytes = 0b11010010_01101001_10010100_10010010\n```\n## 表示法\n在Java平台，数字物理存储为JVM的原始类型，除非需要一个可以为空的数值引用或作为泛型引用，这种情况时，数字会被自动装箱。\n\n数值装箱不一定保留同一性\n```kotlin\nval a: Int = 10000\nprint(a === a) // Prints 'true'\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA === anotherBoxedA) // !!!Prints 'false'!!!\n```\n但保留相等性\n```kotlin\nval a: Int = 10000\nprint(a == a) // Prints 'true'\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA == anotherBoxedA) // Prints 'true'\n```\n\n## 显式转换\n因为不同的表示法，较小类型并非是较大类型数字的子类型。因为如果是的话，则会遇到下面的问题\n```kotlin\n// 非实际编译，假设性代码\nval a: Int? = 1 //  Int装箱\nval b: Long? = a // 隐式装换，生成Long类型装箱\nprint(a == b) // 因为Long只与Long类型比较，打印`false`\n```\n不仅仅是同一性，甚至相等性也默默丢失。\n\n因此较小的类型无法隐式转换成较大类型。意思是无法将`Byte`类型数值隐式转为`Int`类型\n```kotlin\nval b: Byte = 1 // OK, literals are checked statically\nval i: Int = b // ERROR\n```\n使用显式转换扩大数值\n```kotlin\nval i: Int = b.toInt() // OK: explicitly widened\n```\n所有数值类型都支持以下转换：\n- toByte(): Byte\n- toShort(): Short\n- toInt(): Int\n- toLong(): Long\n- toFloat(): Float\n- toDouble(): Double\n- toChar(): Char\n\n缺少隐式转换很少被注意到，因为数值类型可从上下文中推断出，合适转换算术运算符的重载。如\n```kotlin\nval l = 1L + 3 // Long + Int => Long\n```\n## 操作符\nKotlin支持标准的数值操作符，这些操作符声明为合适类的成员（编译会优化操作符到对应指令）。查看[`操作符重载`](https://kotlinlang.org/docs/reference/operator-overloading.html)\n\n因为按位操作符没有特定的符号表示，使用中缀表达式来使用对应名称的函数。如\n```kotlin\nval x = (1 shl 2) and 0x000FF000\n```\n下面就是按位操作符的完整列表（仅适应于`Int`和`Long`）\n- shl(bits) – 有符号左移 (Java's <<)\n- shr(bits) – 有符号右移 (Java's >>)\n- ushr(bits) – 无符号右移 (Java's >>>)\n- and(bits) – 按位与\n- or(bits) – 按位或\n- xor(bits) – 按位异或\n- inv() – 按位反转\n\n## 字符\n`Char`表示字符，不能直接作为数值使用。\n```kotlin\nfun check(c: Char) {\n    if (c == 1) { // ERROR: incompatible types\n        // ...\n    }\n}\n```\n字符常量使用单引号括起来，如`1`。特殊字符串使用反斜杠转义。`\\t`、`\\b`、`\\n`、`\\r`、`\\'`、`\\\\`和`\\$`等转义字都符能支持。使用Unicode转义字符语法（`'\\uFF00'`）来对其他字符进行编码。\n\n可以显式将Char转为Int类型。\n```kotlin\nfun decimalDigitValue(c: Char): Int {\n    if (c !in '0'..'9')\n        throw IllegalArgumentException(\"Out of range\")\n    return c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n```\n当需要可为空的引用时，字符可以像数字一样装箱。装箱操作不会保留同一性。\n\n## Boolean\nBoolean类型表示布尔值，有两个值*true*和*false*\n\n当为可空的引用时，Boolean类型进行装箱。\n\n内置的boolean操作包括：\n- || 短路或\n- && 短路与\n- !  逻辑非\n\n## Array数组\nKotlin使用`Array`类表示数组。Array类定义了`set`与`get`函数（按照函数重载定义会转换成`[]`）,`size`属性，和其他几个有用的函数。\n```kotlin\nclass Array<T> private constructor() {\n    val size: Int\n    operator fun get(index: Int): T\n    operator fun set(index: Int, value: T): Unit\n\n    operator fun iterator(): Iterator<T>\n    // ...\n}\n```\n使用函数`arrayOf()`来创建数组，传入多个item参数（如arrayOf(1, 2, ,3) 能够创建[1 , 2, 3]的数组）。使用函数`arrayOfNulls()`来创建指定长度但是元素为空的数组。\n\n使用一个工厂函数传入数组长度，返回数组指定index的元素值。\n```kotlin\n// Creates an Array<String> with values [\"0\", \"1\", \"4\", \"9\", \"16\"]\nval asc = Array(5, { i -> (i * i).toString() })\n```\n正如上面所说，`[]`操作符可以替代成员函数`get`和`set`。\n\n> 与Java不同，Kotlin中的数组是不可变的，也就是说Kotlin不能将`Array<String>`赋值给`Array<Any>`，也就预防可能的运行时问题（但可以使用`Array<outAny>`），详见[`类型保护`](https://kotlinlang.org/docs/reference/generics.html#type-projections)\n\nKotlin有特殊类来表示原始类型数组，而不用向上装箱：`ByteArray`、`ShortArray`、`IntArray`等等。这些类与`Array`类没有继承关系，但是有相同的方法和属性，每个都有响应的工厂方法。\n```kotlin\nval x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]\n```\n## String\nString表示String类型数据。String不可变，string中的字符元素可使用`s[i]`方式访问。可使用`for`循环来迭代String。\n```kotlin\nfor (c in str) {\n    println(c)\n}\n```\nString常量\nKotlin支持两种string字面常量：转义string与raw string。转义string可能含有转义字符。raw string 可以有换行符和任意字符。\n\n转义string与java很像\n```kotlin\nval s = \"Hello World !\\n\"\n```\n转义与常规方式相同，使用转义字符。详情查看[`字符`](https://kotlinlang.org/docs/reference/basic-types.html#characters)。\n\nraw string使用三个引号界定`\"\"\"`，不用转义字符，可以含有换行字符和任意其他字符。\n```kotlin\nval text = \"\"\"\n    for (c in \"foo\")\n        print(c)\n\"\"\"\n```\n可以使用[`trimMargin()`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html)函数去除前导空格。\n```kotlin\nval text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n```\n默认使用`|`表示边缘前缀，也可以传入其他字符，如`trimMargin(\">\")`。\n\n## String模板\nString可以包含模板表达式，如将代码中的返回结果串联到字符串中。模板表达式由`$`起始符与参数名构成。\n```kotlin\nval i = 10\nval s = \"i = $i\" // evaluates to \"i = 10\"\n```\n或者在`{}`中的任意表达式\n```kotlin\nval s = \"abc\"\nval str = \"$s.length is ${s.length}\" // evaluates to \"abc.length is 3\"\n\n```\nString模板在raw string和转义string中都可以使用。如果要在raw string中表示一个$字符常量（不支持反斜杠转义），则可使用下面语法：\n```kotlin\nval price = \"\"\"\n${'$'}9.99\n\"\"\"\n```\n# Package包\n源码文件可能需要声明包命\n```kotlin\npackage foo.bar\n\nfun baz() {}\n\nclass Goo {}\n```\n源码文件所有内容（如类与函数）都包含在声明的包中。上面例子中，`baz()`全称为`foo.bar.baz`，`Goo`的全称为`foo.bar.Goo`。\n\n如果未执行包，文件内容属于无名的默认包\n\n## 默认导入\n\n许多包默认导入到Kotlin的每个文件中\n\n```kotlin\nkotlin.*\nkotlin.annotation.*\nkotlin.collections.*\nkotlin.comparisons.* (since 1.1)\nkotlin.io.*\nkotlin.ranges.*\nkotlin.sequences.*\nkotlin.text.*\n```\n根据目标平台导入附加包\n```kotlin\nJVM:\n    java.lang.*\n    kotlin.jvm.*\nJS:\n    kotlin.js.*\n```\n\n## 导入\n处理默认导入，每个文件可以含有自己导入的目录。导入的语法描述参考[`Import`](https://kotlinlang.org/docs/reference/grammar.html#import)\n\n可以导入单独名称\n```kotlin\nimport foo.Bar // Bar is now accessible without qualification\n```\n或者访问范围内容（包，类，对象等）\n```kotlin\nimport foo.* // everything in 'foo' becomes accessible\n```\n出现冲突时，使用`as`关键字给冲突包设置别名\n```kotlin\nimport foo.Bar // Bar is accessible\nimport bar.Bar as bBar // bBar stands for 'bar.Bar'\n```\n`import`关键字不限于导入类，也可以用来导入其他声明：\n- 上层函数与属性\n- 在[`对象声明`](https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations)中声明的函数与属性\n- [`枚举常量`](https://kotlinlang.org/docs/reference/enum-classes.html)\n\n与Java不同的是，Kotlin没有单独的`import static`语法；所有声明都使用`import`关键字导入。\n## 顶层声明访问\n如果顶层声明标记为`private`，则它私有属于在声明的文件。详情查看[`访问修饰符`](https://kotlinlang.org/docs/reference/visibility-modifiers.html)","source":"_posts/Kotlin基础之基础类型与包.md","raw":"---\ntitle: Kotlin基础之基础类型与包\ndate: 2017-07-03 15:48:18\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n# 基础类型\n在Kotlin中，一切皆对象从这种意义上来说，我们可以调用任何变量的属性和方法。有些内嵌类型的实现是经过优化的，但是对于开发者而言看上就是普通的类。这些类型有：数值类型，字符类型，boolean类型，数组类型\n\n## 数值类型\nKotlin使用类似Java的方式处理数值类型，但是与Java不是完全相同。如：不支持数值的隐式扩大转换或在某些情况中字面常量会些许不同。\n\nKotlin内嵌了以下几种数值类型\n\nType | Bit width\n---|---\nDouble | 64\nFloat | 32\nLong | 64\nInt  | 32\nShort| 16\nByte | 18\n\n在Kotlin中，字符常量不属于数值类型\n\n## 字面常量\n整型的字面常量\n- 十进制：123\n    - Long类型后缀L表示：123L\n- 十六进制：0x0F\n- 二进制：0b00001011\n\n> 不支持八进制\n\n支持浮点型数值的常规字符\n- Double：`123.5` ，`123.5e10`\n- Float使用`f`或`F`标记：`123.5f`\n\n## 数字常量中的下划线\n可以在数字中使用下划线，让数字可读性更好。\n```kotlin\nval oneMillion = 1_000_000\nval creditCardNumber = 1234_5678_9012_3456L\nval socialSecurityNumber = 999_99_9999L\nval hexBytes = 0xFF_EC_DE_5E\nval bytes = 0b11010010_01101001_10010100_10010010\n```\n## 表示法\n在Java平台，数字物理存储为JVM的原始类型，除非需要一个可以为空的数值引用或作为泛型引用，这种情况时，数字会被自动装箱。\n\n数值装箱不一定保留同一性\n```kotlin\nval a: Int = 10000\nprint(a === a) // Prints 'true'\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA === anotherBoxedA) // !!!Prints 'false'!!!\n```\n但保留相等性\n```kotlin\nval a: Int = 10000\nprint(a == a) // Prints 'true'\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA == anotherBoxedA) // Prints 'true'\n```\n\n## 显式转换\n因为不同的表示法，较小类型并非是较大类型数字的子类型。因为如果是的话，则会遇到下面的问题\n```kotlin\n// 非实际编译，假设性代码\nval a: Int? = 1 //  Int装箱\nval b: Long? = a // 隐式装换，生成Long类型装箱\nprint(a == b) // 因为Long只与Long类型比较，打印`false`\n```\n不仅仅是同一性，甚至相等性也默默丢失。\n\n因此较小的类型无法隐式转换成较大类型。意思是无法将`Byte`类型数值隐式转为`Int`类型\n```kotlin\nval b: Byte = 1 // OK, literals are checked statically\nval i: Int = b // ERROR\n```\n使用显式转换扩大数值\n```kotlin\nval i: Int = b.toInt() // OK: explicitly widened\n```\n所有数值类型都支持以下转换：\n- toByte(): Byte\n- toShort(): Short\n- toInt(): Int\n- toLong(): Long\n- toFloat(): Float\n- toDouble(): Double\n- toChar(): Char\n\n缺少隐式转换很少被注意到，因为数值类型可从上下文中推断出，合适转换算术运算符的重载。如\n```kotlin\nval l = 1L + 3 // Long + Int => Long\n```\n## 操作符\nKotlin支持标准的数值操作符，这些操作符声明为合适类的成员（编译会优化操作符到对应指令）。查看[`操作符重载`](https://kotlinlang.org/docs/reference/operator-overloading.html)\n\n因为按位操作符没有特定的符号表示，使用中缀表达式来使用对应名称的函数。如\n```kotlin\nval x = (1 shl 2) and 0x000FF000\n```\n下面就是按位操作符的完整列表（仅适应于`Int`和`Long`）\n- shl(bits) – 有符号左移 (Java's <<)\n- shr(bits) – 有符号右移 (Java's >>)\n- ushr(bits) – 无符号右移 (Java's >>>)\n- and(bits) – 按位与\n- or(bits) – 按位或\n- xor(bits) – 按位异或\n- inv() – 按位反转\n\n## 字符\n`Char`表示字符，不能直接作为数值使用。\n```kotlin\nfun check(c: Char) {\n    if (c == 1) { // ERROR: incompatible types\n        // ...\n    }\n}\n```\n字符常量使用单引号括起来，如`1`。特殊字符串使用反斜杠转义。`\\t`、`\\b`、`\\n`、`\\r`、`\\'`、`\\\\`和`\\$`等转义字都符能支持。使用Unicode转义字符语法（`'\\uFF00'`）来对其他字符进行编码。\n\n可以显式将Char转为Int类型。\n```kotlin\nfun decimalDigitValue(c: Char): Int {\n    if (c !in '0'..'9')\n        throw IllegalArgumentException(\"Out of range\")\n    return c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n```\n当需要可为空的引用时，字符可以像数字一样装箱。装箱操作不会保留同一性。\n\n## Boolean\nBoolean类型表示布尔值，有两个值*true*和*false*\n\n当为可空的引用时，Boolean类型进行装箱。\n\n内置的boolean操作包括：\n- || 短路或\n- && 短路与\n- !  逻辑非\n\n## Array数组\nKotlin使用`Array`类表示数组。Array类定义了`set`与`get`函数（按照函数重载定义会转换成`[]`）,`size`属性，和其他几个有用的函数。\n```kotlin\nclass Array<T> private constructor() {\n    val size: Int\n    operator fun get(index: Int): T\n    operator fun set(index: Int, value: T): Unit\n\n    operator fun iterator(): Iterator<T>\n    // ...\n}\n```\n使用函数`arrayOf()`来创建数组，传入多个item参数（如arrayOf(1, 2, ,3) 能够创建[1 , 2, 3]的数组）。使用函数`arrayOfNulls()`来创建指定长度但是元素为空的数组。\n\n使用一个工厂函数传入数组长度，返回数组指定index的元素值。\n```kotlin\n// Creates an Array<String> with values [\"0\", \"1\", \"4\", \"9\", \"16\"]\nval asc = Array(5, { i -> (i * i).toString() })\n```\n正如上面所说，`[]`操作符可以替代成员函数`get`和`set`。\n\n> 与Java不同，Kotlin中的数组是不可变的，也就是说Kotlin不能将`Array<String>`赋值给`Array<Any>`，也就预防可能的运行时问题（但可以使用`Array<outAny>`），详见[`类型保护`](https://kotlinlang.org/docs/reference/generics.html#type-projections)\n\nKotlin有特殊类来表示原始类型数组，而不用向上装箱：`ByteArray`、`ShortArray`、`IntArray`等等。这些类与`Array`类没有继承关系，但是有相同的方法和属性，每个都有响应的工厂方法。\n```kotlin\nval x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]\n```\n## String\nString表示String类型数据。String不可变，string中的字符元素可使用`s[i]`方式访问。可使用`for`循环来迭代String。\n```kotlin\nfor (c in str) {\n    println(c)\n}\n```\nString常量\nKotlin支持两种string字面常量：转义string与raw string。转义string可能含有转义字符。raw string 可以有换行符和任意字符。\n\n转义string与java很像\n```kotlin\nval s = \"Hello World !\\n\"\n```\n转义与常规方式相同，使用转义字符。详情查看[`字符`](https://kotlinlang.org/docs/reference/basic-types.html#characters)。\n\nraw string使用三个引号界定`\"\"\"`，不用转义字符，可以含有换行字符和任意其他字符。\n```kotlin\nval text = \"\"\"\n    for (c in \"foo\")\n        print(c)\n\"\"\"\n```\n可以使用[`trimMargin()`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html)函数去除前导空格。\n```kotlin\nval text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n```\n默认使用`|`表示边缘前缀，也可以传入其他字符，如`trimMargin(\">\")`。\n\n## String模板\nString可以包含模板表达式，如将代码中的返回结果串联到字符串中。模板表达式由`$`起始符与参数名构成。\n```kotlin\nval i = 10\nval s = \"i = $i\" // evaluates to \"i = 10\"\n```\n或者在`{}`中的任意表达式\n```kotlin\nval s = \"abc\"\nval str = \"$s.length is ${s.length}\" // evaluates to \"abc.length is 3\"\n\n```\nString模板在raw string和转义string中都可以使用。如果要在raw string中表示一个$字符常量（不支持反斜杠转义），则可使用下面语法：\n```kotlin\nval price = \"\"\"\n${'$'}9.99\n\"\"\"\n```\n# Package包\n源码文件可能需要声明包命\n```kotlin\npackage foo.bar\n\nfun baz() {}\n\nclass Goo {}\n```\n源码文件所有内容（如类与函数）都包含在声明的包中。上面例子中，`baz()`全称为`foo.bar.baz`，`Goo`的全称为`foo.bar.Goo`。\n\n如果未执行包，文件内容属于无名的默认包\n\n## 默认导入\n\n许多包默认导入到Kotlin的每个文件中\n\n```kotlin\nkotlin.*\nkotlin.annotation.*\nkotlin.collections.*\nkotlin.comparisons.* (since 1.1)\nkotlin.io.*\nkotlin.ranges.*\nkotlin.sequences.*\nkotlin.text.*\n```\n根据目标平台导入附加包\n```kotlin\nJVM:\n    java.lang.*\n    kotlin.jvm.*\nJS:\n    kotlin.js.*\n```\n\n## 导入\n处理默认导入，每个文件可以含有自己导入的目录。导入的语法描述参考[`Import`](https://kotlinlang.org/docs/reference/grammar.html#import)\n\n可以导入单独名称\n```kotlin\nimport foo.Bar // Bar is now accessible without qualification\n```\n或者访问范围内容（包，类，对象等）\n```kotlin\nimport foo.* // everything in 'foo' becomes accessible\n```\n出现冲突时，使用`as`关键字给冲突包设置别名\n```kotlin\nimport foo.Bar // Bar is accessible\nimport bar.Bar as bBar // bBar stands for 'bar.Bar'\n```\n`import`关键字不限于导入类，也可以用来导入其他声明：\n- 上层函数与属性\n- 在[`对象声明`](https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations)中声明的函数与属性\n- [`枚举常量`](https://kotlinlang.org/docs/reference/enum-classes.html)\n\n与Java不同的是，Kotlin没有单独的`import static`语法；所有声明都使用`import`关键字导入。\n## 顶层声明访问\n如果顶层声明标记为`private`，则它私有属于在声明的文件。详情查看[`访问修饰符`](https://kotlinlang.org/docs/reference/visibility-modifiers.html)","slug":"Kotlin基础之基础类型与包","published":1,"updated":"2017-07-03T07:48:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxy000xc0m3xshbptda","content":"<h1 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h1><p>在Kotlin中，一切皆对象从这种意义上来说，我们可以调用任何变量的属性和方法。有些内嵌类型的实现是经过优化的，但是对于开发者而言看上就是普通的类。这些类型有：数值类型，字符类型，boolean类型，数组类型</p>\n<h2 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h2><p>Kotlin使用类似Java的方式处理数值类型，但是与Java不是完全相同。如：不支持数值的隐式扩大转换或在某些情况中字面常量会些许不同。</p>\n<p>Kotlin内嵌了以下几种数值类型</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Bit width</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Double</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>32</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>32</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>18</td>\n</tr>\n</tbody>\n</table>\n<p>在Kotlin中，字符常量不属于数值类型</p>\n<h2 id=\"字面常量\"><a href=\"#字面常量\" class=\"headerlink\" title=\"字面常量\"></a>字面常量</h2><p>整型的字面常量</p>\n<ul>\n<li>十进制：123<ul>\n<li>Long类型后缀L表示：123L</li>\n</ul>\n</li>\n<li>十六进制：0x0F</li>\n<li>二进制：0b00001011</li>\n</ul>\n<blockquote>\n<p>不支持八进制</p>\n</blockquote>\n<p>支持浮点型数值的常规字符</p>\n<ul>\n<li>Double：<code>123.5</code> ，<code>123.5e10</code></li>\n<li>Float使用<code>f</code>或<code>F</code>标记：<code>123.5f</code></li>\n</ul>\n<h2 id=\"数字常量中的下划线\"><a href=\"#数字常量中的下划线\" class=\"headerlink\" title=\"数字常量中的下划线\"></a>数字常量中的下划线</h2><p>可以在数字中使用下划线，让数字可读性更好。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> oneMillion = <span class=\"number\">1</span>_000_000</div><div class=\"line\"><span class=\"keyword\">val</span> creditCardNumber = <span class=\"number\">1234</span>_5678_9012_3456L</div><div class=\"line\"><span class=\"keyword\">val</span> socialSecurityNumber = <span class=\"number\">999</span>_99_9999L</div><div class=\"line\"><span class=\"keyword\">val</span> hexBytes = <span class=\"number\">0xFF</span>_EC_DE_5E</div><div class=\"line\"><span class=\"keyword\">val</span> bytes = <span class=\"number\">0</span>b11010010_01101001_10010100_10010010</div></pre></td></tr></table></figure></p>\n<h2 id=\"表示法\"><a href=\"#表示法\" class=\"headerlink\" title=\"表示法\"></a>表示法</h2><p>在Java平台，数字物理存储为JVM的原始类型，除非需要一个可以为空的数值引用或作为泛型引用，这种情况时，数字会被自动装箱。</p>\n<p>数值装箱不一定保留同一性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">10000</span></div><div class=\"line\">print(a === a) <span class=\"comment\">// Prints 'true'</span></div><div class=\"line\"><span class=\"keyword\">val</span> boxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\"><span class=\"keyword\">val</span> anotherBoxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\">print(boxedA === anotherBoxedA) <span class=\"comment\">// !!!Prints 'false'!!!</span></div></pre></td></tr></table></figure></p>\n<p>但保留相等性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">10000</span></div><div class=\"line\">print(a == a) <span class=\"comment\">// Prints 'true'</span></div><div class=\"line\"><span class=\"keyword\">val</span> boxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\"><span class=\"keyword\">val</span> anotherBoxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\">print(boxedA == anotherBoxedA) <span class=\"comment\">// Prints 'true'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"显式转换\"><a href=\"#显式转换\" class=\"headerlink\" title=\"显式转换\"></a>显式转换</h2><p>因为不同的表示法，较小类型并非是较大类型数字的子类型。因为如果是的话，则会遇到下面的问题<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非实际编译，假设性代码</span></div><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span>? = <span class=\"number\">1</span> <span class=\"comment\">//  Int装箱</span></div><div class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Long</span>? = a <span class=\"comment\">// 隐式装换，生成Long类型装箱</span></div><div class=\"line\">print(a == b) <span class=\"comment\">// 因为Long只与Long类型比较，打印`false`</span></div></pre></td></tr></table></figure></p>\n<p>不仅仅是同一性，甚至相等性也默默丢失。</p>\n<p>因此较小的类型无法隐式转换成较大类型。意思是无法将<code>Byte</code>类型数值隐式转为<code>Int</code>类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Byte</span> = <span class=\"number\">1</span> <span class=\"comment\">// OK, literals are checked statically</span></div><div class=\"line\"><span class=\"keyword\">val</span> i: <span class=\"built_in\">Int</span> = b <span class=\"comment\">// ERROR</span></div></pre></td></tr></table></figure></p>\n<p>使用显式转换扩大数值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> i: <span class=\"built_in\">Int</span> = b.toInt() <span class=\"comment\">// OK: explicitly widened</span></div></pre></td></tr></table></figure></p>\n<p>所有数值类型都支持以下转换：</p>\n<ul>\n<li>toByte(): Byte</li>\n<li>toShort(): Short</li>\n<li>toInt(): Int</li>\n<li>toLong(): Long</li>\n<li>toFloat(): Float</li>\n<li>toDouble(): Double</li>\n<li>toChar(): Char</li>\n</ul>\n<p>缺少隐式转换很少被注意到，因为数值类型可从上下文中推断出，合适转换算术运算符的重载。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> l = <span class=\"number\">1</span>L + <span class=\"number\">3</span> <span class=\"comment\">// Long + Int =&gt; Long</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>Kotlin支持标准的数值操作符，这些操作符声明为合适类的成员（编译会优化操作符到对应指令）。查看<a href=\"https://kotlinlang.org/docs/reference/operator-overloading.html\" target=\"_blank\" rel=\"external\"><code>操作符重载</code></a></p>\n<p>因为按位操作符没有特定的符号表示，使用中缀表达式来使用对应名称的函数。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x = (<span class=\"number\">1</span> shl <span class=\"number\">2</span>) and <span class=\"number\">0x000FF000</span></div></pre></td></tr></table></figure></p>\n<p>下面就是按位操作符的完整列表（仅适应于<code>Int</code>和<code>Long</code>）</p>\n<ul>\n<li>shl(bits) – 有符号左移 (Java’s &lt;&lt;)</li>\n<li>shr(bits) – 有符号右移 (Java’s &gt;&gt;)</li>\n<li>ushr(bits) – 无符号右移 (Java’s &gt;&gt;&gt;)</li>\n<li>and(bits) – 按位与</li>\n<li>or(bits) – 按位或</li>\n<li>xor(bits) – 按位异或</li>\n<li>inv() – 按位反转</li>\n</ul>\n<h2 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h2><p><code>Char</code>表示字符，不能直接作为数值使用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">check</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// ERROR: incompatible types</span></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>字符常量使用单引号括起来，如<code>1</code>。特殊字符串使用反斜杠转义。<code>\\t</code>、<code>\\b</code>、<code>\\n</code>、<code>\\r</code>、<code>\\&#39;</code>、<code>\\\\</code>和<code>\\$</code>等转义字都符能支持。使用Unicode转义字符语法（<code>&#39;\\uFF00&#39;</code>）来对其他字符进行编码。</p>\n<p>可以显式将Char转为Int类型。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">decimalDigitValue</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (c !<span class=\"keyword\">in</span> <span class=\"string\">'0'</span>..<span class=\"string\">'9'</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Out of range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> c.toInt() - <span class=\"string\">'0'</span>.toInt() <span class=\"comment\">// Explicit conversions to numbers</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当需要可为空的引用时，字符可以像数字一样装箱。装箱操作不会保留同一性。</p>\n<h2 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h2><p>Boolean类型表示布尔值，有两个值<em>true</em>和<em>false</em></p>\n<p>当为可空的引用时，Boolean类型进行装箱。</p>\n<p>内置的boolean操作包括：</p>\n<ul>\n<li>|| 短路或</li>\n<li>&amp;&amp; 短路与</li>\n<li>!  逻辑非</li>\n</ul>\n<h2 id=\"Array数组\"><a href=\"#Array数组\" class=\"headerlink\" title=\"Array数组\"></a>Array数组</h2><p>Kotlin使用<code>Array</code>类表示数组。Array类定义了<code>set</code>与<code>get</code>函数（按照函数重载定义会转换成<code>[]</code>）,<code>size</code>属性，和其他几个有用的函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span>&lt;<span class=\"type\">T</span>&gt; <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> size: <span class=\"built_in\">Int</span></div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(index: <span class=\"type\">Int</span>)</span></span>: T</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">set</span><span class=\"params\">(index: <span class=\"type\">Int</span>, value: <span class=\"type\">T</span>)</span></span>: <span class=\"built_in\">Unit</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">iterator</span><span class=\"params\">()</span></span>: Iterator&lt;T&gt;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用函数<code>arrayOf()</code>来创建数组，传入多个item参数（如arrayOf(1, 2, ,3) 能够创建[1 , 2, 3]的数组）。使用函数<code>arrayOfNulls()</code>来创建指定长度但是元素为空的数组。</p>\n<p>使用一个工厂函数传入数组长度，返回数组指定index的元素值。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Creates an Array&lt;String&gt; with values [\"0\", \"1\", \"4\", \"9\", \"16\"]</span></div><div class=\"line\"><span class=\"keyword\">val</span> asc = Array(<span class=\"number\">5</span>, &#123; i -&gt; (i * i).toString() &#125;)</div></pre></td></tr></table></figure></p>\n<p>正如上面所说，<code>[]</code>操作符可以替代成员函数<code>get</code>和<code>set</code>。</p>\n<blockquote>\n<p>与Java不同，Kotlin中的数组是不可变的，也就是说Kotlin不能将<code>Array&lt;String&gt;</code>赋值给<code>Array&lt;Any&gt;</code>，也就预防可能的运行时问题（但可以使用<code>Array&lt;outAny&gt;</code>），详见<a href=\"https://kotlinlang.org/docs/reference/generics.html#type-projections\" target=\"_blank\" rel=\"external\"><code>类型保护</code></a></p>\n</blockquote>\n<p>Kotlin有特殊类来表示原始类型数组，而不用向上装箱：<code>ByteArray</code>、<code>ShortArray</code>、<code>IntArray</code>等等。这些类与<code>Array</code>类没有继承关系，但是有相同的方法和属性，每个都有响应的工厂方法。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x: IntArray = intArrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">x[<span class=\"number\">0</span>] = x[<span class=\"number\">1</span>] + x[<span class=\"number\">2</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><p>String表示String类型数据。String不可变，string中的字符元素可使用<code>s[i]</code>方式访问。可使用<code>for</code>循环来迭代String。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (c <span class=\"keyword\">in</span> str) &#123;</div><div class=\"line\">    println(c)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>String常量<br>Kotlin支持两种string字面常量：转义string与raw string。转义string可能含有转义字符。raw string 可以有换行符和任意字符。</p>\n<p>转义string与java很像<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"string\">\"Hello World !\\n\"</span></div></pre></td></tr></table></figure></p>\n<p>转义与常规方式相同，使用转义字符。详情查看<a href=\"https://kotlinlang.org/docs/reference/basic-types.html#characters\" target=\"_blank\" rel=\"external\"><code>字符</code></a>。</p>\n<p>raw string使用三个引号界定<code>&quot;&quot;&quot;</code>，不用转义字符，可以含有换行字符和任意其他字符。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> text = <span class=\"string\">\"\"\"</span></div><div class=\"line\">    for (c in \"foo\")</div><div class=\"line\">        print(c)</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n<p>可以使用<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html\" target=\"_blank\" rel=\"external\"><code>trimMargin()</code></a>函数去除前导空格。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> text = <span class=\"string\">\"\"\"</span></div><div class=\"line\">    |Tell me and I forget.</div><div class=\"line\">    |Teach me and I remember.</div><div class=\"line\">    |Involve me and I learn.</div><div class=\"line\">    |(Benjamin Franklin)</div><div class=\"line\">    \"\"\".trimMargin()</div></pre></td></tr></table></figure></p>\n<p>默认使用<code>|</code>表示边缘前缀，也可以传入其他字符，如<code>trimMargin(&quot;&gt;&quot;)</code>。</p>\n<h2 id=\"String模板\"><a href=\"#String模板\" class=\"headerlink\" title=\"String模板\"></a>String模板</h2><p>String可以包含模板表达式，如将代码中的返回结果串联到字符串中。模板表达式由<code>$</code>起始符与参数名构成。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> i = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"string\">\"i = <span class=\"variable\">$i</span>\"</span> <span class=\"comment\">// evaluates to \"i = 10\"</span></div></pre></td></tr></table></figure></p>\n<p>或者在<code>{}</code>中的任意表达式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"string\">\"abc\"</span></div><div class=\"line\"><span class=\"keyword\">val</span> str = <span class=\"string\">\"<span class=\"variable\">$s</span>.length is <span class=\"subst\">$&#123;s.length&#125;</span>\"</span> <span class=\"comment\">// evaluates to \"abc.length is 3\"</span></div></pre></td></tr></table></figure></p>\n<p>String模板在raw string和转义string中都可以使用。如果要在raw string中表示一个$字符常量（不支持反斜杠转义），则可使用下面语法：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> price = <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"subst\">$&#123;<span class=\"string\">'$'</span>&#125;</span>9.99</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n<h1 id=\"Package包\"><a href=\"#Package包\" class=\"headerlink\" title=\"Package包\"></a>Package包</h1><p>源码文件可能需要声明包命<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> foo.bar</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">baz</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Goo</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>源码文件所有内容（如类与函数）都包含在声明的包中。上面例子中，<code>baz()</code>全称为<code>foo.bar.baz</code>，<code>Goo</code>的全称为<code>foo.bar.Goo</code>。</p>\n<p>如果未执行包，文件内容属于无名的默认包</p>\n<h2 id=\"默认导入\"><a href=\"#默认导入\" class=\"headerlink\" title=\"默认导入\"></a>默认导入</h2><p>许多包默认导入到Kotlin的每个文件中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">kotlin.*</div><div class=\"line\">kotlin.<span class=\"keyword\">annotation</span>.*</div><div class=\"line\">kotlin.collections.*</div><div class=\"line\">kotlin.comparisons.* (since <span class=\"number\">1.1</span>)</div><div class=\"line\">kotlin.io.*</div><div class=\"line\">kotlin.ranges.*</div><div class=\"line\">kotlin.sequences.*</div><div class=\"line\">kotlin.text.*</div></pre></td></tr></table></figure>\n<p>根据目标平台导入附加包<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">JVM:</div><div class=\"line\">    java.lang.*</div><div class=\"line\">    kotlin.jvm.*</div><div class=\"line\">JS:</div><div class=\"line\">    kotlin.js.*</div></pre></td></tr></table></figure></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p>处理默认导入，每个文件可以含有自己导入的目录。导入的语法描述参考<a href=\"https://kotlinlang.org/docs/reference/grammar.html#import\" target=\"_blank\" rel=\"external\"><code>Import</code></a></p>\n<p>可以导入单独名称<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo.Bar <span class=\"comment\">// Bar is now accessible without qualification</span></div></pre></td></tr></table></figure></p>\n<p>或者访问范围内容（包，类，对象等）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo.* <span class=\"comment\">// everything in 'foo' becomes accessible</span></div></pre></td></tr></table></figure></p>\n<p>出现冲突时，使用<code>as</code>关键字给冲突包设置别名<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo.Bar <span class=\"comment\">// Bar is accessible</span></div><div class=\"line\"><span class=\"keyword\">import</span> bar.Bar <span class=\"keyword\">as</span> bBar <span class=\"comment\">// bBar stands for 'bar.Bar'</span></div></pre></td></tr></table></figure></p>\n<p><code>import</code>关键字不限于导入类，也可以用来导入其他声明：</p>\n<ul>\n<li>上层函数与属性</li>\n<li>在<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations\" target=\"_blank\" rel=\"external\"><code>对象声明</code></a>中声明的函数与属性</li>\n<li><a href=\"https://kotlinlang.org/docs/reference/enum-classes.html\" target=\"_blank\" rel=\"external\"><code>枚举常量</code></a></li>\n</ul>\n<p>与Java不同的是，Kotlin没有单独的<code>import static</code>语法；所有声明都使用<code>import</code>关键字导入。</p>\n<h2 id=\"顶层声明访问\"><a href=\"#顶层声明访问\" class=\"headerlink\" title=\"顶层声明访问\"></a>顶层声明访问</h2><p>如果顶层声明标记为<code>private</code>，则它私有属于在声明的文件。详情查看<a href=\"https://kotlinlang.org/docs/reference/visibility-modifiers.html\" target=\"_blank\" rel=\"external\"><code>访问修饰符</code></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h1><p>在Kotlin中，一切皆对象从这种意义上来说，我们可以调用任何变量的属性和方法。有些内嵌类型的实现是经过优化的，但是对于开发者而言看上就是普通的类。这些类型有：数值类型，字符类型，boolean类型，数组类型</p>\n<h2 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h2><p>Kotlin使用类似Java的方式处理数值类型，但是与Java不是完全相同。如：不支持数值的隐式扩大转换或在某些情况中字面常量会些许不同。</p>\n<p>Kotlin内嵌了以下几种数值类型</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Bit width</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Double</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>32</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>32</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>18</td>\n</tr>\n</tbody>\n</table>\n<p>在Kotlin中，字符常量不属于数值类型</p>\n<h2 id=\"字面常量\"><a href=\"#字面常量\" class=\"headerlink\" title=\"字面常量\"></a>字面常量</h2><p>整型的字面常量</p>\n<ul>\n<li>十进制：123<ul>\n<li>Long类型后缀L表示：123L</li>\n</ul>\n</li>\n<li>十六进制：0x0F</li>\n<li>二进制：0b00001011</li>\n</ul>\n<blockquote>\n<p>不支持八进制</p>\n</blockquote>\n<p>支持浮点型数值的常规字符</p>\n<ul>\n<li>Double：<code>123.5</code> ，<code>123.5e10</code></li>\n<li>Float使用<code>f</code>或<code>F</code>标记：<code>123.5f</code></li>\n</ul>\n<h2 id=\"数字常量中的下划线\"><a href=\"#数字常量中的下划线\" class=\"headerlink\" title=\"数字常量中的下划线\"></a>数字常量中的下划线</h2><p>可以在数字中使用下划线，让数字可读性更好。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> oneMillion = <span class=\"number\">1</span>_000_000</div><div class=\"line\"><span class=\"keyword\">val</span> creditCardNumber = <span class=\"number\">1234</span>_5678_9012_3456L</div><div class=\"line\"><span class=\"keyword\">val</span> socialSecurityNumber = <span class=\"number\">999</span>_99_9999L</div><div class=\"line\"><span class=\"keyword\">val</span> hexBytes = <span class=\"number\">0xFF</span>_EC_DE_5E</div><div class=\"line\"><span class=\"keyword\">val</span> bytes = <span class=\"number\">0</span>b11010010_01101001_10010100_10010010</div></pre></td></tr></table></figure></p>\n<h2 id=\"表示法\"><a href=\"#表示法\" class=\"headerlink\" title=\"表示法\"></a>表示法</h2><p>在Java平台，数字物理存储为JVM的原始类型，除非需要一个可以为空的数值引用或作为泛型引用，这种情况时，数字会被自动装箱。</p>\n<p>数值装箱不一定保留同一性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">10000</span></div><div class=\"line\">print(a === a) <span class=\"comment\">// Prints 'true'</span></div><div class=\"line\"><span class=\"keyword\">val</span> boxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\"><span class=\"keyword\">val</span> anotherBoxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\">print(boxedA === anotherBoxedA) <span class=\"comment\">// !!!Prints 'false'!!!</span></div></pre></td></tr></table></figure></p>\n<p>但保留相等性<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">10000</span></div><div class=\"line\">print(a == a) <span class=\"comment\">// Prints 'true'</span></div><div class=\"line\"><span class=\"keyword\">val</span> boxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\"><span class=\"keyword\">val</span> anotherBoxedA: <span class=\"built_in\">Int</span>? = a</div><div class=\"line\">print(boxedA == anotherBoxedA) <span class=\"comment\">// Prints 'true'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"显式转换\"><a href=\"#显式转换\" class=\"headerlink\" title=\"显式转换\"></a>显式转换</h2><p>因为不同的表示法，较小类型并非是较大类型数字的子类型。因为如果是的话，则会遇到下面的问题<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非实际编译，假设性代码</span></div><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span>? = <span class=\"number\">1</span> <span class=\"comment\">//  Int装箱</span></div><div class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Long</span>? = a <span class=\"comment\">// 隐式装换，生成Long类型装箱</span></div><div class=\"line\">print(a == b) <span class=\"comment\">// 因为Long只与Long类型比较，打印`false`</span></div></pre></td></tr></table></figure></p>\n<p>不仅仅是同一性，甚至相等性也默默丢失。</p>\n<p>因此较小的类型无法隐式转换成较大类型。意思是无法将<code>Byte</code>类型数值隐式转为<code>Int</code>类型<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Byte</span> = <span class=\"number\">1</span> <span class=\"comment\">// OK, literals are checked statically</span></div><div class=\"line\"><span class=\"keyword\">val</span> i: <span class=\"built_in\">Int</span> = b <span class=\"comment\">// ERROR</span></div></pre></td></tr></table></figure></p>\n<p>使用显式转换扩大数值<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> i: <span class=\"built_in\">Int</span> = b.toInt() <span class=\"comment\">// OK: explicitly widened</span></div></pre></td></tr></table></figure></p>\n<p>所有数值类型都支持以下转换：</p>\n<ul>\n<li>toByte(): Byte</li>\n<li>toShort(): Short</li>\n<li>toInt(): Int</li>\n<li>toLong(): Long</li>\n<li>toFloat(): Float</li>\n<li>toDouble(): Double</li>\n<li>toChar(): Char</li>\n</ul>\n<p>缺少隐式转换很少被注意到，因为数值类型可从上下文中推断出，合适转换算术运算符的重载。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> l = <span class=\"number\">1</span>L + <span class=\"number\">3</span> <span class=\"comment\">// Long + Int =&gt; Long</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>Kotlin支持标准的数值操作符，这些操作符声明为合适类的成员（编译会优化操作符到对应指令）。查看<a href=\"https://kotlinlang.org/docs/reference/operator-overloading.html\" target=\"_blank\" rel=\"external\"><code>操作符重载</code></a></p>\n<p>因为按位操作符没有特定的符号表示，使用中缀表达式来使用对应名称的函数。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x = (<span class=\"number\">1</span> shl <span class=\"number\">2</span>) and <span class=\"number\">0x000FF000</span></div></pre></td></tr></table></figure></p>\n<p>下面就是按位操作符的完整列表（仅适应于<code>Int</code>和<code>Long</code>）</p>\n<ul>\n<li>shl(bits) – 有符号左移 (Java’s &lt;&lt;)</li>\n<li>shr(bits) – 有符号右移 (Java’s &gt;&gt;)</li>\n<li>ushr(bits) – 无符号右移 (Java’s &gt;&gt;&gt;)</li>\n<li>and(bits) – 按位与</li>\n<li>or(bits) – 按位或</li>\n<li>xor(bits) – 按位异或</li>\n<li>inv() – 按位反转</li>\n</ul>\n<h2 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h2><p><code>Char</code>表示字符，不能直接作为数值使用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">check</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// ERROR: incompatible types</span></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>字符常量使用单引号括起来，如<code>1</code>。特殊字符串使用反斜杠转义。<code>\\t</code>、<code>\\b</code>、<code>\\n</code>、<code>\\r</code>、<code>\\&#39;</code>、<code>\\\\</code>和<code>\\$</code>等转义字都符能支持。使用Unicode转义字符语法（<code>&#39;\\uFF00&#39;</code>）来对其他字符进行编码。</p>\n<p>可以显式将Char转为Int类型。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">decimalDigitValue</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (c !<span class=\"keyword\">in</span> <span class=\"string\">'0'</span>..<span class=\"string\">'9'</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Out of range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> c.toInt() - <span class=\"string\">'0'</span>.toInt() <span class=\"comment\">// Explicit conversions to numbers</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当需要可为空的引用时，字符可以像数字一样装箱。装箱操作不会保留同一性。</p>\n<h2 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h2><p>Boolean类型表示布尔值，有两个值<em>true</em>和<em>false</em></p>\n<p>当为可空的引用时，Boolean类型进行装箱。</p>\n<p>内置的boolean操作包括：</p>\n<ul>\n<li>|| 短路或</li>\n<li>&amp;&amp; 短路与</li>\n<li>!  逻辑非</li>\n</ul>\n<h2 id=\"Array数组\"><a href=\"#Array数组\" class=\"headerlink\" title=\"Array数组\"></a>Array数组</h2><p>Kotlin使用<code>Array</code>类表示数组。Array类定义了<code>set</code>与<code>get</code>函数（按照函数重载定义会转换成<code>[]</code>）,<code>size</code>属性，和其他几个有用的函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span>&lt;<span class=\"type\">T</span>&gt; <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> size: <span class=\"built_in\">Int</span></div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(index: <span class=\"type\">Int</span>)</span></span>: T</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">set</span><span class=\"params\">(index: <span class=\"type\">Int</span>, value: <span class=\"type\">T</span>)</span></span>: <span class=\"built_in\">Unit</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">iterator</span><span class=\"params\">()</span></span>: Iterator&lt;T&gt;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用函数<code>arrayOf()</code>来创建数组，传入多个item参数（如arrayOf(1, 2, ,3) 能够创建[1 , 2, 3]的数组）。使用函数<code>arrayOfNulls()</code>来创建指定长度但是元素为空的数组。</p>\n<p>使用一个工厂函数传入数组长度，返回数组指定index的元素值。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Creates an Array&lt;String&gt; with values [\"0\", \"1\", \"4\", \"9\", \"16\"]</span></div><div class=\"line\"><span class=\"keyword\">val</span> asc = Array(<span class=\"number\">5</span>, &#123; i -&gt; (i * i).toString() &#125;)</div></pre></td></tr></table></figure></p>\n<p>正如上面所说，<code>[]</code>操作符可以替代成员函数<code>get</code>和<code>set</code>。</p>\n<blockquote>\n<p>与Java不同，Kotlin中的数组是不可变的，也就是说Kotlin不能将<code>Array&lt;String&gt;</code>赋值给<code>Array&lt;Any&gt;</code>，也就预防可能的运行时问题（但可以使用<code>Array&lt;outAny&gt;</code>），详见<a href=\"https://kotlinlang.org/docs/reference/generics.html#type-projections\" target=\"_blank\" rel=\"external\"><code>类型保护</code></a></p>\n</blockquote>\n<p>Kotlin有特殊类来表示原始类型数组，而不用向上装箱：<code>ByteArray</code>、<code>ShortArray</code>、<code>IntArray</code>等等。这些类与<code>Array</code>类没有继承关系，但是有相同的方法和属性，每个都有响应的工厂方法。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x: IntArray = intArrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">x[<span class=\"number\">0</span>] = x[<span class=\"number\">1</span>] + x[<span class=\"number\">2</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><p>String表示String类型数据。String不可变，string中的字符元素可使用<code>s[i]</code>方式访问。可使用<code>for</code>循环来迭代String。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (c <span class=\"keyword\">in</span> str) &#123;</div><div class=\"line\">    println(c)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>String常量<br>Kotlin支持两种string字面常量：转义string与raw string。转义string可能含有转义字符。raw string 可以有换行符和任意字符。</p>\n<p>转义string与java很像<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"string\">\"Hello World !\\n\"</span></div></pre></td></tr></table></figure></p>\n<p>转义与常规方式相同，使用转义字符。详情查看<a href=\"https://kotlinlang.org/docs/reference/basic-types.html#characters\" target=\"_blank\" rel=\"external\"><code>字符</code></a>。</p>\n<p>raw string使用三个引号界定<code>&quot;&quot;&quot;</code>，不用转义字符，可以含有换行字符和任意其他字符。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> text = <span class=\"string\">\"\"\"</span></div><div class=\"line\">    for (c in \"foo\")</div><div class=\"line\">        print(c)</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n<p>可以使用<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html\" target=\"_blank\" rel=\"external\"><code>trimMargin()</code></a>函数去除前导空格。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> text = <span class=\"string\">\"\"\"</span></div><div class=\"line\">    |Tell me and I forget.</div><div class=\"line\">    |Teach me and I remember.</div><div class=\"line\">    |Involve me and I learn.</div><div class=\"line\">    |(Benjamin Franklin)</div><div class=\"line\">    \"\"\".trimMargin()</div></pre></td></tr></table></figure></p>\n<p>默认使用<code>|</code>表示边缘前缀，也可以传入其他字符，如<code>trimMargin(&quot;&gt;&quot;)</code>。</p>\n<h2 id=\"String模板\"><a href=\"#String模板\" class=\"headerlink\" title=\"String模板\"></a>String模板</h2><p>String可以包含模板表达式，如将代码中的返回结果串联到字符串中。模板表达式由<code>$</code>起始符与参数名构成。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> i = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"string\">\"i = <span class=\"variable\">$i</span>\"</span> <span class=\"comment\">// evaluates to \"i = 10\"</span></div></pre></td></tr></table></figure></p>\n<p>或者在<code>{}</code>中的任意表达式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"string\">\"abc\"</span></div><div class=\"line\"><span class=\"keyword\">val</span> str = <span class=\"string\">\"<span class=\"variable\">$s</span>.length is <span class=\"subst\">$&#123;s.length&#125;</span>\"</span> <span class=\"comment\">// evaluates to \"abc.length is 3\"</span></div></pre></td></tr></table></figure></p>\n<p>String模板在raw string和转义string中都可以使用。如果要在raw string中表示一个$字符常量（不支持反斜杠转义），则可使用下面语法：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> price = <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"subst\">$&#123;<span class=\"string\">'$'</span>&#125;</span>9.99</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n<h1 id=\"Package包\"><a href=\"#Package包\" class=\"headerlink\" title=\"Package包\"></a>Package包</h1><p>源码文件可能需要声明包命<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> foo.bar</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">baz</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Goo</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>源码文件所有内容（如类与函数）都包含在声明的包中。上面例子中，<code>baz()</code>全称为<code>foo.bar.baz</code>，<code>Goo</code>的全称为<code>foo.bar.Goo</code>。</p>\n<p>如果未执行包，文件内容属于无名的默认包</p>\n<h2 id=\"默认导入\"><a href=\"#默认导入\" class=\"headerlink\" title=\"默认导入\"></a>默认导入</h2><p>许多包默认导入到Kotlin的每个文件中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">kotlin.*</div><div class=\"line\">kotlin.<span class=\"keyword\">annotation</span>.*</div><div class=\"line\">kotlin.collections.*</div><div class=\"line\">kotlin.comparisons.* (since <span class=\"number\">1.1</span>)</div><div class=\"line\">kotlin.io.*</div><div class=\"line\">kotlin.ranges.*</div><div class=\"line\">kotlin.sequences.*</div><div class=\"line\">kotlin.text.*</div></pre></td></tr></table></figure>\n<p>根据目标平台导入附加包<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">JVM:</div><div class=\"line\">    java.lang.*</div><div class=\"line\">    kotlin.jvm.*</div><div class=\"line\">JS:</div><div class=\"line\">    kotlin.js.*</div></pre></td></tr></table></figure></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p>处理默认导入，每个文件可以含有自己导入的目录。导入的语法描述参考<a href=\"https://kotlinlang.org/docs/reference/grammar.html#import\" target=\"_blank\" rel=\"external\"><code>Import</code></a></p>\n<p>可以导入单独名称<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo.Bar <span class=\"comment\">// Bar is now accessible without qualification</span></div></pre></td></tr></table></figure></p>\n<p>或者访问范围内容（包，类，对象等）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo.* <span class=\"comment\">// everything in 'foo' becomes accessible</span></div></pre></td></tr></table></figure></p>\n<p>出现冲突时，使用<code>as</code>关键字给冲突包设置别名<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo.Bar <span class=\"comment\">// Bar is accessible</span></div><div class=\"line\"><span class=\"keyword\">import</span> bar.Bar <span class=\"keyword\">as</span> bBar <span class=\"comment\">// bBar stands for 'bar.Bar'</span></div></pre></td></tr></table></figure></p>\n<p><code>import</code>关键字不限于导入类，也可以用来导入其他声明：</p>\n<ul>\n<li>上层函数与属性</li>\n<li>在<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations\" target=\"_blank\" rel=\"external\"><code>对象声明</code></a>中声明的函数与属性</li>\n<li><a href=\"https://kotlinlang.org/docs/reference/enum-classes.html\" target=\"_blank\" rel=\"external\"><code>枚举常量</code></a></li>\n</ul>\n<p>与Java不同的是，Kotlin没有单独的<code>import static</code>语法；所有声明都使用<code>import</code>关键字导入。</p>\n<h2 id=\"顶层声明访问\"><a href=\"#顶层声明访问\" class=\"headerlink\" title=\"顶层声明访问\"></a>顶层声明访问</h2><p>如果顶层声明标记为<code>private</code>，则它私有属于在声明的文件。详情查看<a href=\"https://kotlinlang.org/docs/reference/visibility-modifiers.html\" target=\"_blank\" rel=\"external\"><code>访问修饰符</code></a></p>\n"},{"title":"Kotlin基础之函数","date":"2017-06-21T04:00:09.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"\n## 函数声明\n```java\nfun double(x: Int): Int {\n    return 2*x\n}\n```\n\n## 函数调用\n\n1. 类Java用法\n```java\nvar result = double(2)\n```\n2. 使用冒号调用\n创建Sample对象并调用foo函数\n```java\nSample().foo()\n```\n\n## 中缀（Infix）表示法\n中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）\n\n在以下三种情况下，可以使用中缀表示法调用函数\n- 成员函数或扩展函数\n- 单个参数\n- 使用`infix`关键字标记的函数\n```java\n// 定义Int扩展函数\ninfix fun Int.sh(x : Int) : Int{\n  \n}\n\n// 使用中缀表示法调用函数\n1 sh 2\n\n// 相同的\n\n1.sh(2)\n```\n\n## 参数\n\n函数参数的定义采用Pascal表示法：`name:type`。多个参数之间使用逗号分隔，每个参数必须要指定类型\n```java\nfun powerOf(number: Int , exponent: Int){\n  ...\n}\n```\n\n## 默认值\n函数参数可以设置默认值。用于对应参数缺省的情况下，降低函数重载数量。\n```java\nfun read(b: Array<Byte> , off: Int = 0 , len: Int = b.size){\n  ...\n}\n```\n默认值使用紧跟变量类型后的`=`来定义。\n复写方法必须使用与父类相同的默认参数值。当复写带有默认值的方法时，必须要省略默认值。\n```java\nopen class A{\n    open fun foo(i: Int = 10){\n      ...\n    }\n}\n\nclass B : A(){\n  // 不允许提供默认值\n  override fun foo(i: Int){\n    ... \n  }\n  }\n}\n```\n## 具名参数\n调用函数时可以提供参数的名称。在函数有大量有默认值参数时会很方便。\n\n假设有下面一个函数\n\n```java\nfun reformat(str: String\n            normalizeCase: Boolean = true,\n            upperCaseFirstLetter: Boolean = true,\n            divideByCamelHumps: Boolean = false,\n            wordSeparator: Char = ' ')\n```\n可以这样调用\n\n```java\nreformat(str)\n```\n不使用默认参数则需要这样调用\n\n```java\nreformat(str , true , true , false , '_')\n```\n使用具名参数可以让代码可读性更好\n\n```java\nreformat(str,\n    normalizeCase = true,\n    upperCaseFirstLetter = true,\n    divideByCamelHumps = false,\n    wordSeparator = '_'\n)\n```\n如果不需要所有参数\n```java\nreformat(str, wordSeparator = '_')\n```\n> 具名参数语法不适应于Java函数。因为Java字节码并不一直保存参数名称。\n\n## Unit-returning函数\n如果函数不返回值，则函数返回类型为`Unit`。`Unit`是唯一值为`Unit`的类型。Unit返回值不需要显式返回。\n```java\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` 或 `return` 可选\n}\n```\n`Unit`返回类型声明为可选项目。上面代码等同于\n```java\nfun printHello(name: String?) {\n    ...\n}\n```\n## 单表达式函数\n当函数返回单个表达式，可省略花括号，可在`=`之后指定对应代码。\n```java\nfun double(x: Int): Int = x * 2\n```\n可省略返回值类型，由编译器推测。\n\n```java\nfun double(x: Int) = x * 2\n```\n## 显式返回类型\n非Unit返回值且有代码块的函数必须显式指明返回值类型。`Kotlin`不会推断有代码块的函数的返回值类型，因为这些函数可能有复杂的控制流程， 返回类型对于编译器或阅读代码的开发者不是那么显而易见。\n\n## 可变参数\n函数参数（一般最后一个）可以使用`vararg`修饰符设置为可变参数。\n```java\nfun <T> asList(vararg ts: T): List<T> {\n    val result = ArrayList<T>()\n    for (t in ts) // ts is an Array\n        result.add(t)\n    return result\n}\n```\n允许函数使用可变数量的参数\n\n```java\nval list = asList(1 , 2, 3)\n```\n在函数中T类型的可变参数被视为T的一个数组。例如上面例子中的`ts`变量就是`Array<out T>`\n\n函数中只能设置一个标记为`vararg`可变参数. 如果可变参数不是最后一个参数，则之后的参数可以使用具名参数语法传值；\n可以通过在括号外以lambda方式传入函数类型的参数。\n调用可变参数函数时，可以用一个一个方式传参（如：asList(1, 2, 3)）；或使用扩展操作符（前缀`*`）传入数组参数。\n\n```java\nval a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n```\n## 函数作用域\n\n在Kotlin中可以在文件顶部声明函数，意味着不必创建Class来持有函数。除此Kotlin函数还可以像成员函数和扩展函数一样在局部声明。\n\n## 局部函数\nKotlin支持局部函数，如在函数内部定义函数\n\n```java\nfun dfs(graph: Graph) {\n    fun dfs(current: Vertex, visited: Set<Vertex>) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v, visited)\n    }\n\n    dfs(graph.vertices[0], HashSet())\n}\n```\n局部函数可以访问外部函数的局部变量\n\n```java\nfun dfs(graph: Graph) {\n    val visited = HashSet<Vertex>()\n    fun dfs(current: Vertex) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v)\n    }\n\n    dfs(graph.vertices[0])\n}\n```\n\n## 成员函数\n成员函数：定义在Class或对象内部的函数。\n```java\nclass Sample() {\n    fun foo() { print(\"Foo\") }\n}\n```\n成员函数可以使用`.`操作符调用\n```java\nSample().foo()\n```\n更多关于Class和复写成员函数查看[`Classes`](https://kotlinlang.org/docs/reference/classes.html)和[`Inheritance`](https://kotlinlang.org/docs/reference/classes.html#inheritance)\n\n## 泛型函数\n函数在函数名前以`<T>`形式使用泛型。\n\n```java\nfun <T> singletonList(item: T): List<T> {\n    // ...\n}\n```\n跟多关于泛型信息查看[`Generics`](https://kotlinlang.org/docs/reference/generics.html)\n\n## 内联函数\n内联函数查看[`Inline Functions`](https://kotlinlang.org/docs/reference/inline-functions.html)\n## 扩展函数\n扩展函数查看[`Extension Functions`](https://kotlinlang.org/docs/reference/extensions.html)\n\n## 高阶函数和Lambdas\n高阶函数和Lambdas查看[`高阶函数和Lambdas`](https://kotlinlang.org/docs/reference/lambdas.html)\n\n## 尾递归函数\n\n`尾调用`是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。\n\nKotlin支持尾递归形式的函数编程。目前尾递归只支持JVM后端。定义合格的尾递归，函数必须要在最后一步执行自身调用。当在递归操作后仍有要执行的代码时，或者在try/catch/finally块中都不适合使用尾递归函数。\n当函数使用`tailrec`修饰符，满足必要形式，编译器会优化递归，保留快速、高效的迭代基准版本。\n```java\ntailrec fun findFixPoint(x: Double = 1.0): Double\n        = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))\n```\n上面函数用于计算余弦的不动点（f(x) = x）。代码与下面相同\n```java\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (x == y) return y\n        x = y\n    }\n}\n```\n\n\n\n","source":"_posts/Kotlin基础之函数.md","raw":"---\ntitle: Kotlin基础之函数\ndate: 2017-06-21 12:00:09\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n\n## 函数声明\n```java\nfun double(x: Int): Int {\n    return 2*x\n}\n```\n\n## 函数调用\n\n1. 类Java用法\n```java\nvar result = double(2)\n```\n2. 使用冒号调用\n创建Sample对象并调用foo函数\n```java\nSample().foo()\n```\n\n## 中缀（Infix）表示法\n中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）\n\n在以下三种情况下，可以使用中缀表示法调用函数\n- 成员函数或扩展函数\n- 单个参数\n- 使用`infix`关键字标记的函数\n```java\n// 定义Int扩展函数\ninfix fun Int.sh(x : Int) : Int{\n  \n}\n\n// 使用中缀表示法调用函数\n1 sh 2\n\n// 相同的\n\n1.sh(2)\n```\n\n## 参数\n\n函数参数的定义采用Pascal表示法：`name:type`。多个参数之间使用逗号分隔，每个参数必须要指定类型\n```java\nfun powerOf(number: Int , exponent: Int){\n  ...\n}\n```\n\n## 默认值\n函数参数可以设置默认值。用于对应参数缺省的情况下，降低函数重载数量。\n```java\nfun read(b: Array<Byte> , off: Int = 0 , len: Int = b.size){\n  ...\n}\n```\n默认值使用紧跟变量类型后的`=`来定义。\n复写方法必须使用与父类相同的默认参数值。当复写带有默认值的方法时，必须要省略默认值。\n```java\nopen class A{\n    open fun foo(i: Int = 10){\n      ...\n    }\n}\n\nclass B : A(){\n  // 不允许提供默认值\n  override fun foo(i: Int){\n    ... \n  }\n  }\n}\n```\n## 具名参数\n调用函数时可以提供参数的名称。在函数有大量有默认值参数时会很方便。\n\n假设有下面一个函数\n\n```java\nfun reformat(str: String\n            normalizeCase: Boolean = true,\n            upperCaseFirstLetter: Boolean = true,\n            divideByCamelHumps: Boolean = false,\n            wordSeparator: Char = ' ')\n```\n可以这样调用\n\n```java\nreformat(str)\n```\n不使用默认参数则需要这样调用\n\n```java\nreformat(str , true , true , false , '_')\n```\n使用具名参数可以让代码可读性更好\n\n```java\nreformat(str,\n    normalizeCase = true,\n    upperCaseFirstLetter = true,\n    divideByCamelHumps = false,\n    wordSeparator = '_'\n)\n```\n如果不需要所有参数\n```java\nreformat(str, wordSeparator = '_')\n```\n> 具名参数语法不适应于Java函数。因为Java字节码并不一直保存参数名称。\n\n## Unit-returning函数\n如果函数不返回值，则函数返回类型为`Unit`。`Unit`是唯一值为`Unit`的类型。Unit返回值不需要显式返回。\n```java\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` 或 `return` 可选\n}\n```\n`Unit`返回类型声明为可选项目。上面代码等同于\n```java\nfun printHello(name: String?) {\n    ...\n}\n```\n## 单表达式函数\n当函数返回单个表达式，可省略花括号，可在`=`之后指定对应代码。\n```java\nfun double(x: Int): Int = x * 2\n```\n可省略返回值类型，由编译器推测。\n\n```java\nfun double(x: Int) = x * 2\n```\n## 显式返回类型\n非Unit返回值且有代码块的函数必须显式指明返回值类型。`Kotlin`不会推断有代码块的函数的返回值类型，因为这些函数可能有复杂的控制流程， 返回类型对于编译器或阅读代码的开发者不是那么显而易见。\n\n## 可变参数\n函数参数（一般最后一个）可以使用`vararg`修饰符设置为可变参数。\n```java\nfun <T> asList(vararg ts: T): List<T> {\n    val result = ArrayList<T>()\n    for (t in ts) // ts is an Array\n        result.add(t)\n    return result\n}\n```\n允许函数使用可变数量的参数\n\n```java\nval list = asList(1 , 2, 3)\n```\n在函数中T类型的可变参数被视为T的一个数组。例如上面例子中的`ts`变量就是`Array<out T>`\n\n函数中只能设置一个标记为`vararg`可变参数. 如果可变参数不是最后一个参数，则之后的参数可以使用具名参数语法传值；\n可以通过在括号外以lambda方式传入函数类型的参数。\n调用可变参数函数时，可以用一个一个方式传参（如：asList(1, 2, 3)）；或使用扩展操作符（前缀`*`）传入数组参数。\n\n```java\nval a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n```\n## 函数作用域\n\n在Kotlin中可以在文件顶部声明函数，意味着不必创建Class来持有函数。除此Kotlin函数还可以像成员函数和扩展函数一样在局部声明。\n\n## 局部函数\nKotlin支持局部函数，如在函数内部定义函数\n\n```java\nfun dfs(graph: Graph) {\n    fun dfs(current: Vertex, visited: Set<Vertex>) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v, visited)\n    }\n\n    dfs(graph.vertices[0], HashSet())\n}\n```\n局部函数可以访问外部函数的局部变量\n\n```java\nfun dfs(graph: Graph) {\n    val visited = HashSet<Vertex>()\n    fun dfs(current: Vertex) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v)\n    }\n\n    dfs(graph.vertices[0])\n}\n```\n\n## 成员函数\n成员函数：定义在Class或对象内部的函数。\n```java\nclass Sample() {\n    fun foo() { print(\"Foo\") }\n}\n```\n成员函数可以使用`.`操作符调用\n```java\nSample().foo()\n```\n更多关于Class和复写成员函数查看[`Classes`](https://kotlinlang.org/docs/reference/classes.html)和[`Inheritance`](https://kotlinlang.org/docs/reference/classes.html#inheritance)\n\n## 泛型函数\n函数在函数名前以`<T>`形式使用泛型。\n\n```java\nfun <T> singletonList(item: T): List<T> {\n    // ...\n}\n```\n跟多关于泛型信息查看[`Generics`](https://kotlinlang.org/docs/reference/generics.html)\n\n## 内联函数\n内联函数查看[`Inline Functions`](https://kotlinlang.org/docs/reference/inline-functions.html)\n## 扩展函数\n扩展函数查看[`Extension Functions`](https://kotlinlang.org/docs/reference/extensions.html)\n\n## 高阶函数和Lambdas\n高阶函数和Lambdas查看[`高阶函数和Lambdas`](https://kotlinlang.org/docs/reference/lambdas.html)\n\n## 尾递归函数\n\n`尾调用`是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。\n\nKotlin支持尾递归形式的函数编程。目前尾递归只支持JVM后端。定义合格的尾递归，函数必须要在最后一步执行自身调用。当在递归操作后仍有要执行的代码时，或者在try/catch/finally块中都不适合使用尾递归函数。\n当函数使用`tailrec`修饰符，满足必要形式，编译器会优化递归，保留快速、高效的迭代基准版本。\n```java\ntailrec fun findFixPoint(x: Double = 1.0): Double\n        = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))\n```\n上面函数用于计算余弦的不动点（f(x) = x）。代码与下面相同\n```java\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (x == y) return y\n        x = y\n    }\n}\n```\n\n\n\n","slug":"Kotlin基础之函数","published":1,"updated":"2017-07-03T07:46:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxy000zc0m3bxd5bvvc","content":"<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h2><ol>\n<li><p>类Java用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var result = <span class=\"keyword\">double</span>(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用冒号调用<br>创建Sample对象并调用foo函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample().foo()</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"中缀（Infix）表示法\"><a href=\"#中缀（Infix）表示法\" class=\"headerlink\" title=\"中缀（Infix）表示法\"></a>中缀（Infix）表示法</h2><p>中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）</p>\n<p>在以下三种情况下，可以使用中缀表示法调用函数</p>\n<ul>\n<li>成员函数或扩展函数</li>\n<li>单个参数</li>\n<li>使用<code>infix</code>关键字标记的函数<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义Int扩展函数</span></div><div class=\"line\">infix fun Int.sh(x : Int) : Int&#123;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用中缀表示法调用函数</span></div><div class=\"line\"><span class=\"number\">1</span> sh <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 相同的</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>.sh(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>函数参数的定义采用Pascal表示法：<code>name:type</code>。多个参数之间使用逗号分隔，每个参数必须要指定类型<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">powerOf</span><span class=\"params\">(number: Int , exponent: Int)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>函数参数可以设置默认值。用于对应参数缺省的情况下，降低函数重载数量。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">read</span><span class=\"params\">(b: Array&lt;Byte&gt; , off: Int = <span class=\"number\">0</span> , len: Int = b.size)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认值使用紧跟变量类型后的<code>=</code>来定义。<br>复写方法必须使用与父类相同的默认参数值。当复写带有默认值的方法时，必须要省略默认值。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">open class A&#123;</div><div class=\"line\">    open fun foo(i: Int = 10)&#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class B : A()&#123;</div><div class=\"line\">  // 不允许提供默认值</div><div class=\"line\">  override fun foo(i: Int)&#123;</div><div class=\"line\">    ... </div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"具名参数\"><a href=\"#具名参数\" class=\"headerlink\" title=\"具名参数\"></a>具名参数</h2><p>调用函数时可以提供参数的名称。在函数有大量有默认值参数时会很方便。</p>\n<p>假设有下面一个函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">reformat</span><span class=\"params\">(str: String</span></span></div><div class=\"line\">            normalizeCase: Boolean = <span class=\"keyword\">true</span>,</div><div class=\"line\">            upperCaseFirstLetter: Boolean = <span class=\"keyword\">true</span>,</div><div class=\"line\">            divideByCamelHumps: Boolean = <span class=\"keyword\">false</span>,</div><div class=\"line\">            wordSeparator: Char = <span class=\"string\">' '</span>)</div></pre></td></tr></table></figure>\n<p>可以这样调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str)</div></pre></td></tr></table></figure>\n<p>不使用默认参数则需要这样调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str , <span class=\"keyword\">true</span> , <span class=\"keyword\">true</span> , <span class=\"keyword\">false</span> , <span class=\"string\">'_'</span>)</div></pre></td></tr></table></figure>\n<p>使用具名参数可以让代码可读性更好</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str,</div><div class=\"line\">    normalizeCase = <span class=\"keyword\">true</span>,</div><div class=\"line\">    upperCaseFirstLetter = <span class=\"keyword\">true</span>,</div><div class=\"line\">    divideByCamelHumps = <span class=\"keyword\">false</span>,</div><div class=\"line\">    wordSeparator = <span class=\"string\">'_'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>如果不需要所有参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str, wordSeparator = <span class=\"string\">'_'</span>)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>具名参数语法不适应于Java函数。因为Java字节码并不一直保存参数名称。</p>\n</blockquote>\n<h2 id=\"Unit-returning函数\"><a href=\"#Unit-returning函数\" class=\"headerlink\" title=\"Unit-returning函数\"></a>Unit-returning函数</h2><p>如果函数不返回值，则函数返回类型为<code>Unit</code>。<code>Unit</code>是唯一值为<code>Unit</code>的类型。Unit返回值不需要显式返回。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span>: Unit </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>)</div><div class=\"line\">        println(<span class=\"string\">\"Hello $&#123;name&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        println(<span class=\"string\">\"Hi there!\"</span>)</div><div class=\"line\">    <span class=\"comment\">// `return Unit` 或 `return` 可选</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Unit</code>返回类型声明为可选项目。上面代码等同于<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"单表达式函数\"><a href=\"#单表达式函数\" class=\"headerlink\" title=\"单表达式函数\"></a>单表达式函数</h2><p>当函数返回单个表达式，可省略花括号，可在<code>=</code>之后指定对应代码。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>= x * <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>可省略返回值类型，由编译器推测。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span> </span>= x * <span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<h2 id=\"显式返回类型\"><a href=\"#显式返回类型\" class=\"headerlink\" title=\"显式返回类型\"></a>显式返回类型</h2><p>非Unit返回值且有代码块的函数必须显式指明返回值类型。<code>Kotlin</code>不会推断有代码块的函数的返回值类型，因为这些函数可能有复杂的控制流程， 返回类型对于编译器或阅读代码的开发者不是那么显而易见。</p>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>函数参数（一般最后一个）可以使用<code>vararg</code>修饰符设置为可变参数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun &lt;T&gt; asList(vararg ts: T): List&lt;T&gt; &#123;</div><div class=\"line\">    val result = ArrayList&lt;T&gt;()</div><div class=\"line\">    <span class=\"keyword\">for</span> (t in ts) <span class=\"comment\">// ts is an Array</span></div><div class=\"line\">        result.add(t)</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>允许函数使用可变数量的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">val list = asList(<span class=\"number\">1</span> , <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<p>在函数中T类型的可变参数被视为T的一个数组。例如上面例子中的<code>ts</code>变量就是<code>Array&lt;out T&gt;</code></p>\n<p>函数中只能设置一个标记为<code>vararg</code>可变参数. 如果可变参数不是最后一个参数，则之后的参数可以使用具名参数语法传值；<br>可以通过在括号外以lambda方式传入函数类型的参数。<br>调用可变参数函数时，可以用一个一个方式传参（如：asList(1, 2, 3)）；或使用扩展操作符（前缀<code>*</code>）传入数组参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">val a = arrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">val list = asList(-<span class=\"number\">1</span>, <span class=\"number\">0</span>, *a, <span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><p>在Kotlin中可以在文件顶部声明函数，意味着不必创建Class来持有函数。除此Kotlin函数还可以像成员函数和扩展函数一样在局部声明。</p>\n<h2 id=\"局部函数\"><a href=\"#局部函数\" class=\"headerlink\" title=\"局部函数\"></a>局部函数</h2><p>Kotlin支持局部函数，如在函数内部定义函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(graph: Graph)</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(current: Vertex, visited: Set&lt;Vertex&gt;)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!visited.add(current)) <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (v in current.neighbors)</div><div class=\"line\">            dfs(v, visited)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dfs(graph.vertices[<span class=\"number\">0</span>], HashSet())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>局部函数可以访问外部函数的局部变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(graph: Graph)</span> </span>&#123;</div><div class=\"line\">    val visited = HashSet&lt;Vertex&gt;()</div><div class=\"line\">    <span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(current: Vertex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!visited.add(current)) <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (v in current.neighbors)</div><div class=\"line\">            dfs(v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dfs(graph.vertices[<span class=\"number\">0</span>])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><p>成员函数：定义在Class或对象内部的函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span>() </span>&#123;</div><div class=\"line\">    <span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">\"Foo\"</span>) &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>成员函数可以使用<code>.</code>操作符调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample().foo()</div></pre></td></tr></table></figure></p>\n<p>更多关于Class和复写成员函数查看<a href=\"https://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"external\"><code>Classes</code></a>和<a href=\"https://kotlinlang.org/docs/reference/classes.html#inheritance\" target=\"_blank\" rel=\"external\"><code>Inheritance</code></a></p>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><p>函数在函数名前以<code>&lt;T&gt;</code>形式使用泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>跟多关于泛型信息查看<a href=\"https://kotlinlang.org/docs/reference/generics.html\" target=\"_blank\" rel=\"external\"><code>Generics</code></a></p>\n<h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2><p>内联函数查看<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html\" target=\"_blank\" rel=\"external\"><code>Inline Functions</code></a></p>\n<h2 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h2><p>扩展函数查看<a href=\"https://kotlinlang.org/docs/reference/extensions.html\" target=\"_blank\" rel=\"external\"><code>Extension Functions</code></a></p>\n<h2 id=\"高阶函数和Lambdas\"><a href=\"#高阶函数和Lambdas\" class=\"headerlink\" title=\"高阶函数和Lambdas\"></a>高阶函数和Lambdas</h2><p>高阶函数和Lambdas查看<a href=\"https://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"external\"><code>高阶函数和Lambdas</code></a></p>\n<h2 id=\"尾递归函数\"><a href=\"#尾递归函数\" class=\"headerlink\" title=\"尾递归函数\"></a>尾递归函数</h2><p><code>尾调用</code>是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。</p>\n<p>Kotlin支持尾递归形式的函数编程。目前尾递归只支持JVM后端。定义合格的尾递归，函数必须要在最后一步执行自身调用。当在递归操作后仍有要执行的代码时，或者在try/catch/finally块中都不适合使用尾递归函数。<br>当函数使用<code>tailrec</code>修饰符，满足必要形式，编译器会优化递归，保留快速、高效的迭代基准版本。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">tailrec fun <span class=\"title\">findFixPoint</span><span class=\"params\">(x: Double = <span class=\"number\">1.0</span>)</span>: Double</span></div><div class=\"line\">        = <span class=\"keyword\">if</span> (x == Math.cos(x)) <span class=\"function\">x <span class=\"keyword\">else</span> <span class=\"title\">findFixPoint</span><span class=\"params\">(Math.cos(x)</span>)</span></div></pre></td></tr></table></figure></p>\n<p>上面函数用于计算余弦的不动点（f(x) = x）。代码与下面相同<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">findFixPoint</span><span class=\"params\">()</span>: Double </span>&#123;</div><div class=\"line\">    var x = <span class=\"number\">1.0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        val y = Math.cos(x)</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> y</div><div class=\"line\">        x = y</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h2><ol>\n<li><p>类Java用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var result = <span class=\"keyword\">double</span>(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用冒号调用<br>创建Sample对象并调用foo函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample().foo()</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"中缀（Infix）表示法\"><a href=\"#中缀（Infix）表示法\" class=\"headerlink\" title=\"中缀（Infix）表示法\"></a>中缀（Infix）表示法</h2><p>中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）</p>\n<p>在以下三种情况下，可以使用中缀表示法调用函数</p>\n<ul>\n<li>成员函数或扩展函数</li>\n<li>单个参数</li>\n<li>使用<code>infix</code>关键字标记的函数<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义Int扩展函数</span></div><div class=\"line\">infix fun Int.sh(x : Int) : Int&#123;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用中缀表示法调用函数</span></div><div class=\"line\"><span class=\"number\">1</span> sh <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 相同的</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>.sh(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>函数参数的定义采用Pascal表示法：<code>name:type</code>。多个参数之间使用逗号分隔，每个参数必须要指定类型<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">powerOf</span><span class=\"params\">(number: Int , exponent: Int)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>函数参数可以设置默认值。用于对应参数缺省的情况下，降低函数重载数量。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">read</span><span class=\"params\">(b: Array&lt;Byte&gt; , off: Int = <span class=\"number\">0</span> , len: Int = b.size)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认值使用紧跟变量类型后的<code>=</code>来定义。<br>复写方法必须使用与父类相同的默认参数值。当复写带有默认值的方法时，必须要省略默认值。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">open class A&#123;</div><div class=\"line\">    open fun foo(i: Int = 10)&#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class B : A()&#123;</div><div class=\"line\">  // 不允许提供默认值</div><div class=\"line\">  override fun foo(i: Int)&#123;</div><div class=\"line\">    ... </div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"具名参数\"><a href=\"#具名参数\" class=\"headerlink\" title=\"具名参数\"></a>具名参数</h2><p>调用函数时可以提供参数的名称。在函数有大量有默认值参数时会很方便。</p>\n<p>假设有下面一个函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">reformat</span><span class=\"params\">(str: String</span></span></div><div class=\"line\">            normalizeCase: Boolean = <span class=\"keyword\">true</span>,</div><div class=\"line\">            upperCaseFirstLetter: Boolean = <span class=\"keyword\">true</span>,</div><div class=\"line\">            divideByCamelHumps: Boolean = <span class=\"keyword\">false</span>,</div><div class=\"line\">            wordSeparator: Char = <span class=\"string\">' '</span>)</div></pre></td></tr></table></figure>\n<p>可以这样调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str)</div></pre></td></tr></table></figure>\n<p>不使用默认参数则需要这样调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str , <span class=\"keyword\">true</span> , <span class=\"keyword\">true</span> , <span class=\"keyword\">false</span> , <span class=\"string\">'_'</span>)</div></pre></td></tr></table></figure>\n<p>使用具名参数可以让代码可读性更好</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str,</div><div class=\"line\">    normalizeCase = <span class=\"keyword\">true</span>,</div><div class=\"line\">    upperCaseFirstLetter = <span class=\"keyword\">true</span>,</div><div class=\"line\">    divideByCamelHumps = <span class=\"keyword\">false</span>,</div><div class=\"line\">    wordSeparator = <span class=\"string\">'_'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>如果不需要所有参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reformat(str, wordSeparator = <span class=\"string\">'_'</span>)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>具名参数语法不适应于Java函数。因为Java字节码并不一直保存参数名称。</p>\n</blockquote>\n<h2 id=\"Unit-returning函数\"><a href=\"#Unit-returning函数\" class=\"headerlink\" title=\"Unit-returning函数\"></a>Unit-returning函数</h2><p>如果函数不返回值，则函数返回类型为<code>Unit</code>。<code>Unit</code>是唯一值为<code>Unit</code>的类型。Unit返回值不需要显式返回。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span>: Unit </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>)</div><div class=\"line\">        println(<span class=\"string\">\"Hello $&#123;name&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        println(<span class=\"string\">\"Hi there!\"</span>)</div><div class=\"line\">    <span class=\"comment\">// `return Unit` 或 `return` 可选</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Unit</code>返回类型声明为可选项目。上面代码等同于<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"单表达式函数\"><a href=\"#单表达式函数\" class=\"headerlink\" title=\"单表达式函数\"></a>单表达式函数</h2><p>当函数返回单个表达式，可省略花括号，可在<code>=</code>之后指定对应代码。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span>: Int </span>= x * <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>可省略返回值类型，由编译器推测。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">double</span><span class=\"params\">(x: Int)</span> </span>= x * <span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<h2 id=\"显式返回类型\"><a href=\"#显式返回类型\" class=\"headerlink\" title=\"显式返回类型\"></a>显式返回类型</h2><p>非Unit返回值且有代码块的函数必须显式指明返回值类型。<code>Kotlin</code>不会推断有代码块的函数的返回值类型，因为这些函数可能有复杂的控制流程， 返回类型对于编译器或阅读代码的开发者不是那么显而易见。</p>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>函数参数（一般最后一个）可以使用<code>vararg</code>修饰符设置为可变参数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun &lt;T&gt; asList(vararg ts: T): List&lt;T&gt; &#123;</div><div class=\"line\">    val result = ArrayList&lt;T&gt;()</div><div class=\"line\">    <span class=\"keyword\">for</span> (t in ts) <span class=\"comment\">// ts is an Array</span></div><div class=\"line\">        result.add(t)</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>允许函数使用可变数量的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">val list = asList(<span class=\"number\">1</span> , <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<p>在函数中T类型的可变参数被视为T的一个数组。例如上面例子中的<code>ts</code>变量就是<code>Array&lt;out T&gt;</code></p>\n<p>函数中只能设置一个标记为<code>vararg</code>可变参数. 如果可变参数不是最后一个参数，则之后的参数可以使用具名参数语法传值；<br>可以通过在括号外以lambda方式传入函数类型的参数。<br>调用可变参数函数时，可以用一个一个方式传参（如：asList(1, 2, 3)）；或使用扩展操作符（前缀<code>*</code>）传入数组参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">val a = arrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">val list = asList(-<span class=\"number\">1</span>, <span class=\"number\">0</span>, *a, <span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><p>在Kotlin中可以在文件顶部声明函数，意味着不必创建Class来持有函数。除此Kotlin函数还可以像成员函数和扩展函数一样在局部声明。</p>\n<h2 id=\"局部函数\"><a href=\"#局部函数\" class=\"headerlink\" title=\"局部函数\"></a>局部函数</h2><p>Kotlin支持局部函数，如在函数内部定义函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(graph: Graph)</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(current: Vertex, visited: Set&lt;Vertex&gt;)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!visited.add(current)) <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (v in current.neighbors)</div><div class=\"line\">            dfs(v, visited)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dfs(graph.vertices[<span class=\"number\">0</span>], HashSet())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>局部函数可以访问外部函数的局部变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(graph: Graph)</span> </span>&#123;</div><div class=\"line\">    val visited = HashSet&lt;Vertex&gt;()</div><div class=\"line\">    <span class=\"function\">fun <span class=\"title\">dfs</span><span class=\"params\">(current: Vertex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!visited.add(current)) <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (v in current.neighbors)</div><div class=\"line\">            dfs(v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dfs(graph.vertices[<span class=\"number\">0</span>])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><p>成员函数：定义在Class或对象内部的函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span>() </span>&#123;</div><div class=\"line\">    <span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">\"Foo\"</span>) &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>成员函数可以使用<code>.</code>操作符调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample().foo()</div></pre></td></tr></table></figure></p>\n<p>更多关于Class和复写成员函数查看<a href=\"https://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"external\"><code>Classes</code></a>和<a href=\"https://kotlinlang.org/docs/reference/classes.html#inheritance\" target=\"_blank\" rel=\"external\"><code>Inheritance</code></a></p>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><p>函数在函数名前以<code>&lt;T&gt;</code>形式使用泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>跟多关于泛型信息查看<a href=\"https://kotlinlang.org/docs/reference/generics.html\" target=\"_blank\" rel=\"external\"><code>Generics</code></a></p>\n<h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2><p>内联函数查看<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html\" target=\"_blank\" rel=\"external\"><code>Inline Functions</code></a></p>\n<h2 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h2><p>扩展函数查看<a href=\"https://kotlinlang.org/docs/reference/extensions.html\" target=\"_blank\" rel=\"external\"><code>Extension Functions</code></a></p>\n<h2 id=\"高阶函数和Lambdas\"><a href=\"#高阶函数和Lambdas\" class=\"headerlink\" title=\"高阶函数和Lambdas\"></a>高阶函数和Lambdas</h2><p>高阶函数和Lambdas查看<a href=\"https://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"external\"><code>高阶函数和Lambdas</code></a></p>\n<h2 id=\"尾递归函数\"><a href=\"#尾递归函数\" class=\"headerlink\" title=\"尾递归函数\"></a>尾递归函数</h2><p><code>尾调用</code>是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。</p>\n<p>Kotlin支持尾递归形式的函数编程。目前尾递归只支持JVM后端。定义合格的尾递归，函数必须要在最后一步执行自身调用。当在递归操作后仍有要执行的代码时，或者在try/catch/finally块中都不适合使用尾递归函数。<br>当函数使用<code>tailrec</code>修饰符，满足必要形式，编译器会优化递归，保留快速、高效的迭代基准版本。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">tailrec fun <span class=\"title\">findFixPoint</span><span class=\"params\">(x: Double = <span class=\"number\">1.0</span>)</span>: Double</span></div><div class=\"line\">        = <span class=\"keyword\">if</span> (x == Math.cos(x)) <span class=\"function\">x <span class=\"keyword\">else</span> <span class=\"title\">findFixPoint</span><span class=\"params\">(Math.cos(x)</span>)</span></div></pre></td></tr></table></figure></p>\n<p>上面函数用于计算余弦的不动点（f(x) = x）。代码与下面相同<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">findFixPoint</span><span class=\"params\">()</span>: Double </span>&#123;</div><div class=\"line\">    var x = <span class=\"number\">1.0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        val y = Math.cos(x)</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> y</div><div class=\"line\">        x = y</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Kotlin基础之内联函数","date":"2017-06-21T07:53:18.000Z","thumbnailImage":"https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg","_content":"## 内联函数\n\n使用[`高阶函数`](https://kotlinlang.org/docs/reference/lambdas.html)会给运行时带来一些坏处：每个函数都是一个对象，捕获闭包（如：访问函数体内的变量），内存分配（函数对象或Class），虚拟调用引入的运行过载。\n使用内联Lambda表达式在多数情况下可以消除这种过载。比如下面的函数就是这种情况下的很好的例子，`lock()`函数可以很容易地在调用点进行内联扩展。\n```kotlin\nlock(l){ foo() }\n```\n编译能够产生下面的代码，而不是创建一个函数对象参数，生成调用。\n```kotlin\nl.lock()\ntry {\n    foo()\n}\nfinally {\n    l.unlock()\n}\n```\n也是我们一开始想要的。\n为了让编译器能够这样执行，需要用`inline`修饰符来标记`lock`函数\n```kotlin\ninline fun lock<T>(lock: Lock , body: () -> T): T{\n  ...\n}\n```\n`inline`修饰符既影响函数对象本身，也影响传入的Lambda参数：两者都会被内联到调用点。\n\n编译预处理器对内联函数进行扩展，省去了参数压栈、生成汇编语言的CALL调用、返回参数、执行return等过程，从而提高了运行速度。\n使用内联函数的优点，在函数被内联后编译器就可以通过上下文相关的优化技术对结果代码执行更深入的优化。\n内联不是万能药，它以代码膨胀为代价，仅仅省去了函数调用的开销，从而提高程序的执行效率。\n> 函数调用开销并不包括执行函数体所需要的开销，而是仅指参数压栈、跳转、退栈和返回等操作。如果执行函数体内代码的时间比函数调用的开销大得多，那么内联函数的效率收益会笑很多。另一方面每一处内联函数的调用都要拷贝代码，将使程序的总代码增大、消耗更多的内存空间。\n\n## noinline\n如果只需要在内联函数中内联部分Lambda表达式，可以使用`noinline`来标记不需要内联的参数。\n\n```kotlin\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {\n  // ...\n}\n```\n内联Lambda只能在内联函数中调用或作为内联参数，但`noinline`的Lambda可随意使用。\n> 没有内联函数参数和[`reified type parameters`](https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters)的内联函数，编译器会发出警告，因为内联这样的函数不见得有好处。\n\n## 非局部返回\n在Kotlin中可以使用正常、无条件的`return`退出有名和匿名函数，也意味需要使用一个标签来退出Lambda，在Lambda中禁止使用赤裸`return`语句，因为Lambda不能够使闭合函数返回。\n```kotlin\nfun foo(){\n    ordinaryFunction{\n        \n        return // ERROR: can not make `foo` return here\n    }\n}\n```\n如果Lambda传入内联函数，则返回也是被内联，所以允许\n```kotlin\nfun foo(){\n    inlineFunction {\n        return // OK: the lambda is inlined\n    }\n}\n```\n这样的return（位于在Lambda中，但能够退出闭合函数）被称为非局部返回。Kotlin使用这种构造在有循环条件的闭合内联函数中\n```kotlin\nfun hasZeros(ints: List<Int>): Boolean{\n    ints.forEach{\n        if(it == 0) return true // returns from hasZeros\n    }\n    \n    return false\n}\n```\n> 一些内联函数可能不是从函数体中直接调用传入的Lambda参数，而是从其他的执行上下文，如本地对象或嵌套函数。在这些情况下，non-local 控制流则不允许出现在Lambda中。使用`crossinline`修饰符来标记。\n\n```kotlin\ninline fun f(crossinline body: () -> Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n```\n> 尚未在内联Lambda中支持break 和 continue 操作，Kotlin计划支持\n\n## 具体化类型参数\n有时需要访问传入函数中参数的类型\n\n```kotlin\nfun <T> TreeNode.findParentOfType(clazz: Class<T>): T? {\n    var p = parent\n    while (p != null && !clazz.isInstance(p)) {\n        p = p.parent\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return p as T?\n}\n```\n在上述代码中，沿着树结构，使用反射来检查节点是否有指定类型。可以执行，但是调用点，并不优美\n```kotlin\ntreeNode.findParentOfType(MyTreeNode::class.java)\n```\n实际上想要只是简单给函数传入一个类型，如：\n```kotlin\ntreeNode.findParentOfType<MyTreeNode>()\n```\n内联函数支持具体化参数类型，因此可以这样写：\n```kotlin\ninline fun <reified T> TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null && p !is T) {\n        p = p.parent\n    }\n    return p as T?\n}\n```\n使用`reified`修饰符限制参数类型，可以在内联函数中访问，就像是普通的Class。因为函数是内联的，不在需要反射，像`!is`和`as`的普通操作符执行。也可以像上述说的那样调用`myTree.findParentOfType<MyTreeNodeType>()`\n\n尽管反射在很多情况不需要，仍需要使用它来具体话参数类型。\n```kotlin\ninline fun <reified T> membersOf() = T::class.members\n\nfun main(s: Array<String>) {\n    println(membersOf<StringBuilder>().joinToString(\"\\n\"))\n}\n```\n普通函数（未标记为内联）不可以有`reified`参数。不具有运行时表示的类型，不能用作具体化参数。\n更多底层信息，参阅[`spec document`](https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md)\n\n## 内联属性\n`inline`修饰符可以用在没有`Backing Filed`属性的访问函数。可以注解单独属性的访问函数。\n```kotlin \nval foo: Foo\n    inline get() = Foo()\n\nvar bar: Bar\n    get() = ...\n    inline set(v) { ... }\n```\n甚至可以注解整个属性，让属性访问函数都变为内联函数\n```kotlin\ninline var bar: Bar\n    get() = ...\n    set(v) { ... }\n```\n在调用时，内联访问函数与常规内联函数一样调用。","source":"_posts/Kotlin基础之内联函数.md","raw":"---\ntitle: Kotlin基础之内联函数\ndate: 2017-06-21 15:53:18\nthumbnailImage: https://pic1.zhimg.com/v2-30253c279faba2e77120862dd54d49d4_r.jpg\ntags: kotlin\n---\n## 内联函数\n\n使用[`高阶函数`](https://kotlinlang.org/docs/reference/lambdas.html)会给运行时带来一些坏处：每个函数都是一个对象，捕获闭包（如：访问函数体内的变量），内存分配（函数对象或Class），虚拟调用引入的运行过载。\n使用内联Lambda表达式在多数情况下可以消除这种过载。比如下面的函数就是这种情况下的很好的例子，`lock()`函数可以很容易地在调用点进行内联扩展。\n```kotlin\nlock(l){ foo() }\n```\n编译能够产生下面的代码，而不是创建一个函数对象参数，生成调用。\n```kotlin\nl.lock()\ntry {\n    foo()\n}\nfinally {\n    l.unlock()\n}\n```\n也是我们一开始想要的。\n为了让编译器能够这样执行，需要用`inline`修饰符来标记`lock`函数\n```kotlin\ninline fun lock<T>(lock: Lock , body: () -> T): T{\n  ...\n}\n```\n`inline`修饰符既影响函数对象本身，也影响传入的Lambda参数：两者都会被内联到调用点。\n\n编译预处理器对内联函数进行扩展，省去了参数压栈、生成汇编语言的CALL调用、返回参数、执行return等过程，从而提高了运行速度。\n使用内联函数的优点，在函数被内联后编译器就可以通过上下文相关的优化技术对结果代码执行更深入的优化。\n内联不是万能药，它以代码膨胀为代价，仅仅省去了函数调用的开销，从而提高程序的执行效率。\n> 函数调用开销并不包括执行函数体所需要的开销，而是仅指参数压栈、跳转、退栈和返回等操作。如果执行函数体内代码的时间比函数调用的开销大得多，那么内联函数的效率收益会笑很多。另一方面每一处内联函数的调用都要拷贝代码，将使程序的总代码增大、消耗更多的内存空间。\n\n## noinline\n如果只需要在内联函数中内联部分Lambda表达式，可以使用`noinline`来标记不需要内联的参数。\n\n```kotlin\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {\n  // ...\n}\n```\n内联Lambda只能在内联函数中调用或作为内联参数，但`noinline`的Lambda可随意使用。\n> 没有内联函数参数和[`reified type parameters`](https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters)的内联函数，编译器会发出警告，因为内联这样的函数不见得有好处。\n\n## 非局部返回\n在Kotlin中可以使用正常、无条件的`return`退出有名和匿名函数，也意味需要使用一个标签来退出Lambda，在Lambda中禁止使用赤裸`return`语句，因为Lambda不能够使闭合函数返回。\n```kotlin\nfun foo(){\n    ordinaryFunction{\n        \n        return // ERROR: can not make `foo` return here\n    }\n}\n```\n如果Lambda传入内联函数，则返回也是被内联，所以允许\n```kotlin\nfun foo(){\n    inlineFunction {\n        return // OK: the lambda is inlined\n    }\n}\n```\n这样的return（位于在Lambda中，但能够退出闭合函数）被称为非局部返回。Kotlin使用这种构造在有循环条件的闭合内联函数中\n```kotlin\nfun hasZeros(ints: List<Int>): Boolean{\n    ints.forEach{\n        if(it == 0) return true // returns from hasZeros\n    }\n    \n    return false\n}\n```\n> 一些内联函数可能不是从函数体中直接调用传入的Lambda参数，而是从其他的执行上下文，如本地对象或嵌套函数。在这些情况下，non-local 控制流则不允许出现在Lambda中。使用`crossinline`修饰符来标记。\n\n```kotlin\ninline fun f(crossinline body: () -> Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n```\n> 尚未在内联Lambda中支持break 和 continue 操作，Kotlin计划支持\n\n## 具体化类型参数\n有时需要访问传入函数中参数的类型\n\n```kotlin\nfun <T> TreeNode.findParentOfType(clazz: Class<T>): T? {\n    var p = parent\n    while (p != null && !clazz.isInstance(p)) {\n        p = p.parent\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return p as T?\n}\n```\n在上述代码中，沿着树结构，使用反射来检查节点是否有指定类型。可以执行，但是调用点，并不优美\n```kotlin\ntreeNode.findParentOfType(MyTreeNode::class.java)\n```\n实际上想要只是简单给函数传入一个类型，如：\n```kotlin\ntreeNode.findParentOfType<MyTreeNode>()\n```\n内联函数支持具体化参数类型，因此可以这样写：\n```kotlin\ninline fun <reified T> TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null && p !is T) {\n        p = p.parent\n    }\n    return p as T?\n}\n```\n使用`reified`修饰符限制参数类型，可以在内联函数中访问，就像是普通的Class。因为函数是内联的，不在需要反射，像`!is`和`as`的普通操作符执行。也可以像上述说的那样调用`myTree.findParentOfType<MyTreeNodeType>()`\n\n尽管反射在很多情况不需要，仍需要使用它来具体话参数类型。\n```kotlin\ninline fun <reified T> membersOf() = T::class.members\n\nfun main(s: Array<String>) {\n    println(membersOf<StringBuilder>().joinToString(\"\\n\"))\n}\n```\n普通函数（未标记为内联）不可以有`reified`参数。不具有运行时表示的类型，不能用作具体化参数。\n更多底层信息，参阅[`spec document`](https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md)\n\n## 内联属性\n`inline`修饰符可以用在没有`Backing Filed`属性的访问函数。可以注解单独属性的访问函数。\n```kotlin \nval foo: Foo\n    inline get() = Foo()\n\nvar bar: Bar\n    get() = ...\n    inline set(v) { ... }\n```\n甚至可以注解整个属性，让属性访问函数都变为内联函数\n```kotlin\ninline var bar: Bar\n    get() = ...\n    set(v) { ... }\n```\n在调用时，内联访问函数与常规内联函数一样调用。","slug":"Kotlin基础之内联函数","published":1,"updated":"2017-07-03T07:45:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dxz0011c0m324uia8dq","content":"<h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2><p>使用<a href=\"https://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"external\"><code>高阶函数</code></a>会给运行时带来一些坏处：每个函数都是一个对象，捕获闭包（如：访问函数体内的变量），内存分配（函数对象或Class），虚拟调用引入的运行过载。<br>使用内联Lambda表达式在多数情况下可以消除这种过载。比如下面的函数就是这种情况下的很好的例子，<code>lock()</code>函数可以很容易地在调用点进行内联扩展。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lock(l)&#123; foo() &#125;</div></pre></td></tr></table></figure></p>\n<p>编译能够产生下面的代码，而不是创建一个函数对象参数，生成调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">l.lock()</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    foo()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    l.unlock()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也是我们一开始想要的。<br>为了让编译器能够这样执行，需要用<code>inline</code>修饰符来标记<code>lock</code>函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> lock<span class=\"type\">&lt;T&gt;</span><span class=\"params\">(lock: <span class=\"type\">Lock</span> , body: ()</span></span> -&gt; T): T&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>inline</code>修饰符既影响函数对象本身，也影响传入的Lambda参数：两者都会被内联到调用点。</p>\n<p>编译预处理器对内联函数进行扩展，省去了参数压栈、生成汇编语言的CALL调用、返回参数、执行return等过程，从而提高了运行速度。<br>使用内联函数的优点，在函数被内联后编译器就可以通过上下文相关的优化技术对结果代码执行更深入的优化。<br>内联不是万能药，它以代码膨胀为代价，仅仅省去了函数调用的开销，从而提高程序的执行效率。</p>\n<blockquote>\n<p>函数调用开销并不包括执行函数体所需要的开销，而是仅指参数压栈、跳转、退栈和返回等操作。如果执行函数体内代码的时间比函数调用的开销大得多，那么内联函数的效率收益会笑很多。另一方面每一处内联函数的调用都要拷贝代码，将使程序的总代码增大、消耗更多的内存空间。</p>\n</blockquote>\n<h2 id=\"noinline\"><a href=\"#noinline\" class=\"headerlink\" title=\"noinline\"></a>noinline</h2><p>如果只需要在内联函数中内联部分Lambda表达式，可以使用<code>noinline</code>来标记不需要内联的参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(inlined: ()</span></span> -&gt; <span class=\"built_in\">Unit</span>, <span class=\"keyword\">noinline</span> notInlined: () -&gt; <span class=\"built_in\">Unit</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>内联Lambda只能在内联函数中调用或作为内联参数，但<code>noinline</code>的Lambda可随意使用。</p>\n<blockquote>\n<p>没有内联函数参数和<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters\" target=\"_blank\" rel=\"external\"><code>reified type parameters</code></a>的内联函数，编译器会发出警告，因为内联这样的函数不见得有好处。</p>\n</blockquote>\n<h2 id=\"非局部返回\"><a href=\"#非局部返回\" class=\"headerlink\" title=\"非局部返回\"></a>非局部返回</h2><p>在Kotlin中可以使用正常、无条件的<code>return</code>退出有名和匿名函数，也意味需要使用一个标签来退出Lambda，在Lambda中禁止使用赤裸<code>return</code>语句，因为Lambda不能够使闭合函数返回。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ordinaryFunction&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// ERROR: can not make `foo` return here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果Lambda传入内联函数，则返回也是被内联，所以允许<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    inlineFunction &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// OK: the lambda is inlined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样的return（位于在Lambda中，但能够退出闭合函数）被称为非局部返回。Kotlin使用这种构造在有循环条件的闭合内联函数中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hasZeros</span><span class=\"params\">(ints: <span class=\"type\">List</span>&lt;<span class=\"type\">Int</span>&gt;)</span></span>: <span class=\"built_in\">Boolean</span>&#123;</div><div class=\"line\">    ints.forEach&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(it == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"comment\">// returns from hasZeros</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>一些内联函数可能不是从函数体中直接调用传入的Lambda参数，而是从其他的执行上下文，如本地对象或嵌套函数。在这些情况下，non-local 控制流则不允许出现在Lambda中。使用<code>crossinline</code>修饰符来标记。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">crossinline</span> body: ()</span></span> -&gt; <span class=\"built_in\">Unit</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> f = <span class=\"keyword\">object</span>: Runnable &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> = body()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>尚未在内联Lambda中支持break 和 continue 操作，Kotlin计划支持</p>\n</blockquote>\n<h2 id=\"具体化类型参数\"><a href=\"#具体化类型参数\" class=\"headerlink\" title=\"具体化类型参数\"></a>具体化类型参数</h2><p>有时需要访问传入函数中参数的类型</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> TreeNode.<span class=\"title\">findParentOfType</span><span class=\"params\">(clazz: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T? &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = parent</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">null</span> &amp;&amp; !clazz.isInstance(p)) &#123;</div><div class=\"line\">        p = p.parent</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Suppress(<span class=\"meta-string\">\"UNCHECKED_CAST\"</span>)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> p <span class=\"keyword\">as</span> T?</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上述代码中，沿着树结构，使用反射来检查节点是否有指定类型。可以执行，但是调用点，并不优美<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">treeNode.findParentOfType(MyTreeNode::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></div></pre></td></tr></table></figure></p>\n<p>实际上想要只是简单给函数传入一个类型，如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">treeNode.findParentOfType&lt;MyTreeNode&gt;()</div></pre></td></tr></table></figure></p>\n<p>内联函数支持具体化参数类型，因此可以这样写：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> TreeNode.<span class=\"title\">findParentOfType</span><span class=\"params\">()</span></span>: T? &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = parent</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">null</span> &amp;&amp; p !<span class=\"keyword\">is</span> T) &#123;</div><div class=\"line\">        p = p.parent</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> p <span class=\"keyword\">as</span> T?</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用<code>reified</code>修饰符限制参数类型，可以在内联函数中访问，就像是普通的Class。因为函数是内联的，不在需要反射，像<code>!is</code>和<code>as</code>的普通操作符执行。也可以像上述说的那样调用<code>myTree.findParentOfType&lt;MyTreeNodeType&gt;()</code></p>\n<p>尽管反射在很多情况不需要，仍需要使用它来具体话参数类型。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">membersOf</span><span class=\"params\">()</span></span> = T::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">members</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(s: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    println(membersOf&lt;StringBuilder&gt;().joinToString(<span class=\"string\">\"\\n\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>普通函数（未标记为内联）不可以有<code>reified</code>参数。不具有运行时表示的类型，不能用作具体化参数。<br>更多底层信息，参阅<a href=\"https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md\" target=\"_blank\" rel=\"external\"><code>spec document</code></a></p>\n<h2 id=\"内联属性\"><a href=\"#内联属性\" class=\"headerlink\" title=\"内联属性\"></a>内联属性</h2><p><code>inline</code>修饰符可以用在没有<code>Backing Filed</code>属性的访问函数。可以注解单独属性的访问函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> foo: Foo</div><div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">get</span>() = Foo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar: Bar</div><div class=\"line\">    <span class=\"keyword\">get</span>() = ...</div><div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">set</span>(v) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>甚至可以注解整个属性，让属性访问函数都变为内联函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">var</span> bar: Bar</div><div class=\"line\">    <span class=\"keyword\">get</span>() = ...</div><div class=\"line\">    <span class=\"keyword\">set</span>(v) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>在调用时，内联访问函数与常规内联函数一样调用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2><p>使用<a href=\"https://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"external\"><code>高阶函数</code></a>会给运行时带来一些坏处：每个函数都是一个对象，捕获闭包（如：访问函数体内的变量），内存分配（函数对象或Class），虚拟调用引入的运行过载。<br>使用内联Lambda表达式在多数情况下可以消除这种过载。比如下面的函数就是这种情况下的很好的例子，<code>lock()</code>函数可以很容易地在调用点进行内联扩展。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lock(l)&#123; foo() &#125;</div></pre></td></tr></table></figure></p>\n<p>编译能够产生下面的代码，而不是创建一个函数对象参数，生成调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">l.lock()</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    foo()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    l.unlock()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也是我们一开始想要的。<br>为了让编译器能够这样执行，需要用<code>inline</code>修饰符来标记<code>lock</code>函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> lock<span class=\"type\">&lt;T&gt;</span><span class=\"params\">(lock: <span class=\"type\">Lock</span> , body: ()</span></span> -&gt; T): T&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>inline</code>修饰符既影响函数对象本身，也影响传入的Lambda参数：两者都会被内联到调用点。</p>\n<p>编译预处理器对内联函数进行扩展，省去了参数压栈、生成汇编语言的CALL调用、返回参数、执行return等过程，从而提高了运行速度。<br>使用内联函数的优点，在函数被内联后编译器就可以通过上下文相关的优化技术对结果代码执行更深入的优化。<br>内联不是万能药，它以代码膨胀为代价，仅仅省去了函数调用的开销，从而提高程序的执行效率。</p>\n<blockquote>\n<p>函数调用开销并不包括执行函数体所需要的开销，而是仅指参数压栈、跳转、退栈和返回等操作。如果执行函数体内代码的时间比函数调用的开销大得多，那么内联函数的效率收益会笑很多。另一方面每一处内联函数的调用都要拷贝代码，将使程序的总代码增大、消耗更多的内存空间。</p>\n</blockquote>\n<h2 id=\"noinline\"><a href=\"#noinline\" class=\"headerlink\" title=\"noinline\"></a>noinline</h2><p>如果只需要在内联函数中内联部分Lambda表达式，可以使用<code>noinline</code>来标记不需要内联的参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(inlined: ()</span></span> -&gt; <span class=\"built_in\">Unit</span>, <span class=\"keyword\">noinline</span> notInlined: () -&gt; <span class=\"built_in\">Unit</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>内联Lambda只能在内联函数中调用或作为内联参数，但<code>noinline</code>的Lambda可随意使用。</p>\n<blockquote>\n<p>没有内联函数参数和<a href=\"https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters\" target=\"_blank\" rel=\"external\"><code>reified type parameters</code></a>的内联函数，编译器会发出警告，因为内联这样的函数不见得有好处。</p>\n</blockquote>\n<h2 id=\"非局部返回\"><a href=\"#非局部返回\" class=\"headerlink\" title=\"非局部返回\"></a>非局部返回</h2><p>在Kotlin中可以使用正常、无条件的<code>return</code>退出有名和匿名函数，也意味需要使用一个标签来退出Lambda，在Lambda中禁止使用赤裸<code>return</code>语句，因为Lambda不能够使闭合函数返回。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ordinaryFunction&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// ERROR: can not make `foo` return here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果Lambda传入内联函数，则返回也是被内联，所以允许<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    inlineFunction &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// OK: the lambda is inlined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样的return（位于在Lambda中，但能够退出闭合函数）被称为非局部返回。Kotlin使用这种构造在有循环条件的闭合内联函数中<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hasZeros</span><span class=\"params\">(ints: <span class=\"type\">List</span>&lt;<span class=\"type\">Int</span>&gt;)</span></span>: <span class=\"built_in\">Boolean</span>&#123;</div><div class=\"line\">    ints.forEach&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(it == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"comment\">// returns from hasZeros</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>一些内联函数可能不是从函数体中直接调用传入的Lambda参数，而是从其他的执行上下文，如本地对象或嵌套函数。在这些情况下，non-local 控制流则不允许出现在Lambda中。使用<code>crossinline</code>修饰符来标记。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">crossinline</span> body: ()</span></span> -&gt; <span class=\"built_in\">Unit</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> f = <span class=\"keyword\">object</span>: Runnable &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> = body()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>尚未在内联Lambda中支持break 和 continue 操作，Kotlin计划支持</p>\n</blockquote>\n<h2 id=\"具体化类型参数\"><a href=\"#具体化类型参数\" class=\"headerlink\" title=\"具体化类型参数\"></a>具体化类型参数</h2><p>有时需要访问传入函数中参数的类型</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> TreeNode.<span class=\"title\">findParentOfType</span><span class=\"params\">(clazz: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T? &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = parent</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">null</span> &amp;&amp; !clazz.isInstance(p)) &#123;</div><div class=\"line\">        p = p.parent</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Suppress(<span class=\"meta-string\">\"UNCHECKED_CAST\"</span>)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> p <span class=\"keyword\">as</span> T?</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上述代码中，沿着树结构，使用反射来检查节点是否有指定类型。可以执行，但是调用点，并不优美<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">treeNode.findParentOfType(MyTreeNode::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></div></pre></td></tr></table></figure></p>\n<p>实际上想要只是简单给函数传入一个类型，如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">treeNode.findParentOfType&lt;MyTreeNode&gt;()</div></pre></td></tr></table></figure></p>\n<p>内联函数支持具体化参数类型，因此可以这样写：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> TreeNode.<span class=\"title\">findParentOfType</span><span class=\"params\">()</span></span>: T? &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = parent</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">null</span> &amp;&amp; p !<span class=\"keyword\">is</span> T) &#123;</div><div class=\"line\">        p = p.parent</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> p <span class=\"keyword\">as</span> T?</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用<code>reified</code>修饰符限制参数类型，可以在内联函数中访问，就像是普通的Class。因为函数是内联的，不在需要反射，像<code>!is</code>和<code>as</code>的普通操作符执行。也可以像上述说的那样调用<code>myTree.findParentOfType&lt;MyTreeNodeType&gt;()</code></p>\n<p>尽管反射在很多情况不需要，仍需要使用它来具体话参数类型。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">membersOf</span><span class=\"params\">()</span></span> = T::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">members</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(s: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    println(membersOf&lt;StringBuilder&gt;().joinToString(<span class=\"string\">\"\\n\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>普通函数（未标记为内联）不可以有<code>reified</code>参数。不具有运行时表示的类型，不能用作具体化参数。<br>更多底层信息，参阅<a href=\"https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md\" target=\"_blank\" rel=\"external\"><code>spec document</code></a></p>\n<h2 id=\"内联属性\"><a href=\"#内联属性\" class=\"headerlink\" title=\"内联属性\"></a>内联属性</h2><p><code>inline</code>修饰符可以用在没有<code>Backing Filed</code>属性的访问函数。可以注解单独属性的访问函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> foo: Foo</div><div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">get</span>() = Foo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar: Bar</div><div class=\"line\">    <span class=\"keyword\">get</span>() = ...</div><div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">set</span>(v) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>甚至可以注解整个属性，让属性访问函数都变为内联函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">var</span> bar: Bar</div><div class=\"line\">    <span class=\"keyword\">get</span>() = ...</div><div class=\"line\">    <span class=\"keyword\">set</span>(v) &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>在调用时，内联访问函数与常规内联函数一样调用。</p>\n"},{"title":"Java设计模式（一）：观察者模式","date":"2016-01-09T16:04:20.000Z","_content":"### 观察者模式\n###","source":"_posts/Java设计模式（一）：观察者模式.md","raw":"---\ntitle: Java设计模式（一）：观察者模式\ndate: 2016-01-10 00:04:20\ncategories: Java设计模式\ntags: Java设计模式\n---\n### 观察者模式\n###","slug":"Java设计模式（一）：观察者模式","published":1,"updated":"2016-01-27T06:25:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dy50019c0m3zblgc12z","content":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>###</p>\n"},{"title":"Android网络Client：Retrofit(一)","date":"2016-01-11T15:44:20.000Z","_content":"[Retrofit - A type-safe HTTP client for Android and Java](http://square.github.io/retrofit/)\n\n[Retrofit分析-漂亮的解耦套路](http://www.jianshu.com/p/45cb536be2f4?utm_campaign=maleskine&utm_content=note&utm_medium=reader_share&utm_source=weixin&from=singlemessage&isappinstalled=0)\n### Retrofit\n[A type-safe HTTP client for Android and Java](http://square.github.io/retrofit/)\n### 一、介绍\n1.接口定义来定义HTTP API\n\n\tpublic interface GitHubService{\n\t\t@GET(\"users/{user}/repos\")\n\t\tCall<List<Repo>> listRepos(@Path(\"user\") String user);\n\t}\n\n2.Retrofit对象生成GitHubService的实现\n\n\tRetrofit retorfit = new Retrofit.Builder()\n\t\t\t.baseUrl(\"https://api.github.com\")\n\t\t\t.build();\n\n\tGitHubService service = retrofit.create(GitHubService.class);\n\n3.创建GitHubService的实现后，发起同步或异步的网络请求，并返回Call对象\n\n\tCall<List<Repo>> repos = service.listRepos(\"octocat\");\n\n注解描述HTTP请求\n\t\n\t1.支持URL参数和查询参数动态可配\n\t2.支持对象转换成请求体（eg. JSON 、Protocol buffers）\n\t3.支持多种请求体和文件上传\n\n### 二、API 声明\nAnnotations on the interface methods and its parameters indicate how a request will be handled.\n以注解形式定义接口方法和对应的请求参数\n\n1.请求方法\n\n每个方法必须有一个对应的HTTP请求注解，提供请求的方法和对应的URL参数。五类注解：`GET`、`POST`、`PUT`、 `DELETE` 和`HEAD`。对应的资源URL请求地址在注解上指定。\n\t\n\t@GET(\"users/list\")\n\n你也可以在URL中指定查询参数\n\n\t@GET(\"users/list?sort=desc\")\n\n2.URL 处理\n\nURL可以使用替换块动态改变方法的请求参数。替换参数为使用`{}`引用起来的字符串，并且要使用`@Path`注解的方式，用同样的字符串表示参数。\n\n\t@GET(\"group/{id}/users\")\n\tCall<List<User>> groupList(@Path(\"id\") int groupId);\n\n也可以添加查询参数\n\t\n\t@GET(\"group/{id}/users\")\n\tCall<List<User>> groupList(@Path(\"id\") int groupId , @Query(\"sort\") String sort);\n复杂查询，参数可以为`Map`类型\n\n\t@GET(\"group/{id}/users\")\n\tCall<List<User>> groupList(@Path(\"id\") int groupId , @QueryMap Map<String , String> options);\n\n3.请求体\n\n`@Body`注解用来指定对象作为HTTP请求体\n\n\t@POST(\"users/new\")\n\tCall<User> createUser(@Body User user);\n\n使用`Retrofit`对象实例指定转换器来转换对象。\n如果没有添加转换器，只能使用`RequestBody`\n\n4.Form Encode编码数据And Multipart数据的请求\nmultipart/form-data : POST数据提交的方式，数据以multipart/form-data来编码。\nMethod 也可以发送form-encoded and multipart编码格式的数据\n`@FormUrlEncoded`注解表示发送的数据格式为Form-encoded 格式。每个用注解`@Filed`表示的键值对包含指定键的名称和提供值的对象\n\t\n\t@FormUrlEncoded\n\t@POST(\"user/edit\")\n\tCall<uSER> updateUser(@Filed(\"first_name\") String first , @Field(\"last_name\") String last);\n\n`@Multipart`注解用来表示Method 为 Multipart请求。Parts使用`@Part`注解来表示。\n\n\t@Multipart\n\t@PUT(\"user/photo\")\n\tCall<User> updateUser(@Part(\"photo\") RequestBody photo , @Part(\"description\") RequestBody description);\n\nMultipart的Parts对象使用`Retrofit`的转换器或实现`RequestBody `来完成序列化\n\n5.HEADER 请求操作\n\n`@Headers`注解为方法指定静态headers\n\t\n\t@Headers(\"Cache-Control:max-age = 640000\")\n\t@GET(\"widget/list\")\n\tCall<List<Widget>> widgetList();\n\n\t@Headers({\n\t\t\t\"Accept: application/vnd.github.v3.full+json\" ,\n\t\t\t\"User-Agent: Retrofit-Sample-App\"\n\t})\n\t@GET(\"users/{username}\")\n\tCall<User> getUser(@Path(\"username\") String username);\n\n  **注意：** Heads不必在每个方法上单独声明，可以在方法中引用相同名称的头部\n\n`@Header`注解可以动态指定Header。与普通请求注解相同需要指定Header的参数，如果参数为null，则Header被忽略掉。另外，值和结果使用的时候会调用`toString`方法\n\n\t@GET(\"user\")\n\tCall<User> getUser(@Header(\"Authorization\") String authorization);\n\n[OkHttp interceptor](https://github.com/square/okhttp/wiki/Interceptors)可以为需要添加Header的请求指定头部\n\n6.同步和异步请求\n\n`Call`可以执行同步或异步请求。每个实例只能使用一次，`clone()`方法可以创建一个新的`Call`。\n\n**注意：** 在Android中，回调会在主线程中执行，在JVM中，回调会在调用Http Request请求的线程中执行。\n\n### 三、Retrofit配置\n`Retrofit` 通过定义的API Interfaces转变为回调对象。除了自带的默认的配置信息，开发者也可以自定义实现`Retrofit`的配置。\n\n1.CONVERTERS 转换器\n默认情况`Retrofit`只能把HTTP 体反序列化为[OkHttp](https://github.com/square/okhttp)的`ResponseBody`类型的对象，并且`@Body`只接受`ResponseBody`数据。\nConverters 可以支持其他类型的数据。\n\n(1).[Gson](https://github.com/google/gson): com.squareup.retrofit2:converter-gson\n\n(2).[Jackson](http://wiki.fasterxml.com/JacksonHome): com.squareup.retrofit2:converter-jackson\n\n(3).[Moshi](https://github.com/square/moshi/): com.squareup.retrofit2:converter-moshi\n\n(4).[Protobuf](https://developers.google.com/protocol-buffers/): com.squareup.retrofit2:converter-protobuf\n\t\n(5).[Wire](https://github.com/square/wire): com.squareup.retrofit2:converter-wire\n\t\n(6).[Simple XML](http://simple.sourceforge.net/): com.squareup.retrofit2:converter-simplexml\n\n例子：用基于Gson反序列化的`GsonConverterFactory `来生成`GitHubService`实例，\n\n\tRetrofit retrofit = new Retrofit.Builder()\n\t\t\t.baseUrl(\"https://api.github.com\")\n\t\t\t.addConverterFactory(GsonConverterFactory.create())\n\t\t\t.build();\n\n\tGitHubService service = retrofit.create(GitHubService.class);\n\n2.自定义CONVERTERS\n\n如果要使用内容格式为如 `YAML`, `txt`等`Retrofit`不支持的或希望使用不同的库实现支持的内容的API，你可以创建继承`Converter.Factory`的自定义Converter，在建造自己的adapter时候指定一个自定义的Converter实例。\n\n`Retrofit`地址 ： [Github](http://github.com/square/retrofit)\n\n(1).Retrofit requires at minimum Java 7 or Android 2.3.\n\n(2).proguard\n\t\n\t-dontwarn retrofit2.**\n\t-keep class retrofit2.** { *; }\n\t-keepattributes Signature\n\t-keepattributes Exceptions","source":"_posts/Android网络Client：Retrofit(一).md","raw":"---\ntitle: Android网络Client：Retrofit(一)\ndate: 2016-01-11 23:44:20\ntags:\n---\n[Retrofit - A type-safe HTTP client for Android and Java](http://square.github.io/retrofit/)\n\n[Retrofit分析-漂亮的解耦套路](http://www.jianshu.com/p/45cb536be2f4?utm_campaign=maleskine&utm_content=note&utm_medium=reader_share&utm_source=weixin&from=singlemessage&isappinstalled=0)\n### Retrofit\n[A type-safe HTTP client for Android and Java](http://square.github.io/retrofit/)\n### 一、介绍\n1.接口定义来定义HTTP API\n\n\tpublic interface GitHubService{\n\t\t@GET(\"users/{user}/repos\")\n\t\tCall<List<Repo>> listRepos(@Path(\"user\") String user);\n\t}\n\n2.Retrofit对象生成GitHubService的实现\n\n\tRetrofit retorfit = new Retrofit.Builder()\n\t\t\t.baseUrl(\"https://api.github.com\")\n\t\t\t.build();\n\n\tGitHubService service = retrofit.create(GitHubService.class);\n\n3.创建GitHubService的实现后，发起同步或异步的网络请求，并返回Call对象\n\n\tCall<List<Repo>> repos = service.listRepos(\"octocat\");\n\n注解描述HTTP请求\n\t\n\t1.支持URL参数和查询参数动态可配\n\t2.支持对象转换成请求体（eg. JSON 、Protocol buffers）\n\t3.支持多种请求体和文件上传\n\n### 二、API 声明\nAnnotations on the interface methods and its parameters indicate how a request will be handled.\n以注解形式定义接口方法和对应的请求参数\n\n1.请求方法\n\n每个方法必须有一个对应的HTTP请求注解，提供请求的方法和对应的URL参数。五类注解：`GET`、`POST`、`PUT`、 `DELETE` 和`HEAD`。对应的资源URL请求地址在注解上指定。\n\t\n\t@GET(\"users/list\")\n\n你也可以在URL中指定查询参数\n\n\t@GET(\"users/list?sort=desc\")\n\n2.URL 处理\n\nURL可以使用替换块动态改变方法的请求参数。替换参数为使用`{}`引用起来的字符串，并且要使用`@Path`注解的方式，用同样的字符串表示参数。\n\n\t@GET(\"group/{id}/users\")\n\tCall<List<User>> groupList(@Path(\"id\") int groupId);\n\n也可以添加查询参数\n\t\n\t@GET(\"group/{id}/users\")\n\tCall<List<User>> groupList(@Path(\"id\") int groupId , @Query(\"sort\") String sort);\n复杂查询，参数可以为`Map`类型\n\n\t@GET(\"group/{id}/users\")\n\tCall<List<User>> groupList(@Path(\"id\") int groupId , @QueryMap Map<String , String> options);\n\n3.请求体\n\n`@Body`注解用来指定对象作为HTTP请求体\n\n\t@POST(\"users/new\")\n\tCall<User> createUser(@Body User user);\n\n使用`Retrofit`对象实例指定转换器来转换对象。\n如果没有添加转换器，只能使用`RequestBody`\n\n4.Form Encode编码数据And Multipart数据的请求\nmultipart/form-data : POST数据提交的方式，数据以multipart/form-data来编码。\nMethod 也可以发送form-encoded and multipart编码格式的数据\n`@FormUrlEncoded`注解表示发送的数据格式为Form-encoded 格式。每个用注解`@Filed`表示的键值对包含指定键的名称和提供值的对象\n\t\n\t@FormUrlEncoded\n\t@POST(\"user/edit\")\n\tCall<uSER> updateUser(@Filed(\"first_name\") String first , @Field(\"last_name\") String last);\n\n`@Multipart`注解用来表示Method 为 Multipart请求。Parts使用`@Part`注解来表示。\n\n\t@Multipart\n\t@PUT(\"user/photo\")\n\tCall<User> updateUser(@Part(\"photo\") RequestBody photo , @Part(\"description\") RequestBody description);\n\nMultipart的Parts对象使用`Retrofit`的转换器或实现`RequestBody `来完成序列化\n\n5.HEADER 请求操作\n\n`@Headers`注解为方法指定静态headers\n\t\n\t@Headers(\"Cache-Control:max-age = 640000\")\n\t@GET(\"widget/list\")\n\tCall<List<Widget>> widgetList();\n\n\t@Headers({\n\t\t\t\"Accept: application/vnd.github.v3.full+json\" ,\n\t\t\t\"User-Agent: Retrofit-Sample-App\"\n\t})\n\t@GET(\"users/{username}\")\n\tCall<User> getUser(@Path(\"username\") String username);\n\n  **注意：** Heads不必在每个方法上单独声明，可以在方法中引用相同名称的头部\n\n`@Header`注解可以动态指定Header。与普通请求注解相同需要指定Header的参数，如果参数为null，则Header被忽略掉。另外，值和结果使用的时候会调用`toString`方法\n\n\t@GET(\"user\")\n\tCall<User> getUser(@Header(\"Authorization\") String authorization);\n\n[OkHttp interceptor](https://github.com/square/okhttp/wiki/Interceptors)可以为需要添加Header的请求指定头部\n\n6.同步和异步请求\n\n`Call`可以执行同步或异步请求。每个实例只能使用一次，`clone()`方法可以创建一个新的`Call`。\n\n**注意：** 在Android中，回调会在主线程中执行，在JVM中，回调会在调用Http Request请求的线程中执行。\n\n### 三、Retrofit配置\n`Retrofit` 通过定义的API Interfaces转变为回调对象。除了自带的默认的配置信息，开发者也可以自定义实现`Retrofit`的配置。\n\n1.CONVERTERS 转换器\n默认情况`Retrofit`只能把HTTP 体反序列化为[OkHttp](https://github.com/square/okhttp)的`ResponseBody`类型的对象，并且`@Body`只接受`ResponseBody`数据。\nConverters 可以支持其他类型的数据。\n\n(1).[Gson](https://github.com/google/gson): com.squareup.retrofit2:converter-gson\n\n(2).[Jackson](http://wiki.fasterxml.com/JacksonHome): com.squareup.retrofit2:converter-jackson\n\n(3).[Moshi](https://github.com/square/moshi/): com.squareup.retrofit2:converter-moshi\n\n(4).[Protobuf](https://developers.google.com/protocol-buffers/): com.squareup.retrofit2:converter-protobuf\n\t\n(5).[Wire](https://github.com/square/wire): com.squareup.retrofit2:converter-wire\n\t\n(6).[Simple XML](http://simple.sourceforge.net/): com.squareup.retrofit2:converter-simplexml\n\n例子：用基于Gson反序列化的`GsonConverterFactory `来生成`GitHubService`实例，\n\n\tRetrofit retrofit = new Retrofit.Builder()\n\t\t\t.baseUrl(\"https://api.github.com\")\n\t\t\t.addConverterFactory(GsonConverterFactory.create())\n\t\t\t.build();\n\n\tGitHubService service = retrofit.create(GitHubService.class);\n\n2.自定义CONVERTERS\n\n如果要使用内容格式为如 `YAML`, `txt`等`Retrofit`不支持的或希望使用不同的库实现支持的内容的API，你可以创建继承`Converter.Factory`的自定义Converter，在建造自己的adapter时候指定一个自定义的Converter实例。\n\n`Retrofit`地址 ： [Github](http://github.com/square/retrofit)\n\n(1).Retrofit requires at minimum Java 7 or Android 2.3.\n\n(2).proguard\n\t\n\t-dontwarn retrofit2.**\n\t-keep class retrofit2.** { *; }\n\t-keepattributes Signature\n\t-keepattributes Exceptions","slug":"Android网络Client：Retrofit(一)","published":1,"updated":"2016-04-14T02:11:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dy8001dc0m32i39ew76","content":"<p><a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">Retrofit - A type-safe HTTP client for Android and Java</a></p>\n<p><a href=\"http://www.jianshu.com/p/45cb536be2f4?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weixin&amp;from=singlemessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"external\">Retrofit分析-漂亮的解耦套路</a></p>\n<h3 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h3><p><a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">A type-safe HTTP client for Android and Java</a></p>\n<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p>1.接口定义来定义HTTP API</p>\n<pre><code>public interface GitHubService{\n    @GET(&quot;users/{user}/repos&quot;)\n    Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);\n}\n</code></pre><p>2.Retrofit对象生成GitHubService的实现</p>\n<pre><code>Retrofit retorfit = new Retrofit.Builder()\n        .baseUrl(&quot;https://api.github.com&quot;)\n        .build();\n\nGitHubService service = retrofit.create(GitHubService.class);\n</code></pre><p>3.创建GitHubService的实现后，发起同步或异步的网络请求，并返回Call对象</p>\n<pre><code>Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(&quot;octocat&quot;);\n</code></pre><p>注解描述HTTP请求</p>\n<pre><code>1.支持URL参数和查询参数动态可配\n2.支持对象转换成请求体（eg. JSON 、Protocol buffers）\n3.支持多种请求体和文件上传\n</code></pre><h3 id=\"二、API-声明\"><a href=\"#二、API-声明\" class=\"headerlink\" title=\"二、API 声明\"></a>二、API 声明</h3><p>Annotations on the interface methods and its parameters indicate how a request will be handled.<br>以注解形式定义接口方法和对应的请求参数</p>\n<p>1.请求方法</p>\n<p>每个方法必须有一个对应的HTTP请求注解，提供请求的方法和对应的URL参数。五类注解：<code>GET</code>、<code>POST</code>、<code>PUT</code>、 <code>DELETE</code> 和<code>HEAD</code>。对应的资源URL请求地址在注解上指定。</p>\n<pre><code>@GET(&quot;users/list&quot;)\n</code></pre><p>你也可以在URL中指定查询参数</p>\n<pre><code>@GET(&quot;users/list?sort=desc&quot;)\n</code></pre><p>2.URL 处理</p>\n<p>URL可以使用替换块动态改变方法的请求参数。替换参数为使用<code>{}</code>引用起来的字符串，并且要使用<code>@Path</code>注解的方式，用同样的字符串表示参数。</p>\n<pre><code>@GET(&quot;group/{id}/users&quot;)\nCall&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId);\n</code></pre><p>也可以添加查询参数</p>\n<pre><code>@GET(&quot;group/{id}/users&quot;)\nCall&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId , @Query(&quot;sort&quot;) String sort);\n</code></pre><p>复杂查询，参数可以为<code>Map</code>类型</p>\n<pre><code>@GET(&quot;group/{id}/users&quot;)\nCall&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId , @QueryMap Map&lt;String , String&gt; options);\n</code></pre><p>3.请求体</p>\n<p><code>@Body</code>注解用来指定对象作为HTTP请求体</p>\n<pre><code>@POST(&quot;users/new&quot;)\nCall&lt;User&gt; createUser(@Body User user);\n</code></pre><p>使用<code>Retrofit</code>对象实例指定转换器来转换对象。<br>如果没有添加转换器，只能使用<code>RequestBody</code></p>\n<p>4.Form Encode编码数据And Multipart数据的请求<br>multipart/form-data : POST数据提交的方式，数据以multipart/form-data来编码。<br>Method 也可以发送form-encoded and multipart编码格式的数据<br><code>@FormUrlEncoded</code>注解表示发送的数据格式为Form-encoded 格式。每个用注解<code>@Filed</code>表示的键值对包含指定键的名称和提供值的对象</p>\n<pre><code>@FormUrlEncoded\n@POST(&quot;user/edit&quot;)\nCall&lt;uSER&gt; updateUser(@Filed(&quot;first_name&quot;) String first , @Field(&quot;last_name&quot;) String last);\n</code></pre><p><code>@Multipart</code>注解用来表示Method 为 Multipart请求。Parts使用<code>@Part</code>注解来表示。</p>\n<pre><code>@Multipart\n@PUT(&quot;user/photo&quot;)\nCall&lt;User&gt; updateUser(@Part(&quot;photo&quot;) RequestBody photo , @Part(&quot;description&quot;) RequestBody description);\n</code></pre><p>Multipart的Parts对象使用<code>Retrofit</code>的转换器或实现<code>RequestBody</code>来完成序列化</p>\n<p>5.HEADER 请求操作</p>\n<p><code>@Headers</code>注解为方法指定静态headers</p>\n<pre><code>@Headers(&quot;Cache-Control:max-age = 640000&quot;)\n@GET(&quot;widget/list&quot;)\nCall&lt;List&lt;Widget&gt;&gt; widgetList();\n\n@Headers({\n        &quot;Accept: application/vnd.github.v3.full+json&quot; ,\n        &quot;User-Agent: Retrofit-Sample-App&quot;\n})\n@GET(&quot;users/{username}&quot;)\nCall&lt;User&gt; getUser(@Path(&quot;username&quot;) String username);\n</code></pre><p>  <strong>注意：</strong> Heads不必在每个方法上单独声明，可以在方法中引用相同名称的头部</p>\n<p><code>@Header</code>注解可以动态指定Header。与普通请求注解相同需要指定Header的参数，如果参数为null，则Header被忽略掉。另外，值和结果使用的时候会调用<code>toString</code>方法</p>\n<pre><code>@GET(&quot;user&quot;)\nCall&lt;User&gt; getUser(@Header(&quot;Authorization&quot;) String authorization);\n</code></pre><p><a href=\"https://github.com/square/okhttp/wiki/Interceptors\" target=\"_blank\" rel=\"external\">OkHttp interceptor</a>可以为需要添加Header的请求指定头部</p>\n<p>6.同步和异步请求</p>\n<p><code>Call</code>可以执行同步或异步请求。每个实例只能使用一次，<code>clone()</code>方法可以创建一个新的<code>Call</code>。</p>\n<p><strong>注意：</strong> 在Android中，回调会在主线程中执行，在JVM中，回调会在调用Http Request请求的线程中执行。</p>\n<h3 id=\"三、Retrofit配置\"><a href=\"#三、Retrofit配置\" class=\"headerlink\" title=\"三、Retrofit配置\"></a>三、Retrofit配置</h3><p><code>Retrofit</code> 通过定义的API Interfaces转变为回调对象。除了自带的默认的配置信息，开发者也可以自定义实现<code>Retrofit</code>的配置。</p>\n<p>1.CONVERTERS 转换器<br>默认情况<code>Retrofit</code>只能把HTTP 体反序列化为<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">OkHttp</a>的<code>ResponseBody</code>类型的对象，并且<code>@Body</code>只接受<code>ResponseBody</code>数据。<br>Converters 可以支持其他类型的数据。</p>\n<p>(1).<a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a>: com.squareup.retrofit2:converter-gson</p>\n<p>(2).<a href=\"http://wiki.fasterxml.com/JacksonHome\" target=\"_blank\" rel=\"external\">Jackson</a>: com.squareup.retrofit2:converter-jackson</p>\n<p>(3).<a href=\"https://github.com/square/moshi/\" target=\"_blank\" rel=\"external\">Moshi</a>: com.squareup.retrofit2:converter-moshi</p>\n<p>(4).<a href=\"https://developers.google.com/protocol-buffers/\" target=\"_blank\" rel=\"external\">Protobuf</a>: com.squareup.retrofit2:converter-protobuf</p>\n<p>(5).<a href=\"https://github.com/square/wire\" target=\"_blank\" rel=\"external\">Wire</a>: com.squareup.retrofit2:converter-wire</p>\n<p>(6).<a href=\"http://simple.sourceforge.net/\" target=\"_blank\" rel=\"external\">Simple XML</a>: com.squareup.retrofit2:converter-simplexml</p>\n<p>例子：用基于Gson反序列化的<code>GsonConverterFactory</code>来生成<code>GitHubService</code>实例，</p>\n<pre><code>Retrofit retrofit = new Retrofit.Builder()\n        .baseUrl(&quot;https://api.github.com&quot;)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build();\n\nGitHubService service = retrofit.create(GitHubService.class);\n</code></pre><p>2.自定义CONVERTERS</p>\n<p>如果要使用内容格式为如 <code>YAML</code>, <code>txt</code>等<code>Retrofit</code>不支持的或希望使用不同的库实现支持的内容的API，你可以创建继承<code>Converter.Factory</code>的自定义Converter，在建造自己的adapter时候指定一个自定义的Converter实例。</p>\n<p><code>Retrofit</code>地址 ： <a href=\"http://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Github</a></p>\n<p>(1).Retrofit requires at minimum Java 7 or Android 2.3.</p>\n<p>(2).proguard</p>\n<pre><code>-dontwarn retrofit2.**\n-keep class retrofit2.** { *; }\n-keepattributes Signature\n-keepattributes Exceptions\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">Retrofit - A type-safe HTTP client for Android and Java</a></p>\n<p><a href=\"http://www.jianshu.com/p/45cb536be2f4?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weixin&amp;from=singlemessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"external\">Retrofit分析-漂亮的解耦套路</a></p>\n<h3 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h3><p><a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">A type-safe HTTP client for Android and Java</a></p>\n<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p>1.接口定义来定义HTTP API</p>\n<pre><code>public interface GitHubService{\n    @GET(&quot;users/{user}/repos&quot;)\n    Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);\n}\n</code></pre><p>2.Retrofit对象生成GitHubService的实现</p>\n<pre><code>Retrofit retorfit = new Retrofit.Builder()\n        .baseUrl(&quot;https://api.github.com&quot;)\n        .build();\n\nGitHubService service = retrofit.create(GitHubService.class);\n</code></pre><p>3.创建GitHubService的实现后，发起同步或异步的网络请求，并返回Call对象</p>\n<pre><code>Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(&quot;octocat&quot;);\n</code></pre><p>注解描述HTTP请求</p>\n<pre><code>1.支持URL参数和查询参数动态可配\n2.支持对象转换成请求体（eg. JSON 、Protocol buffers）\n3.支持多种请求体和文件上传\n</code></pre><h3 id=\"二、API-声明\"><a href=\"#二、API-声明\" class=\"headerlink\" title=\"二、API 声明\"></a>二、API 声明</h3><p>Annotations on the interface methods and its parameters indicate how a request will be handled.<br>以注解形式定义接口方法和对应的请求参数</p>\n<p>1.请求方法</p>\n<p>每个方法必须有一个对应的HTTP请求注解，提供请求的方法和对应的URL参数。五类注解：<code>GET</code>、<code>POST</code>、<code>PUT</code>、 <code>DELETE</code> 和<code>HEAD</code>。对应的资源URL请求地址在注解上指定。</p>\n<pre><code>@GET(&quot;users/list&quot;)\n</code></pre><p>你也可以在URL中指定查询参数</p>\n<pre><code>@GET(&quot;users/list?sort=desc&quot;)\n</code></pre><p>2.URL 处理</p>\n<p>URL可以使用替换块动态改变方法的请求参数。替换参数为使用<code>{}</code>引用起来的字符串，并且要使用<code>@Path</code>注解的方式，用同样的字符串表示参数。</p>\n<pre><code>@GET(&quot;group/{id}/users&quot;)\nCall&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId);\n</code></pre><p>也可以添加查询参数</p>\n<pre><code>@GET(&quot;group/{id}/users&quot;)\nCall&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId , @Query(&quot;sort&quot;) String sort);\n</code></pre><p>复杂查询，参数可以为<code>Map</code>类型</p>\n<pre><code>@GET(&quot;group/{id}/users&quot;)\nCall&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId , @QueryMap Map&lt;String , String&gt; options);\n</code></pre><p>3.请求体</p>\n<p><code>@Body</code>注解用来指定对象作为HTTP请求体</p>\n<pre><code>@POST(&quot;users/new&quot;)\nCall&lt;User&gt; createUser(@Body User user);\n</code></pre><p>使用<code>Retrofit</code>对象实例指定转换器来转换对象。<br>如果没有添加转换器，只能使用<code>RequestBody</code></p>\n<p>4.Form Encode编码数据And Multipart数据的请求<br>multipart/form-data : POST数据提交的方式，数据以multipart/form-data来编码。<br>Method 也可以发送form-encoded and multipart编码格式的数据<br><code>@FormUrlEncoded</code>注解表示发送的数据格式为Form-encoded 格式。每个用注解<code>@Filed</code>表示的键值对包含指定键的名称和提供值的对象</p>\n<pre><code>@FormUrlEncoded\n@POST(&quot;user/edit&quot;)\nCall&lt;uSER&gt; updateUser(@Filed(&quot;first_name&quot;) String first , @Field(&quot;last_name&quot;) String last);\n</code></pre><p><code>@Multipart</code>注解用来表示Method 为 Multipart请求。Parts使用<code>@Part</code>注解来表示。</p>\n<pre><code>@Multipart\n@PUT(&quot;user/photo&quot;)\nCall&lt;User&gt; updateUser(@Part(&quot;photo&quot;) RequestBody photo , @Part(&quot;description&quot;) RequestBody description);\n</code></pre><p>Multipart的Parts对象使用<code>Retrofit</code>的转换器或实现<code>RequestBody</code>来完成序列化</p>\n<p>5.HEADER 请求操作</p>\n<p><code>@Headers</code>注解为方法指定静态headers</p>\n<pre><code>@Headers(&quot;Cache-Control:max-age = 640000&quot;)\n@GET(&quot;widget/list&quot;)\nCall&lt;List&lt;Widget&gt;&gt; widgetList();\n\n@Headers({\n        &quot;Accept: application/vnd.github.v3.full+json&quot; ,\n        &quot;User-Agent: Retrofit-Sample-App&quot;\n})\n@GET(&quot;users/{username}&quot;)\nCall&lt;User&gt; getUser(@Path(&quot;username&quot;) String username);\n</code></pre><p>  <strong>注意：</strong> Heads不必在每个方法上单独声明，可以在方法中引用相同名称的头部</p>\n<p><code>@Header</code>注解可以动态指定Header。与普通请求注解相同需要指定Header的参数，如果参数为null，则Header被忽略掉。另外，值和结果使用的时候会调用<code>toString</code>方法</p>\n<pre><code>@GET(&quot;user&quot;)\nCall&lt;User&gt; getUser(@Header(&quot;Authorization&quot;) String authorization);\n</code></pre><p><a href=\"https://github.com/square/okhttp/wiki/Interceptors\" target=\"_blank\" rel=\"external\">OkHttp interceptor</a>可以为需要添加Header的请求指定头部</p>\n<p>6.同步和异步请求</p>\n<p><code>Call</code>可以执行同步或异步请求。每个实例只能使用一次，<code>clone()</code>方法可以创建一个新的<code>Call</code>。</p>\n<p><strong>注意：</strong> 在Android中，回调会在主线程中执行，在JVM中，回调会在调用Http Request请求的线程中执行。</p>\n<h3 id=\"三、Retrofit配置\"><a href=\"#三、Retrofit配置\" class=\"headerlink\" title=\"三、Retrofit配置\"></a>三、Retrofit配置</h3><p><code>Retrofit</code> 通过定义的API Interfaces转变为回调对象。除了自带的默认的配置信息，开发者也可以自定义实现<code>Retrofit</code>的配置。</p>\n<p>1.CONVERTERS 转换器<br>默认情况<code>Retrofit</code>只能把HTTP 体反序列化为<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">OkHttp</a>的<code>ResponseBody</code>类型的对象，并且<code>@Body</code>只接受<code>ResponseBody</code>数据。<br>Converters 可以支持其他类型的数据。</p>\n<p>(1).<a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a>: com.squareup.retrofit2:converter-gson</p>\n<p>(2).<a href=\"http://wiki.fasterxml.com/JacksonHome\" target=\"_blank\" rel=\"external\">Jackson</a>: com.squareup.retrofit2:converter-jackson</p>\n<p>(3).<a href=\"https://github.com/square/moshi/\" target=\"_blank\" rel=\"external\">Moshi</a>: com.squareup.retrofit2:converter-moshi</p>\n<p>(4).<a href=\"https://developers.google.com/protocol-buffers/\" target=\"_blank\" rel=\"external\">Protobuf</a>: com.squareup.retrofit2:converter-protobuf</p>\n<p>(5).<a href=\"https://github.com/square/wire\" target=\"_blank\" rel=\"external\">Wire</a>: com.squareup.retrofit2:converter-wire</p>\n<p>(6).<a href=\"http://simple.sourceforge.net/\" target=\"_blank\" rel=\"external\">Simple XML</a>: com.squareup.retrofit2:converter-simplexml</p>\n<p>例子：用基于Gson反序列化的<code>GsonConverterFactory</code>来生成<code>GitHubService</code>实例，</p>\n<pre><code>Retrofit retrofit = new Retrofit.Builder()\n        .baseUrl(&quot;https://api.github.com&quot;)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build();\n\nGitHubService service = retrofit.create(GitHubService.class);\n</code></pre><p>2.自定义CONVERTERS</p>\n<p>如果要使用内容格式为如 <code>YAML</code>, <code>txt</code>等<code>Retrofit</code>不支持的或希望使用不同的库实现支持的内容的API，你可以创建继承<code>Converter.Factory</code>的自定义Converter，在建造自己的adapter时候指定一个自定义的Converter实例。</p>\n<p><code>Retrofit</code>地址 ： <a href=\"http://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Github</a></p>\n<p>(1).Retrofit requires at minimum Java 7 or Android 2.3.</p>\n<p>(2).proguard</p>\n<pre><code>-dontwarn retrofit2.**\n-keep class retrofit2.** { *; }\n-keepattributes Signature\n-keepattributes Exceptions\n</code></pre>"},{"title":"Android源码学习（一）：Mac OSX开发环境搭建","date":"2016-01-12T08:41:51.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457059153/android/AOSP1.jpg","_content":"\n[官网教程](https://source.android.com/source/initializing.html#setting-up-a-mac-os-x-build-environment)\n\n[Mac OS X 10.10.3下android-5.1.1_r9 源码下载与编译](http://iluhcm.com/2015/08/18/compile-newest-android-source-code-on-macosx/)\n\n[Build Android 5.0 Lollipop on OSX 10.10 Yosemite](https://medium.com/@raminmahmoodi/build-android-5-0-lollipop-on-osx-10-10-yosemite-441bd00ee77a#.vxeycv4xr)\n\n[Mac 10.10 编译android 4.4.4 for nexus](http://www.liball.me/mac-10-10-build-android-4-4-4-for-nexus/)\n\n[Build Android 5.0 Source](http://llzz.me/2015/06/17/Build-Android-5-0-Source/)\n#### 一、Mac OSX 开发环境搭建\n本文的Mac OSX的版本为 `OSX 10.11 `\n\n默认情况下，MacOs系统是大小写保留，但大小写不敏感的文件系统。这种文件系统不被git支持，会引起git一些命令行行为不正常，如 `git status`。因此建议将ASOP源码文件放在一个大小写敏感的工作环境中。可以使用磁盘镜像来建立一个这样的文件系统。\n#### 1、创建磁盘文件\n在MacOs系统中使用磁盘镜像创建一个大小写敏感的文件系统很简单。打开Mac自带的磁盘工具（Disk Utility），选择`New Image`，分配至少26G大小的空间；稍微大一点的空间可能会更好如`50G`。保证选择格式为`OSX 扩展（区分大小写，日志式）`的卷。\n\n<div>\n\t<img src= \"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457867135/android/android_disk_img.jpg\" style=\"height:350px\">\n</div>\n\n也可以通过shell命令行来创建磁盘镜像\n\n```java\nhdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 50g ~/android.dmg\n```\n上面的命令行会创建一个`.dmg`（或`.dmg.sparseimage`）格式文件。以后可以用这个镜像来作为Android 开发环境的磁盘。\n之后，如果需要更大的磁盘空间，可以用下面的命令行来改变磁盘镜像的大小\n```java\n# hdiutil resize -size <new-size-you-want>g ~/android.dmg.sparseimage\n```\n对于名称为`android.dmg`的磁盘镜像，可以在`~/.bash_profile`文件中加入下面的辅助`function`来启动你的磁盘镜像\n\n- 当执行`mountAndroid`时挂载镜像\n```java\n# mount the android file image\nfunction mountAndroid { hdiutil attach ~/android.dmg -mountpoint /Volumes/android; }\n```\n- 执行`umountAndroid`卸载镜像\n```java\n# unmount the android file image\nfunction umountAndroid() { hdiutil detach /Volumes/android; }\n```\n镜像文件的地址要视你的本地具体的镜像的位置（本地的镜像地址在home的根目录中）。\n磁盘镜像创建完毕\n\n#### 2、安装配置JDK\n在安装和配置JDK的时候要根据你的Mac 系统的版本来决定你要选择的JDK版本和要编译的Android Source的分支（branch）。\n\n- `master`分支的[AOSP](https://android.googlesource.com/)需要Java 8.x 对应的[JDK 1.8](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html#jdk-8u45-oth-JPR)\n- `5.0.x`分支的AOSP需要Java 7对应的版本[JDK 1.7](https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR)\n- `Gingerbread `到`KitKat `版本之间的Android版本需要下载安装Java 6 对应的 [Java JDK](http://support.apple.com/kb/dl1572)\n\n##### 1) Master分支\n为了在Mac上编译最新的源码，需要运行`Mac OS X v10.10 (Yosemite)`或`更新`版本的Mac，和对应的`Xcode 4.5.2`及以上版本的Command Line Tools。\n##### 2) 6.0.x分支\n编译 6.0.x的AOSP 源码，需要系统版本为`Mac OS X v10.10 (Yosemite)`的Mac，和对应版本为`Xcode 4.5.2 `与`Command Line Tools`\n##### 3) 5.0.x分支\n编译 5.0.x的AOSP 源码，需要系统版本为`Mac OS X v10.8 (Mountain Lion)`的Mac，和对应版本为`Xcode 4.5.2 `与`Command Line Tools`\n##### 4) 4.4.x分支\n编译 4.4.x的AOSP 源码，需要系统版本为`Mac OS X v10.6 (Snow Leopard) `或`Mac OS X v10.7 (Lion)`的Mac，和对应版本为`Xcode 4.2`与`Command Line Tools`。\n##### 5) 4.0.x以及更早的分支\n对于4.0.x以及更早版本的分支，需要系统版本为`Mac OS X v10.5 (Leopard)  `或`Mac OS X v10.6 (Snow Leopard)`的Mac，同时要有`Mac OS X v10.5 SDK`的支持\n#### 3、安装需求工具\n- 安装Xcode\n\n从[Apple Developer](https://developer.apple.com/resources/cn/)网站来安装Xcode。建议`3.1.4`版本及以上的Xcode。版本`4.x`可能会引起一些问题。如果你未注册苹果开发者，则需要创建一个Apple ID来下载Xcode。\n\n- 安装[MacPorts](http://www.macports.org/install.php)（安装时间可能会比较长，耐心等待即可）\n\n`注意：` 保证在`/usr/bin`上级路径中已有`/opt/local/bin`路径目录。如果没有，需要在` ~/.bash_profile`文件中添加一下命令\n```java\nexport PATH=/opt/local/bin:$PATH\n```\n`注意：`如果home根目录中不存在.bash_profile 文件，需要手动创建一个。\n\n- 从MacPorts上获取`Git`、`GPG`等包\n```java\n$ POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg\n```\n如果Mac系统版本为OS X v10.4，还需要安装`bison `\n```java\n$ POSIXLY_CORRECT=1 sudo port install bison\n```\n对于版本`ICS`（ Ice Cream Sandwich (4.0.x)）之前的Android，使用 gmake 3.82版本会有阻止android源码编译的bug，安装时请安装最新的gmake或者通过以下几步安装`3.81`版本。\n\n1. 编辑`/opt/local/etc/macports/sources.conf`，添加一行\n```java\nfile:///Users/Shared/dports\n```\n2. 在远程同步之前，创建目录\n```java\n$ mkdir /Users/Shared/dports\n```\n3. 在新的dports目录中运行\n```java\n$ portindex /Users/Shared/dports\n```\n4. 最后安装旧版本的gmake\n```java\n$ sudo port install gmake @3.81\n```\n#### 4、解除文件限制\n默认情况下，Mac系统限制了同时打开文件数，会限制编译进程的执行；在 ~/.bash_profile文件中添加以下命令来取消限制：\n```java\n# set the number of open files to be 1024\nulimit -S -n 1024\n```\n#### 5、自定义配置（可选）\n使用`ccache `编译工具来加速`rebuilds `。如果你经常用`make clean `命令或切换不同开发版本，`ccache`很有用。\n- 在.bashrc（或类似）文件中加入下面命令\n```java\nexport USE_CCACHE=1\n```\n默认情况`cache `会被存储在~/.ccache中。如果你的home目录在NFS或其他非本地文件系统上，你也可以在.bashrc文件中指定cache目录\n```java\nexport CCACHE_DIR=<path-to-your-cache-directory>\n```\n建议缓存的大小为50-100GB，下载源码后需要先执行下面的命令\n```java\nprebuilts/misc/linux-x86/ccache/ccache -M 50G\n```\n如果是Mac系统，应该用darwin-x86来替换linux-x86\n```java\nprebuilts/misc/darwin-x86/ccache/ccache -M 50G\n```\n当编译` Ice Cream Sandwich (4.0.x)`及之前版本时，`ccache `则在不同的位置：\n```java\nprebuilt/linux-x86/ccache/ccache -M 50G\n```\n设置存储在CCACHE_DIR中，并且为持久化状态。\n#### 二、下载源码\n配置好开发环境后，就可以进行源码下载了。因为国内网络环境，国内开发者建议通过[清华AOSP](https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/)来下载AOSP。用清华AOSP时建议用`repo git`来下载源码。\n##### 1.安装Repo\nRepo是一个辅助Git管理Android版本及分支的工具.在安装repo前,需要新建一个文件夹~/bin(名字可随意定)并把这个文件夹放到PATH环境变量里,然后我们就可以把repo下载到这个文件夹里.\n- 保证你在home目录中有`bin/`的目录并且包含在你的路径中\n```java\n$ mkdir ~/bin\n$ PATH=~/bin:$PATH\n```\n- 下载Repo工具并保证可以执行\n```java\n$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n$ chmod a+x ~/bin/repo\n```\n- 建立工作目录（目录可以是任意指定的 ，Mac可以在挂载`Disk Image`中创建目录）\n```java\nmkdir WORKING_DIRECTORY\ncd WORKING_DIRECTORY\n```\n- 配置Git的name 和 email。为了使用Gerrit Code-review工具，需要一个注册[Google账号](https://www.google.com/accounts)的email，保证email是激活状态能够收取到消息。(若为清华AOSP，Email随意)\n```java\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"you@example.com\"\n```\n- 运行`repo init`来初始化代码仓库。必须为manifest指定一个URL，指定要下载的远程代码分支\n```java\n$ repo init -u https://android.googlesource.com/platform/manifest\n```\n上面初始的是`master`分支的代码，根据你的Mac系统版本来选择android源码版本，可以为之后编译工具减少不少的麻烦。用`-b`命令来选择分支。因为本文Mac系统版本为 Mac OSX 10.11，所以用的master分支的源码来进行源码学习。具体分支查看[Source Code Tags and Builds](https://source.android.com/source/build-numbers.html#source-code-tags-and-builds)。\n```java\n$ repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.1_r1\n```\n国内开发者可以参考文章[Android 镜像使用帮助](https://lug.ustc.edu.cn/wiki/mirrors/help/aosp)\n\n初始化成功后，会有`Repo is initialized in your working directory`的成功消息了。对应源码根目录会含有对应的`.repo`目录。\n\n- 下载源码：在上面指定`WORKING_DIRECTORY`根目录中用repo sync命令拉取android 源码，并下载到本地，\n```java\n$ repo sync\n```\n下载源码的时间特别漫长,中途可能会发生断开连接的现象。不过下载支持断点续传，停止时再用repo sync命令即可。\n更多关于[Repo command](https://source.android.com/source/developing.html)\n\n#### 三、编译源码\n源码下载完成后就可以进行编译工作了。源码下载成功后，会自动解压缩到`WORKING_DIRECTORY`目录中，如果你下载的源码不是在挂载的android磁盘镜像中，需要将`WORKING_DIRECTORY`中的源码拷贝到`/Volumes/android/`中，进行编译（command+c - command + v 即可）。\n\n- 进入源码根目录\n```java\ncd /Volumes/android\n```\n- 执行envsetup.sh脚本初始化环境\n\t```java\n\t$ source build/envsetup.sh\n\t```\n\t或\n\t```java\n\t$ . build/envsetup.sh\n\t```\n得到类似这面这样的提示信息\n<div>\n<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874157/android/envsetup_sh.jpg\" style=\"width:600px\">\n</div>\n\n- 选择编译的目标\n用`lunch `选择要编译的目标，如：\n```java\n$ lunch aosp_arm-eng\n```\n表示编译后的版本为模拟器的版本。成功后得到类似下面这样的信息\n<div>\n<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874467/android/lunch_build.jpg\" style=\"width:600px\">\n</div>\n\n更多查看[Running Builds](https://source.android.com/source/running.html)\n\n- 开始编译\n```java\n$ make -jN\n```\n其中N代表同时进行的任务数.官方建议任务数设置为线程数的1~2倍,比如我的机器是单CPU,四核,8线程,则最快的构建任务数是8~16。根据不同机器的性能，编译时长会有不同的差异。本文的Mac配置`MacBook Pro (2.2 GHz Intel Core i7/16 GB 1600 MHz DDR3)`编译一个半小时。在编译过程中可能会有因为各种问题而中断编译。在文章[Android源码学习（二）：编译问题总结](http://blog.alexwan1989.com/2016/03/04/Android%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/)中对常遇到的问题进行了总结。\n```java\n**make completed successfully (xx:xx (mm:ss))**\n```\n如果出现以上的提示，恭喜，表示你你已经编译成功。\n\n因为编译时选择的是aosp_arm-eng，所以用的是模拟器来进行调试\n```java\n$ emulator\n```\n模拟器启动很慢，大概10分钟这样模拟器运行成功。有资源的同学建议还是用真机来刷。具体的刷机参考[Flash a Device](https://source.android.com/source/building.html#flash-a-device)，这里就不详细说明了。\n#### 四、查看源码\nMac下查看android源码，这里推荐[Sublime Text](https://www.sublimetext.com/)配合插件还是比较好用的，类似这样\n<div>\n<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457875178/android/sublime_text_android_source.jpg\" style=\"width:650px\">\n</div>\n\n具体可以参考[Android 源码Mac-OSX查看工具Sublime-Text2](http://blog.csdn.net/wangbaochu/article/details/44836661)\n来安装[Package Control插件](https://packagecontrol.io/installation)和CTags Package：\n- 安装Package Control插件\n\t1. 打开控制台：View->show console 或 ctrl + ~\n\t2. 本文用是Sublime Text3 , 输入以下命令\n\t\t```java\n\t\timport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n\t\t```\n- 安装CTags Package\n\n\t1. 首先打开Sublime Text3，右键 -> Preference -> Packages Browse。查看是否已经安装了CTags Package，如果没有则继续下面步骤。\n\t2. 右键 -> Preference -> Package control, 输入\"install package\"，它会找出你可以安装的插件，在列表中选择ctag插件进行安装\n\t3. 修改函数跳转方式: 默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：\n\t\t```java\n\t\tPerference->Package Settings->CTags->Mouse Binding Default->复制全部->粘贴到Perference->Package Settings->CTags->Mouse Binding User\n\t\t```\n\t\t把里面的\"ctrl+shift\"，修改为“command”，这样就可以用“command+左键”跳转了\n\t\t```java\n\t\t[  \n\t\t{  \n\t\t  \"button\": \"button1\",  \n\t\t  \"count\": 1,  \n\t\t  \"press_command\": \"drag_select\",  \n\t\t  \"modifiers\": [“command”],  \n\t\t  \"command\": \"navigate_to_definition\"  \n\t\t},  \n\t\t{\n\t\t  \"button\": \"button2\",  \n\t\t  \"count\": 1,  \n\t\t  \"modifiers\": [\"command\"],  \n\t\t  \"command\": \"jump_prev\"  \n\t\t}  \n\t\t]\t  \n\t\t```\n- 导入Android 源码工程\n\n\t1. 在Sublime Text3工具栏点击 Project->Open Project, 选择Android源码根目录作为工程导入\n\t2. 右键点击Side Bar中android 源码根目录，右键-> CTgas: Rebuild Tags, 创建索引\n\t3. 接下来就利用快捷键浏览代码了：\n\t\t```java\n\t\tCommand+P：查找文件\n\t\tCommand+R：查找方法\n\t\tCommand+左键：文件或函数跳转        \n\t\tCommand+右键：返回文件或函数跳转的原始位置\n\t\t```\n","source":"_posts/Android源码学习（一）.md","raw":"---\ntitle: Android源码学习（一）：Mac OSX开发环境搭建\ndate: 2016-01-12 16:41:51\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1457059153/android/AOSP1.jpg\ncategories: Android源码学习系列\ntags: android\n\n---\n\n[官网教程](https://source.android.com/source/initializing.html#setting-up-a-mac-os-x-build-environment)\n\n[Mac OS X 10.10.3下android-5.1.1_r9 源码下载与编译](http://iluhcm.com/2015/08/18/compile-newest-android-source-code-on-macosx/)\n\n[Build Android 5.0 Lollipop on OSX 10.10 Yosemite](https://medium.com/@raminmahmoodi/build-android-5-0-lollipop-on-osx-10-10-yosemite-441bd00ee77a#.vxeycv4xr)\n\n[Mac 10.10 编译android 4.4.4 for nexus](http://www.liball.me/mac-10-10-build-android-4-4-4-for-nexus/)\n\n[Build Android 5.0 Source](http://llzz.me/2015/06/17/Build-Android-5-0-Source/)\n#### 一、Mac OSX 开发环境搭建\n本文的Mac OSX的版本为 `OSX 10.11 `\n\n默认情况下，MacOs系统是大小写保留，但大小写不敏感的文件系统。这种文件系统不被git支持，会引起git一些命令行行为不正常，如 `git status`。因此建议将ASOP源码文件放在一个大小写敏感的工作环境中。可以使用磁盘镜像来建立一个这样的文件系统。\n#### 1、创建磁盘文件\n在MacOs系统中使用磁盘镜像创建一个大小写敏感的文件系统很简单。打开Mac自带的磁盘工具（Disk Utility），选择`New Image`，分配至少26G大小的空间；稍微大一点的空间可能会更好如`50G`。保证选择格式为`OSX 扩展（区分大小写，日志式）`的卷。\n\n<div>\n\t<img src= \"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457867135/android/android_disk_img.jpg\" style=\"height:350px\">\n</div>\n\n也可以通过shell命令行来创建磁盘镜像\n\n```java\nhdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 50g ~/android.dmg\n```\n上面的命令行会创建一个`.dmg`（或`.dmg.sparseimage`）格式文件。以后可以用这个镜像来作为Android 开发环境的磁盘。\n之后，如果需要更大的磁盘空间，可以用下面的命令行来改变磁盘镜像的大小\n```java\n# hdiutil resize -size <new-size-you-want>g ~/android.dmg.sparseimage\n```\n对于名称为`android.dmg`的磁盘镜像，可以在`~/.bash_profile`文件中加入下面的辅助`function`来启动你的磁盘镜像\n\n- 当执行`mountAndroid`时挂载镜像\n```java\n# mount the android file image\nfunction mountAndroid { hdiutil attach ~/android.dmg -mountpoint /Volumes/android; }\n```\n- 执行`umountAndroid`卸载镜像\n```java\n# unmount the android file image\nfunction umountAndroid() { hdiutil detach /Volumes/android; }\n```\n镜像文件的地址要视你的本地具体的镜像的位置（本地的镜像地址在home的根目录中）。\n磁盘镜像创建完毕\n\n#### 2、安装配置JDK\n在安装和配置JDK的时候要根据你的Mac 系统的版本来决定你要选择的JDK版本和要编译的Android Source的分支（branch）。\n\n- `master`分支的[AOSP](https://android.googlesource.com/)需要Java 8.x 对应的[JDK 1.8](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html#jdk-8u45-oth-JPR)\n- `5.0.x`分支的AOSP需要Java 7对应的版本[JDK 1.7](https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR)\n- `Gingerbread `到`KitKat `版本之间的Android版本需要下载安装Java 6 对应的 [Java JDK](http://support.apple.com/kb/dl1572)\n\n##### 1) Master分支\n为了在Mac上编译最新的源码，需要运行`Mac OS X v10.10 (Yosemite)`或`更新`版本的Mac，和对应的`Xcode 4.5.2`及以上版本的Command Line Tools。\n##### 2) 6.0.x分支\n编译 6.0.x的AOSP 源码，需要系统版本为`Mac OS X v10.10 (Yosemite)`的Mac，和对应版本为`Xcode 4.5.2 `与`Command Line Tools`\n##### 3) 5.0.x分支\n编译 5.0.x的AOSP 源码，需要系统版本为`Mac OS X v10.8 (Mountain Lion)`的Mac，和对应版本为`Xcode 4.5.2 `与`Command Line Tools`\n##### 4) 4.4.x分支\n编译 4.4.x的AOSP 源码，需要系统版本为`Mac OS X v10.6 (Snow Leopard) `或`Mac OS X v10.7 (Lion)`的Mac，和对应版本为`Xcode 4.2`与`Command Line Tools`。\n##### 5) 4.0.x以及更早的分支\n对于4.0.x以及更早版本的分支，需要系统版本为`Mac OS X v10.5 (Leopard)  `或`Mac OS X v10.6 (Snow Leopard)`的Mac，同时要有`Mac OS X v10.5 SDK`的支持\n#### 3、安装需求工具\n- 安装Xcode\n\n从[Apple Developer](https://developer.apple.com/resources/cn/)网站来安装Xcode。建议`3.1.4`版本及以上的Xcode。版本`4.x`可能会引起一些问题。如果你未注册苹果开发者，则需要创建一个Apple ID来下载Xcode。\n\n- 安装[MacPorts](http://www.macports.org/install.php)（安装时间可能会比较长，耐心等待即可）\n\n`注意：` 保证在`/usr/bin`上级路径中已有`/opt/local/bin`路径目录。如果没有，需要在` ~/.bash_profile`文件中添加一下命令\n```java\nexport PATH=/opt/local/bin:$PATH\n```\n`注意：`如果home根目录中不存在.bash_profile 文件，需要手动创建一个。\n\n- 从MacPorts上获取`Git`、`GPG`等包\n```java\n$ POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg\n```\n如果Mac系统版本为OS X v10.4，还需要安装`bison `\n```java\n$ POSIXLY_CORRECT=1 sudo port install bison\n```\n对于版本`ICS`（ Ice Cream Sandwich (4.0.x)）之前的Android，使用 gmake 3.82版本会有阻止android源码编译的bug，安装时请安装最新的gmake或者通过以下几步安装`3.81`版本。\n\n1. 编辑`/opt/local/etc/macports/sources.conf`，添加一行\n```java\nfile:///Users/Shared/dports\n```\n2. 在远程同步之前，创建目录\n```java\n$ mkdir /Users/Shared/dports\n```\n3. 在新的dports目录中运行\n```java\n$ portindex /Users/Shared/dports\n```\n4. 最后安装旧版本的gmake\n```java\n$ sudo port install gmake @3.81\n```\n#### 4、解除文件限制\n默认情况下，Mac系统限制了同时打开文件数，会限制编译进程的执行；在 ~/.bash_profile文件中添加以下命令来取消限制：\n```java\n# set the number of open files to be 1024\nulimit -S -n 1024\n```\n#### 5、自定义配置（可选）\n使用`ccache `编译工具来加速`rebuilds `。如果你经常用`make clean `命令或切换不同开发版本，`ccache`很有用。\n- 在.bashrc（或类似）文件中加入下面命令\n```java\nexport USE_CCACHE=1\n```\n默认情况`cache `会被存储在~/.ccache中。如果你的home目录在NFS或其他非本地文件系统上，你也可以在.bashrc文件中指定cache目录\n```java\nexport CCACHE_DIR=<path-to-your-cache-directory>\n```\n建议缓存的大小为50-100GB，下载源码后需要先执行下面的命令\n```java\nprebuilts/misc/linux-x86/ccache/ccache -M 50G\n```\n如果是Mac系统，应该用darwin-x86来替换linux-x86\n```java\nprebuilts/misc/darwin-x86/ccache/ccache -M 50G\n```\n当编译` Ice Cream Sandwich (4.0.x)`及之前版本时，`ccache `则在不同的位置：\n```java\nprebuilt/linux-x86/ccache/ccache -M 50G\n```\n设置存储在CCACHE_DIR中，并且为持久化状态。\n#### 二、下载源码\n配置好开发环境后，就可以进行源码下载了。因为国内网络环境，国内开发者建议通过[清华AOSP](https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/)来下载AOSP。用清华AOSP时建议用`repo git`来下载源码。\n##### 1.安装Repo\nRepo是一个辅助Git管理Android版本及分支的工具.在安装repo前,需要新建一个文件夹~/bin(名字可随意定)并把这个文件夹放到PATH环境变量里,然后我们就可以把repo下载到这个文件夹里.\n- 保证你在home目录中有`bin/`的目录并且包含在你的路径中\n```java\n$ mkdir ~/bin\n$ PATH=~/bin:$PATH\n```\n- 下载Repo工具并保证可以执行\n```java\n$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n$ chmod a+x ~/bin/repo\n```\n- 建立工作目录（目录可以是任意指定的 ，Mac可以在挂载`Disk Image`中创建目录）\n```java\nmkdir WORKING_DIRECTORY\ncd WORKING_DIRECTORY\n```\n- 配置Git的name 和 email。为了使用Gerrit Code-review工具，需要一个注册[Google账号](https://www.google.com/accounts)的email，保证email是激活状态能够收取到消息。(若为清华AOSP，Email随意)\n```java\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"you@example.com\"\n```\n- 运行`repo init`来初始化代码仓库。必须为manifest指定一个URL，指定要下载的远程代码分支\n```java\n$ repo init -u https://android.googlesource.com/platform/manifest\n```\n上面初始的是`master`分支的代码，根据你的Mac系统版本来选择android源码版本，可以为之后编译工具减少不少的麻烦。用`-b`命令来选择分支。因为本文Mac系统版本为 Mac OSX 10.11，所以用的master分支的源码来进行源码学习。具体分支查看[Source Code Tags and Builds](https://source.android.com/source/build-numbers.html#source-code-tags-and-builds)。\n```java\n$ repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.1_r1\n```\n国内开发者可以参考文章[Android 镜像使用帮助](https://lug.ustc.edu.cn/wiki/mirrors/help/aosp)\n\n初始化成功后，会有`Repo is initialized in your working directory`的成功消息了。对应源码根目录会含有对应的`.repo`目录。\n\n- 下载源码：在上面指定`WORKING_DIRECTORY`根目录中用repo sync命令拉取android 源码，并下载到本地，\n```java\n$ repo sync\n```\n下载源码的时间特别漫长,中途可能会发生断开连接的现象。不过下载支持断点续传，停止时再用repo sync命令即可。\n更多关于[Repo command](https://source.android.com/source/developing.html)\n\n#### 三、编译源码\n源码下载完成后就可以进行编译工作了。源码下载成功后，会自动解压缩到`WORKING_DIRECTORY`目录中，如果你下载的源码不是在挂载的android磁盘镜像中，需要将`WORKING_DIRECTORY`中的源码拷贝到`/Volumes/android/`中，进行编译（command+c - command + v 即可）。\n\n- 进入源码根目录\n```java\ncd /Volumes/android\n```\n- 执行envsetup.sh脚本初始化环境\n\t```java\n\t$ source build/envsetup.sh\n\t```\n\t或\n\t```java\n\t$ . build/envsetup.sh\n\t```\n得到类似这面这样的提示信息\n<div>\n<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874157/android/envsetup_sh.jpg\" style=\"width:600px\">\n</div>\n\n- 选择编译的目标\n用`lunch `选择要编译的目标，如：\n```java\n$ lunch aosp_arm-eng\n```\n表示编译后的版本为模拟器的版本。成功后得到类似下面这样的信息\n<div>\n<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874467/android/lunch_build.jpg\" style=\"width:600px\">\n</div>\n\n更多查看[Running Builds](https://source.android.com/source/running.html)\n\n- 开始编译\n```java\n$ make -jN\n```\n其中N代表同时进行的任务数.官方建议任务数设置为线程数的1~2倍,比如我的机器是单CPU,四核,8线程,则最快的构建任务数是8~16。根据不同机器的性能，编译时长会有不同的差异。本文的Mac配置`MacBook Pro (2.2 GHz Intel Core i7/16 GB 1600 MHz DDR3)`编译一个半小时。在编译过程中可能会有因为各种问题而中断编译。在文章[Android源码学习（二）：编译问题总结](http://blog.alexwan1989.com/2016/03/04/Android%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/)中对常遇到的问题进行了总结。\n```java\n**make completed successfully (xx:xx (mm:ss))**\n```\n如果出现以上的提示，恭喜，表示你你已经编译成功。\n\n因为编译时选择的是aosp_arm-eng，所以用的是模拟器来进行调试\n```java\n$ emulator\n```\n模拟器启动很慢，大概10分钟这样模拟器运行成功。有资源的同学建议还是用真机来刷。具体的刷机参考[Flash a Device](https://source.android.com/source/building.html#flash-a-device)，这里就不详细说明了。\n#### 四、查看源码\nMac下查看android源码，这里推荐[Sublime Text](https://www.sublimetext.com/)配合插件还是比较好用的，类似这样\n<div>\n<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457875178/android/sublime_text_android_source.jpg\" style=\"width:650px\">\n</div>\n\n具体可以参考[Android 源码Mac-OSX查看工具Sublime-Text2](http://blog.csdn.net/wangbaochu/article/details/44836661)\n来安装[Package Control插件](https://packagecontrol.io/installation)和CTags Package：\n- 安装Package Control插件\n\t1. 打开控制台：View->show console 或 ctrl + ~\n\t2. 本文用是Sublime Text3 , 输入以下命令\n\t\t```java\n\t\timport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n\t\t```\n- 安装CTags Package\n\n\t1. 首先打开Sublime Text3，右键 -> Preference -> Packages Browse。查看是否已经安装了CTags Package，如果没有则继续下面步骤。\n\t2. 右键 -> Preference -> Package control, 输入\"install package\"，它会找出你可以安装的插件，在列表中选择ctag插件进行安装\n\t3. 修改函数跳转方式: 默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：\n\t\t```java\n\t\tPerference->Package Settings->CTags->Mouse Binding Default->复制全部->粘贴到Perference->Package Settings->CTags->Mouse Binding User\n\t\t```\n\t\t把里面的\"ctrl+shift\"，修改为“command”，这样就可以用“command+左键”跳转了\n\t\t```java\n\t\t[  \n\t\t{  \n\t\t  \"button\": \"button1\",  \n\t\t  \"count\": 1,  \n\t\t  \"press_command\": \"drag_select\",  \n\t\t  \"modifiers\": [“command”],  \n\t\t  \"command\": \"navigate_to_definition\"  \n\t\t},  \n\t\t{\n\t\t  \"button\": \"button2\",  \n\t\t  \"count\": 1,  \n\t\t  \"modifiers\": [\"command\"],  \n\t\t  \"command\": \"jump_prev\"  \n\t\t}  \n\t\t]\t  \n\t\t```\n- 导入Android 源码工程\n\n\t1. 在Sublime Text3工具栏点击 Project->Open Project, 选择Android源码根目录作为工程导入\n\t2. 右键点击Side Bar中android 源码根目录，右键-> CTgas: Rebuild Tags, 创建索引\n\t3. 接下来就利用快捷键浏览代码了：\n\t\t```java\n\t\tCommand+P：查找文件\n\t\tCommand+R：查找方法\n\t\tCommand+左键：文件或函数跳转        \n\t\tCommand+右键：返回文件或函数跳转的原始位置\n\t\t```\n","slug":"Android源码学习（一）","published":1,"updated":"2016-04-12T07:44:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dy9001gc0m3evigzc3z","content":"<p><a href=\"https://source.android.com/source/initializing.html#setting-up-a-mac-os-x-build-environment\" target=\"_blank\" rel=\"external\">官网教程</a></p>\n<p><a href=\"http://iluhcm.com/2015/08/18/compile-newest-android-source-code-on-macosx/\" target=\"_blank\" rel=\"external\">Mac OS X 10.10.3下android-5.1.1_r9 源码下载与编译</a></p>\n<p><a href=\"https://medium.com/@raminmahmoodi/build-android-5-0-lollipop-on-osx-10-10-yosemite-441bd00ee77a#.vxeycv4xr\" target=\"_blank\" rel=\"external\">Build Android 5.0 Lollipop on OSX 10.10 Yosemite</a></p>\n<p><a href=\"http://www.liball.me/mac-10-10-build-android-4-4-4-for-nexus/\" target=\"_blank\" rel=\"external\">Mac 10.10 编译android 4.4.4 for nexus</a></p>\n<p><a href=\"http://llzz.me/2015/06/17/Build-Android-5-0-Source/\" target=\"_blank\" rel=\"external\">Build Android 5.0 Source</a></p>\n<h4 id=\"一、Mac-OSX-开发环境搭建\"><a href=\"#一、Mac-OSX-开发环境搭建\" class=\"headerlink\" title=\"一、Mac OSX 开发环境搭建\"></a>一、Mac OSX 开发环境搭建</h4><p>本文的Mac OSX的版本为 <code>OSX 10.11</code></p>\n<p>默认情况下，MacOs系统是大小写保留，但大小写不敏感的文件系统。这种文件系统不被git支持，会引起git一些命令行行为不正常，如 <code>git status</code>。因此建议将ASOP源码文件放在一个大小写敏感的工作环境中。可以使用磁盘镜像来建立一个这样的文件系统。</p>\n<h4 id=\"1、创建磁盘文件\"><a href=\"#1、创建磁盘文件\" class=\"headerlink\" title=\"1、创建磁盘文件\"></a>1、创建磁盘文件</h4><p>在MacOs系统中使用磁盘镜像创建一个大小写敏感的文件系统很简单。打开Mac自带的磁盘工具（Disk Utility），选择<code>New Image</code>，分配至少26G大小的空间；稍微大一点的空间可能会更好如<code>50G</code>。保证选择格式为<code>OSX 扩展（区分大小写，日志式）</code>的卷。</p>\n<div><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457867135/android/android_disk_img.jpg\" style=\"height:350px\"><br></div>\n\n<p>也可以通过shell命令行来创建磁盘镜像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hdiutil create -type SPARSE -fs <span class=\"string\">'Case-sensitive Journaled HFS+'</span> -size <span class=\"number\">50</span>g ~/android.dmg</div></pre></td></tr></table></figure>\n<p>上面的命令行会创建一个<code>.dmg</code>（或<code>.dmg.sparseimage</code>）格式文件。以后可以用这个镜像来作为Android 开发环境的磁盘。<br>之后，如果需要更大的磁盘空间，可以用下面的命令行来改变磁盘镜像的大小<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># hdiutil resize -size &lt;new-size-you-want&gt;g ~/android.dmg.sparseimage</div></pre></td></tr></table></figure></p>\n<p>对于名称为<code>android.dmg</code>的磁盘镜像，可以在<code>~/.bash_profile</code>文件中加入下面的辅助<code>function</code>来启动你的磁盘镜像</p>\n<ul>\n<li><p>当执行<code>mountAndroid</code>时挂载镜像</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># mount the android file image</div><div class=\"line\">function mountAndroid &#123; hdiutil attach ~/android.dmg -mountpoint /Volumes/android; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>umountAndroid</code>卸载镜像</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># unmount the android file image</div><div class=\"line\">function umountAndroid() &#123; hdiutil detach /Volumes/android; &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>镜像文件的地址要视你的本地具体的镜像的位置（本地的镜像地址在home的根目录中）。<br>磁盘镜像创建完毕</p>\n<h4 id=\"2、安装配置JDK\"><a href=\"#2、安装配置JDK\" class=\"headerlink\" title=\"2、安装配置JDK\"></a>2、安装配置JDK</h4><p>在安装和配置JDK的时候要根据你的Mac 系统的版本来决定你要选择的JDK版本和要编译的Android Source的分支（branch）。</p>\n<ul>\n<li><code>master</code>分支的<a href=\"https://android.googlesource.com/\" target=\"_blank\" rel=\"external\">AOSP</a>需要Java 8.x 对应的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html#jdk-8u45-oth-JPR\" target=\"_blank\" rel=\"external\">JDK 1.8</a></li>\n<li><code>5.0.x</code>分支的AOSP需要Java 7对应的版本<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR\" target=\"_blank\" rel=\"external\">JDK 1.7</a></li>\n<li><code>Gingerbread</code>到<code>KitKat</code>版本之间的Android版本需要下载安装Java 6 对应的 <a href=\"http://support.apple.com/kb/dl1572\" target=\"_blank\" rel=\"external\">Java JDK</a></li>\n</ul>\n<h5 id=\"1-Master分支\"><a href=\"#1-Master分支\" class=\"headerlink\" title=\"1) Master分支\"></a>1) Master分支</h5><p>为了在Mac上编译最新的源码，需要运行<code>Mac OS X v10.10 (Yosemite)</code>或<code>更新</code>版本的Mac，和对应的<code>Xcode 4.5.2</code>及以上版本的Command Line Tools。</p>\n<h5 id=\"2-6-0-x分支\"><a href=\"#2-6-0-x分支\" class=\"headerlink\" title=\"2) 6.0.x分支\"></a>2) 6.0.x分支</h5><p>编译 6.0.x的AOSP 源码，需要系统版本为<code>Mac OS X v10.10 (Yosemite)</code>的Mac，和对应版本为<code>Xcode 4.5.2</code>与<code>Command Line Tools</code></p>\n<h5 id=\"3-5-0-x分支\"><a href=\"#3-5-0-x分支\" class=\"headerlink\" title=\"3) 5.0.x分支\"></a>3) 5.0.x分支</h5><p>编译 5.0.x的AOSP 源码，需要系统版本为<code>Mac OS X v10.8 (Mountain Lion)</code>的Mac，和对应版本为<code>Xcode 4.5.2</code>与<code>Command Line Tools</code></p>\n<h5 id=\"4-4-4-x分支\"><a href=\"#4-4-4-x分支\" class=\"headerlink\" title=\"4) 4.4.x分支\"></a>4) 4.4.x分支</h5><p>编译 4.4.x的AOSP 源码，需要系统版本为<code>Mac OS X v10.6 (Snow Leopard)</code>或<code>Mac OS X v10.7 (Lion)</code>的Mac，和对应版本为<code>Xcode 4.2</code>与<code>Command Line Tools</code>。</p>\n<h5 id=\"5-4-0-x以及更早的分支\"><a href=\"#5-4-0-x以及更早的分支\" class=\"headerlink\" title=\"5) 4.0.x以及更早的分支\"></a>5) 4.0.x以及更早的分支</h5><p>对于4.0.x以及更早版本的分支，需要系统版本为<code>Mac OS X v10.5 (Leopard)</code>或<code>Mac OS X v10.6 (Snow Leopard)</code>的Mac，同时要有<code>Mac OS X v10.5 SDK</code>的支持</p>\n<h4 id=\"3、安装需求工具\"><a href=\"#3、安装需求工具\" class=\"headerlink\" title=\"3、安装需求工具\"></a>3、安装需求工具</h4><ul>\n<li>安装Xcode</li>\n</ul>\n<p>从<a href=\"https://developer.apple.com/resources/cn/\" target=\"_blank\" rel=\"external\">Apple Developer</a>网站来安装Xcode。建议<code>3.1.4</code>版本及以上的Xcode。版本<code>4.x</code>可能会引起一些问题。如果你未注册苹果开发者，则需要创建一个Apple ID来下载Xcode。</p>\n<ul>\n<li>安装<a href=\"http://www.macports.org/install.php\" target=\"_blank\" rel=\"external\">MacPorts</a>（安装时间可能会比较长，耐心等待即可）</li>\n</ul>\n<p><code>注意：</code> 保证在<code>/usr/bin</code>上级路径中已有<code>/opt/local/bin</code>路径目录。如果没有，需要在<code>~/.bash_profile</code>文件中添加一下命令<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=/opt/local/bin:$PATH</div></pre></td></tr></table></figure></p>\n<p><code>注意：</code>如果home根目录中不存在.bash_profile 文件，需要手动创建一个。</p>\n<ul>\n<li>从MacPorts上获取<code>Git</code>、<code>GPG</code>等包<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ POSIXLY_CORRECT=<span class=\"number\">1</span> sudo port install gmake libsdl git gnupg</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果Mac系统版本为OS X v10.4，还需要安装<code>bison</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ POSIXLY_CORRECT=<span class=\"number\">1</span> sudo port install bison</div></pre></td></tr></table></figure></p>\n<p>对于版本<code>ICS</code>（ Ice Cream Sandwich (4.0.x)）之前的Android，使用 gmake 3.82版本会有阻止android源码编译的bug，安装时请安装最新的gmake或者通过以下几步安装<code>3.81</code>版本。</p>\n<ol>\n<li><p>编辑<code>/opt/local/etc/macports/sources.conf</code>，添加一行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">file:<span class=\"comment\">///Users/Shared/dports</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在远程同步之前，创建目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /Users/Shared/dports</div></pre></td></tr></table></figure>\n</li>\n<li><p>在新的dports目录中运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ portindex /Users/Shared/dports</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后安装旧版本的gmake</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo port install gmake @<span class=\"number\">3.81</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"4、解除文件限制\"><a href=\"#4、解除文件限制\" class=\"headerlink\" title=\"4、解除文件限制\"></a>4、解除文件限制</h4><p>默认情况下，Mac系统限制了同时打开文件数，会限制编译进程的执行；在 ~/.bash_profile文件中添加以下命令来取消限制：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># set the number of open files to be 1024</div><div class=\"line\">ulimit -S -n 1024</div></pre></td></tr></table></figure></p>\n<h4 id=\"5、自定义配置（可选）\"><a href=\"#5、自定义配置（可选）\" class=\"headerlink\" title=\"5、自定义配置（可选）\"></a>5、自定义配置（可选）</h4><p>使用<code>ccache</code>编译工具来加速<code>rebuilds</code>。如果你经常用<code>make clean</code>命令或切换不同开发版本，<code>ccache</code>很有用。</p>\n<ul>\n<li>在.bashrc（或类似）文件中加入下面命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export USE_CCACHE=<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>默认情况<code>cache</code>会被存储在~/.ccache中。如果你的home目录在NFS或其他非本地文件系统上，你也可以在.bashrc文件中指定cache目录<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export CCACHE_DIR=&lt;path-to-your-cache-directory&gt;</div></pre></td></tr></table></figure></p>\n<p>建议缓存的大小为50-100GB，下载源码后需要先执行下面的命令<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/misc/linux-x86/ccache/ccache -M <span class=\"number\">50</span>G</div></pre></td></tr></table></figure></p>\n<p>如果是Mac系统，应该用darwin-x86来替换linux-x86<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/misc/darwin-x86/ccache/ccache -M <span class=\"number\">50</span>G</div></pre></td></tr></table></figure></p>\n<p>当编译<code>Ice Cream Sandwich (4.0.x)</code>及之前版本时，<code>ccache</code>则在不同的位置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilt/linux-x86/ccache/ccache -M <span class=\"number\">50</span>G</div></pre></td></tr></table></figure></p>\n<p>设置存储在CCACHE_DIR中，并且为持久化状态。</p>\n<h4 id=\"二、下载源码\"><a href=\"#二、下载源码\" class=\"headerlink\" title=\"二、下载源码\"></a>二、下载源码</h4><p>配置好开发环境后，就可以进行源码下载了。因为国内网络环境，国内开发者建议通过<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/\" target=\"_blank\" rel=\"external\">清华AOSP</a>来下载AOSP。用清华AOSP时建议用<code>repo git</code>来下载源码。</p>\n<h5 id=\"1-安装Repo\"><a href=\"#1-安装Repo\" class=\"headerlink\" title=\"1.安装Repo\"></a>1.安装Repo</h5><p>Repo是一个辅助Git管理Android版本及分支的工具.在安装repo前,需要新建一个文件夹~/bin(名字可随意定)并把这个文件夹放到PATH环境变量里,然后我们就可以把repo下载到这个文件夹里.</p>\n<ul>\n<li><p>保证你在home目录中有<code>bin/</code>的目录并且包含在你的路径中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir ~/bin</div><div class=\"line\">$ PATH=~/bin:$PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载Repo工具并保证可以执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl https:<span class=\"comment\">//storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span></div><div class=\"line\">$ chmod a+x ~/bin/repo</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立工作目录（目录可以是任意指定的 ，Mac可以在挂载<code>Disk Image</code>中创建目录）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir WORKING_DIRECTORY</div><div class=\"line\">cd WORKING_DIRECTORY</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置Git的name 和 email。为了使用Gerrit Code-review工具，需要一个注册<a href=\"https://www.google.com/accounts\" target=\"_blank\" rel=\"external\">Google账号</a>的email，保证email是激活状态能够收取到消息。(若为清华AOSP，Email随意)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"you@example.com\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>运行<code>repo init</code>来初始化代码仓库。必须为manifest指定一个URL，指定要下载的远程代码分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ repo init -u https:<span class=\"comment\">//android.googlesource.com/platform/manifest</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面初始的是<code>master</code>分支的代码，根据你的Mac系统版本来选择android源码版本，可以为之后编译工具减少不少的麻烦。用<code>-b</code>命令来选择分支。因为本文Mac系统版本为 Mac OSX 10.11，所以用的master分支的源码来进行源码学习。具体分支查看<a href=\"https://source.android.com/source/build-numbers.html#source-code-tags-and-builds\" target=\"_blank\" rel=\"external\">Source Code Tags and Builds</a>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ repo init -u https:<span class=\"comment\">//android.googlesource.com/platform/manifest -b android-4.0.1_r1</span></div></pre></td></tr></table></figure></p>\n<p>国内开发者可以参考文章<a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/aosp\" target=\"_blank\" rel=\"external\">Android 镜像使用帮助</a></p>\n<p>初始化成功后，会有<code>Repo is initialized in your working directory</code>的成功消息了。对应源码根目录会含有对应的<code>.repo</code>目录。</p>\n<ul>\n<li>下载源码：在上面指定<code>WORKING_DIRECTORY</code>根目录中用repo sync命令拉取android 源码，并下载到本地，<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ repo sync</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下载源码的时间特别漫长,中途可能会发生断开连接的现象。不过下载支持断点续传，停止时再用repo sync命令即可。<br>更多关于<a href=\"https://source.android.com/source/developing.html\" target=\"_blank\" rel=\"external\">Repo command</a></p>\n<h4 id=\"三、编译源码\"><a href=\"#三、编译源码\" class=\"headerlink\" title=\"三、编译源码\"></a>三、编译源码</h4><p>源码下载完成后就可以进行编译工作了。源码下载成功后，会自动解压缩到<code>WORKING_DIRECTORY</code>目录中，如果你下载的源码不是在挂载的android磁盘镜像中，需要将<code>WORKING_DIRECTORY</code>中的源码拷贝到<code>/Volumes/android/</code>中，进行编译（command+c - command + v 即可）。</p>\n<ul>\n<li><p>进入源码根目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /Volumes/android</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行envsetup.sh脚本初始化环境</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ source build/envsetup.sh</div></pre></td></tr></table></figure>\n<p>  或</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ . build/envsetup.sh</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>得到类似这面这样的提示信息</p>\n<div><br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874157/android/envsetup_sh.jpg\" style=\"width:600px\"><br></div>\n\n<ul>\n<li>选择编译的目标<br>用<code>lunch</code>选择要编译的目标，如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lunch aosp_arm-eng</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>表示编译后的版本为模拟器的版本。成功后得到类似下面这样的信息</p>\n<div><br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874467/android/lunch_build.jpg\" style=\"width:600px\"><br></div>\n\n<p>更多查看<a href=\"https://source.android.com/source/running.html\" target=\"_blank\" rel=\"external\">Running Builds</a></p>\n<ul>\n<li>开始编译<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make -jN</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中N代表同时进行的任务数.官方建议任务数设置为线程数的1~2倍,比如我的机器是单CPU,四核,8线程,则最快的构建任务数是8~16。根据不同机器的性能，编译时长会有不同的差异。本文的Mac配置<code>MacBook Pro (2.2 GHz Intel Core i7/16 GB 1600 MHz DDR3)</code>编译一个半小时。在编译过程中可能会有因为各种问题而中断编译。在文章<a href=\"http://blog.alexwan1989.com/2016/03/04/Android%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"external\">Android源码学习（二）：编译问题总结</a>中对常遇到的问题进行了总结。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**<span class=\"function\">make completed <span class=\"title\">successfully</span> <span class=\"params\">(xx:xx (mm:ss)</span>)**</span></div></pre></td></tr></table></figure></p>\n<p>如果出现以上的提示，恭喜，表示你你已经编译成功。</p>\n<p>因为编译时选择的是aosp_arm-eng，所以用的是模拟器来进行调试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ emulator</div></pre></td></tr></table></figure></p>\n<p>模拟器启动很慢，大概10分钟这样模拟器运行成功。有资源的同学建议还是用真机来刷。具体的刷机参考<a href=\"https://source.android.com/source/building.html#flash-a-device\" target=\"_blank\" rel=\"external\">Flash a Device</a>，这里就不详细说明了。</p>\n<h4 id=\"四、查看源码\"><a href=\"#四、查看源码\" class=\"headerlink\" title=\"四、查看源码\"></a>四、查看源码</h4><p>Mac下查看android源码，这里推荐<a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">Sublime Text</a>配合插件还是比较好用的，类似这样</p>\n<div><br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457875178/android/sublime_text_android_source.jpg\" style=\"width:650px\"><br></div>\n\n<p>具体可以参考<a href=\"http://blog.csdn.net/wangbaochu/article/details/44836661\" target=\"_blank\" rel=\"external\">Android 源码Mac-OSX查看工具Sublime-Text2</a><br>来安装<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">Package Control插件</a>和CTags Package：</p>\n<ul>\n<li><p>安装Package Control插件</p>\n<ol>\n<li>打开控制台：View-&gt;show console 或 ctrl + ~</li>\n<li>本文用是Sublime Text3 , 输入以下命令 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != <span class=\"function\">h <span class=\"keyword\">else</span> <span class=\"title\">open</span><span class=\"params\">(os.path.join( ipp, pf)</span>, 'wb' ).<span class=\"title\">write</span><span class=\"params\">(by)</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>安装CTags Package</p>\n<ol>\n<li>首先打开Sublime Text3，右键 -&gt; Preference -&gt; Packages Browse。查看是否已经安装了CTags Package，如果没有则继续下面步骤。</li>\n<li>右键 -&gt; Preference -&gt; Package control, 输入”install package”，它会找出你可以安装的插件，在列表中选择ctag插件进行安装</li>\n<li><p>修改函数跳转方式: 默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Perference-&gt;Package Settings-&gt;CTags-&gt;Mouse Binding Default-&gt;复制全部-&gt;粘贴到Perference-&gt;Package Settings-&gt;CTags-&gt;Mouse Binding User</div></pre></td></tr></table></figure>\n<p> 把里面的”ctrl+shift”，修改为“command”，这样就可以用“command+左键”跳转了</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">&#123;  </div><div class=\"line\">  <span class=\"string\">\"button\"</span>: <span class=\"string\">\"button1\"</span>,  </div><div class=\"line\">  <span class=\"string\">\"count\"</span>: <span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"string\">\"press_command\"</span>: <span class=\"string\">\"drag_select\"</span>,  </div><div class=\"line\">  <span class=\"string\">\"modifiers\"</span>: [“command”],  </div><div class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"string\">\"navigate_to_definition\"</span>  </div><div class=\"line\">&#125;,  </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"button\"</span>: <span class=\"string\">\"button2\"</span>,  </div><div class=\"line\">  <span class=\"string\">\"count\"</span>: <span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"string\">\"modifiers\"</span>: [<span class=\"string\">\"command\"</span>],  </div><div class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"string\">\"jump_prev\"</span>  </div><div class=\"line\">&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>导入Android 源码工程</p>\n<ol>\n<li>在Sublime Text3工具栏点击 Project-&gt;Open Project, 选择Android源码根目录作为工程导入</li>\n<li>右键点击Side Bar中android 源码根目录，右键-&gt; CTgas: Rebuild Tags, 创建索引</li>\n<li>接下来就利用快捷键浏览代码了： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Command+P：查找文件</div><div class=\"line\">Command+R：查找方法</div><div class=\"line\">Command+左键：文件或函数跳转        </div><div class=\"line\">Command+右键：返回文件或函数跳转的原始位置</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://source.android.com/source/initializing.html#setting-up-a-mac-os-x-build-environment\" target=\"_blank\" rel=\"external\">官网教程</a></p>\n<p><a href=\"http://iluhcm.com/2015/08/18/compile-newest-android-source-code-on-macosx/\" target=\"_blank\" rel=\"external\">Mac OS X 10.10.3下android-5.1.1_r9 源码下载与编译</a></p>\n<p><a href=\"https://medium.com/@raminmahmoodi/build-android-5-0-lollipop-on-osx-10-10-yosemite-441bd00ee77a#.vxeycv4xr\" target=\"_blank\" rel=\"external\">Build Android 5.0 Lollipop on OSX 10.10 Yosemite</a></p>\n<p><a href=\"http://www.liball.me/mac-10-10-build-android-4-4-4-for-nexus/\" target=\"_blank\" rel=\"external\">Mac 10.10 编译android 4.4.4 for nexus</a></p>\n<p><a href=\"http://llzz.me/2015/06/17/Build-Android-5-0-Source/\" target=\"_blank\" rel=\"external\">Build Android 5.0 Source</a></p>\n<h4 id=\"一、Mac-OSX-开发环境搭建\"><a href=\"#一、Mac-OSX-开发环境搭建\" class=\"headerlink\" title=\"一、Mac OSX 开发环境搭建\"></a>一、Mac OSX 开发环境搭建</h4><p>本文的Mac OSX的版本为 <code>OSX 10.11</code></p>\n<p>默认情况下，MacOs系统是大小写保留，但大小写不敏感的文件系统。这种文件系统不被git支持，会引起git一些命令行行为不正常，如 <code>git status</code>。因此建议将ASOP源码文件放在一个大小写敏感的工作环境中。可以使用磁盘镜像来建立一个这样的文件系统。</p>\n<h4 id=\"1、创建磁盘文件\"><a href=\"#1、创建磁盘文件\" class=\"headerlink\" title=\"1、创建磁盘文件\"></a>1、创建磁盘文件</h4><p>在MacOs系统中使用磁盘镜像创建一个大小写敏感的文件系统很简单。打开Mac自带的磁盘工具（Disk Utility），选择<code>New Image</code>，分配至少26G大小的空间；稍微大一点的空间可能会更好如<code>50G</code>。保证选择格式为<code>OSX 扩展（区分大小写，日志式）</code>的卷。</p>\n<div><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457867135/android/android_disk_img.jpg\" style=\"height:350px\"><br></div>\n\n<p>也可以通过shell命令行来创建磁盘镜像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hdiutil create -type SPARSE -fs <span class=\"string\">'Case-sensitive Journaled HFS+'</span> -size <span class=\"number\">50</span>g ~/android.dmg</div></pre></td></tr></table></figure>\n<p>上面的命令行会创建一个<code>.dmg</code>（或<code>.dmg.sparseimage</code>）格式文件。以后可以用这个镜像来作为Android 开发环境的磁盘。<br>之后，如果需要更大的磁盘空间，可以用下面的命令行来改变磁盘镜像的大小<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># hdiutil resize -size &lt;new-size-you-want&gt;g ~/android.dmg.sparseimage</div></pre></td></tr></table></figure></p>\n<p>对于名称为<code>android.dmg</code>的磁盘镜像，可以在<code>~/.bash_profile</code>文件中加入下面的辅助<code>function</code>来启动你的磁盘镜像</p>\n<ul>\n<li><p>当执行<code>mountAndroid</code>时挂载镜像</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># mount the android file image</div><div class=\"line\">function mountAndroid &#123; hdiutil attach ~/android.dmg -mountpoint /Volumes/android; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>umountAndroid</code>卸载镜像</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># unmount the android file image</div><div class=\"line\">function umountAndroid() &#123; hdiutil detach /Volumes/android; &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>镜像文件的地址要视你的本地具体的镜像的位置（本地的镜像地址在home的根目录中）。<br>磁盘镜像创建完毕</p>\n<h4 id=\"2、安装配置JDK\"><a href=\"#2、安装配置JDK\" class=\"headerlink\" title=\"2、安装配置JDK\"></a>2、安装配置JDK</h4><p>在安装和配置JDK的时候要根据你的Mac 系统的版本来决定你要选择的JDK版本和要编译的Android Source的分支（branch）。</p>\n<ul>\n<li><code>master</code>分支的<a href=\"https://android.googlesource.com/\" target=\"_blank\" rel=\"external\">AOSP</a>需要Java 8.x 对应的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html#jdk-8u45-oth-JPR\" target=\"_blank\" rel=\"external\">JDK 1.8</a></li>\n<li><code>5.0.x</code>分支的AOSP需要Java 7对应的版本<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR\" target=\"_blank\" rel=\"external\">JDK 1.7</a></li>\n<li><code>Gingerbread</code>到<code>KitKat</code>版本之间的Android版本需要下载安装Java 6 对应的 <a href=\"http://support.apple.com/kb/dl1572\" target=\"_blank\" rel=\"external\">Java JDK</a></li>\n</ul>\n<h5 id=\"1-Master分支\"><a href=\"#1-Master分支\" class=\"headerlink\" title=\"1) Master分支\"></a>1) Master分支</h5><p>为了在Mac上编译最新的源码，需要运行<code>Mac OS X v10.10 (Yosemite)</code>或<code>更新</code>版本的Mac，和对应的<code>Xcode 4.5.2</code>及以上版本的Command Line Tools。</p>\n<h5 id=\"2-6-0-x分支\"><a href=\"#2-6-0-x分支\" class=\"headerlink\" title=\"2) 6.0.x分支\"></a>2) 6.0.x分支</h5><p>编译 6.0.x的AOSP 源码，需要系统版本为<code>Mac OS X v10.10 (Yosemite)</code>的Mac，和对应版本为<code>Xcode 4.5.2</code>与<code>Command Line Tools</code></p>\n<h5 id=\"3-5-0-x分支\"><a href=\"#3-5-0-x分支\" class=\"headerlink\" title=\"3) 5.0.x分支\"></a>3) 5.0.x分支</h5><p>编译 5.0.x的AOSP 源码，需要系统版本为<code>Mac OS X v10.8 (Mountain Lion)</code>的Mac，和对应版本为<code>Xcode 4.5.2</code>与<code>Command Line Tools</code></p>\n<h5 id=\"4-4-4-x分支\"><a href=\"#4-4-4-x分支\" class=\"headerlink\" title=\"4) 4.4.x分支\"></a>4) 4.4.x分支</h5><p>编译 4.4.x的AOSP 源码，需要系统版本为<code>Mac OS X v10.6 (Snow Leopard)</code>或<code>Mac OS X v10.7 (Lion)</code>的Mac，和对应版本为<code>Xcode 4.2</code>与<code>Command Line Tools</code>。</p>\n<h5 id=\"5-4-0-x以及更早的分支\"><a href=\"#5-4-0-x以及更早的分支\" class=\"headerlink\" title=\"5) 4.0.x以及更早的分支\"></a>5) 4.0.x以及更早的分支</h5><p>对于4.0.x以及更早版本的分支，需要系统版本为<code>Mac OS X v10.5 (Leopard)</code>或<code>Mac OS X v10.6 (Snow Leopard)</code>的Mac，同时要有<code>Mac OS X v10.5 SDK</code>的支持</p>\n<h4 id=\"3、安装需求工具\"><a href=\"#3、安装需求工具\" class=\"headerlink\" title=\"3、安装需求工具\"></a>3、安装需求工具</h4><ul>\n<li>安装Xcode</li>\n</ul>\n<p>从<a href=\"https://developer.apple.com/resources/cn/\" target=\"_blank\" rel=\"external\">Apple Developer</a>网站来安装Xcode。建议<code>3.1.4</code>版本及以上的Xcode。版本<code>4.x</code>可能会引起一些问题。如果你未注册苹果开发者，则需要创建一个Apple ID来下载Xcode。</p>\n<ul>\n<li>安装<a href=\"http://www.macports.org/install.php\" target=\"_blank\" rel=\"external\">MacPorts</a>（安装时间可能会比较长，耐心等待即可）</li>\n</ul>\n<p><code>注意：</code> 保证在<code>/usr/bin</code>上级路径中已有<code>/opt/local/bin</code>路径目录。如果没有，需要在<code>~/.bash_profile</code>文件中添加一下命令<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=/opt/local/bin:$PATH</div></pre></td></tr></table></figure></p>\n<p><code>注意：</code>如果home根目录中不存在.bash_profile 文件，需要手动创建一个。</p>\n<ul>\n<li>从MacPorts上获取<code>Git</code>、<code>GPG</code>等包<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ POSIXLY_CORRECT=<span class=\"number\">1</span> sudo port install gmake libsdl git gnupg</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果Mac系统版本为OS X v10.4，还需要安装<code>bison</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ POSIXLY_CORRECT=<span class=\"number\">1</span> sudo port install bison</div></pre></td></tr></table></figure></p>\n<p>对于版本<code>ICS</code>（ Ice Cream Sandwich (4.0.x)）之前的Android，使用 gmake 3.82版本会有阻止android源码编译的bug，安装时请安装最新的gmake或者通过以下几步安装<code>3.81</code>版本。</p>\n<ol>\n<li><p>编辑<code>/opt/local/etc/macports/sources.conf</code>，添加一行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">file:<span class=\"comment\">///Users/Shared/dports</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在远程同步之前，创建目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /Users/Shared/dports</div></pre></td></tr></table></figure>\n</li>\n<li><p>在新的dports目录中运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ portindex /Users/Shared/dports</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后安装旧版本的gmake</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo port install gmake @<span class=\"number\">3.81</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"4、解除文件限制\"><a href=\"#4、解除文件限制\" class=\"headerlink\" title=\"4、解除文件限制\"></a>4、解除文件限制</h4><p>默认情况下，Mac系统限制了同时打开文件数，会限制编译进程的执行；在 ~/.bash_profile文件中添加以下命令来取消限制：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># set the number of open files to be 1024</div><div class=\"line\">ulimit -S -n 1024</div></pre></td></tr></table></figure></p>\n<h4 id=\"5、自定义配置（可选）\"><a href=\"#5、自定义配置（可选）\" class=\"headerlink\" title=\"5、自定义配置（可选）\"></a>5、自定义配置（可选）</h4><p>使用<code>ccache</code>编译工具来加速<code>rebuilds</code>。如果你经常用<code>make clean</code>命令或切换不同开发版本，<code>ccache</code>很有用。</p>\n<ul>\n<li>在.bashrc（或类似）文件中加入下面命令<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export USE_CCACHE=<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>默认情况<code>cache</code>会被存储在~/.ccache中。如果你的home目录在NFS或其他非本地文件系统上，你也可以在.bashrc文件中指定cache目录<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export CCACHE_DIR=&lt;path-to-your-cache-directory&gt;</div></pre></td></tr></table></figure></p>\n<p>建议缓存的大小为50-100GB，下载源码后需要先执行下面的命令<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/misc/linux-x86/ccache/ccache -M <span class=\"number\">50</span>G</div></pre></td></tr></table></figure></p>\n<p>如果是Mac系统，应该用darwin-x86来替换linux-x86<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/misc/darwin-x86/ccache/ccache -M <span class=\"number\">50</span>G</div></pre></td></tr></table></figure></p>\n<p>当编译<code>Ice Cream Sandwich (4.0.x)</code>及之前版本时，<code>ccache</code>则在不同的位置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilt/linux-x86/ccache/ccache -M <span class=\"number\">50</span>G</div></pre></td></tr></table></figure></p>\n<p>设置存储在CCACHE_DIR中，并且为持久化状态。</p>\n<h4 id=\"二、下载源码\"><a href=\"#二、下载源码\" class=\"headerlink\" title=\"二、下载源码\"></a>二、下载源码</h4><p>配置好开发环境后，就可以进行源码下载了。因为国内网络环境，国内开发者建议通过<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/\" target=\"_blank\" rel=\"external\">清华AOSP</a>来下载AOSP。用清华AOSP时建议用<code>repo git</code>来下载源码。</p>\n<h5 id=\"1-安装Repo\"><a href=\"#1-安装Repo\" class=\"headerlink\" title=\"1.安装Repo\"></a>1.安装Repo</h5><p>Repo是一个辅助Git管理Android版本及分支的工具.在安装repo前,需要新建一个文件夹~/bin(名字可随意定)并把这个文件夹放到PATH环境变量里,然后我们就可以把repo下载到这个文件夹里.</p>\n<ul>\n<li><p>保证你在home目录中有<code>bin/</code>的目录并且包含在你的路径中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir ~/bin</div><div class=\"line\">$ PATH=~/bin:$PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载Repo工具并保证可以执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl https:<span class=\"comment\">//storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span></div><div class=\"line\">$ chmod a+x ~/bin/repo</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立工作目录（目录可以是任意指定的 ，Mac可以在挂载<code>Disk Image</code>中创建目录）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir WORKING_DIRECTORY</div><div class=\"line\">cd WORKING_DIRECTORY</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置Git的name 和 email。为了使用Gerrit Code-review工具，需要一个注册<a href=\"https://www.google.com/accounts\" target=\"_blank\" rel=\"external\">Google账号</a>的email，保证email是激活状态能够收取到消息。(若为清华AOSP，Email随意)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"you@example.com\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>运行<code>repo init</code>来初始化代码仓库。必须为manifest指定一个URL，指定要下载的远程代码分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ repo init -u https:<span class=\"comment\">//android.googlesource.com/platform/manifest</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面初始的是<code>master</code>分支的代码，根据你的Mac系统版本来选择android源码版本，可以为之后编译工具减少不少的麻烦。用<code>-b</code>命令来选择分支。因为本文Mac系统版本为 Mac OSX 10.11，所以用的master分支的源码来进行源码学习。具体分支查看<a href=\"https://source.android.com/source/build-numbers.html#source-code-tags-and-builds\" target=\"_blank\" rel=\"external\">Source Code Tags and Builds</a>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ repo init -u https:<span class=\"comment\">//android.googlesource.com/platform/manifest -b android-4.0.1_r1</span></div></pre></td></tr></table></figure></p>\n<p>国内开发者可以参考文章<a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/aosp\" target=\"_blank\" rel=\"external\">Android 镜像使用帮助</a></p>\n<p>初始化成功后，会有<code>Repo is initialized in your working directory</code>的成功消息了。对应源码根目录会含有对应的<code>.repo</code>目录。</p>\n<ul>\n<li>下载源码：在上面指定<code>WORKING_DIRECTORY</code>根目录中用repo sync命令拉取android 源码，并下载到本地，<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ repo sync</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下载源码的时间特别漫长,中途可能会发生断开连接的现象。不过下载支持断点续传，停止时再用repo sync命令即可。<br>更多关于<a href=\"https://source.android.com/source/developing.html\" target=\"_blank\" rel=\"external\">Repo command</a></p>\n<h4 id=\"三、编译源码\"><a href=\"#三、编译源码\" class=\"headerlink\" title=\"三、编译源码\"></a>三、编译源码</h4><p>源码下载完成后就可以进行编译工作了。源码下载成功后，会自动解压缩到<code>WORKING_DIRECTORY</code>目录中，如果你下载的源码不是在挂载的android磁盘镜像中，需要将<code>WORKING_DIRECTORY</code>中的源码拷贝到<code>/Volumes/android/</code>中，进行编译（command+c - command + v 即可）。</p>\n<ul>\n<li><p>进入源码根目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /Volumes/android</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行envsetup.sh脚本初始化环境</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ source build/envsetup.sh</div></pre></td></tr></table></figure>\n<p>  或</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ . build/envsetup.sh</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>得到类似这面这样的提示信息</p>\n<div><br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874157/android/envsetup_sh.jpg\" style=\"width:600px\"><br></div>\n\n<ul>\n<li>选择编译的目标<br>用<code>lunch</code>选择要编译的目标，如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lunch aosp_arm-eng</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>表示编译后的版本为模拟器的版本。成功后得到类似下面这样的信息</p>\n<div><br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457874467/android/lunch_build.jpg\" style=\"width:600px\"><br></div>\n\n<p>更多查看<a href=\"https://source.android.com/source/running.html\" target=\"_blank\" rel=\"external\">Running Builds</a></p>\n<ul>\n<li>开始编译<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make -jN</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中N代表同时进行的任务数.官方建议任务数设置为线程数的1~2倍,比如我的机器是单CPU,四核,8线程,则最快的构建任务数是8~16。根据不同机器的性能，编译时长会有不同的差异。本文的Mac配置<code>MacBook Pro (2.2 GHz Intel Core i7/16 GB 1600 MHz DDR3)</code>编译一个半小时。在编译过程中可能会有因为各种问题而中断编译。在文章<a href=\"http://blog.alexwan1989.com/2016/03/04/Android%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"external\">Android源码学习（二）：编译问题总结</a>中对常遇到的问题进行了总结。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**<span class=\"function\">make completed <span class=\"title\">successfully</span> <span class=\"params\">(xx:xx (mm:ss)</span>)**</span></div></pre></td></tr></table></figure></p>\n<p>如果出现以上的提示，恭喜，表示你你已经编译成功。</p>\n<p>因为编译时选择的是aosp_arm-eng，所以用的是模拟器来进行调试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ emulator</div></pre></td></tr></table></figure></p>\n<p>模拟器启动很慢，大概10分钟这样模拟器运行成功。有资源的同学建议还是用真机来刷。具体的刷机参考<a href=\"https://source.android.com/source/building.html#flash-a-device\" target=\"_blank\" rel=\"external\">Flash a Device</a>，这里就不详细说明了。</p>\n<h4 id=\"四、查看源码\"><a href=\"#四、查看源码\" class=\"headerlink\" title=\"四、查看源码\"></a>四、查看源码</h4><p>Mac下查看android源码，这里推荐<a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">Sublime Text</a>配合插件还是比较好用的，类似这样</p>\n<div><br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457875178/android/sublime_text_android_source.jpg\" style=\"width:650px\"><br></div>\n\n<p>具体可以参考<a href=\"http://blog.csdn.net/wangbaochu/article/details/44836661\" target=\"_blank\" rel=\"external\">Android 源码Mac-OSX查看工具Sublime-Text2</a><br>来安装<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">Package Control插件</a>和CTags Package：</p>\n<ul>\n<li><p>安装Package Control插件</p>\n<ol>\n<li>打开控制台：View-&gt;show console 或 ctrl + ~</li>\n<li>本文用是Sublime Text3 , 输入以下命令 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != <span class=\"function\">h <span class=\"keyword\">else</span> <span class=\"title\">open</span><span class=\"params\">(os.path.join( ipp, pf)</span>, 'wb' ).<span class=\"title\">write</span><span class=\"params\">(by)</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>安装CTags Package</p>\n<ol>\n<li>首先打开Sublime Text3，右键 -&gt; Preference -&gt; Packages Browse。查看是否已经安装了CTags Package，如果没有则继续下面步骤。</li>\n<li>右键 -&gt; Preference -&gt; Package control, 输入”install package”，它会找出你可以安装的插件，在列表中选择ctag插件进行安装</li>\n<li><p>修改函数跳转方式: 默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Perference-&gt;Package Settings-&gt;CTags-&gt;Mouse Binding Default-&gt;复制全部-&gt;粘贴到Perference-&gt;Package Settings-&gt;CTags-&gt;Mouse Binding User</div></pre></td></tr></table></figure>\n<p> 把里面的”ctrl+shift”，修改为“command”，这样就可以用“command+左键”跳转了</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">&#123;  </div><div class=\"line\">  <span class=\"string\">\"button\"</span>: <span class=\"string\">\"button1\"</span>,  </div><div class=\"line\">  <span class=\"string\">\"count\"</span>: <span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"string\">\"press_command\"</span>: <span class=\"string\">\"drag_select\"</span>,  </div><div class=\"line\">  <span class=\"string\">\"modifiers\"</span>: [“command”],  </div><div class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"string\">\"navigate_to_definition\"</span>  </div><div class=\"line\">&#125;,  </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"button\"</span>: <span class=\"string\">\"button2\"</span>,  </div><div class=\"line\">  <span class=\"string\">\"count\"</span>: <span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"string\">\"modifiers\"</span>: [<span class=\"string\">\"command\"</span>],  </div><div class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"string\">\"jump_prev\"</span>  </div><div class=\"line\">&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>导入Android 源码工程</p>\n<ol>\n<li>在Sublime Text3工具栏点击 Project-&gt;Open Project, 选择Android源码根目录作为工程导入</li>\n<li>右键点击Side Bar中android 源码根目录，右键-&gt; CTgas: Rebuild Tags, 创建索引</li>\n<li>接下来就利用快捷键浏览代码了： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Command+P：查找文件</div><div class=\"line\">Command+R：查找方法</div><div class=\"line\">Command+左键：文件或函数跳转        </div><div class=\"line\">Command+右键：返回文件或函数跳转的原始位置</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n"},{"title":"Android源码学习（二）：编译问题总结","date":"2016-03-04T02:12:38.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1457059153/android/AOSP1.jpg","_content":"","source":"_posts/Android源码学习：编译过程中的问题.md","raw":"---\ntitle: Android源码学习（二）：编译问题总结\ndate: 2016-03-04 10:12:38\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1457059153/android/AOSP1.jpg\ncategories: Android源码学习系列\ntags: android\n---\n","slug":"Android源码学习：编译过程中的问题","published":1,"updated":"2016-04-12T08:05:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dya001ic0m3fo9i0lua","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android架构：MVP设计模式","date":"2016-01-09T16:17:32.000Z","_content":"[[译]Android开发中的MVP架构\n](http://www.jianshu.com/p/7567ed0d1853?utm_campaign=maleskine&utm_content=note&utm_medium=writer_share&utm_source=weibo)\n\n[用MVP架构开发Android应用](http://kymjs.com/code/2015/11/09/01/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n[一种在android中实现MVP模式的新思路](https://github.com/alexwan1989/android-tech-frontier/blob/master/androidweekly%2F%E4%B8%80%E7%A7%8D%E5%9C%A8android%E4%B8%AD%E5%AE%9E%E7%8E%B0MVP%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B0%E6%80%9D%E8%B7%AF%2Freadme.md)\n### 一、MVP是什么\nMVP代表Model，View和Presenter\n\n1. View层负责处理用户事件和视图部分的展示。在Android中，它可能是Activity或者Fragment类。\n2. Model层负责访问数据。数据可以是远端的Server API，本地数据库或者SharedPreference等。\n3. Presenter层是连接（或适配）View和Model的桥梁。\n\n**核心**\n\t\n高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的。\n\n### 二、分层\n\n#### 1.View/UI Thread\n1. 所有的细节所在\n2. 如数据库细节，Web框架细节，等等\n\t\n#### 2.Presenter/Adapter Controllers\n1. 将Use Case和Entity中的数据转换成格式最方便的数据\n2. 外部系统，如数据库或网页能够方便的使用这些数据\n3. 完全包含GUI的MVC架构\n\n#### 3.UserCase/Business Logic\n1. 包含特定于应用程序的业务规则\n2. 精心编排流入Entity或从Entity流出的数据\n3. 指挥Entity直接使用项目范围内的业务规则，从而实现Use Case的目标\n\n#### 4.Entity/Data(eg. Json，SQL)\n1. 可以是一个持有方法函数的对象\n2. 可以是一组数据结构或方法函数\n3. 它并不重要，能在项目中被不同应用程序使用即可\n\n这些模式的动机都是一样的。那就是如何避免复杂混乱的代码，让执行单元测试变得容易，创造高质量应用程序。\n\n### 三、实现\n#### 1.[AndroidMVP](https://github.com/antoniolg/androidmvp)\n(1).首先需要定义一个View层接口，让View实现类Activity(Fragment)实现\n```java\npublic interface LoginView {\n    public void showProgress();\n    public void hideProgress();\n    public void setUsernameError();\n    public void setPasswordError();\n}\n```\n(2).定义一个Presenter实现接口，让Presenter实现类实现；Presenter中通过构造时传入的视图层对象操作View\n\n`LoginPresenter`\n```java\npublic interface LoginPresenter {\n    void validateCredentials(String username, String password);\n    void onDestroy();\n}\n```\n`LoginPresenterImpl`\n```java\npublic class LoginPresenterImpl implements LoginPresenter, OnLoginFinishedListener {\t\n    private LoginView loginView;\n    ...\n\n    public LoginPresenterImpl(LoginView loginView) {\n        this.loginView = loginView;\n        this.loginInteractor = new LoginInteractorImpl();\n    }\n\t\n    @Override \n    public void validateCredentials(String username, String password) {\n        if (loginView != null) {\n            loginView.showProgress();\n        }\n        loginInteractor.login(username, password, this);\n    }\n\t\n    @Override \n    public void onDestroy() {\n        loginView = null;\n    }\n}\n```\n(3).在View实现类Activity(Fragment)中包含Presenter对象，并在Presenter创建的时候传一个View对象\n```java\npublic class A extends Activity implements LoginView, OnClickListener {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // ...\n        // 省略初始化控件\n        // ...\n        presenter = new LoginPresenterImpl(this);\n    }\n    //...省略众多接口方法\n}\n```\n#### 2. Activity和Fragment\n\nActivity 有一个很复杂的生命周期(fragment的生命周期可能会更复杂), 而这些生命周期很有可能对你项目的业务逻辑有非常重大的影响. Activity 可以获取上下文环境和多种android系统服务. Activity中发送Intent，启动Service和执行FragmentTransisitons等。而这些特性在我看来绝不应该是视图层应该涉及的领域(视图的功能就是现实数据和从用户那里获取输入数据，在理想的情况下，视图应该避免业务逻辑).Activity和Fragment不适合作为View\n\n1. Activity和Fragment作为presenters\n\n(1). 去除所有的view\n\n```java\npublic interface IBaseView {\n    void init(LayoutInflater inflater , ViewGroup viewGroup);\n    View getView();\n}\n```\n(2). 创建一个presenter基类 (Activity)\n```java\npublic abstract class BasePresenterActivity<V extends IBaseView> extends AppCompatActivity {\n    protected V view;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        try {\n            view = getViewClass().newInstance();\n            view.init(getLayoutInflater(), null);\n            setContentView(view.getView());\n            onBindView();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    protected void onDestroy() {\n        onDestroyView();\n        view = null;\n        super.onDestroy();\n    }\n\n    /**\n     * 获取View对应的Class\n     * @return View类\n     */\n    protected abstract Class<V> getViewClass();\n\n    /**\n     * 绑定View\n     */\n    protected void onBindView(){}\n\n    /**\n     * 清除View\n     */\n    protected void onDestroyView(){}\n}\n```\n\n(3). 创建一个基本的presenter(Fragment)\n```java\npublic abstract class BasePresenterFragment<V extends IBaseView> extends Fragment {\n    protected V view;\n    protected TabLayout tabLayout;\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = null;\n        try {\n            this.view = getViewClass().newInstance();\n            this.view.init(inflater , container);\n            view = this.view.getView();\n            onBindView();\n        } catch (java.lang.InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return view;\n    }\n\n    @Override\n    public void onDestroyView() {\n        onDestroyVU();\n        this.view = null;\n        super.onDestroyView();\n    }\n\n    protected void onDestroyVU(){}\n    protected void onBindView(){}\n    protected void setTabLayout(TabLayout tabLayout){};\n    protected abstract Class<V> getViewClass();\n}\n```\n(4). 使用\n```java\n/**\n* MainActivityView\n*/\npublic class IMainActivityView implements IBaseView {\n    private View mView;\n    @Bind(R.id.tool_bar)\n    Toolbar mToolbar;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n    @Bind(R.id.root_layout)\n    CoordinatorLayout mRootLayout;\n    ActionBarDrawerToggle drawerToggle;\n    @Bind(R.id.navigation)\n    NavigationView navigationView;\n    @Bind(R.id.tab_layout)\n    TabLayout tabLayout;\n    @Bind(R.id.fab_btn)\n    FloatingActionButton fabBtn;\n    @Override\n    public void init(LayoutInflater inflater, ViewGroup viewGroup) {\n        mView = inflater.inflate(R.layout.activity_main, viewGroup, false);\n        ButterKnife.bind(this, mView);\n    }\n\n    @Override\n    public View getView() {\n        return mView;\n    }\n\n    /**\n     * 初始化界面\n     *\n     * @param activity activity\n     */\n    public void initViews(final MainActivity activity) {\n        // toolbar\n        activity.setSupportActionBar(mToolbar);\n        ActionBar actionBar = activity.getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayShowHomeEnabled(true);\n            actionBar.setDisplayShowTitleEnabled(true);\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n        // drawer toggle\n        this.drawerToggle = new ActionBarDrawerToggle(activity, mDrawerLayout, R.string.tool_name, R.string.tool_name);\n        drawerToggle.setDrawerIndicatorEnabled(true);\n        mDrawerLayout.setDrawerListener(drawerToggle);\n        navigationView.setCheckedItem(R.id.main_frame);\n        // fragment\n        final HomeFragment homeFragment = new HomeFragment();\n        homeFragment.setTabLayout(tabLayout);\n        final SettingFragment settingFragment = new SettingFragment();\n        final FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();\n        transaction.replace(R.id.frame_layout , homeFragment).commit();\n        // navigation\n        navigationView.setNavigationItemSelectedListener(new OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(MenuItem item) {\n                int id = item.getItemId();\n                mDrawerLayout.closeDrawers();\n                navigationView.setCheckedItem(id);\n                FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();\n                switch (id) {\n                    case R.id.main_frame:\n                        tabLayout.setVisibility(View.VISIBLE);\n                        transaction.replace(R.id.frame_layout , homeFragment).commit();\n                        break;\n                    case R.id.message_frame:\n                        tabLayout.setVisibility(View.GONE);\n                        transaction.replace(R.id.frame_layout , settingFragment).commit();\n                        break;\n                    case R.id.search_frame:\n                        tabLayout.setVisibility(View.GONE);\n                        transaction.replace(R.id.frame_layout , settingFragment).commit();\n                        break;\n                    default:\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n\n    public void onPostCreate() {\n        drawerToggle.syncState();\n    }\n\n    public void onConfigurationChanged(Configuration newConfig) {\n        drawerToggle.onConfigurationChanged(newConfig);\n    }\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n        return drawerToggle.onOptionsItemSelected(item);\n    }\n}\n```\n\nMainActivity继承封装View接口的BasePresenterActivity，实现Presenter具体业务逻辑\n```Java\npublic class MainActivity extends BasePresenterActivity<IMainActivityView> {\n\n    private FragmentTransaction transaction;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        \n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    protected void onBindView() {\n        super.onBindView();\n        view.initViews(this);\n    }\n\n    @Override\n    protected void onDestroyView() {\n        super.onDestroyView();\n    }\n\n    @Override\n    public void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        view.onPostCreate();\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        view.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.navigation_menu , menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if(view.onOptionsItemSelected(item))\n            return true;\n        int id = item.getItemId();\n        switch (id){\n            case R.id.main_frame:\n                transaction.add(new HomeFragment() , \"home_fragment\");\n                break;\n            case R.id.oauth_frame:\n                Intent intent = new Intent(MainActivity.this, WBAuthActivity.class);\n                MainActivity.this.startActivity(intent);\n                break;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    protected Class<IMainActivityView> getViewClass() {\n        return IMainActivityView.class;\n    }\n}\n```\n\nCode：[Github](https://github.com/wangwei1121/iweibo)\n","source":"_posts/Android架构：MVP设计模式.md","raw":"---\ntitle: Android架构：MVP设计模式\ndate: 2016-01-10 00:17:32\ntags:\n---\n[[译]Android开发中的MVP架构\n](http://www.jianshu.com/p/7567ed0d1853?utm_campaign=maleskine&utm_content=note&utm_medium=writer_share&utm_source=weibo)\n\n[用MVP架构开发Android应用](http://kymjs.com/code/2015/11/09/01/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n[一种在android中实现MVP模式的新思路](https://github.com/alexwan1989/android-tech-frontier/blob/master/androidweekly%2F%E4%B8%80%E7%A7%8D%E5%9C%A8android%E4%B8%AD%E5%AE%9E%E7%8E%B0MVP%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B0%E6%80%9D%E8%B7%AF%2Freadme.md)\n### 一、MVP是什么\nMVP代表Model，View和Presenter\n\n1. View层负责处理用户事件和视图部分的展示。在Android中，它可能是Activity或者Fragment类。\n2. Model层负责访问数据。数据可以是远端的Server API，本地数据库或者SharedPreference等。\n3. Presenter层是连接（或适配）View和Model的桥梁。\n\n**核心**\n\t\n高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的。\n\n### 二、分层\n\n#### 1.View/UI Thread\n1. 所有的细节所在\n2. 如数据库细节，Web框架细节，等等\n\t\n#### 2.Presenter/Adapter Controllers\n1. 将Use Case和Entity中的数据转换成格式最方便的数据\n2. 外部系统，如数据库或网页能够方便的使用这些数据\n3. 完全包含GUI的MVC架构\n\n#### 3.UserCase/Business Logic\n1. 包含特定于应用程序的业务规则\n2. 精心编排流入Entity或从Entity流出的数据\n3. 指挥Entity直接使用项目范围内的业务规则，从而实现Use Case的目标\n\n#### 4.Entity/Data(eg. Json，SQL)\n1. 可以是一个持有方法函数的对象\n2. 可以是一组数据结构或方法函数\n3. 它并不重要，能在项目中被不同应用程序使用即可\n\n这些模式的动机都是一样的。那就是如何避免复杂混乱的代码，让执行单元测试变得容易，创造高质量应用程序。\n\n### 三、实现\n#### 1.[AndroidMVP](https://github.com/antoniolg/androidmvp)\n(1).首先需要定义一个View层接口，让View实现类Activity(Fragment)实现\n```java\npublic interface LoginView {\n    public void showProgress();\n    public void hideProgress();\n    public void setUsernameError();\n    public void setPasswordError();\n}\n```\n(2).定义一个Presenter实现接口，让Presenter实现类实现；Presenter中通过构造时传入的视图层对象操作View\n\n`LoginPresenter`\n```java\npublic interface LoginPresenter {\n    void validateCredentials(String username, String password);\n    void onDestroy();\n}\n```\n`LoginPresenterImpl`\n```java\npublic class LoginPresenterImpl implements LoginPresenter, OnLoginFinishedListener {\t\n    private LoginView loginView;\n    ...\n\n    public LoginPresenterImpl(LoginView loginView) {\n        this.loginView = loginView;\n        this.loginInteractor = new LoginInteractorImpl();\n    }\n\t\n    @Override \n    public void validateCredentials(String username, String password) {\n        if (loginView != null) {\n            loginView.showProgress();\n        }\n        loginInteractor.login(username, password, this);\n    }\n\t\n    @Override \n    public void onDestroy() {\n        loginView = null;\n    }\n}\n```\n(3).在View实现类Activity(Fragment)中包含Presenter对象，并在Presenter创建的时候传一个View对象\n```java\npublic class A extends Activity implements LoginView, OnClickListener {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // ...\n        // 省略初始化控件\n        // ...\n        presenter = new LoginPresenterImpl(this);\n    }\n    //...省略众多接口方法\n}\n```\n#### 2. Activity和Fragment\n\nActivity 有一个很复杂的生命周期(fragment的生命周期可能会更复杂), 而这些生命周期很有可能对你项目的业务逻辑有非常重大的影响. Activity 可以获取上下文环境和多种android系统服务. Activity中发送Intent，启动Service和执行FragmentTransisitons等。而这些特性在我看来绝不应该是视图层应该涉及的领域(视图的功能就是现实数据和从用户那里获取输入数据，在理想的情况下，视图应该避免业务逻辑).Activity和Fragment不适合作为View\n\n1. Activity和Fragment作为presenters\n\n(1). 去除所有的view\n\n```java\npublic interface IBaseView {\n    void init(LayoutInflater inflater , ViewGroup viewGroup);\n    View getView();\n}\n```\n(2). 创建一个presenter基类 (Activity)\n```java\npublic abstract class BasePresenterActivity<V extends IBaseView> extends AppCompatActivity {\n    protected V view;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        try {\n            view = getViewClass().newInstance();\n            view.init(getLayoutInflater(), null);\n            setContentView(view.getView());\n            onBindView();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    protected void onDestroy() {\n        onDestroyView();\n        view = null;\n        super.onDestroy();\n    }\n\n    /**\n     * 获取View对应的Class\n     * @return View类\n     */\n    protected abstract Class<V> getViewClass();\n\n    /**\n     * 绑定View\n     */\n    protected void onBindView(){}\n\n    /**\n     * 清除View\n     */\n    protected void onDestroyView(){}\n}\n```\n\n(3). 创建一个基本的presenter(Fragment)\n```java\npublic abstract class BasePresenterFragment<V extends IBaseView> extends Fragment {\n    protected V view;\n    protected TabLayout tabLayout;\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = null;\n        try {\n            this.view = getViewClass().newInstance();\n            this.view.init(inflater , container);\n            view = this.view.getView();\n            onBindView();\n        } catch (java.lang.InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return view;\n    }\n\n    @Override\n    public void onDestroyView() {\n        onDestroyVU();\n        this.view = null;\n        super.onDestroyView();\n    }\n\n    protected void onDestroyVU(){}\n    protected void onBindView(){}\n    protected void setTabLayout(TabLayout tabLayout){};\n    protected abstract Class<V> getViewClass();\n}\n```\n(4). 使用\n```java\n/**\n* MainActivityView\n*/\npublic class IMainActivityView implements IBaseView {\n    private View mView;\n    @Bind(R.id.tool_bar)\n    Toolbar mToolbar;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n    @Bind(R.id.root_layout)\n    CoordinatorLayout mRootLayout;\n    ActionBarDrawerToggle drawerToggle;\n    @Bind(R.id.navigation)\n    NavigationView navigationView;\n    @Bind(R.id.tab_layout)\n    TabLayout tabLayout;\n    @Bind(R.id.fab_btn)\n    FloatingActionButton fabBtn;\n    @Override\n    public void init(LayoutInflater inflater, ViewGroup viewGroup) {\n        mView = inflater.inflate(R.layout.activity_main, viewGroup, false);\n        ButterKnife.bind(this, mView);\n    }\n\n    @Override\n    public View getView() {\n        return mView;\n    }\n\n    /**\n     * 初始化界面\n     *\n     * @param activity activity\n     */\n    public void initViews(final MainActivity activity) {\n        // toolbar\n        activity.setSupportActionBar(mToolbar);\n        ActionBar actionBar = activity.getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayShowHomeEnabled(true);\n            actionBar.setDisplayShowTitleEnabled(true);\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n        // drawer toggle\n        this.drawerToggle = new ActionBarDrawerToggle(activity, mDrawerLayout, R.string.tool_name, R.string.tool_name);\n        drawerToggle.setDrawerIndicatorEnabled(true);\n        mDrawerLayout.setDrawerListener(drawerToggle);\n        navigationView.setCheckedItem(R.id.main_frame);\n        // fragment\n        final HomeFragment homeFragment = new HomeFragment();\n        homeFragment.setTabLayout(tabLayout);\n        final SettingFragment settingFragment = new SettingFragment();\n        final FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();\n        transaction.replace(R.id.frame_layout , homeFragment).commit();\n        // navigation\n        navigationView.setNavigationItemSelectedListener(new OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(MenuItem item) {\n                int id = item.getItemId();\n                mDrawerLayout.closeDrawers();\n                navigationView.setCheckedItem(id);\n                FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();\n                switch (id) {\n                    case R.id.main_frame:\n                        tabLayout.setVisibility(View.VISIBLE);\n                        transaction.replace(R.id.frame_layout , homeFragment).commit();\n                        break;\n                    case R.id.message_frame:\n                        tabLayout.setVisibility(View.GONE);\n                        transaction.replace(R.id.frame_layout , settingFragment).commit();\n                        break;\n                    case R.id.search_frame:\n                        tabLayout.setVisibility(View.GONE);\n                        transaction.replace(R.id.frame_layout , settingFragment).commit();\n                        break;\n                    default:\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n\n    public void onPostCreate() {\n        drawerToggle.syncState();\n    }\n\n    public void onConfigurationChanged(Configuration newConfig) {\n        drawerToggle.onConfigurationChanged(newConfig);\n    }\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n        return drawerToggle.onOptionsItemSelected(item);\n    }\n}\n```\n\nMainActivity继承封装View接口的BasePresenterActivity，实现Presenter具体业务逻辑\n```Java\npublic class MainActivity extends BasePresenterActivity<IMainActivityView> {\n\n    private FragmentTransaction transaction;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        \n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    protected void onBindView() {\n        super.onBindView();\n        view.initViews(this);\n    }\n\n    @Override\n    protected void onDestroyView() {\n        super.onDestroyView();\n    }\n\n    @Override\n    public void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        view.onPostCreate();\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        view.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.navigation_menu , menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if(view.onOptionsItemSelected(item))\n            return true;\n        int id = item.getItemId();\n        switch (id){\n            case R.id.main_frame:\n                transaction.add(new HomeFragment() , \"home_fragment\");\n                break;\n            case R.id.oauth_frame:\n                Intent intent = new Intent(MainActivity.this, WBAuthActivity.class);\n                MainActivity.this.startActivity(intent);\n                break;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    protected Class<IMainActivityView> getViewClass() {\n        return IMainActivityView.class;\n    }\n}\n```\n\nCode：[Github](https://github.com/wangwei1121/iweibo)\n","slug":"Android架构：MVP设计模式","published":1,"updated":"2016-02-01T07:28:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dyg001qc0m35w6tslm2","content":"<p><a href=\"http://www.jianshu.com/p/7567ed0d1853?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo\" target=\"_blank\" rel=\"external\">[译]Android开发中的MVP架构\n</a></p>\n<p><a href=\"http://kymjs.com/code/2015/11/09/01/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">用MVP架构开发Android应用</a></p>\n<p><a href=\"https://github.com/alexwan1989/android-tech-frontier/blob/master/androidweekly%2F%E4%B8%80%E7%A7%8D%E5%9C%A8android%E4%B8%AD%E5%AE%9E%E7%8E%B0MVP%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B0%E6%80%9D%E8%B7%AF%2Freadme.md\" target=\"_blank\" rel=\"external\">一种在android中实现MVP模式的新思路</a></p>\n<h3 id=\"一、MVP是什么\"><a href=\"#一、MVP是什么\" class=\"headerlink\" title=\"一、MVP是什么\"></a>一、MVP是什么</h3><p>MVP代表Model，View和Presenter</p>\n<ol>\n<li>View层负责处理用户事件和视图部分的展示。在Android中，它可能是Activity或者Fragment类。</li>\n<li>Model层负责访问数据。数据可以是远端的Server API，本地数据库或者SharedPreference等。</li>\n<li>Presenter层是连接（或适配）View和Model的桥梁。</li>\n</ol>\n<p><strong>核心</strong></p>\n<p>高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的。</p>\n<h3 id=\"二、分层\"><a href=\"#二、分层\" class=\"headerlink\" title=\"二、分层\"></a>二、分层</h3><h4 id=\"1-View-UI-Thread\"><a href=\"#1-View-UI-Thread\" class=\"headerlink\" title=\"1.View/UI Thread\"></a>1.View/UI Thread</h4><ol>\n<li>所有的细节所在</li>\n<li>如数据库细节，Web框架细节，等等</li>\n</ol>\n<h4 id=\"2-Presenter-Adapter-Controllers\"><a href=\"#2-Presenter-Adapter-Controllers\" class=\"headerlink\" title=\"2.Presenter/Adapter Controllers\"></a>2.Presenter/Adapter Controllers</h4><ol>\n<li>将Use Case和Entity中的数据转换成格式最方便的数据</li>\n<li>外部系统，如数据库或网页能够方便的使用这些数据</li>\n<li>完全包含GUI的MVC架构</li>\n</ol>\n<h4 id=\"3-UserCase-Business-Logic\"><a href=\"#3-UserCase-Business-Logic\" class=\"headerlink\" title=\"3.UserCase/Business Logic\"></a>3.UserCase/Business Logic</h4><ol>\n<li>包含特定于应用程序的业务规则</li>\n<li>精心编排流入Entity或从Entity流出的数据</li>\n<li>指挥Entity直接使用项目范围内的业务规则，从而实现Use Case的目标</li>\n</ol>\n<h4 id=\"4-Entity-Data-eg-Json，SQL\"><a href=\"#4-Entity-Data-eg-Json，SQL\" class=\"headerlink\" title=\"4.Entity/Data(eg. Json，SQL)\"></a>4.Entity/Data(eg. Json，SQL)</h4><ol>\n<li>可以是一个持有方法函数的对象</li>\n<li>可以是一组数据结构或方法函数</li>\n<li>它并不重要，能在项目中被不同应用程序使用即可</li>\n</ol>\n<p>这些模式的动机都是一样的。那就是如何避免复杂混乱的代码，让执行单元测试变得容易，创造高质量应用程序。</p>\n<h3 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h3><h4 id=\"1-AndroidMVP\"><a href=\"#1-AndroidMVP\" class=\"headerlink\" title=\"1.AndroidMVP\"></a>1.<a href=\"https://github.com/antoniolg/androidmvp\" target=\"_blank\" rel=\"external\">AndroidMVP</a></h4><p>(1).首先需要定义一个View层接口，让View实现类Activity(Fragment)实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showProgress</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideProgress</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsernameError</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPasswordError</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2).定义一个Presenter实现接口，让Presenter实现类实现；Presenter中通过构造时传入的视图层对象操作View</p>\n<p><code>LoginPresenter</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginPresenter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">validateCredentials</span><span class=\"params\">(String username, String password)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>LoginPresenterImpl</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginPresenterImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoginPresenter</span>, <span class=\"title\">OnLoginFinishedListener</span> </span>&#123;\t</div><div class=\"line\">    <span class=\"keyword\">private</span> LoginView loginView;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginPresenterImpl</span><span class=\"params\">(LoginView loginView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.loginView = loginView;</div><div class=\"line\">        <span class=\"keyword\">this</span>.loginInteractor = <span class=\"keyword\">new</span> LoginInteractorImpl();</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">validateCredentials</span><span class=\"params\">(String username, String password)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (loginView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            loginView.showProgress();</div><div class=\"line\">        &#125;</div><div class=\"line\">        loginInteractor.login(username, password, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        loginView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3).在View实现类Activity(Fragment)中包含Presenter对象，并在Presenter创建的时候传一个View对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoginView</span>, <span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        <span class=\"comment\">// 省略初始化控件</span></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        presenter = <span class=\"keyword\">new</span> LoginPresenterImpl(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...省略众多接口方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Activity和Fragment\"><a href=\"#2-Activity和Fragment\" class=\"headerlink\" title=\"2. Activity和Fragment\"></a>2. Activity和Fragment</h4><p>Activity 有一个很复杂的生命周期(fragment的生命周期可能会更复杂), 而这些生命周期很有可能对你项目的业务逻辑有非常重大的影响. Activity 可以获取上下文环境和多种android系统服务. Activity中发送Intent，启动Service和执行FragmentTransisitons等。而这些特性在我看来绝不应该是视图层应该涉及的领域(视图的功能就是现实数据和从用户那里获取输入数据，在理想的情况下，视图应该避免业务逻辑).Activity和Fragment不适合作为View</p>\n<ol>\n<li>Activity和Fragment作为presenters</li>\n</ol>\n<p>(1). 去除所有的view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBaseView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(LayoutInflater inflater , ViewGroup viewGroup)</span></span>;</div><div class=\"line\">    <span class=\"function\">View <span class=\"title\">getView</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>(2). 创建一个presenter基类 (Activity)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePresenterActivity</span>&lt;<span class=\"title\">V</span> <span class=\"keyword\">extends</span> <span class=\"title\">IBaseView</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> V view;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            view = getViewClass().newInstance();</div><div class=\"line\">            view.init(getLayoutInflater(), <span class=\"keyword\">null</span>);</div><div class=\"line\">            setContentView(view.getView());</div><div class=\"line\">            onBindView();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        onDestroyView();</div><div class=\"line\">        view = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取View对应的Class</div><div class=\"line\">     * <span class=\"doctag\">@return</span> View类</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Class&lt;V&gt; <span class=\"title\">getViewClass</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 绑定View</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindView</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 清除View</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3). 创建一个基本的presenter(Fragment)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePresenterFragment</span>&lt;<span class=\"title\">V</span> <span class=\"keyword\">extends</span> <span class=\"title\">IBaseView</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> V view;</div><div class=\"line\">    <span class=\"keyword\">protected</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        View view = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.view = getViewClass().newInstance();</div><div class=\"line\">            <span class=\"keyword\">this</span>.view.init(inflater , container);</div><div class=\"line\">            view = <span class=\"keyword\">this</span>.view.getView();</div><div class=\"line\">            onBindView();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (java.lang.InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> view;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        onDestroyVU();</div><div class=\"line\">        <span class=\"keyword\">this</span>.view = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyVU</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindView</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setTabLayout</span><span class=\"params\">(TabLayout tabLayout)</span></span>&#123;&#125;;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Class&lt;V&gt; <span class=\"title\">getViewClass</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4). 使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* MainActivityView</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IMainActivityView</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBaseView</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mView;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.tool_bar)</div><div class=\"line\">    Toolbar mToolbar;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</div><div class=\"line\">    DrawerLayout mDrawerLayout;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.root_layout)</div><div class=\"line\">    CoordinatorLayout mRootLayout;</div><div class=\"line\">    ActionBarDrawerToggle drawerToggle;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation)</div><div class=\"line\">    NavigationView navigationView;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.tab_layout)</div><div class=\"line\">    TabLayout tabLayout;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.fab_btn)</div><div class=\"line\">    FloatingActionButton fabBtn;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(LayoutInflater inflater, ViewGroup viewGroup)</span> </span>&#123;</div><div class=\"line\">        mView = inflater.inflate(R.layout.activity_main, viewGroup, <span class=\"keyword\">false</span>);</div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>, mView);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mView;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化界面</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> activity activity</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">(<span class=\"keyword\">final</span> MainActivity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// toolbar</span></div><div class=\"line\">        activity.setSupportActionBar(mToolbar);</div><div class=\"line\">        ActionBar actionBar = activity.getSupportActionBar();</div><div class=\"line\">        <span class=\"keyword\">if</span> (actionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            actionBar.setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            actionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// drawer toggle</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.drawerToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(activity, mDrawerLayout, R.string.tool_name, R.string.tool_name);</div><div class=\"line\">        drawerToggle.setDrawerIndicatorEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mDrawerLayout.setDrawerListener(drawerToggle);</div><div class=\"line\">        navigationView.setCheckedItem(R.id.main_frame);</div><div class=\"line\">        <span class=\"comment\">// fragment</span></div><div class=\"line\">        <span class=\"keyword\">final</span> HomeFragment homeFragment = <span class=\"keyword\">new</span> HomeFragment();</div><div class=\"line\">        homeFragment.setTabLayout(tabLayout);</div><div class=\"line\">        <span class=\"keyword\">final</span> SettingFragment settingFragment = <span class=\"keyword\">new</span> SettingFragment();</div><div class=\"line\">        <span class=\"keyword\">final</span> FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();</div><div class=\"line\">        transaction.replace(R.id.frame_layout , homeFragment).commit();</div><div class=\"line\">        <span class=\"comment\">// navigation</span></div><div class=\"line\">        navigationView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> OnNavigationItemSelectedListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\">                mDrawerLayout.closeDrawers();</div><div class=\"line\">                navigationView.setCheckedItem(id);</div><div class=\"line\">                FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();</div><div class=\"line\">                <span class=\"keyword\">switch</span> (id) &#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> R.id.main_frame:</div><div class=\"line\">                        tabLayout.setVisibility(View.VISIBLE);</div><div class=\"line\">                        transaction.replace(R.id.frame_layout , homeFragment).commit();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">case</span> R.id.message_frame:</div><div class=\"line\">                        tabLayout.setVisibility(View.GONE);</div><div class=\"line\">                        transaction.replace(R.id.frame_layout , settingFragment).commit();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">case</span> R.id.search_frame:</div><div class=\"line\">                        tabLayout.setVisibility(View.GONE);</div><div class=\"line\">                        transaction.replace(R.id.frame_layout , settingFragment).commit();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        drawerToggle.syncState();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">        drawerToggle.onConfigurationChanged(newConfig);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> drawerToggle.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>MainActivity继承封装View接口的BasePresenterActivity，实现Presenter具体业务逻辑<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenterActivity</span>&lt;<span class=\"title\">IMainActivityView</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentTransaction transaction;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onBindView();</div><div class=\"line\">        view.initViews(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPostCreate(savedInstanceState);</div><div class=\"line\">        view.onPostCreate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</div><div class=\"line\">        view.onConfigurationChanged(newConfig);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        getMenuInflater().inflate(R.menu.navigation_menu , menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCreateOptionsMenu(menu);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(view.onOptionsItemSelected(item))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (id)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.main_frame:</div><div class=\"line\">                transaction.add(<span class=\"keyword\">new</span> HomeFragment() , <span class=\"string\">\"home_fragment\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.oauth_frame:</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, WBAuthActivity.class);</div><div class=\"line\">                MainActivity.<span class=\"keyword\">this</span>.startActivity(intent);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Class&lt;IMainActivityView&gt; <span class=\"title\">getViewClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> IMainActivityView.class;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Code：<a href=\"https://github.com/wangwei1121/iweibo\" target=\"_blank\" rel=\"external\">Github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.jianshu.com/p/7567ed0d1853?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo\" target=\"_blank\" rel=\"external\">[译]Android开发中的MVP架构\n</a></p>\n<p><a href=\"http://kymjs.com/code/2015/11/09/01/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">用MVP架构开发Android应用</a></p>\n<p><a href=\"https://github.com/alexwan1989/android-tech-frontier/blob/master/androidweekly%2F%E4%B8%80%E7%A7%8D%E5%9C%A8android%E4%B8%AD%E5%AE%9E%E7%8E%B0MVP%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B0%E6%80%9D%E8%B7%AF%2Freadme.md\" target=\"_blank\" rel=\"external\">一种在android中实现MVP模式的新思路</a></p>\n<h3 id=\"一、MVP是什么\"><a href=\"#一、MVP是什么\" class=\"headerlink\" title=\"一、MVP是什么\"></a>一、MVP是什么</h3><p>MVP代表Model，View和Presenter</p>\n<ol>\n<li>View层负责处理用户事件和视图部分的展示。在Android中，它可能是Activity或者Fragment类。</li>\n<li>Model层负责访问数据。数据可以是远端的Server API，本地数据库或者SharedPreference等。</li>\n<li>Presenter层是连接（或适配）View和Model的桥梁。</li>\n</ol>\n<p><strong>核心</strong></p>\n<p>高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的。</p>\n<h3 id=\"二、分层\"><a href=\"#二、分层\" class=\"headerlink\" title=\"二、分层\"></a>二、分层</h3><h4 id=\"1-View-UI-Thread\"><a href=\"#1-View-UI-Thread\" class=\"headerlink\" title=\"1.View/UI Thread\"></a>1.View/UI Thread</h4><ol>\n<li>所有的细节所在</li>\n<li>如数据库细节，Web框架细节，等等</li>\n</ol>\n<h4 id=\"2-Presenter-Adapter-Controllers\"><a href=\"#2-Presenter-Adapter-Controllers\" class=\"headerlink\" title=\"2.Presenter/Adapter Controllers\"></a>2.Presenter/Adapter Controllers</h4><ol>\n<li>将Use Case和Entity中的数据转换成格式最方便的数据</li>\n<li>外部系统，如数据库或网页能够方便的使用这些数据</li>\n<li>完全包含GUI的MVC架构</li>\n</ol>\n<h4 id=\"3-UserCase-Business-Logic\"><a href=\"#3-UserCase-Business-Logic\" class=\"headerlink\" title=\"3.UserCase/Business Logic\"></a>3.UserCase/Business Logic</h4><ol>\n<li>包含特定于应用程序的业务规则</li>\n<li>精心编排流入Entity或从Entity流出的数据</li>\n<li>指挥Entity直接使用项目范围内的业务规则，从而实现Use Case的目标</li>\n</ol>\n<h4 id=\"4-Entity-Data-eg-Json，SQL\"><a href=\"#4-Entity-Data-eg-Json，SQL\" class=\"headerlink\" title=\"4.Entity/Data(eg. Json，SQL)\"></a>4.Entity/Data(eg. Json，SQL)</h4><ol>\n<li>可以是一个持有方法函数的对象</li>\n<li>可以是一组数据结构或方法函数</li>\n<li>它并不重要，能在项目中被不同应用程序使用即可</li>\n</ol>\n<p>这些模式的动机都是一样的。那就是如何避免复杂混乱的代码，让执行单元测试变得容易，创造高质量应用程序。</p>\n<h3 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h3><h4 id=\"1-AndroidMVP\"><a href=\"#1-AndroidMVP\" class=\"headerlink\" title=\"1.AndroidMVP\"></a>1.<a href=\"https://github.com/antoniolg/androidmvp\" target=\"_blank\" rel=\"external\">AndroidMVP</a></h4><p>(1).首先需要定义一个View层接口，让View实现类Activity(Fragment)实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showProgress</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideProgress</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsernameError</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPasswordError</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2).定义一个Presenter实现接口，让Presenter实现类实现；Presenter中通过构造时传入的视图层对象操作View</p>\n<p><code>LoginPresenter</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginPresenter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">validateCredentials</span><span class=\"params\">(String username, String password)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>LoginPresenterImpl</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginPresenterImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoginPresenter</span>, <span class=\"title\">OnLoginFinishedListener</span> </span>&#123;\t</div><div class=\"line\">    <span class=\"keyword\">private</span> LoginView loginView;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginPresenterImpl</span><span class=\"params\">(LoginView loginView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.loginView = loginView;</div><div class=\"line\">        <span class=\"keyword\">this</span>.loginInteractor = <span class=\"keyword\">new</span> LoginInteractorImpl();</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">validateCredentials</span><span class=\"params\">(String username, String password)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (loginView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            loginView.showProgress();</div><div class=\"line\">        &#125;</div><div class=\"line\">        loginInteractor.login(username, password, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        loginView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3).在View实现类Activity(Fragment)中包含Presenter对象，并在Presenter创建的时候传一个View对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoginView</span>, <span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        <span class=\"comment\">// 省略初始化控件</span></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        presenter = <span class=\"keyword\">new</span> LoginPresenterImpl(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...省略众多接口方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Activity和Fragment\"><a href=\"#2-Activity和Fragment\" class=\"headerlink\" title=\"2. Activity和Fragment\"></a>2. Activity和Fragment</h4><p>Activity 有一个很复杂的生命周期(fragment的生命周期可能会更复杂), 而这些生命周期很有可能对你项目的业务逻辑有非常重大的影响. Activity 可以获取上下文环境和多种android系统服务. Activity中发送Intent，启动Service和执行FragmentTransisitons等。而这些特性在我看来绝不应该是视图层应该涉及的领域(视图的功能就是现实数据和从用户那里获取输入数据，在理想的情况下，视图应该避免业务逻辑).Activity和Fragment不适合作为View</p>\n<ol>\n<li>Activity和Fragment作为presenters</li>\n</ol>\n<p>(1). 去除所有的view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBaseView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(LayoutInflater inflater , ViewGroup viewGroup)</span></span>;</div><div class=\"line\">    <span class=\"function\">View <span class=\"title\">getView</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>(2). 创建一个presenter基类 (Activity)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePresenterActivity</span>&lt;<span class=\"title\">V</span> <span class=\"keyword\">extends</span> <span class=\"title\">IBaseView</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> V view;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            view = getViewClass().newInstance();</div><div class=\"line\">            view.init(getLayoutInflater(), <span class=\"keyword\">null</span>);</div><div class=\"line\">            setContentView(view.getView());</div><div class=\"line\">            onBindView();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        onDestroyView();</div><div class=\"line\">        view = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取View对应的Class</div><div class=\"line\">     * <span class=\"doctag\">@return</span> View类</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Class&lt;V&gt; <span class=\"title\">getViewClass</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 绑定View</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindView</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 清除View</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3). 创建一个基本的presenter(Fragment)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePresenterFragment</span>&lt;<span class=\"title\">V</span> <span class=\"keyword\">extends</span> <span class=\"title\">IBaseView</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> V view;</div><div class=\"line\">    <span class=\"keyword\">protected</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        View view = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.view = getViewClass().newInstance();</div><div class=\"line\">            <span class=\"keyword\">this</span>.view.init(inflater , container);</div><div class=\"line\">            view = <span class=\"keyword\">this</span>.view.getView();</div><div class=\"line\">            onBindView();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (java.lang.InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> view;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        onDestroyVU();</div><div class=\"line\">        <span class=\"keyword\">this</span>.view = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyVU</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindView</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setTabLayout</span><span class=\"params\">(TabLayout tabLayout)</span></span>&#123;&#125;;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Class&lt;V&gt; <span class=\"title\">getViewClass</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4). 使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* MainActivityView</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IMainActivityView</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBaseView</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mView;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.tool_bar)</div><div class=\"line\">    Toolbar mToolbar;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</div><div class=\"line\">    DrawerLayout mDrawerLayout;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.root_layout)</div><div class=\"line\">    CoordinatorLayout mRootLayout;</div><div class=\"line\">    ActionBarDrawerToggle drawerToggle;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation)</div><div class=\"line\">    NavigationView navigationView;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.tab_layout)</div><div class=\"line\">    TabLayout tabLayout;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.fab_btn)</div><div class=\"line\">    FloatingActionButton fabBtn;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(LayoutInflater inflater, ViewGroup viewGroup)</span> </span>&#123;</div><div class=\"line\">        mView = inflater.inflate(R.layout.activity_main, viewGroup, <span class=\"keyword\">false</span>);</div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>, mView);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mView;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化界面</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> activity activity</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">(<span class=\"keyword\">final</span> MainActivity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// toolbar</span></div><div class=\"line\">        activity.setSupportActionBar(mToolbar);</div><div class=\"line\">        ActionBar actionBar = activity.getSupportActionBar();</div><div class=\"line\">        <span class=\"keyword\">if</span> (actionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            actionBar.setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            actionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// drawer toggle</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.drawerToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(activity, mDrawerLayout, R.string.tool_name, R.string.tool_name);</div><div class=\"line\">        drawerToggle.setDrawerIndicatorEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mDrawerLayout.setDrawerListener(drawerToggle);</div><div class=\"line\">        navigationView.setCheckedItem(R.id.main_frame);</div><div class=\"line\">        <span class=\"comment\">// fragment</span></div><div class=\"line\">        <span class=\"keyword\">final</span> HomeFragment homeFragment = <span class=\"keyword\">new</span> HomeFragment();</div><div class=\"line\">        homeFragment.setTabLayout(tabLayout);</div><div class=\"line\">        <span class=\"keyword\">final</span> SettingFragment settingFragment = <span class=\"keyword\">new</span> SettingFragment();</div><div class=\"line\">        <span class=\"keyword\">final</span> FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();</div><div class=\"line\">        transaction.replace(R.id.frame_layout , homeFragment).commit();</div><div class=\"line\">        <span class=\"comment\">// navigation</span></div><div class=\"line\">        navigationView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> OnNavigationItemSelectedListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\">                mDrawerLayout.closeDrawers();</div><div class=\"line\">                navigationView.setCheckedItem(id);</div><div class=\"line\">                FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();</div><div class=\"line\">                <span class=\"keyword\">switch</span> (id) &#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> R.id.main_frame:</div><div class=\"line\">                        tabLayout.setVisibility(View.VISIBLE);</div><div class=\"line\">                        transaction.replace(R.id.frame_layout , homeFragment).commit();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">case</span> R.id.message_frame:</div><div class=\"line\">                        tabLayout.setVisibility(View.GONE);</div><div class=\"line\">                        transaction.replace(R.id.frame_layout , settingFragment).commit();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">case</span> R.id.search_frame:</div><div class=\"line\">                        tabLayout.setVisibility(View.GONE);</div><div class=\"line\">                        transaction.replace(R.id.frame_layout , settingFragment).commit();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        drawerToggle.syncState();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">        drawerToggle.onConfigurationChanged(newConfig);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> drawerToggle.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>MainActivity继承封装View接口的BasePresenterActivity，实现Presenter具体业务逻辑<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenterActivity</span>&lt;<span class=\"title\">IMainActivityView</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentTransaction transaction;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onBindView();</div><div class=\"line\">        view.initViews(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPostCreate(savedInstanceState);</div><div class=\"line\">        view.onPostCreate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</div><div class=\"line\">        view.onConfigurationChanged(newConfig);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        getMenuInflater().inflate(R.menu.navigation_menu , menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCreateOptionsMenu(menu);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(view.onOptionsItemSelected(item))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (id)&#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.main_frame:</div><div class=\"line\">                transaction.add(<span class=\"keyword\">new</span> HomeFragment() , <span class=\"string\">\"home_fragment\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.oauth_frame:</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, WBAuthActivity.class);</div><div class=\"line\">                MainActivity.<span class=\"keyword\">this</span>.startActivity(intent);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Class&lt;IMainActivityView&gt; <span class=\"title\">getViewClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> IMainActivityView.class;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Code：<a href=\"https://github.com/wangwei1121/iweibo\" target=\"_blank\" rel=\"external\">Github</a></p>\n"},{"title":"Android图片加载框架：Picasso（一）","date":"2016-01-28T03:46:43.000Z","_content":"[Picasso](http://square.github.io/picasso/)\n[Picasso JavaDoc](http://square.github.io/picasso/2.x/picasso/)\n[Picasso stackOverflow](http://stackoverflow.com/questions/tagged/picasso?sort=active)\n### 一、介绍\n在Android开发中的视觉显示上，图片占有很大的比重。Picasso可以只使用一行代码来解决图片加载的问题。\n```java\nPicasso.with(context).load(\"http://i.imgur.com/DvpvklR.png\").into(imageView);\n```\nPicasso 可以极大减少Android开发过程中的加载图片的问题：\n- 解决`ImageView `回收和`Adapter`下载取消的问题。\n- 使用最小的内存来处理图片转换问题\n- 自动的磁盘和内存缓存\n\n### 二、特性\n1、Adapter 图片加载\nadapter自动检测是否重用图片，是否取消之前图片的加载。\n```java\n@Override \npublic void getView(int position, View convertView, ViewGroup parent) {\n    SquaredImageView view = (SquaredImageView) convertView;\n    if (view == null) {\n        view = new SquaredImageView(context);\n    }\n    String url = getItem(position);\n    Picasso.with(context).load(url).into(view);\n}\n```\n\n2.图片转换\n\n(1) 转换图片来满足Layout的合适大小以降低内存。\n```java\nPicasso.with(context)\n  .load(url)\n  .resize(50, 50)\n  .centerCrop()\n  .into(imageView)\n```\n(2) 指定自定义的变换适应更多的效果\n```java\npublic class CropSquareTransformation implements Transformation {\n    @Override\n    public Bitmap transform(Bitmap source) {\n        int size = Math.min(source.getWidth(), source.getHeight());\n        int x = (source.getWidth() - size) / 2;\n        int y = (source.getHeight() - size) / 2;\n        Bitmap result = Bitmap.createBitmap(source, x, y, size, size);\n        if (result != source) {\n            source.recycle();\n        }\n        return result;\n    }\n\n    @Override \n    public String key() { \n        return \"square()\"; \n    }\n}\n返回值指定的对象给`transform`方法\n```\n3.Place Holders\nPicasso支持设置默认和加载错误图片\n```java\nPicasso.with(context)\n    .load(url)\n    .placeholder(R.drawable.user_placeholder)\n    .error(R.drawable.user_placeholder_error)\n    .into(imageView);\n```\n在显示加载错误的图片之前会尝试请求三次指定图片的地址。\n\n4.资源加载\nPicasso支持Resources，assets，files，content providers 等图片资源\n```java\nPicasso.with(context).load(R.drawable.landing_screen).into(imageView1);\nPicasso.with(context).load(\"file:///android_asset/DvpvklR.png\").into(imageView2);\nPicasso.with(context).load(new File(...)).into(imageView3);\n```\n5.Debug指示器\n作为开发者，可以设置是否使用颜色指示器来显示加载图片的来源：网络、磁盘、内存。\n```java\n// Picasso instance\nsetIndicatorsEnabled(true)\n```\n6.配置\n\n- maven\n\n```xml\n<dependency>\n  <groupId>com.squareup.picasso</groupId>\n  <artifactId>picasso</artifactId>\n  <version>2.5.2</version>\n</dependency>\n```\n- gradle\n\n```java\ncompile 'com.squareup.picasso:picasso:2.5.2'\n```","source":"_posts/Android图片加载框架：Picasso（一）.md","raw":"---\ntitle: Android图片加载框架：Picasso（一）\ndate: 2016-01-28 11:46:43\ntags:\n---\n[Picasso](http://square.github.io/picasso/)\n[Picasso JavaDoc](http://square.github.io/picasso/2.x/picasso/)\n[Picasso stackOverflow](http://stackoverflow.com/questions/tagged/picasso?sort=active)\n### 一、介绍\n在Android开发中的视觉显示上，图片占有很大的比重。Picasso可以只使用一行代码来解决图片加载的问题。\n```java\nPicasso.with(context).load(\"http://i.imgur.com/DvpvklR.png\").into(imageView);\n```\nPicasso 可以极大减少Android开发过程中的加载图片的问题：\n- 解决`ImageView `回收和`Adapter`下载取消的问题。\n- 使用最小的内存来处理图片转换问题\n- 自动的磁盘和内存缓存\n\n### 二、特性\n1、Adapter 图片加载\nadapter自动检测是否重用图片，是否取消之前图片的加载。\n```java\n@Override \npublic void getView(int position, View convertView, ViewGroup parent) {\n    SquaredImageView view = (SquaredImageView) convertView;\n    if (view == null) {\n        view = new SquaredImageView(context);\n    }\n    String url = getItem(position);\n    Picasso.with(context).load(url).into(view);\n}\n```\n\n2.图片转换\n\n(1) 转换图片来满足Layout的合适大小以降低内存。\n```java\nPicasso.with(context)\n  .load(url)\n  .resize(50, 50)\n  .centerCrop()\n  .into(imageView)\n```\n(2) 指定自定义的变换适应更多的效果\n```java\npublic class CropSquareTransformation implements Transformation {\n    @Override\n    public Bitmap transform(Bitmap source) {\n        int size = Math.min(source.getWidth(), source.getHeight());\n        int x = (source.getWidth() - size) / 2;\n        int y = (source.getHeight() - size) / 2;\n        Bitmap result = Bitmap.createBitmap(source, x, y, size, size);\n        if (result != source) {\n            source.recycle();\n        }\n        return result;\n    }\n\n    @Override \n    public String key() { \n        return \"square()\"; \n    }\n}\n返回值指定的对象给`transform`方法\n```\n3.Place Holders\nPicasso支持设置默认和加载错误图片\n```java\nPicasso.with(context)\n    .load(url)\n    .placeholder(R.drawable.user_placeholder)\n    .error(R.drawable.user_placeholder_error)\n    .into(imageView);\n```\n在显示加载错误的图片之前会尝试请求三次指定图片的地址。\n\n4.资源加载\nPicasso支持Resources，assets，files，content providers 等图片资源\n```java\nPicasso.with(context).load(R.drawable.landing_screen).into(imageView1);\nPicasso.with(context).load(\"file:///android_asset/DvpvklR.png\").into(imageView2);\nPicasso.with(context).load(new File(...)).into(imageView3);\n```\n5.Debug指示器\n作为开发者，可以设置是否使用颜色指示器来显示加载图片的来源：网络、磁盘、内存。\n```java\n// Picasso instance\nsetIndicatorsEnabled(true)\n```\n6.配置\n\n- maven\n\n```xml\n<dependency>\n  <groupId>com.squareup.picasso</groupId>\n  <artifactId>picasso</artifactId>\n  <version>2.5.2</version>\n</dependency>\n```\n- gradle\n\n```java\ncompile 'com.squareup.picasso:picasso:2.5.2'\n```","slug":"Android图片加载框架：Picasso（一）","published":1,"updated":"2016-01-30T03:42:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2dyh001rc0m3yhda2mst","content":"<p><a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">Picasso</a><br><a href=\"http://square.github.io/picasso/2.x/picasso/\" target=\"_blank\" rel=\"external\">Picasso JavaDoc</a><br><a href=\"http://stackoverflow.com/questions/tagged/picasso?sort=active\" target=\"_blank\" rel=\"external\">Picasso stackOverflow</a></p>\n<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p>在Android开发中的视觉显示上，图片占有很大的比重。Picasso可以只使用一行代码来解决图片加载的问题。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context).load(<span class=\"string\">\"http://i.imgur.com/DvpvklR.png\"</span>).into(imageView);</div></pre></td></tr></table></figure></p>\n<p>Picasso 可以极大减少Android开发过程中的加载图片的问题：</p>\n<ul>\n<li>解决<code>ImageView</code>回收和<code>Adapter</code>下载取消的问题。</li>\n<li>使用最小的内存来处理图片转换问题</li>\n<li>自动的磁盘和内存缓存</li>\n</ul>\n<h3 id=\"二、特性\"><a href=\"#二、特性\" class=\"headerlink\" title=\"二、特性\"></a>二、特性</h3><p>1、Adapter 图片加载<br>adapter自动检测是否重用图片，是否取消之前图片的加载。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">    SquaredImageView view = (SquaredImageView) convertView;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        view = <span class=\"keyword\">new</span> SquaredImageView(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    String url = getItem(position);</div><div class=\"line\">    Picasso.with(context).load(url).into(view);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.图片转换</p>\n<p>(1) 转换图片来满足Layout的合适大小以降低内存。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context)</div><div class=\"line\">  .load(url)</div><div class=\"line\">  .resize(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</div><div class=\"line\">  .centerCrop()</div><div class=\"line\">  .into(imageView)</div></pre></td></tr></table></figure></p>\n<p>(2) 指定自定义的变换适应更多的效果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CropSquareTransformation</span> <span class=\"keyword\">implements</span> <span class=\"title\">Transformation</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(Bitmap source)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> size = Math.min(source.getWidth(), source.getHeight());</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (source.getWidth() - size) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (source.getHeight() - size) / <span class=\"number\">2</span>;</div><div class=\"line\">        Bitmap result = Bitmap.createBitmap(source, x, y, size, size);</div><div class=\"line\">        <span class=\"keyword\">if</span> (result != source) &#123;</div><div class=\"line\">            source.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">key</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"square()\"</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">返回值指定的对象给`transform`方法</div></pre></td></tr></table></figure></p>\n<p>3.Place Holders<br>Picasso支持设置默认和加载错误图片<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context)</div><div class=\"line\">    .load(url)</div><div class=\"line\">    .placeholder(R.drawable.user_placeholder)</div><div class=\"line\">    .error(R.drawable.user_placeholder_error)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure></p>\n<p>在显示加载错误的图片之前会尝试请求三次指定图片的地址。</p>\n<p>4.资源加载<br>Picasso支持Resources，assets，files，content providers 等图片资源<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context).load(R.drawable.landing_screen).into(imageView1);</div><div class=\"line\">Picasso.with(context).load(<span class=\"string\">\"file:///android_asset/DvpvklR.png\"</span>).into(imageView2);</div><div class=\"line\">Picasso.with(context).load(<span class=\"keyword\">new</span> File(...)).into(imageView3);</div></pre></td></tr></table></figure></p>\n<p>5.Debug指示器<br>作为开发者，可以设置是否使用颜色指示器来显示加载图片的来源：网络、磁盘、内存。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Picasso instance</span></div><div class=\"line\">setIndicatorsEnabled(<span class=\"keyword\">true</span>)</div></pre></td></tr></table></figure></p>\n<p>6.配置</p>\n<ul>\n<li>maven</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.picasso<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>picasso<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>gradle</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.squareup.picasso:picasso:2.5.2'</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">Picasso</a><br><a href=\"http://square.github.io/picasso/2.x/picasso/\" target=\"_blank\" rel=\"external\">Picasso JavaDoc</a><br><a href=\"http://stackoverflow.com/questions/tagged/picasso?sort=active\" target=\"_blank\" rel=\"external\">Picasso stackOverflow</a></p>\n<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p>在Android开发中的视觉显示上，图片占有很大的比重。Picasso可以只使用一行代码来解决图片加载的问题。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context).load(<span class=\"string\">\"http://i.imgur.com/DvpvklR.png\"</span>).into(imageView);</div></pre></td></tr></table></figure></p>\n<p>Picasso 可以极大减少Android开发过程中的加载图片的问题：</p>\n<ul>\n<li>解决<code>ImageView</code>回收和<code>Adapter</code>下载取消的问题。</li>\n<li>使用最小的内存来处理图片转换问题</li>\n<li>自动的磁盘和内存缓存</li>\n</ul>\n<h3 id=\"二、特性\"><a href=\"#二、特性\" class=\"headerlink\" title=\"二、特性\"></a>二、特性</h3><p>1、Adapter 图片加载<br>adapter自动检测是否重用图片，是否取消之前图片的加载。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">    SquaredImageView view = (SquaredImageView) convertView;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        view = <span class=\"keyword\">new</span> SquaredImageView(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    String url = getItem(position);</div><div class=\"line\">    Picasso.with(context).load(url).into(view);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.图片转换</p>\n<p>(1) 转换图片来满足Layout的合适大小以降低内存。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context)</div><div class=\"line\">  .load(url)</div><div class=\"line\">  .resize(<span class=\"number\">50</span>, <span class=\"number\">50</span>)</div><div class=\"line\">  .centerCrop()</div><div class=\"line\">  .into(imageView)</div></pre></td></tr></table></figure></p>\n<p>(2) 指定自定义的变换适应更多的效果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CropSquareTransformation</span> <span class=\"keyword\">implements</span> <span class=\"title\">Transformation</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(Bitmap source)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> size = Math.min(source.getWidth(), source.getHeight());</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (source.getWidth() - size) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (source.getHeight() - size) / <span class=\"number\">2</span>;</div><div class=\"line\">        Bitmap result = Bitmap.createBitmap(source, x, y, size, size);</div><div class=\"line\">        <span class=\"keyword\">if</span> (result != source) &#123;</div><div class=\"line\">            source.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">key</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"square()\"</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">返回值指定的对象给`transform`方法</div></pre></td></tr></table></figure></p>\n<p>3.Place Holders<br>Picasso支持设置默认和加载错误图片<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context)</div><div class=\"line\">    .load(url)</div><div class=\"line\">    .placeholder(R.drawable.user_placeholder)</div><div class=\"line\">    .error(R.drawable.user_placeholder_error)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure></p>\n<p>在显示加载错误的图片之前会尝试请求三次指定图片的地址。</p>\n<p>4.资源加载<br>Picasso支持Resources，assets，files，content providers 等图片资源<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Picasso.with(context).load(R.drawable.landing_screen).into(imageView1);</div><div class=\"line\">Picasso.with(context).load(<span class=\"string\">\"file:///android_asset/DvpvklR.png\"</span>).into(imageView2);</div><div class=\"line\">Picasso.with(context).load(<span class=\"keyword\">new</span> File(...)).into(imageView3);</div></pre></td></tr></table></figure></p>\n<p>5.Debug指示器<br>作为开发者，可以设置是否使用颜色指示器来显示加载图片的来源：网络、磁盘、内存。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Picasso instance</span></div><div class=\"line\">setIndicatorsEnabled(<span class=\"keyword\">true</span>)</div></pre></td></tr></table></figure></p>\n<p>6.配置</p>\n<ul>\n<li>maven</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.picasso<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>picasso<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>gradle</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.squareup.picasso:picasso:2.5.2'</span></div></pre></td></tr></table></figure>"},{"title":"设计模式之命令模式","date":"2017-05-08T07:55:42.000Z","_content":"在软件设计中，经常需要向某些对象发送请，但是并不知道请求的接收者是谁，也不知道具体请求的操作者，只需要在程序运行时指定具体的请求接收者即可。此时可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。\n\n## 1.1 命令模式定义\n`命令模式` ：将一个请求封装成对象，从而使我们可用不同的请求对客户端进行参数化；支持请求队列，日志记录和撤销操作。\n\n## 1.2 结构\n\n- Command：抽象命令类\n  声明抽象方法execute，面向命令的接口编程。\n- ConcreateCommand：具体命令类\n  命令具体实现类，负责命令具体操作。\n- Invoker：调用者\n  接收到命令，分析和分发命令。\n- Receiver：接收者\n  接收到命令，执行命令操作。命令最终的执行者。\n- Client：客户端\n  命令发送者，找到Invoker分发命令。\n\n命令模式包含四个角色：++抽象命令类++定义用于执行请求的`execute`等方法，通过这些方法可以调用请求者的相关操作；++具体命令类++是抽象命令类的子类，实现了在抽象命令类中定义的方法，对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即++请求者++，通过命令对象来执行请求；++接收者++执行与请求相关的操作，具体实现对请求的业务处理。\n![img](\thttp://img-1252300500.cosgz.myqcloud.com/design-pattern/command-design-pattern.jpg)\n命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分隔开。每个命令都是一个操作：请求者发出请求执行命令；接收者收到请求执行命令的操作。\n\n- 优点\n    - 降低系统的耦合度\n    - 新的命令很容易加入到系统中\n    - 可以比较容易地设计一个命令队列和宏命令\n    - 可以方面地实现对请求的Undo和Redo\n- 缺点\n    - 可能会导致系统有过多的具体命令。\n    \n\n## 参考\n[命令模式](http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html#id12)","source":"_posts/设计模式之命令模式.md","raw":"---\ntitle: 设计模式之命令模式\ndate: 2017-05-08 15:55:42\ntags: 设计模式\ncategories: 设计模式\n---\n在软件设计中，经常需要向某些对象发送请，但是并不知道请求的接收者是谁，也不知道具体请求的操作者，只需要在程序运行时指定具体的请求接收者即可。此时可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。\n\n## 1.1 命令模式定义\n`命令模式` ：将一个请求封装成对象，从而使我们可用不同的请求对客户端进行参数化；支持请求队列，日志记录和撤销操作。\n\n## 1.2 结构\n\n- Command：抽象命令类\n  声明抽象方法execute，面向命令的接口编程。\n- ConcreateCommand：具体命令类\n  命令具体实现类，负责命令具体操作。\n- Invoker：调用者\n  接收到命令，分析和分发命令。\n- Receiver：接收者\n  接收到命令，执行命令操作。命令最终的执行者。\n- Client：客户端\n  命令发送者，找到Invoker分发命令。\n\n命令模式包含四个角色：++抽象命令类++定义用于执行请求的`execute`等方法，通过这些方法可以调用请求者的相关操作；++具体命令类++是抽象命令类的子类，实现了在抽象命令类中定义的方法，对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即++请求者++，通过命令对象来执行请求；++接收者++执行与请求相关的操作，具体实现对请求的业务处理。\n![img](\thttp://img-1252300500.cosgz.myqcloud.com/design-pattern/command-design-pattern.jpg)\n命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分隔开。每个命令都是一个操作：请求者发出请求执行命令；接收者收到请求执行命令的操作。\n\n- 优点\n    - 降低系统的耦合度\n    - 新的命令很容易加入到系统中\n    - 可以比较容易地设计一个命令队列和宏命令\n    - 可以方面地实现对请求的Undo和Redo\n- 缺点\n    - 可能会导致系统有过多的具体命令。\n    \n\n## 参考\n[命令模式](http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html#id12)","slug":"设计模式之命令模式","published":1,"updated":"2017-05-08T07:55:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2epz001sc0m3cnrzo2mv","content":"<p>在软件设计中，经常需要向某些对象发送请，但是并不知道请求的接收者是谁，也不知道具体请求的操作者，只需要在程序运行时指定具体的请求接收者即可。此时可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。</p>\n<h2 id=\"1-1-命令模式定义\"><a href=\"#1-1-命令模式定义\" class=\"headerlink\" title=\"1.1 命令模式定义\"></a>1.1 命令模式定义</h2><p><code>命令模式</code> ：将一个请求封装成对象，从而使我们可用不同的请求对客户端进行参数化；支持请求队列，日志记录和撤销操作。</p>\n<h2 id=\"1-2-结构\"><a href=\"#1-2-结构\" class=\"headerlink\" title=\"1.2 结构\"></a>1.2 结构</h2><ul>\n<li>Command：抽象命令类<br>声明抽象方法execute，面向命令的接口编程。</li>\n<li>ConcreateCommand：具体命令类<br>命令具体实现类，负责命令具体操作。</li>\n<li>Invoker：调用者<br>接收到命令，分析和分发命令。</li>\n<li>Receiver：接收者<br>接收到命令，执行命令操作。命令最终的执行者。</li>\n<li>Client：客户端<br>命令发送者，找到Invoker分发命令。</li>\n</ul>\n<p>命令模式包含四个角色：++抽象命令类++定义用于执行请求的<code>execute</code>等方法，通过这些方法可以调用请求者的相关操作；++具体命令类++是抽象命令类的子类，实现了在抽象命令类中定义的方法，对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即++请求者++，通过命令对象来执行请求；++接收者++执行与请求相关的操作，具体实现对请求的业务处理。<br><img src=\"http://img-1252300500.cosgz.myqcloud.com/design-pattern/command-design-pattern.jpg\" alt=\"img\"><br>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分隔开。每个命令都是一个操作：请求者发出请求执行命令；接收者收到请求执行命令的操作。</p>\n<ul>\n<li>优点<ul>\n<li>降低系统的耦合度</li>\n<li>新的命令很容易加入到系统中</li>\n<li>可以比较容易地设计一个命令队列和宏命令</li>\n<li>可以方面地实现对请求的Undo和Redo</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>可能会导致系统有过多的具体命令。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html#id12\" target=\"_blank\" rel=\"external\">命令模式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在软件设计中，经常需要向某些对象发送请，但是并不知道请求的接收者是谁，也不知道具体请求的操作者，只需要在程序运行时指定具体的请求接收者即可。此时可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。</p>\n<h2 id=\"1-1-命令模式定义\"><a href=\"#1-1-命令模式定义\" class=\"headerlink\" title=\"1.1 命令模式定义\"></a>1.1 命令模式定义</h2><p><code>命令模式</code> ：将一个请求封装成对象，从而使我们可用不同的请求对客户端进行参数化；支持请求队列，日志记录和撤销操作。</p>\n<h2 id=\"1-2-结构\"><a href=\"#1-2-结构\" class=\"headerlink\" title=\"1.2 结构\"></a>1.2 结构</h2><ul>\n<li>Command：抽象命令类<br>声明抽象方法execute，面向命令的接口编程。</li>\n<li>ConcreateCommand：具体命令类<br>命令具体实现类，负责命令具体操作。</li>\n<li>Invoker：调用者<br>接收到命令，分析和分发命令。</li>\n<li>Receiver：接收者<br>接收到命令，执行命令操作。命令最终的执行者。</li>\n<li>Client：客户端<br>命令发送者，找到Invoker分发命令。</li>\n</ul>\n<p>命令模式包含四个角色：++抽象命令类++定义用于执行请求的<code>execute</code>等方法，通过这些方法可以调用请求者的相关操作；++具体命令类++是抽象命令类的子类，实现了在抽象命令类中定义的方法，对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即++请求者++，通过命令对象来执行请求；++接收者++执行与请求相关的操作，具体实现对请求的业务处理。<br><img src=\"http://img-1252300500.cosgz.myqcloud.com/design-pattern/command-design-pattern.jpg\" alt=\"img\"><br>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分隔开。每个命令都是一个操作：请求者发出请求执行命令；接收者收到请求执行命令的操作。</p>\n<ul>\n<li>优点<ul>\n<li>降低系统的耦合度</li>\n<li>新的命令很容易加入到系统中</li>\n<li>可以比较容易地设计一个命令队列和宏命令</li>\n<li>可以方面地实现对请求的Undo和Redo</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>可能会导致系统有过多的具体命令。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html#id12\" target=\"_blank\" rel=\"external\">命令模式</a></p>\n"},{"title":"深入理解OkHttp3的Interceptors（1）","date":"2017-04-23T02:14:09.000Z","_content":"> Version : okhttp:3.6.0\n\n`Interceptors`是OkHttp3整个框架的核心，包含了请求监控、请求重写、调用重试等机制。它主要使用责任链模式，解决请求与请求处理之间的耦合。\n![img](https://raw.githubusercontent.com/wiki/square/okhttp/interceptors@2x.png)\n\n## 1.1 责任链模式\n将接收对象放入链中，按照链中顺序让多个对象处理请求。请求者不用知道具体是由谁处理。解决请求与接收之间的耦合，提高灵活性。\n责任链负责对请求参数的解析，所有的扩展都是针对链中节点进行扩展。\n\nOkHttp3的Interceptors的责任链\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1492487313/wechat/Interceptors_uml.jpg)\n## 1.2 OkHttp3链式流程\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1492482119/wechat/OkHttp3_Interceptor.jpg)\n## 2.1 RetryAndFollowUpInterceptor\n`RetryAndFollowUpInterceptor`用于尝试恢复失败和重定向的请求，最多支持跟踪20次重定向。创建streamAllocation维护请求的Connections、Streams、Calls，类似中介者模式，之后交给BridgeInterceptor节点处理请求。\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    ...\n    // 创建用于协调Connections、Streams、Call三者关系的streamAllocation\n    streamAllocation = new StreamAllocation(\n        client.connectionPool(), createAddress(request.url()), callStackTrace);\n    // 重定向次数\n    int followUpCount = 0;\n    Response priorResponse = null;\n    while (true) {\n      // 无限循环\n      ...\n      Response response = null;\n      boolean releaseConnection = true;\n      try {\n        response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, null, null);\n        releaseConnection = false;\n      } catch (RouteException e) {\n        // 连接路由失败，请求未发送\n        ...\n        releaseConnection = false;\n        continue;\n      } catch (IOException e) {\n        // 与服务端通信失败，请求已发送\n        ...\n        releaseConnection = false;\n        continue;\n      } finally {\n        // 释放资源\n        if (releaseConnection) {\n          ...\n        }\n      }\n      // 记录上一次的响应，一般出现在重定向情况时。\n      ...\n      // 判断是否是重定向的响应\n      Request followUp = followUpRequest(response);\n      ...\n      if (followUp == null) {\n        ...\n        // 正常响应直接返回\n        return response;\n      }\n      ...\n      // 检查是否能够继续重定向操作\n      ...\n      request = followUp;\n      priorResponse = response;\n    }\n  }\n```\n`RetryAndFollowUpInterceptor`处理下层链中节点返回的响应和抛出的异常。\n依据返回的响应或抛出的异常，进行检查和恢复操作\n1. 关闭已建立的Socket连接\n2. OkHttpClient是否关闭重连，默认开启重连\n3. 请求是否已发送并且请求体不可重读，不可重连\n4. 出现的致命的异常：请求协议异常、证书验证异常等\n5. 是否有下一跳可尝试的路由。\n\n```java\n  private boolean recover(IOException e, boolean requestSendStarted, Request userRequest) {\n    // 关闭Socket\n    streamAllocation.streamFailed(e);\n    // 如果Application层禁止重连，则直接失败\n    if (!client.retryOnConnectionFailure()) return false;\n    // 是否可以再次发送请求\n    if (requestSendStarted && userRequest.body() instanceof UnrepeatableRequestBody) return false;\n    // 致命异常则不可恢复\n    if (!isRecoverable(e, requestSendStarted)) return false;\n    // 没有可以再次尝试的路由\n    if (!streamAllocation.hasMoreRoutes()) return false;\n    return true;\n  }\n```\n\n## 2.2 BridgeInterceptor\n`BridgeInterceptor`是应用层与网络层节点的桥接，补全应用层请求的头部信息，调用之后网络与缓存数据处理，最后将响应返回给上层。\n\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    // 重写请求头部，填充必要的头部信息\n    ...\n    // 添加 \"Accept-Encoding: gzip\" header ，可以压缩请求数据\n    ...\n     requestBuilder.header(\"Accept-Encoding\", \"gzip\");\n    ...\n\n    // 配置Cookie和代理信息\n    ...\n    requestBuilder.header(\"Cookie\", cookieHeader(cookies));\n    ...\n    requestBuilder.header(\"User-Agent\", Version.userAgent());\n    ...\n    // 把新构建的请求向下传递处理\n    Response networkResponse = chain.proceed(requestBuilder.build());\n    // 处理下层节点返回的响应，响应可能是缓存或者网络数据\n    HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());\n\n    Response.Builder responseBuilder = networkResponse.newBuilder()\n        .request(userRequest);\n    // 响应数据解压\n    ...\n    return responseBuilder.build();\n  }\n```\n## 2.3 CacheInterceptor\n本地缓存和网络缓存，默认无缓存。\n1. 读取本地缓存，根据请求缓存策略构建网络请求和缓存响应。\n2. 按照请求缓存策略，返回缓存或传递给`ConnectInterceptor`执行下一步数据操作。\n3. 处理返回的网络响应数据的缓存操作。\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    // 读取本地磁盘缓存\n    Response cacheCandidate = cache != null\n        ? cache.get(chain.request())\n        : null;\n\n    ...\n    // 缓存策略\n    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();\n    Request networkRequest = strategy.networkRequest;\n    Response cacheResponse = strategy.cacheResponse;\n\n    // 如果缓存未命中，则舍弃缓存\n    ...\n\n    // 禁止网络请求且不存在缓存，返回504，请求失败\n    if (networkRequest == null && cacheResponse == null) {\n      ...\n      return ...;\n    }\n\n    // 禁止网络请求，缓存存在，返回响应到上一级\n    if (networkRequest == null) {\n      // return Cache\n      ...\n    }\n\n    Response networkResponse = null;\n    try {\n      networkResponse = chain.proceed(networkRequest);\n    } finally {\n      // 处理网络缓存失败时，释放缓存流\n    }\n\n    // 本地存在缓存则检查响应状态码是否为304\n    if (cacheResponse != null) {\n      if (networkResponse.code() == HTTP_NOT_MODIFIED) {\n        // update cache\n        ...\n        return response;\n      } else {\n        // close cacheResponse \n      }\n    }\n   \n    // 构建新响应\n    Response response = networkResponse.newBuilder()\n        .cacheResponse(stripBody(cacheResponse))\n        .networkResponse(stripBody(networkResponse))\n        .build();\n\n    if (HttpHeaders.hasBody(response)) {\n      // 响应缓存\n      CacheRequest cacheRequest = maybeCache(response, networkResponse.request(), cache);\n      response = cacheWritingResponse(cacheRequest, response);\n    }\n\n    return response;\n  }\n```\n## 2.4 ConnectInterceptor\n1. 创建网络读写流必要的HttpCodec，用于请求编码和网络响应解码处理。\n2. 复用或建立Socket连接RealConnection，用于网络数据传输。\n3. 网络数据流具体处理细节交给CallServerInterceptor节点。\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    ... \n    StreamAllocation streamAllocation = realChain.streamAllocation();\n    ...\n    // 复用或创建新的RealConnection，并创建新的HttpCodec处理网络读写流。\n    HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks);\n    RealConnection connection = streamAllocation.connection();\n    // 交给CallServerInterceptor处理网络流。\n    return realChain.proceed(request, streamAllocation, httpCodec, connection);\n  }\n```\n## 2.5 CallServerInterceptor\n创建服务端的网络调用，向服务端发送请求并获取响应。\n```java\n@Override public Response intercept(Chain chain) throws IOException {\n    // 获取需要写请求和读响应的HttpCodec\n    ... \n    long sentRequestMillis = System.currentTimeMillis();\n    // 向服务端发送头部请求\n    ...\n    Response.Builder responseBuilder = null;\n    // 如果含有支持的方法请求体，则需要向服务端发送请求体\n    if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {\n      // 发送请求体\n      ...\n    }\n    // 结束请求\n    httpCodec.finishRequest();\n    \n    // 如果头部响应未读取，则读取头部响应\n    if (responseBuilder == null) {\n      responseBuilder = httpCodec.readResponseHeaders(false);\n    }\n\n    // 构建响应体\n    ... \n    return response;\n  }\n```\n## 2.6 自定义Interceptor\n`OkHttp3`除了默认5种Interceptor实现，还可以添加`Application层`与`Network层`的interceptor。\n```java\n@OkHttpClient\n    /*\n    * 添加应用层Interceptor\n    */\n    public Builder addInterceptor(Interceptor interceptor) {\n      interceptors.add(interceptor);\n      return this;\n    }\n    \n    /*\n    * 添加网络层Interceptor\n    */\n    public List<Interceptor> networkInterceptors() {\n      return networkInterceptors;\n    }\n```\n1. 应用层Interceptors\n\n`Application Interceptors`对每个请求只调用一次，处理`BridgeInterceptor`返回的响应。可以不调用Chain.proceed()或多次调用Chain.proceed()。\n2. 网络层Interceptors\n\n`Network Interceptors`在`ConnectInterceptor`与`CallServerInterceptor`之间调用。涉及到网络相关操作都会经过`Network Interceptors`，因此可以在缓存响应数据的之前对响应数据进行预处理。与`Application Interceptors`不同的是不支持短路处理，必须且只能调用一次`Chain.proceed()`方法，保证链式调用唯一。\n\n一个简单的LogInterceptors\n```java\nclass LoggingInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request request = chain.request();\n\n    long t1 = System.nanoTime();\n    logger.info(String.format(\"Sending request %s on %s%n%s\",\n        request.url(), chain.connection(), request.headers()));\n\n    Response response = chain.proceed(request);\n\n    long t2 = System.nanoTime();\n    logger.info(String.format(\"Received response for %s in %.1fms%n%s\",\n        response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n    return response;\n  }\n}\n```\n","source":"_posts/深入理解OkHttp3的Interceptors.md","raw":"---\ntitle: 深入理解OkHttp3的Interceptors（1）\ndate: 2017-04-23 10:14:09\ntags: okhttp3 android\ncategories: okhttp3\n---\n> Version : okhttp:3.6.0\n\n`Interceptors`是OkHttp3整个框架的核心，包含了请求监控、请求重写、调用重试等机制。它主要使用责任链模式，解决请求与请求处理之间的耦合。\n![img](https://raw.githubusercontent.com/wiki/square/okhttp/interceptors@2x.png)\n\n## 1.1 责任链模式\n将接收对象放入链中，按照链中顺序让多个对象处理请求。请求者不用知道具体是由谁处理。解决请求与接收之间的耦合，提高灵活性。\n责任链负责对请求参数的解析，所有的扩展都是针对链中节点进行扩展。\n\nOkHttp3的Interceptors的责任链\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1492487313/wechat/Interceptors_uml.jpg)\n## 1.2 OkHttp3链式流程\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1492482119/wechat/OkHttp3_Interceptor.jpg)\n## 2.1 RetryAndFollowUpInterceptor\n`RetryAndFollowUpInterceptor`用于尝试恢复失败和重定向的请求，最多支持跟踪20次重定向。创建streamAllocation维护请求的Connections、Streams、Calls，类似中介者模式，之后交给BridgeInterceptor节点处理请求。\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    ...\n    // 创建用于协调Connections、Streams、Call三者关系的streamAllocation\n    streamAllocation = new StreamAllocation(\n        client.connectionPool(), createAddress(request.url()), callStackTrace);\n    // 重定向次数\n    int followUpCount = 0;\n    Response priorResponse = null;\n    while (true) {\n      // 无限循环\n      ...\n      Response response = null;\n      boolean releaseConnection = true;\n      try {\n        response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, null, null);\n        releaseConnection = false;\n      } catch (RouteException e) {\n        // 连接路由失败，请求未发送\n        ...\n        releaseConnection = false;\n        continue;\n      } catch (IOException e) {\n        // 与服务端通信失败，请求已发送\n        ...\n        releaseConnection = false;\n        continue;\n      } finally {\n        // 释放资源\n        if (releaseConnection) {\n          ...\n        }\n      }\n      // 记录上一次的响应，一般出现在重定向情况时。\n      ...\n      // 判断是否是重定向的响应\n      Request followUp = followUpRequest(response);\n      ...\n      if (followUp == null) {\n        ...\n        // 正常响应直接返回\n        return response;\n      }\n      ...\n      // 检查是否能够继续重定向操作\n      ...\n      request = followUp;\n      priorResponse = response;\n    }\n  }\n```\n`RetryAndFollowUpInterceptor`处理下层链中节点返回的响应和抛出的异常。\n依据返回的响应或抛出的异常，进行检查和恢复操作\n1. 关闭已建立的Socket连接\n2. OkHttpClient是否关闭重连，默认开启重连\n3. 请求是否已发送并且请求体不可重读，不可重连\n4. 出现的致命的异常：请求协议异常、证书验证异常等\n5. 是否有下一跳可尝试的路由。\n\n```java\n  private boolean recover(IOException e, boolean requestSendStarted, Request userRequest) {\n    // 关闭Socket\n    streamAllocation.streamFailed(e);\n    // 如果Application层禁止重连，则直接失败\n    if (!client.retryOnConnectionFailure()) return false;\n    // 是否可以再次发送请求\n    if (requestSendStarted && userRequest.body() instanceof UnrepeatableRequestBody) return false;\n    // 致命异常则不可恢复\n    if (!isRecoverable(e, requestSendStarted)) return false;\n    // 没有可以再次尝试的路由\n    if (!streamAllocation.hasMoreRoutes()) return false;\n    return true;\n  }\n```\n\n## 2.2 BridgeInterceptor\n`BridgeInterceptor`是应用层与网络层节点的桥接，补全应用层请求的头部信息，调用之后网络与缓存数据处理，最后将响应返回给上层。\n\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    // 重写请求头部，填充必要的头部信息\n    ...\n    // 添加 \"Accept-Encoding: gzip\" header ，可以压缩请求数据\n    ...\n     requestBuilder.header(\"Accept-Encoding\", \"gzip\");\n    ...\n\n    // 配置Cookie和代理信息\n    ...\n    requestBuilder.header(\"Cookie\", cookieHeader(cookies));\n    ...\n    requestBuilder.header(\"User-Agent\", Version.userAgent());\n    ...\n    // 把新构建的请求向下传递处理\n    Response networkResponse = chain.proceed(requestBuilder.build());\n    // 处理下层节点返回的响应，响应可能是缓存或者网络数据\n    HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());\n\n    Response.Builder responseBuilder = networkResponse.newBuilder()\n        .request(userRequest);\n    // 响应数据解压\n    ...\n    return responseBuilder.build();\n  }\n```\n## 2.3 CacheInterceptor\n本地缓存和网络缓存，默认无缓存。\n1. 读取本地缓存，根据请求缓存策略构建网络请求和缓存响应。\n2. 按照请求缓存策略，返回缓存或传递给`ConnectInterceptor`执行下一步数据操作。\n3. 处理返回的网络响应数据的缓存操作。\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    // 读取本地磁盘缓存\n    Response cacheCandidate = cache != null\n        ? cache.get(chain.request())\n        : null;\n\n    ...\n    // 缓存策略\n    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();\n    Request networkRequest = strategy.networkRequest;\n    Response cacheResponse = strategy.cacheResponse;\n\n    // 如果缓存未命中，则舍弃缓存\n    ...\n\n    // 禁止网络请求且不存在缓存，返回504，请求失败\n    if (networkRequest == null && cacheResponse == null) {\n      ...\n      return ...;\n    }\n\n    // 禁止网络请求，缓存存在，返回响应到上一级\n    if (networkRequest == null) {\n      // return Cache\n      ...\n    }\n\n    Response networkResponse = null;\n    try {\n      networkResponse = chain.proceed(networkRequest);\n    } finally {\n      // 处理网络缓存失败时，释放缓存流\n    }\n\n    // 本地存在缓存则检查响应状态码是否为304\n    if (cacheResponse != null) {\n      if (networkResponse.code() == HTTP_NOT_MODIFIED) {\n        // update cache\n        ...\n        return response;\n      } else {\n        // close cacheResponse \n      }\n    }\n   \n    // 构建新响应\n    Response response = networkResponse.newBuilder()\n        .cacheResponse(stripBody(cacheResponse))\n        .networkResponse(stripBody(networkResponse))\n        .build();\n\n    if (HttpHeaders.hasBody(response)) {\n      // 响应缓存\n      CacheRequest cacheRequest = maybeCache(response, networkResponse.request(), cache);\n      response = cacheWritingResponse(cacheRequest, response);\n    }\n\n    return response;\n  }\n```\n## 2.4 ConnectInterceptor\n1. 创建网络读写流必要的HttpCodec，用于请求编码和网络响应解码处理。\n2. 复用或建立Socket连接RealConnection，用于网络数据传输。\n3. 网络数据流具体处理细节交给CallServerInterceptor节点。\n```java\n  @Override public Response intercept(Chain chain) throws IOException {\n    ... \n    StreamAllocation streamAllocation = realChain.streamAllocation();\n    ...\n    // 复用或创建新的RealConnection，并创建新的HttpCodec处理网络读写流。\n    HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks);\n    RealConnection connection = streamAllocation.connection();\n    // 交给CallServerInterceptor处理网络流。\n    return realChain.proceed(request, streamAllocation, httpCodec, connection);\n  }\n```\n## 2.5 CallServerInterceptor\n创建服务端的网络调用，向服务端发送请求并获取响应。\n```java\n@Override public Response intercept(Chain chain) throws IOException {\n    // 获取需要写请求和读响应的HttpCodec\n    ... \n    long sentRequestMillis = System.currentTimeMillis();\n    // 向服务端发送头部请求\n    ...\n    Response.Builder responseBuilder = null;\n    // 如果含有支持的方法请求体，则需要向服务端发送请求体\n    if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {\n      // 发送请求体\n      ...\n    }\n    // 结束请求\n    httpCodec.finishRequest();\n    \n    // 如果头部响应未读取，则读取头部响应\n    if (responseBuilder == null) {\n      responseBuilder = httpCodec.readResponseHeaders(false);\n    }\n\n    // 构建响应体\n    ... \n    return response;\n  }\n```\n## 2.6 自定义Interceptor\n`OkHttp3`除了默认5种Interceptor实现，还可以添加`Application层`与`Network层`的interceptor。\n```java\n@OkHttpClient\n    /*\n    * 添加应用层Interceptor\n    */\n    public Builder addInterceptor(Interceptor interceptor) {\n      interceptors.add(interceptor);\n      return this;\n    }\n    \n    /*\n    * 添加网络层Interceptor\n    */\n    public List<Interceptor> networkInterceptors() {\n      return networkInterceptors;\n    }\n```\n1. 应用层Interceptors\n\n`Application Interceptors`对每个请求只调用一次，处理`BridgeInterceptor`返回的响应。可以不调用Chain.proceed()或多次调用Chain.proceed()。\n2. 网络层Interceptors\n\n`Network Interceptors`在`ConnectInterceptor`与`CallServerInterceptor`之间调用。涉及到网络相关操作都会经过`Network Interceptors`，因此可以在缓存响应数据的之前对响应数据进行预处理。与`Application Interceptors`不同的是不支持短路处理，必须且只能调用一次`Chain.proceed()`方法，保证链式调用唯一。\n\n一个简单的LogInterceptors\n```java\nclass LoggingInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request request = chain.request();\n\n    long t1 = System.nanoTime();\n    logger.info(String.format(\"Sending request %s on %s%n%s\",\n        request.url(), chain.connection(), request.headers()));\n\n    Response response = chain.proceed(request);\n\n    long t2 = System.nanoTime();\n    logger.info(String.format(\"Received response for %s in %.1fms%n%s\",\n        response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n    return response;\n  }\n}\n```\n","slug":"深入理解OkHttp3的Interceptors","published":1,"updated":"2017-04-24T09:39:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2eq1001vc0m3s7bl88pq","content":"<blockquote>\n<p>Version : okhttp:3.6.0</p>\n</blockquote>\n<p><code>Interceptors</code>是OkHttp3整个框架的核心，包含了请求监控、请求重写、调用重试等机制。它主要使用责任链模式，解决请求与请求处理之间的耦合。<br><img src=\"https://raw.githubusercontent.com/wiki/square/okhttp/interceptors@2x.png\" alt=\"img\"></p>\n<h2 id=\"1-1-责任链模式\"><a href=\"#1-1-责任链模式\" class=\"headerlink\" title=\"1.1 责任链模式\"></a>1.1 责任链模式</h2><p>将接收对象放入链中，按照链中顺序让多个对象处理请求。请求者不用知道具体是由谁处理。解决请求与接收之间的耦合，提高灵活性。<br>责任链负责对请求参数的解析，所有的扩展都是针对链中节点进行扩展。</p>\n<p>OkHttp3的Interceptors的责任链<br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1492487313/wechat/Interceptors_uml.jpg\" alt=\"img\"></p>\n<h2 id=\"1-2-OkHttp3链式流程\"><a href=\"#1-2-OkHttp3链式流程\" class=\"headerlink\" title=\"1.2 OkHttp3链式流程\"></a>1.2 OkHttp3链式流程</h2><p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1492482119/wechat/OkHttp3_Interceptor.jpg\" alt=\"img\"></p>\n<h2 id=\"2-1-RetryAndFollowUpInterceptor\"><a href=\"#2-1-RetryAndFollowUpInterceptor\" class=\"headerlink\" title=\"2.1 RetryAndFollowUpInterceptor\"></a>2.1 RetryAndFollowUpInterceptor</h2><p><code>RetryAndFollowUpInterceptor</code>用于尝试恢复失败和重定向的请求，最多支持跟踪20次重定向。创建streamAllocation维护请求的Connections、Streams、Calls，类似中介者模式，之后交给BridgeInterceptor节点处理请求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 创建用于协调Connections、Streams、Call三者关系的streamAllocation</span></div><div class=\"line\">  streamAllocation = <span class=\"keyword\">new</span> StreamAllocation(</div><div class=\"line\">      client.connectionPool(), createAddress(request.url()), callStackTrace);</div><div class=\"line\">  <span class=\"comment\">// 重定向次数</span></div><div class=\"line\">  <span class=\"keyword\">int</span> followUpCount = <span class=\"number\">0</span>;</div><div class=\"line\">  Response priorResponse = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 无限循环</span></div><div class=\"line\">    ...</div><div class=\"line\">    Response response = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> releaseConnection = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">      releaseConnection = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RouteException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 连接路由失败，请求未发送</span></div><div class=\"line\">      ...</div><div class=\"line\">      releaseConnection = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 与服务端通信失败，请求已发送</span></div><div class=\"line\">      ...</div><div class=\"line\">      releaseConnection = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 释放资源</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (releaseConnection) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 记录上一次的响应，一般出现在重定向情况时。</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 判断是否是重定向的响应</span></div><div class=\"line\">    Request followUp = followUpRequest(response);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (followUp == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"comment\">// 正常响应直接返回</span></div><div class=\"line\">      <span class=\"keyword\">return</span> response;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 检查是否能够继续重定向操作</span></div><div class=\"line\">    ...</div><div class=\"line\">    request = followUp;</div><div class=\"line\">    priorResponse = response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>RetryAndFollowUpInterceptor</code>处理下层链中节点返回的响应和抛出的异常。<br>依据返回的响应或抛出的异常，进行检查和恢复操作</p>\n<ol>\n<li>关闭已建立的Socket连接</li>\n<li>OkHttpClient是否关闭重连，默认开启重连</li>\n<li>请求是否已发送并且请求体不可重读，不可重连</li>\n<li>出现的致命的异常：请求协议异常、证书验证异常等</li>\n<li>是否有下一跳可尝试的路由。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">recover</span><span class=\"params\">(IOException e, <span class=\"keyword\">boolean</span> requestSendStarted, Request userRequest)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 关闭Socket</span></div><div class=\"line\">  streamAllocation.streamFailed(e);</div><div class=\"line\">  <span class=\"comment\">// 如果Application层禁止重连，则直接失败</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!client.retryOnConnectionFailure()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"comment\">// 是否可以再次发送请求</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (requestSendStarted &amp;&amp; userRequest.body() <span class=\"keyword\">instanceof</span> UnrepeatableRequestBody) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"comment\">// 致命异常则不可恢复</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!isRecoverable(e, requestSendStarted)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"comment\">// 没有可以再次尝试的路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!streamAllocation.hasMoreRoutes()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-BridgeInterceptor\"><a href=\"#2-2-BridgeInterceptor\" class=\"headerlink\" title=\"2.2 BridgeInterceptor\"></a>2.2 BridgeInterceptor</h2><p><code>BridgeInterceptor</code>是应用层与网络层节点的桥接，补全应用层请求的头部信息，调用之后网络与缓存数据处理，最后将响应返回给上层。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 重写请求头部，填充必要的头部信息</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 添加 \"Accept-Encoding: gzip\" header ，可以压缩请求数据</span></div><div class=\"line\">  ...</div><div class=\"line\">   requestBuilder.header(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip\"</span>);</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 配置Cookie和代理信息</span></div><div class=\"line\">  ...</div><div class=\"line\">  requestBuilder.header(<span class=\"string\">\"Cookie\"</span>, cookieHeader(cookies));</div><div class=\"line\">  ...</div><div class=\"line\">  requestBuilder.header(<span class=\"string\">\"User-Agent\"</span>, Version.userAgent());</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 把新构建的请求向下传递处理</span></div><div class=\"line\">  Response networkResponse = chain.proceed(requestBuilder.build());</div><div class=\"line\">  <span class=\"comment\">// 处理下层节点返回的响应，响应可能是缓存或者网络数据</span></div><div class=\"line\">  HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());</div><div class=\"line\"></div><div class=\"line\">  Response.Builder responseBuilder = networkResponse.newBuilder()</div><div class=\"line\">      .request(userRequest);</div><div class=\"line\">  <span class=\"comment\">// 响应数据解压</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">return</span> responseBuilder.build();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-3-CacheInterceptor\"><a href=\"#2-3-CacheInterceptor\" class=\"headerlink\" title=\"2.3 CacheInterceptor\"></a>2.3 CacheInterceptor</h2><p>本地缓存和网络缓存，默认无缓存。</p>\n<ol>\n<li>读取本地缓存，根据请求缓存策略构建网络请求和缓存响应。</li>\n<li>按照请求缓存策略，返回缓存或传递给<code>ConnectInterceptor</code>执行下一步数据操作。</li>\n<li>处理返回的网络响应数据的缓存操作。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 读取本地磁盘缓存</span></div><div class=\"line\">  Response cacheCandidate = cache != <span class=\"keyword\">null</span></div><div class=\"line\">      ? cache.get(chain.request())</div><div class=\"line\">      : <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 缓存策略</span></div><div class=\"line\">  CacheStrategy strategy = <span class=\"keyword\">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</div><div class=\"line\">  Request networkRequest = strategy.networkRequest;</div><div class=\"line\">  Response cacheResponse = strategy.cacheResponse;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果缓存未命中，则舍弃缓存</span></div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 禁止网络请求且不存在缓存，返回504，请求失败</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (networkRequest == <span class=\"keyword\">null</span> &amp;&amp; cacheResponse == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> ...;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 禁止网络请求，缓存存在，返回响应到上一级</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (networkRequest == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// return Cache</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Response networkResponse = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    networkResponse = chain.proceed(networkRequest);</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 处理网络缓存失败时，释放缓存流</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 本地存在缓存则检查响应状态码是否为304</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (cacheResponse != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (networkResponse.code() == HTTP_NOT_MODIFIED) &#123;</div><div class=\"line\">      <span class=\"comment\">// update cache</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">return</span> response;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// close cacheResponse </span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 构建新响应</span></div><div class=\"line\">  Response response = networkResponse.newBuilder()</div><div class=\"line\">      .cacheResponse(stripBody(cacheResponse))</div><div class=\"line\">      .networkResponse(stripBody(networkResponse))</div><div class=\"line\">      .build();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (HttpHeaders.hasBody(response)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 响应缓存</span></div><div class=\"line\">    CacheRequest cacheRequest = maybeCache(response, networkResponse.request(), cache);</div><div class=\"line\">    response = cacheWritingResponse(cacheRequest, response);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-4-ConnectInterceptor\"><a href=\"#2-4-ConnectInterceptor\" class=\"headerlink\" title=\"2.4 ConnectInterceptor\"></a>2.4 ConnectInterceptor</h2><ol>\n<li>创建网络读写流必要的HttpCodec，用于请求编码和网络响应解码处理。</li>\n<li>复用或建立Socket连接RealConnection，用于网络数据传输。</li>\n<li>网络数据流具体处理细节交给CallServerInterceptor节点。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  ... </div><div class=\"line\">  StreamAllocation streamAllocation = realChain.streamAllocation();</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 复用或创建新的RealConnection，并创建新的HttpCodec处理网络读写流。</span></div><div class=\"line\">  HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks);</div><div class=\"line\">  RealConnection connection = streamAllocation.connection();</div><div class=\"line\">  <span class=\"comment\">// 交给CallServerInterceptor处理网络流。</span></div><div class=\"line\">  <span class=\"keyword\">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-5-CallServerInterceptor\"><a href=\"#2-5-CallServerInterceptor\" class=\"headerlink\" title=\"2.5 CallServerInterceptor\"></a>2.5 CallServerInterceptor</h2><p>创建服务端的网络调用，向服务端发送请求并获取响应。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取需要写请求和读响应的HttpCodec</span></div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">long</span> sentRequestMillis = System.currentTimeMillis();</div><div class=\"line\">    <span class=\"comment\">// 向服务端发送头部请求</span></div><div class=\"line\">    ...</div><div class=\"line\">    Response.Builder responseBuilder = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// 如果含有支持的方法请求体，则需要向服务端发送请求体</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 发送请求体</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 结束请求</span></div><div class=\"line\">    httpCodec.finishRequest();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果头部响应未读取，则读取头部响应</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (responseBuilder == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      responseBuilder = httpCodec.readResponseHeaders(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 构建响应体</span></div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">return</span> response;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-6-自定义Interceptor\"><a href=\"#2-6-自定义Interceptor\" class=\"headerlink\" title=\"2.6 自定义Interceptor\"></a>2.6 自定义Interceptor</h2><p><code>OkHttp3</code>除了默认5种Interceptor实现，还可以添加<code>Application层</code>与<code>Network层</code>的interceptor。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@OkHttpClient</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 添加应用层Interceptor</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addInterceptor</span><span class=\"params\">(Interceptor interceptor)</span> </span>&#123;</div><div class=\"line\">      interceptors.add(interceptor);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 添加网络层Interceptor</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interceptor&gt; <span class=\"title\">networkInterceptors</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> networkInterceptors;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>应用层Interceptors</li>\n</ol>\n<p><code>Application Interceptors</code>对每个请求只调用一次，处理<code>BridgeInterceptor</code>返回的响应。可以不调用Chain.proceed()或多次调用Chain.proceed()。</p>\n<ol>\n<li>网络层Interceptors</li>\n</ol>\n<p><code>Network Interceptors</code>在<code>ConnectInterceptor</code>与<code>CallServerInterceptor</code>之间调用。涉及到网络相关操作都会经过<code>Network Interceptors</code>，因此可以在缓存响应数据的之前对响应数据进行预处理。与<code>Application Interceptors</code>不同的是不支持短路处理，必须且只能调用一次<code>Chain.proceed()</code>方法，保证链式调用唯一。</p>\n<p>一个简单的LogInterceptors<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Interceptor.Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    Request request = chain.request();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">long</span> t1 = System.nanoTime();</div><div class=\"line\">    logger.info(String.format(<span class=\"string\">\"Sending request %s on %s%n%s\"</span>,</div><div class=\"line\">        request.url(), chain.connection(), request.headers()));</div><div class=\"line\"></div><div class=\"line\">    Response response = chain.proceed(request);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">long</span> t2 = System.nanoTime();</div><div class=\"line\">    logger.info(String.format(<span class=\"string\">\"Received response for %s in %.1fms%n%s\"</span>,</div><div class=\"line\">        response.request().url(), (t2 - t1) / <span class=\"number\">1e6</span>d, response.headers()));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Version : okhttp:3.6.0</p>\n</blockquote>\n<p><code>Interceptors</code>是OkHttp3整个框架的核心，包含了请求监控、请求重写、调用重试等机制。它主要使用责任链模式，解决请求与请求处理之间的耦合。<br><img src=\"https://raw.githubusercontent.com/wiki/square/okhttp/interceptors@2x.png\" alt=\"img\"></p>\n<h2 id=\"1-1-责任链模式\"><a href=\"#1-1-责任链模式\" class=\"headerlink\" title=\"1.1 责任链模式\"></a>1.1 责任链模式</h2><p>将接收对象放入链中，按照链中顺序让多个对象处理请求。请求者不用知道具体是由谁处理。解决请求与接收之间的耦合，提高灵活性。<br>责任链负责对请求参数的解析，所有的扩展都是针对链中节点进行扩展。</p>\n<p>OkHttp3的Interceptors的责任链<br><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1492487313/wechat/Interceptors_uml.jpg\" alt=\"img\"></p>\n<h2 id=\"1-2-OkHttp3链式流程\"><a href=\"#1-2-OkHttp3链式流程\" class=\"headerlink\" title=\"1.2 OkHttp3链式流程\"></a>1.2 OkHttp3链式流程</h2><p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1492482119/wechat/OkHttp3_Interceptor.jpg\" alt=\"img\"></p>\n<h2 id=\"2-1-RetryAndFollowUpInterceptor\"><a href=\"#2-1-RetryAndFollowUpInterceptor\" class=\"headerlink\" title=\"2.1 RetryAndFollowUpInterceptor\"></a>2.1 RetryAndFollowUpInterceptor</h2><p><code>RetryAndFollowUpInterceptor</code>用于尝试恢复失败和重定向的请求，最多支持跟踪20次重定向。创建streamAllocation维护请求的Connections、Streams、Calls，类似中介者模式，之后交给BridgeInterceptor节点处理请求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 创建用于协调Connections、Streams、Call三者关系的streamAllocation</span></div><div class=\"line\">  streamAllocation = <span class=\"keyword\">new</span> StreamAllocation(</div><div class=\"line\">      client.connectionPool(), createAddress(request.url()), callStackTrace);</div><div class=\"line\">  <span class=\"comment\">// 重定向次数</span></div><div class=\"line\">  <span class=\"keyword\">int</span> followUpCount = <span class=\"number\">0</span>;</div><div class=\"line\">  Response priorResponse = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 无限循环</span></div><div class=\"line\">    ...</div><div class=\"line\">    Response response = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> releaseConnection = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">      releaseConnection = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RouteException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 连接路由失败，请求未发送</span></div><div class=\"line\">      ...</div><div class=\"line\">      releaseConnection = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 与服务端通信失败，请求已发送</span></div><div class=\"line\">      ...</div><div class=\"line\">      releaseConnection = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 释放资源</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (releaseConnection) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 记录上一次的响应，一般出现在重定向情况时。</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 判断是否是重定向的响应</span></div><div class=\"line\">    Request followUp = followUpRequest(response);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (followUp == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"comment\">// 正常响应直接返回</span></div><div class=\"line\">      <span class=\"keyword\">return</span> response;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 检查是否能够继续重定向操作</span></div><div class=\"line\">    ...</div><div class=\"line\">    request = followUp;</div><div class=\"line\">    priorResponse = response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>RetryAndFollowUpInterceptor</code>处理下层链中节点返回的响应和抛出的异常。<br>依据返回的响应或抛出的异常，进行检查和恢复操作</p>\n<ol>\n<li>关闭已建立的Socket连接</li>\n<li>OkHttpClient是否关闭重连，默认开启重连</li>\n<li>请求是否已发送并且请求体不可重读，不可重连</li>\n<li>出现的致命的异常：请求协议异常、证书验证异常等</li>\n<li>是否有下一跳可尝试的路由。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">recover</span><span class=\"params\">(IOException e, <span class=\"keyword\">boolean</span> requestSendStarted, Request userRequest)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 关闭Socket</span></div><div class=\"line\">  streamAllocation.streamFailed(e);</div><div class=\"line\">  <span class=\"comment\">// 如果Application层禁止重连，则直接失败</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!client.retryOnConnectionFailure()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"comment\">// 是否可以再次发送请求</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (requestSendStarted &amp;&amp; userRequest.body() <span class=\"keyword\">instanceof</span> UnrepeatableRequestBody) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"comment\">// 致命异常则不可恢复</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!isRecoverable(e, requestSendStarted)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"comment\">// 没有可以再次尝试的路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!streamAllocation.hasMoreRoutes()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-BridgeInterceptor\"><a href=\"#2-2-BridgeInterceptor\" class=\"headerlink\" title=\"2.2 BridgeInterceptor\"></a>2.2 BridgeInterceptor</h2><p><code>BridgeInterceptor</code>是应用层与网络层节点的桥接，补全应用层请求的头部信息，调用之后网络与缓存数据处理，最后将响应返回给上层。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 重写请求头部，填充必要的头部信息</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 添加 \"Accept-Encoding: gzip\" header ，可以压缩请求数据</span></div><div class=\"line\">  ...</div><div class=\"line\">   requestBuilder.header(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip\"</span>);</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 配置Cookie和代理信息</span></div><div class=\"line\">  ...</div><div class=\"line\">  requestBuilder.header(<span class=\"string\">\"Cookie\"</span>, cookieHeader(cookies));</div><div class=\"line\">  ...</div><div class=\"line\">  requestBuilder.header(<span class=\"string\">\"User-Agent\"</span>, Version.userAgent());</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 把新构建的请求向下传递处理</span></div><div class=\"line\">  Response networkResponse = chain.proceed(requestBuilder.build());</div><div class=\"line\">  <span class=\"comment\">// 处理下层节点返回的响应，响应可能是缓存或者网络数据</span></div><div class=\"line\">  HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());</div><div class=\"line\"></div><div class=\"line\">  Response.Builder responseBuilder = networkResponse.newBuilder()</div><div class=\"line\">      .request(userRequest);</div><div class=\"line\">  <span class=\"comment\">// 响应数据解压</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">return</span> responseBuilder.build();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-3-CacheInterceptor\"><a href=\"#2-3-CacheInterceptor\" class=\"headerlink\" title=\"2.3 CacheInterceptor\"></a>2.3 CacheInterceptor</h2><p>本地缓存和网络缓存，默认无缓存。</p>\n<ol>\n<li>读取本地缓存，根据请求缓存策略构建网络请求和缓存响应。</li>\n<li>按照请求缓存策略，返回缓存或传递给<code>ConnectInterceptor</code>执行下一步数据操作。</li>\n<li>处理返回的网络响应数据的缓存操作。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 读取本地磁盘缓存</span></div><div class=\"line\">  Response cacheCandidate = cache != <span class=\"keyword\">null</span></div><div class=\"line\">      ? cache.get(chain.request())</div><div class=\"line\">      : <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 缓存策略</span></div><div class=\"line\">  CacheStrategy strategy = <span class=\"keyword\">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</div><div class=\"line\">  Request networkRequest = strategy.networkRequest;</div><div class=\"line\">  Response cacheResponse = strategy.cacheResponse;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果缓存未命中，则舍弃缓存</span></div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 禁止网络请求且不存在缓存，返回504，请求失败</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (networkRequest == <span class=\"keyword\">null</span> &amp;&amp; cacheResponse == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> ...;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 禁止网络请求，缓存存在，返回响应到上一级</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (networkRequest == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// return Cache</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Response networkResponse = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    networkResponse = chain.proceed(networkRequest);</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 处理网络缓存失败时，释放缓存流</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 本地存在缓存则检查响应状态码是否为304</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (cacheResponse != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (networkResponse.code() == HTTP_NOT_MODIFIED) &#123;</div><div class=\"line\">      <span class=\"comment\">// update cache</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">return</span> response;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// close cacheResponse </span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 构建新响应</span></div><div class=\"line\">  Response response = networkResponse.newBuilder()</div><div class=\"line\">      .cacheResponse(stripBody(cacheResponse))</div><div class=\"line\">      .networkResponse(stripBody(networkResponse))</div><div class=\"line\">      .build();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (HttpHeaders.hasBody(response)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 响应缓存</span></div><div class=\"line\">    CacheRequest cacheRequest = maybeCache(response, networkResponse.request(), cache);</div><div class=\"line\">    response = cacheWritingResponse(cacheRequest, response);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-4-ConnectInterceptor\"><a href=\"#2-4-ConnectInterceptor\" class=\"headerlink\" title=\"2.4 ConnectInterceptor\"></a>2.4 ConnectInterceptor</h2><ol>\n<li>创建网络读写流必要的HttpCodec，用于请求编码和网络响应解码处理。</li>\n<li>复用或建立Socket连接RealConnection，用于网络数据传输。</li>\n<li>网络数据流具体处理细节交给CallServerInterceptor节点。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  ... </div><div class=\"line\">  StreamAllocation streamAllocation = realChain.streamAllocation();</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 复用或创建新的RealConnection，并创建新的HttpCodec处理网络读写流。</span></div><div class=\"line\">  HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks);</div><div class=\"line\">  RealConnection connection = streamAllocation.connection();</div><div class=\"line\">  <span class=\"comment\">// 交给CallServerInterceptor处理网络流。</span></div><div class=\"line\">  <span class=\"keyword\">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-5-CallServerInterceptor\"><a href=\"#2-5-CallServerInterceptor\" class=\"headerlink\" title=\"2.5 CallServerInterceptor\"></a>2.5 CallServerInterceptor</h2><p>创建服务端的网络调用，向服务端发送请求并获取响应。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取需要写请求和读响应的HttpCodec</span></div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">long</span> sentRequestMillis = System.currentTimeMillis();</div><div class=\"line\">    <span class=\"comment\">// 向服务端发送头部请求</span></div><div class=\"line\">    ...</div><div class=\"line\">    Response.Builder responseBuilder = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// 如果含有支持的方法请求体，则需要向服务端发送请求体</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 发送请求体</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 结束请求</span></div><div class=\"line\">    httpCodec.finishRequest();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果头部响应未读取，则读取头部响应</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (responseBuilder == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      responseBuilder = httpCodec.readResponseHeaders(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 构建响应体</span></div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">return</span> response;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-6-自定义Interceptor\"><a href=\"#2-6-自定义Interceptor\" class=\"headerlink\" title=\"2.6 自定义Interceptor\"></a>2.6 自定义Interceptor</h2><p><code>OkHttp3</code>除了默认5种Interceptor实现，还可以添加<code>Application层</code>与<code>Network层</code>的interceptor。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@OkHttpClient</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 添加应用层Interceptor</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">addInterceptor</span><span class=\"params\">(Interceptor interceptor)</span> </span>&#123;</div><div class=\"line\">      interceptors.add(interceptor);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 添加网络层Interceptor</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interceptor&gt; <span class=\"title\">networkInterceptors</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> networkInterceptors;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>应用层Interceptors</li>\n</ol>\n<p><code>Application Interceptors</code>对每个请求只调用一次，处理<code>BridgeInterceptor</code>返回的响应。可以不调用Chain.proceed()或多次调用Chain.proceed()。</p>\n<ol>\n<li>网络层Interceptors</li>\n</ol>\n<p><code>Network Interceptors</code>在<code>ConnectInterceptor</code>与<code>CallServerInterceptor</code>之间调用。涉及到网络相关操作都会经过<code>Network Interceptors</code>，因此可以在缓存响应数据的之前对响应数据进行预处理。与<code>Application Interceptors</code>不同的是不支持短路处理，必须且只能调用一次<code>Chain.proceed()</code>方法，保证链式调用唯一。</p>\n<p>一个简单的LogInterceptors<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Interceptor.Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    Request request = chain.request();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">long</span> t1 = System.nanoTime();</div><div class=\"line\">    logger.info(String.format(<span class=\"string\">\"Sending request %s on %s%n%s\"</span>,</div><div class=\"line\">        request.url(), chain.connection(), request.headers()));</div><div class=\"line\"></div><div class=\"line\">    Response response = chain.proceed(request);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">long</span> t2 = System.nanoTime();</div><div class=\"line\">    logger.info(String.format(<span class=\"string\">\"Received response for %s in %.1fms%n%s\"</span>,</div><div class=\"line\">        response.request().url(), (t2 - t1) / <span class=\"number\">1e6</span>d, response.headers()));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"深入理解OkHttp3的DiskLruCache（2）","date":"2017-04-24T02:14:09.000Z","_content":"磁盘缓存是将网络资源先保存到系统分配出的内存空间中，当内存中的资源容量达到某个限度时，在将内存中的资源保存的磁盘中。这样做可以有效减少磁盘的读写操作。\n\nOkHttp3的网络缓存主要实现由`DiskLruCache`这个类来实现。缓存保存在应用指定的内部缓存文件夹中，在调用磁盘缓存时，`DisLruCache`读取缓存文件快照到内存。涉及到缓存的读写任务都由类`DiskLruCache.Edit.java`完成。\n# 1. 缓存文件格式\n## 1.1 缓存日志文件\nOkHttp3的缓存数据保存在名为`journal`的文件中。\n标准的`journal`文件格式\n```\nlibcore.io.DiskLruCache\n1\n100\n2\n\nCLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054\nDIRTY 335c4c6028171cfddfbaae1a9c313c52\nCLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342\nREMOVE 335c4c6028171cfddfbaae1a9c313c52\nDIRTY 1ab96a171faeeee38496d8b330771a7a\nCLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234\nREAD 335c4c6028171cfddfbaae1a9c313c52\nREAD 3400330d1dfc7f3f7f4b8d4d803dfcf6\n...\n```\n前五行是文件头部，分别是区分文件格式的++MAGIC数++（固定为`libcore.io.DiskLruCache`）、++缓存版本++、++应用版本++、++Key对应Value值个数++和一个++空白行++。\n之后的每行都对应一个Cache实体的状态记录。由++状态++、++键值++和++可选择具体状态值++组成。\n- DIRTY\n正在++创建++或++更新++缓存数据的监视信息。每个成功的DIRTY操作之后都会紧跟一个CLEAN或REMOVE操作。如果没有对应的CLEAN或REMOVE操作说明应该删除掉临时文件。\n- CLEAN\n可以读取缓存的记录。之后是缓存文件的长度。\n- READ\n缓存访问记录\n- REMOVE\n缓存删除记录\n\n`journal`文件偶尔会丢掉多余的行数来压缩，压缩时使用`journal.tmp`的临时文件，打开缓存时如果临时文件存在，则删除临时文件。\n\n## 1.2 缓存文件\n`DiskLruCache`用了两种文件来保存缓存：++缓存元数据++文件和++缓存体++文件。\n- 缓存元数据文件保存响应的请求和响应的首部信息，如果是HTTPS请求还保存对应的加密和握手协议。\n- 缓存体文件保存具体的文件\n### 1.2.1 缓存元数据文件\n\n标准的==HTTP== META_DATA\n```json\nhttp://google.com/foo\nGET\n2\nAccept-Language: fr-CA\nAccept-Charset: UTF-8\nHTTP/1.1 200 OK\n3\nContent-Type: image/png\nContent-Length: 100\nCache-Control: max-age=600\n```\n标准的==HTTPS== META_DATA\n```json\nhttps://google.com/foo\nGET\n2\nAccept-Language: fr-CA\nAccept-Charset: UTF-8\nHTTP/1.1 200 OK\n3\nContent-Type: image/png\nContent-Length: 100\nCache-Control: max-age=600\n\nAES_256_WITH_MD5\n2\nbase64-encoded peerCertificate[0]\nbase64-encoded peerCertificate[1]\n-1\nTLSv1.2\n```\n1. 1-2行是++URL++与++请求方法++。\n2. 第3行是HTTP请求Vary头部字段数量，表示++请求头部数++\n3. 紧跟之后的是Vary响应字段，表示++请求的头部信息++。\n4. 在请求Vary头部字段之后是响应状态。包含++HTTP版本++，++状态码++和++Message++\n5. 在响应行之后是++响应头部数量++值。之后是++响应头部++信息详情。\n6. 对于HTTPS请求还包含SSL的session信息。由一个++空行++、++密码组++、++证书链长度++、++证书链++、++本地证书长度++（`-1`表示无本地证书）、最后一行为++可选信息++（如果有表示`TLS`的版本号）。\n### 1.2.3 缓存体文件\n缓存内容存储的是响应的具体信息。如`Json`、`图片`等具体的文件内容。\n## 1.3 缓存类的结构\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1490865300/wechat/OkHttpCache.jpg)\n# 2. 初始化\n任何对缓存的操作都会调用缓存的初始化。读取缓存的日志文件，用`LinkHashMap.java`来存储日志的操作记录，方便删除与查找。\n```java\n@DiskLruCache.java\npublic synchronized void initialize() throws IOException {\n    ...\n    // If a bkp file exists, use it instead.\n    ...\n    // Prefer to pick up where we left off.\n    if (fileSystem.exists(journalFile)) {\n      try {\n        // [1]\n        readJournal();\n        // [2]\n        processJournal();\n        initialized = true;\n        return;\n      } catch (IOException journalIsCorrupt) {\n        ...\n        // [3]\n        delete();\n        closed = false;\n      }\n    }\n    // [4]\n    rebuildJournal();\n    initialized = true;\n}\n```\n## 2.1 读取本地缓存\n```java\n@DiskLruCache.java\n// [1]\nprivate void readJournal() throws IOException {\n    BufferedSource source = Okio.buffer(fileSystem.source(journalFile));\n    try {\n      // check journal header\n      ...\n      int lineCount = 0;\n      while (true) {\n        try {\n          // [1.1]\n          readJournalLine(source.readUtf8LineStrict());\n          lineCount++;\n        } catch (EOFException endOfJournal) {\n          break;\n        }\n      }\n      // 记录有效的缓存操作记录数\n      redundantOpCount = lineCount - lruEntries.size();\n      // If we ended on a truncated line, rebuild the journal before appending to it.\n      ...\n    } finally {\n      Util.closeQuietly(source);\n    }\n}\n```\n迭代读取缓存日志文件每行操作，\n```java\n@DiskLruCache.java\n// [1.1]\nprivate void readJournalLine(String line) throws IOException {\n    // 检查是否是有效的操作行\n    ...\n    int keyBegin = firstSpace + 1;\n    int secondSpace = line.indexOf(' ', keyBegin);\n    final String key;\n    if (secondSpace == -1) {\n      // 如果是REMOVE操作，移除内存中对应的失效缓存\n      ...\n    } else {\n      key = line.substring(keyBegin, secondSpace);\n    }\n    // 读取内存中的Entry，如果没有则创建新的Entry并添加到LinkHashMap中\n    Entry entry = lruEntries.get(key);\n    ...\n    if (secondSpace != -1 && firstSpace == CLEAN.length() && line.startsWith(CLEAN)) {\n      // CLEAN操作\n      String[] parts = line.substring(secondSpace + 1).split(\" \");\n      entry.readable = true;\n      entry.currentEditor = null;\n      entry.setLengths(parts);\n    } else if (secondSpace == -1 && firstSpace == DIRTY.length() && line.startsWith(DIRTY)) {\n      // 脏数据，赋值Editor待后续清理\n      entry.currentEditor = new Editor(entry);\n    } else if (secondSpace == -1 && firstSpace == READ.length() && line.startsWith(READ)) {\n      // READ操作\n    } else {\n      // 非法操作行数据\n      throw new IOException(\"unexpected journal line: \" + line);\n    }\n}\n```\n## 2.2 处理读取到的缓存\n处理读取到Entry链表，清理垃圾缓存和操作\n```java\n@DiskLruCache.java\n// [2] 计算初始大小，回收垃圾缓存。\nprivate void processJournal() throws IOException {\n    fileSystem.delete(journalFileTmp);\n    for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {\n      Entry entry = i.next();\n      // entry.currentEditor 如果不是空说明是DIRTY的数据，上面分析过\n      if (entry.currentEditor == null) {\n        for (int t = 0; t < valueCount; t++) {\n          size += entry.lengths[t];\n        }\n      } else {\n        entry.currentEditor = null;\n        // valueCount = 2\n        for (int t = 0; t < valueCount; t++) {\n          fileSystem.delete(entry.cleanFiles[t]);\n          fileSystem.delete(entry.dirtyFiles[t]);\n        }\n        i.remove();\n      }\n    }\n}\n```\n## 2.3 异常处理\n读取或处理缓存时发生异常，说明缓存文件已破坏，清空缓存目录下的所有文件\n```java\n@DiskLruCache.java\n// [3] 出现异常时，关闭缓存并删除缓存目录下所有文件\npublic void delete() throws IOException {\n    close();\n    fileSystem.deleteContents(directory);\n}\n```\n## 2.4 异常后的恢复\n出现异常清空缓存目录后，需要重新创建Clean的缓存文件。\n```java\n@DiskLruCache.java\n// [4] 创建新的日志文件，会替换当前存在的日志文件\nprivate synchronized void rebuildJournal() throws IOException {\n    // 先关闭日志写操作\n    ...\n    // 创建一个临时文件\n    BufferedSink writer = Okio.buffer(fileSystem.sink(journalFileTmp));\n    try {\n      // 写入日志必要的头信息\n      ...\n      // 迭代内存中日志记录\n      for (Entry entry : lruEntries.values()) {\n        if (entry.currentEditor != null) {\n          // 写入DIRTY记录\n        } else {\n          // 写入CLEAN记录\n        }\n      }\n    } finally {\n      writer.close();\n    }\n    // 备份现有日志文件，保存新日志文件，然后删除备份文件\n    hasJournalErrors = false;\n}\n```\n# 3. 缓存读取\n\n```java \n@Cache.java\nResponse get(Request request) {\n    // 缓存的KEY值实际就是Request的Url的MD5值\n    String key = urlToKey(request);\n    DiskLruCache.Snapshot snapshot; // 缓存快照，包装了Source和Sink\n    ...\n    // [1]\n    snapshot = cache.get(key);\n    ... \n    try {\n      // [2]\n      entry = new Entry(snapshot.getSource(ENTRY_METADATA));\n    } catch (IOException e) {\n      Util.closeQuietly(snapshot);\n      return null;\n    }\n    // [3]\n    Response response = entry.response(snapshot);\n    ...\n    return response;\n  }\n```\n## 3.1 缓存文件快照\nSnapshot内是缓存文件的Source、每个文件的具体大小。\n```java\n@DiskLruCache.Snapshot.java\nprivate final String key;          // Request key值\nprivate final long sequenceNumber; // 多线程\nprivate final Source[] sources;    // 缓存元数据和缓存体文件输入流\nprivate final long[] lengths;      // metadata和body缓存文件长度\n```\n\n```java \n@DiskLruCache.java\n// [1]\npublic synchronized Snapshot get(String key) throws IOException {\n    ...\n    Entry entry = lruEntries.get(key);\n    ...\n    // [1.1]\n    Snapshot snapshot = entry.snapshot();\n    ...\n}\n```\n```java\n@DiskLruCache.Entry.java\n// [1.1]\nSnapshot snapshot() {\n  ...\n  // valueCount = 2\n  Source[] sources = new Source[valueCount];\n  long[] lengths = this.lengths.clone(); // Defensive copy since these can be zeroed out.\n  try {\n    for (int i = 0; i < valueCount; i++) {\n      sources[i] = fileSystem.source(cleanFiles[i]);\n    }\n    return new Snapshot(key, sequenceNumber, sources, lengths);\n  } catch (FileNotFoundException e) {\n    ...\n    return null;\n  }\n}\n```\n## 3.2 构建缓存响应\n缓存响应包括请求的详细信息，协议，响应码和响应体`CacheResponseBody.java`\n```java\n@Cache.Entry.java\n// [3]\npublic Response response(DiskLruCache.Snapshot snapshot) {\n  String contentType = responseHeaders.get(\"Content-Type\");\n  String contentLength = responseHeaders.get(\"Content-Length\");\n  Request cacheRequest = new Request.Builder()\n      .url(url)\n      .method(requestMethod, null)\n      .headers(varyHeaders)\n      .build();\n  return new Response.Builder()\n      .request(cacheRequest)\n      .protocol(protocol)\n      .code(code)\n      .message(message)\n      .headers(responseHeaders)\n      // [3.1]\n      .body(new CacheResponseBody(snapshot, contentType, contentLength))\n      .handshake(handshake)\n      .build();\n}\n```\n\n```java\n@Cache.CacheResponseBody.java\n// [3.1]\npublic CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n    String contentType, String contentLength) {\n  ...\n  // 创建缓存体文件Source\n  // [3.1.1]\n  Source source = snapshot.getSource(ENTRY_BODY);\n  bodySource = Okio.buffer(new ForwardingSource(source) {\n    @Override public void close() throws IOException {\n      snapshot.close();\n      super.close();\n    }\n  });\n}\n```\n\n# 4. 缓存写入\n```java\n@Cache.java\nprivate CacheRequest put(Response response) throws IOException {\n    String requestMethod = response.request().method();\n    \n    if (HttpMethod.invalidatesCache(response.request().method())) {\n      // OkHttp3只支持GET请求缓存\n      return null;\n    }\n    if (!requestMethod.equals(\"GET\")) {\n      // Don't cache non-GET responses. We're technically allowed to cache\n      // HEAD requests and some POST requests, but the complexity of doing\n      // so is high and the benefit is low.\n      return null;\n    }\n    \n    if (OkHeaders.hasVaryAll(response)) {\n      return null;\n    }\n    \n    Entry entry = new Entry(response);\n    DiskLruCache.Editor editor = null;\n    try {\n      // [1] 将请求的URL的MD5值作为缓存Key值\n      editor = cache.edit(urlToKey(response.request()));\n      if (editor == null) {\n        return null;\n      }\n      // [2] 写入请求META_DATA信息\n      entry.writeTo(editor);\n      // [3] 初始化缓存请求，用于写入缓存体\n      return new CacheRequestImpl(editor);\n    } catch (IOException e) {\n      // 出现异常，结束Editor任务\n      return null;\n    }\n}\n```\n\n## 4.1 初始Editor对象\nEditor主要作用就是创建写入。\n```java\n@DiskLruCache.java\n// [1]\npublic Editor edit(String key) throws IOException {\n    return edit(key, ANY_SEQUENCE_NUMBER);\n}\n// \nprivate synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {\n    // 检查是否初始化，是否关闭，Key值验证\n    ...\n    Entry entry = lruEntries.get(key);\n    // Snapshot是否过期，是否已有Editor在运行\n    ...\n    // 日志文件是否超过最大值\n    ...\n    // DIRTY记录，防止缓存文件泄露问题，先Flush记录日志\n    // Flush the journal before creating files to prevent file leaks.\n    journalWriter.writeUtf8(DIRTY).writeByte(' ').writeUtf8(key).writeByte('\\n');\n    journalWriter.flush();\n    \n    if (hasJournalErrors) {\n      return null; // Don't edit; the journal can't be written.\n    }\n    ...\n    // 初始化新的Editor\n    Editor editor = new Editor(entry);\n    entry.currentEditor = editor;\n    return editor;\n}\n\n```\n## 4.2 写入元数据\n```java\n@Cache.Entry.java\n// [2]\npublic void writeTo(DiskLruCache.Editor editor) throws IOException {\n  BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));\n  // 写入缓存元数据，参考缓存元数据节\n}\n```\n## 4.3 CacheRequest\n创建`CacheRequestImpl`目的是处理缓存输出流的处理。创建一个临时缓存文件来写入缓存。写入成功后，由Editor完成最后的缓存体的处理。\n\n```java\n@CacheRequestImpl.java\n// [3]\npublic CacheRequestImpl(final DiskLruCache.Editor editor) throws IOException {\n  this.editor = editor;\n  // [3.1] 初始化缓存体\n  \n  this.cacheOut = editor.newSink(ENTRY_BODY);\n  this.body = new ForwardingSink(cacheOut) {\n    @Override public void close() throws IOException {\n      synchronized (Cache.this) {\n        if (done) {\n          return;\n        }\n        done = true;\n        writeSuccessCount++;\n      }\n      super.close();\n      // [3.2] 完成缓存体文件写入\n      editor.commit();\n    }\n  };\n}\n```\n### 4.3.1 未缓冲的输出流\n```java\n@DiskLruCache.Editor.java\n// [3.1]\npublic Sink newSink(int index) throws IOException {\n  synchronized (DiskLruCache.this) {\n    // 保证编辑的是对应缓存文件\n    ... \n    if (!entry.readable) {\n      // 缓存文件是否正在编辑\n      written[index] = true;\n    }\n    // 初始化临时缓存文件\n    File dirtyFile = entry.dirtyFiles[index];\n    Sink sink;\n    try {\n      // 初始化缓存文件的Sink\n      sink = fileSystem.sink(dirtyFile);\n    } catch (FileNotFoundException e) {\n      return NULL_SINK;\n    }\n    // 初始化错误流处理的Sink\n    return new FaultHidingSink(sink) {\n      @Override protected void onException(IOException e) {\n        synchronized (DiskLruCache.this) {\n          hasErrors = true;\n        }\n      }\n    };\n  }\n}\n```\n\n### 4.3.1 提交写入操作\n如果输出流写入缓存文件出现错误，需要删除缓存文件\n```java\n@DiskLruCache.Edtor.java\n// [3.2]\npublic void commit() throws IOException {\n  synchronized (DiskLruCache.this) {\n    if (hasErrors) {\n      // [3.2.1] 缓存出错，记录REMOVE日志\n      completeEdit(this, false);\n      // [3.2.2] 记录REMOVE日志，移除Entry\n      removeEntry(entry);\n    } else {\n      // [3.2.1] 完成缓存体写入\n      completeEdit(this, true);\n    }\n    committed = true;\n  }\n}\n```\n### 4.3.1 完成提交\n```java\n@DiskLruCache.java\n// [3.2.1]\nprivate synchronized void completeEdit(Editor editor, boolean success) throws IOException {\n    // success : true表示成功写入缓存文件\n    Entry entry = editor.entry;\n    ...\n    \n    // If this edit is creating the entry for the first time, every index must have a value.\n    ...\n    // 保存临时缓存文件（成功时且临时文件存在）或删除临时缓存文件（失败时）\n    // 成功写入缓存文件时，需要更新Map中对应的Entry信息\n    for (int i = 0; i < valueCount; i++) {\n      File dirty = entry.dirtyFiles[i];\n      if (success) {\n        if (fileSystem.exists(dirty)) {\n          // 存储临时文件到缓存体文件\n          File clean = entry.cleanFiles[i];\n          fileSystem.rename(dirty, clean);\n          long oldLength = entry.lengths[i];\n          long newLength = fileSystem.size(clean);\n          entry.lengths[i] = newLength;\n          size = size - oldLength + newLength;\n        }\n      } else {\n        // 删除临时缓存文件\n        fileSystem.delete(dirty);\n      }\n    }\n    ...\n    // 日志记录数\n    redundantOpCount++;\n    entry.currentEditor = null;\n    if (entry.readable | success) {\n      // 记录CLEAN日志\n      entry.readable = true;\n      ...\n      if (success) {\n        entry.sequenceNumber = nextSequenceNumber++;\n      }\n    } else {\n      // 记录REMOVE日志\n    }\n    journalWriter.flush();\n    // 整理日志大小\n    if (size > maxSize || journalRebuildRequired()) {\n      executor.execute(cleanupRunnable);\n    }\n}\n```\n\n```java\n@DiskLruCache.java\n// [3.2.2]\nprivate boolean removeEntry(Entry entry) throws IOException {\n    if (entry.currentEditor != null) {\n      entry.currentEditor.hasErrors = true; // Prevent the edit from completing normally.\n    }\n    // 删除失效的缓存文件\n    ...\n    // 记录日志操作数\n    redundantOpCount++;\n    // 记录REMOVE操作\n    journalWriter.writeUtf8(REMOVE).writeByte(' ').writeUtf8(entry.key).writeByte('\\n');\n    lruEntries.remove(entry.key);\n    // 超过一定操作次数后，对文件进行清理操作\n    if (journalRebuildRequired()) {\n      executor.execute(cleanupRunnable);\n    }\n     \n    return true;\n}\n```\n# 5. 缓存更新\n更新的操作是在读取缓存操作，使用缓存策略与服务器返回的状态或头部信息来决定是否更新缓存。\n```java\n@Cache.java\nprivate void update(Response cached, Response network) {\n    Entry entry = new Entry(network);\n    // [1] 读取缓存文件快照，cached 是读取缓存得到的Response，由读取缓存小节中知道cached.body()实际上就是CacheResponseBody\n    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;\n    DiskLruCache.Editor editor = null;\n    try {\n      // [2] snapshot.edit调用就是DiskLruCache的edit(String key, long expectedSequenceNumber)方法。\n      editor = snapshot.edit(); // Returns null if snapshot is not current.\n      if (editor != null) {\n        // [3] 更新缓存元数据，参考缓存小节\n        entry.writeTo(editor);\n        // [4] 更新缓存体，记录操作日志，参考缓存写入小节\n        editor.commit();\n      }\n    } catch (IOException e) {\n      // 更新出现异常，清理本地缓存文件\n      abortQuietly(editor);\n    }\n}\n```\n\n# 6. 缓存清理\nOkHttp3缓存清理支持++手动++和++自动++两种。\n- 手动清理缓存文件，直接调用`Cache.remove(Request request)`方法，可以清理指定请求的缓存文件，也支持批量缓存清理`Cache.evictAll()`将缓存文件全部清空\n- 自动清理缓存则在运行时自动判断。如果服务器响应的不需要缓存，判断本地是否进行过缓存决定是否清理已有的缓存文件。\n```java\n@Cache.java\nprivate void remove(Request request) throws IOException {\n    // [1] 调用DiskLruCache删除缓存\n    cache.remove(urlToKey(request));\n}\n```\n```java\n@DiskLruCache.java\npublic synchronized boolean remove(String key) throws IOException {\n    // 一些判断\n    ...\n    // [1] 清理缓存文件，记录缓存操作，参考写入。\n    boolean removed = removeEntry(entry);\n    if (removed && size <= maxSize) mostRecentTrimFailed = false;\n    return removed;\n}\n```\n# 7. 关闭缓存\n清空全部缓存或调用`Cache.close`关闭缓存。关闭缓存时会清除所有正在读写操作的缓存任务。\n```java\n@DiskLruCache.java\npublic synchronized void close() throws IOException {\n    if (!initialized || closed) {\n      closed = true;\n      return;\n    }\n    // Copying for safe iteration.\n    for (Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {\n      if (entry.currentEditor != null) {\n        entry.currentEditor.abort();\n      }\n    }\n    trimToSize();\n    journalWriter.close();\n    journalWriter = null;\n    closed = true;\n}\n```","source":"_posts/深入理解OkHttp3的DiskLruCache.md","raw":"---\ntitle: 深入理解OkHttp3的DiskLruCache（2）\ndate: 2017-04-24 10:14:09\ntags: okhttp3 android\ncategories: okhttp3\n---\n磁盘缓存是将网络资源先保存到系统分配出的内存空间中，当内存中的资源容量达到某个限度时，在将内存中的资源保存的磁盘中。这样做可以有效减少磁盘的读写操作。\n\nOkHttp3的网络缓存主要实现由`DiskLruCache`这个类来实现。缓存保存在应用指定的内部缓存文件夹中，在调用磁盘缓存时，`DisLruCache`读取缓存文件快照到内存。涉及到缓存的读写任务都由类`DiskLruCache.Edit.java`完成。\n# 1. 缓存文件格式\n## 1.1 缓存日志文件\nOkHttp3的缓存数据保存在名为`journal`的文件中。\n标准的`journal`文件格式\n```\nlibcore.io.DiskLruCache\n1\n100\n2\n\nCLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054\nDIRTY 335c4c6028171cfddfbaae1a9c313c52\nCLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342\nREMOVE 335c4c6028171cfddfbaae1a9c313c52\nDIRTY 1ab96a171faeeee38496d8b330771a7a\nCLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234\nREAD 335c4c6028171cfddfbaae1a9c313c52\nREAD 3400330d1dfc7f3f7f4b8d4d803dfcf6\n...\n```\n前五行是文件头部，分别是区分文件格式的++MAGIC数++（固定为`libcore.io.DiskLruCache`）、++缓存版本++、++应用版本++、++Key对应Value值个数++和一个++空白行++。\n之后的每行都对应一个Cache实体的状态记录。由++状态++、++键值++和++可选择具体状态值++组成。\n- DIRTY\n正在++创建++或++更新++缓存数据的监视信息。每个成功的DIRTY操作之后都会紧跟一个CLEAN或REMOVE操作。如果没有对应的CLEAN或REMOVE操作说明应该删除掉临时文件。\n- CLEAN\n可以读取缓存的记录。之后是缓存文件的长度。\n- READ\n缓存访问记录\n- REMOVE\n缓存删除记录\n\n`journal`文件偶尔会丢掉多余的行数来压缩，压缩时使用`journal.tmp`的临时文件，打开缓存时如果临时文件存在，则删除临时文件。\n\n## 1.2 缓存文件\n`DiskLruCache`用了两种文件来保存缓存：++缓存元数据++文件和++缓存体++文件。\n- 缓存元数据文件保存响应的请求和响应的首部信息，如果是HTTPS请求还保存对应的加密和握手协议。\n- 缓存体文件保存具体的文件\n### 1.2.1 缓存元数据文件\n\n标准的==HTTP== META_DATA\n```json\nhttp://google.com/foo\nGET\n2\nAccept-Language: fr-CA\nAccept-Charset: UTF-8\nHTTP/1.1 200 OK\n3\nContent-Type: image/png\nContent-Length: 100\nCache-Control: max-age=600\n```\n标准的==HTTPS== META_DATA\n```json\nhttps://google.com/foo\nGET\n2\nAccept-Language: fr-CA\nAccept-Charset: UTF-8\nHTTP/1.1 200 OK\n3\nContent-Type: image/png\nContent-Length: 100\nCache-Control: max-age=600\n\nAES_256_WITH_MD5\n2\nbase64-encoded peerCertificate[0]\nbase64-encoded peerCertificate[1]\n-1\nTLSv1.2\n```\n1. 1-2行是++URL++与++请求方法++。\n2. 第3行是HTTP请求Vary头部字段数量，表示++请求头部数++\n3. 紧跟之后的是Vary响应字段，表示++请求的头部信息++。\n4. 在请求Vary头部字段之后是响应状态。包含++HTTP版本++，++状态码++和++Message++\n5. 在响应行之后是++响应头部数量++值。之后是++响应头部++信息详情。\n6. 对于HTTPS请求还包含SSL的session信息。由一个++空行++、++密码组++、++证书链长度++、++证书链++、++本地证书长度++（`-1`表示无本地证书）、最后一行为++可选信息++（如果有表示`TLS`的版本号）。\n### 1.2.3 缓存体文件\n缓存内容存储的是响应的具体信息。如`Json`、`图片`等具体的文件内容。\n## 1.3 缓存类的结构\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1490865300/wechat/OkHttpCache.jpg)\n# 2. 初始化\n任何对缓存的操作都会调用缓存的初始化。读取缓存的日志文件，用`LinkHashMap.java`来存储日志的操作记录，方便删除与查找。\n```java\n@DiskLruCache.java\npublic synchronized void initialize() throws IOException {\n    ...\n    // If a bkp file exists, use it instead.\n    ...\n    // Prefer to pick up where we left off.\n    if (fileSystem.exists(journalFile)) {\n      try {\n        // [1]\n        readJournal();\n        // [2]\n        processJournal();\n        initialized = true;\n        return;\n      } catch (IOException journalIsCorrupt) {\n        ...\n        // [3]\n        delete();\n        closed = false;\n      }\n    }\n    // [4]\n    rebuildJournal();\n    initialized = true;\n}\n```\n## 2.1 读取本地缓存\n```java\n@DiskLruCache.java\n// [1]\nprivate void readJournal() throws IOException {\n    BufferedSource source = Okio.buffer(fileSystem.source(journalFile));\n    try {\n      // check journal header\n      ...\n      int lineCount = 0;\n      while (true) {\n        try {\n          // [1.1]\n          readJournalLine(source.readUtf8LineStrict());\n          lineCount++;\n        } catch (EOFException endOfJournal) {\n          break;\n        }\n      }\n      // 记录有效的缓存操作记录数\n      redundantOpCount = lineCount - lruEntries.size();\n      // If we ended on a truncated line, rebuild the journal before appending to it.\n      ...\n    } finally {\n      Util.closeQuietly(source);\n    }\n}\n```\n迭代读取缓存日志文件每行操作，\n```java\n@DiskLruCache.java\n// [1.1]\nprivate void readJournalLine(String line) throws IOException {\n    // 检查是否是有效的操作行\n    ...\n    int keyBegin = firstSpace + 1;\n    int secondSpace = line.indexOf(' ', keyBegin);\n    final String key;\n    if (secondSpace == -1) {\n      // 如果是REMOVE操作，移除内存中对应的失效缓存\n      ...\n    } else {\n      key = line.substring(keyBegin, secondSpace);\n    }\n    // 读取内存中的Entry，如果没有则创建新的Entry并添加到LinkHashMap中\n    Entry entry = lruEntries.get(key);\n    ...\n    if (secondSpace != -1 && firstSpace == CLEAN.length() && line.startsWith(CLEAN)) {\n      // CLEAN操作\n      String[] parts = line.substring(secondSpace + 1).split(\" \");\n      entry.readable = true;\n      entry.currentEditor = null;\n      entry.setLengths(parts);\n    } else if (secondSpace == -1 && firstSpace == DIRTY.length() && line.startsWith(DIRTY)) {\n      // 脏数据，赋值Editor待后续清理\n      entry.currentEditor = new Editor(entry);\n    } else if (secondSpace == -1 && firstSpace == READ.length() && line.startsWith(READ)) {\n      // READ操作\n    } else {\n      // 非法操作行数据\n      throw new IOException(\"unexpected journal line: \" + line);\n    }\n}\n```\n## 2.2 处理读取到的缓存\n处理读取到Entry链表，清理垃圾缓存和操作\n```java\n@DiskLruCache.java\n// [2] 计算初始大小，回收垃圾缓存。\nprivate void processJournal() throws IOException {\n    fileSystem.delete(journalFileTmp);\n    for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {\n      Entry entry = i.next();\n      // entry.currentEditor 如果不是空说明是DIRTY的数据，上面分析过\n      if (entry.currentEditor == null) {\n        for (int t = 0; t < valueCount; t++) {\n          size += entry.lengths[t];\n        }\n      } else {\n        entry.currentEditor = null;\n        // valueCount = 2\n        for (int t = 0; t < valueCount; t++) {\n          fileSystem.delete(entry.cleanFiles[t]);\n          fileSystem.delete(entry.dirtyFiles[t]);\n        }\n        i.remove();\n      }\n    }\n}\n```\n## 2.3 异常处理\n读取或处理缓存时发生异常，说明缓存文件已破坏，清空缓存目录下的所有文件\n```java\n@DiskLruCache.java\n// [3] 出现异常时，关闭缓存并删除缓存目录下所有文件\npublic void delete() throws IOException {\n    close();\n    fileSystem.deleteContents(directory);\n}\n```\n## 2.4 异常后的恢复\n出现异常清空缓存目录后，需要重新创建Clean的缓存文件。\n```java\n@DiskLruCache.java\n// [4] 创建新的日志文件，会替换当前存在的日志文件\nprivate synchronized void rebuildJournal() throws IOException {\n    // 先关闭日志写操作\n    ...\n    // 创建一个临时文件\n    BufferedSink writer = Okio.buffer(fileSystem.sink(journalFileTmp));\n    try {\n      // 写入日志必要的头信息\n      ...\n      // 迭代内存中日志记录\n      for (Entry entry : lruEntries.values()) {\n        if (entry.currentEditor != null) {\n          // 写入DIRTY记录\n        } else {\n          // 写入CLEAN记录\n        }\n      }\n    } finally {\n      writer.close();\n    }\n    // 备份现有日志文件，保存新日志文件，然后删除备份文件\n    hasJournalErrors = false;\n}\n```\n# 3. 缓存读取\n\n```java \n@Cache.java\nResponse get(Request request) {\n    // 缓存的KEY值实际就是Request的Url的MD5值\n    String key = urlToKey(request);\n    DiskLruCache.Snapshot snapshot; // 缓存快照，包装了Source和Sink\n    ...\n    // [1]\n    snapshot = cache.get(key);\n    ... \n    try {\n      // [2]\n      entry = new Entry(snapshot.getSource(ENTRY_METADATA));\n    } catch (IOException e) {\n      Util.closeQuietly(snapshot);\n      return null;\n    }\n    // [3]\n    Response response = entry.response(snapshot);\n    ...\n    return response;\n  }\n```\n## 3.1 缓存文件快照\nSnapshot内是缓存文件的Source、每个文件的具体大小。\n```java\n@DiskLruCache.Snapshot.java\nprivate final String key;          // Request key值\nprivate final long sequenceNumber; // 多线程\nprivate final Source[] sources;    // 缓存元数据和缓存体文件输入流\nprivate final long[] lengths;      // metadata和body缓存文件长度\n```\n\n```java \n@DiskLruCache.java\n// [1]\npublic synchronized Snapshot get(String key) throws IOException {\n    ...\n    Entry entry = lruEntries.get(key);\n    ...\n    // [1.1]\n    Snapshot snapshot = entry.snapshot();\n    ...\n}\n```\n```java\n@DiskLruCache.Entry.java\n// [1.1]\nSnapshot snapshot() {\n  ...\n  // valueCount = 2\n  Source[] sources = new Source[valueCount];\n  long[] lengths = this.lengths.clone(); // Defensive copy since these can be zeroed out.\n  try {\n    for (int i = 0; i < valueCount; i++) {\n      sources[i] = fileSystem.source(cleanFiles[i]);\n    }\n    return new Snapshot(key, sequenceNumber, sources, lengths);\n  } catch (FileNotFoundException e) {\n    ...\n    return null;\n  }\n}\n```\n## 3.2 构建缓存响应\n缓存响应包括请求的详细信息，协议，响应码和响应体`CacheResponseBody.java`\n```java\n@Cache.Entry.java\n// [3]\npublic Response response(DiskLruCache.Snapshot snapshot) {\n  String contentType = responseHeaders.get(\"Content-Type\");\n  String contentLength = responseHeaders.get(\"Content-Length\");\n  Request cacheRequest = new Request.Builder()\n      .url(url)\n      .method(requestMethod, null)\n      .headers(varyHeaders)\n      .build();\n  return new Response.Builder()\n      .request(cacheRequest)\n      .protocol(protocol)\n      .code(code)\n      .message(message)\n      .headers(responseHeaders)\n      // [3.1]\n      .body(new CacheResponseBody(snapshot, contentType, contentLength))\n      .handshake(handshake)\n      .build();\n}\n```\n\n```java\n@Cache.CacheResponseBody.java\n// [3.1]\npublic CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n    String contentType, String contentLength) {\n  ...\n  // 创建缓存体文件Source\n  // [3.1.1]\n  Source source = snapshot.getSource(ENTRY_BODY);\n  bodySource = Okio.buffer(new ForwardingSource(source) {\n    @Override public void close() throws IOException {\n      snapshot.close();\n      super.close();\n    }\n  });\n}\n```\n\n# 4. 缓存写入\n```java\n@Cache.java\nprivate CacheRequest put(Response response) throws IOException {\n    String requestMethod = response.request().method();\n    \n    if (HttpMethod.invalidatesCache(response.request().method())) {\n      // OkHttp3只支持GET请求缓存\n      return null;\n    }\n    if (!requestMethod.equals(\"GET\")) {\n      // Don't cache non-GET responses. We're technically allowed to cache\n      // HEAD requests and some POST requests, but the complexity of doing\n      // so is high and the benefit is low.\n      return null;\n    }\n    \n    if (OkHeaders.hasVaryAll(response)) {\n      return null;\n    }\n    \n    Entry entry = new Entry(response);\n    DiskLruCache.Editor editor = null;\n    try {\n      // [1] 将请求的URL的MD5值作为缓存Key值\n      editor = cache.edit(urlToKey(response.request()));\n      if (editor == null) {\n        return null;\n      }\n      // [2] 写入请求META_DATA信息\n      entry.writeTo(editor);\n      // [3] 初始化缓存请求，用于写入缓存体\n      return new CacheRequestImpl(editor);\n    } catch (IOException e) {\n      // 出现异常，结束Editor任务\n      return null;\n    }\n}\n```\n\n## 4.1 初始Editor对象\nEditor主要作用就是创建写入。\n```java\n@DiskLruCache.java\n// [1]\npublic Editor edit(String key) throws IOException {\n    return edit(key, ANY_SEQUENCE_NUMBER);\n}\n// \nprivate synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {\n    // 检查是否初始化，是否关闭，Key值验证\n    ...\n    Entry entry = lruEntries.get(key);\n    // Snapshot是否过期，是否已有Editor在运行\n    ...\n    // 日志文件是否超过最大值\n    ...\n    // DIRTY记录，防止缓存文件泄露问题，先Flush记录日志\n    // Flush the journal before creating files to prevent file leaks.\n    journalWriter.writeUtf8(DIRTY).writeByte(' ').writeUtf8(key).writeByte('\\n');\n    journalWriter.flush();\n    \n    if (hasJournalErrors) {\n      return null; // Don't edit; the journal can't be written.\n    }\n    ...\n    // 初始化新的Editor\n    Editor editor = new Editor(entry);\n    entry.currentEditor = editor;\n    return editor;\n}\n\n```\n## 4.2 写入元数据\n```java\n@Cache.Entry.java\n// [2]\npublic void writeTo(DiskLruCache.Editor editor) throws IOException {\n  BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));\n  // 写入缓存元数据，参考缓存元数据节\n}\n```\n## 4.3 CacheRequest\n创建`CacheRequestImpl`目的是处理缓存输出流的处理。创建一个临时缓存文件来写入缓存。写入成功后，由Editor完成最后的缓存体的处理。\n\n```java\n@CacheRequestImpl.java\n// [3]\npublic CacheRequestImpl(final DiskLruCache.Editor editor) throws IOException {\n  this.editor = editor;\n  // [3.1] 初始化缓存体\n  \n  this.cacheOut = editor.newSink(ENTRY_BODY);\n  this.body = new ForwardingSink(cacheOut) {\n    @Override public void close() throws IOException {\n      synchronized (Cache.this) {\n        if (done) {\n          return;\n        }\n        done = true;\n        writeSuccessCount++;\n      }\n      super.close();\n      // [3.2] 完成缓存体文件写入\n      editor.commit();\n    }\n  };\n}\n```\n### 4.3.1 未缓冲的输出流\n```java\n@DiskLruCache.Editor.java\n// [3.1]\npublic Sink newSink(int index) throws IOException {\n  synchronized (DiskLruCache.this) {\n    // 保证编辑的是对应缓存文件\n    ... \n    if (!entry.readable) {\n      // 缓存文件是否正在编辑\n      written[index] = true;\n    }\n    // 初始化临时缓存文件\n    File dirtyFile = entry.dirtyFiles[index];\n    Sink sink;\n    try {\n      // 初始化缓存文件的Sink\n      sink = fileSystem.sink(dirtyFile);\n    } catch (FileNotFoundException e) {\n      return NULL_SINK;\n    }\n    // 初始化错误流处理的Sink\n    return new FaultHidingSink(sink) {\n      @Override protected void onException(IOException e) {\n        synchronized (DiskLruCache.this) {\n          hasErrors = true;\n        }\n      }\n    };\n  }\n}\n```\n\n### 4.3.1 提交写入操作\n如果输出流写入缓存文件出现错误，需要删除缓存文件\n```java\n@DiskLruCache.Edtor.java\n// [3.2]\npublic void commit() throws IOException {\n  synchronized (DiskLruCache.this) {\n    if (hasErrors) {\n      // [3.2.1] 缓存出错，记录REMOVE日志\n      completeEdit(this, false);\n      // [3.2.2] 记录REMOVE日志，移除Entry\n      removeEntry(entry);\n    } else {\n      // [3.2.1] 完成缓存体写入\n      completeEdit(this, true);\n    }\n    committed = true;\n  }\n}\n```\n### 4.3.1 完成提交\n```java\n@DiskLruCache.java\n// [3.2.1]\nprivate synchronized void completeEdit(Editor editor, boolean success) throws IOException {\n    // success : true表示成功写入缓存文件\n    Entry entry = editor.entry;\n    ...\n    \n    // If this edit is creating the entry for the first time, every index must have a value.\n    ...\n    // 保存临时缓存文件（成功时且临时文件存在）或删除临时缓存文件（失败时）\n    // 成功写入缓存文件时，需要更新Map中对应的Entry信息\n    for (int i = 0; i < valueCount; i++) {\n      File dirty = entry.dirtyFiles[i];\n      if (success) {\n        if (fileSystem.exists(dirty)) {\n          // 存储临时文件到缓存体文件\n          File clean = entry.cleanFiles[i];\n          fileSystem.rename(dirty, clean);\n          long oldLength = entry.lengths[i];\n          long newLength = fileSystem.size(clean);\n          entry.lengths[i] = newLength;\n          size = size - oldLength + newLength;\n        }\n      } else {\n        // 删除临时缓存文件\n        fileSystem.delete(dirty);\n      }\n    }\n    ...\n    // 日志记录数\n    redundantOpCount++;\n    entry.currentEditor = null;\n    if (entry.readable | success) {\n      // 记录CLEAN日志\n      entry.readable = true;\n      ...\n      if (success) {\n        entry.sequenceNumber = nextSequenceNumber++;\n      }\n    } else {\n      // 记录REMOVE日志\n    }\n    journalWriter.flush();\n    // 整理日志大小\n    if (size > maxSize || journalRebuildRequired()) {\n      executor.execute(cleanupRunnable);\n    }\n}\n```\n\n```java\n@DiskLruCache.java\n// [3.2.2]\nprivate boolean removeEntry(Entry entry) throws IOException {\n    if (entry.currentEditor != null) {\n      entry.currentEditor.hasErrors = true; // Prevent the edit from completing normally.\n    }\n    // 删除失效的缓存文件\n    ...\n    // 记录日志操作数\n    redundantOpCount++;\n    // 记录REMOVE操作\n    journalWriter.writeUtf8(REMOVE).writeByte(' ').writeUtf8(entry.key).writeByte('\\n');\n    lruEntries.remove(entry.key);\n    // 超过一定操作次数后，对文件进行清理操作\n    if (journalRebuildRequired()) {\n      executor.execute(cleanupRunnable);\n    }\n     \n    return true;\n}\n```\n# 5. 缓存更新\n更新的操作是在读取缓存操作，使用缓存策略与服务器返回的状态或头部信息来决定是否更新缓存。\n```java\n@Cache.java\nprivate void update(Response cached, Response network) {\n    Entry entry = new Entry(network);\n    // [1] 读取缓存文件快照，cached 是读取缓存得到的Response，由读取缓存小节中知道cached.body()实际上就是CacheResponseBody\n    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;\n    DiskLruCache.Editor editor = null;\n    try {\n      // [2] snapshot.edit调用就是DiskLruCache的edit(String key, long expectedSequenceNumber)方法。\n      editor = snapshot.edit(); // Returns null if snapshot is not current.\n      if (editor != null) {\n        // [3] 更新缓存元数据，参考缓存小节\n        entry.writeTo(editor);\n        // [4] 更新缓存体，记录操作日志，参考缓存写入小节\n        editor.commit();\n      }\n    } catch (IOException e) {\n      // 更新出现异常，清理本地缓存文件\n      abortQuietly(editor);\n    }\n}\n```\n\n# 6. 缓存清理\nOkHttp3缓存清理支持++手动++和++自动++两种。\n- 手动清理缓存文件，直接调用`Cache.remove(Request request)`方法，可以清理指定请求的缓存文件，也支持批量缓存清理`Cache.evictAll()`将缓存文件全部清空\n- 自动清理缓存则在运行时自动判断。如果服务器响应的不需要缓存，判断本地是否进行过缓存决定是否清理已有的缓存文件。\n```java\n@Cache.java\nprivate void remove(Request request) throws IOException {\n    // [1] 调用DiskLruCache删除缓存\n    cache.remove(urlToKey(request));\n}\n```\n```java\n@DiskLruCache.java\npublic synchronized boolean remove(String key) throws IOException {\n    // 一些判断\n    ...\n    // [1] 清理缓存文件，记录缓存操作，参考写入。\n    boolean removed = removeEntry(entry);\n    if (removed && size <= maxSize) mostRecentTrimFailed = false;\n    return removed;\n}\n```\n# 7. 关闭缓存\n清空全部缓存或调用`Cache.close`关闭缓存。关闭缓存时会清除所有正在读写操作的缓存任务。\n```java\n@DiskLruCache.java\npublic synchronized void close() throws IOException {\n    if (!initialized || closed) {\n      closed = true;\n      return;\n    }\n    // Copying for safe iteration.\n    for (Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {\n      if (entry.currentEditor != null) {\n        entry.currentEditor.abort();\n      }\n    }\n    trimToSize();\n    journalWriter.close();\n    journalWriter = null;\n    closed = true;\n}\n```","slug":"深入理解OkHttp3的DiskLruCache","published":1,"updated":"2017-04-24T09:39:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2eq2001wc0m31zxvnr1z","content":"<p>磁盘缓存是将网络资源先保存到系统分配出的内存空间中，当内存中的资源容量达到某个限度时，在将内存中的资源保存的磁盘中。这样做可以有效减少磁盘的读写操作。</p>\n<p>OkHttp3的网络缓存主要实现由<code>DiskLruCache</code>这个类来实现。缓存保存在应用指定的内部缓存文件夹中，在调用磁盘缓存时，<code>DisLruCache</code>读取缓存文件快照到内存。涉及到缓存的读写任务都由类<code>DiskLruCache.Edit.java</code>完成。</p>\n<h1 id=\"1-缓存文件格式\"><a href=\"#1-缓存文件格式\" class=\"headerlink\" title=\"1. 缓存文件格式\"></a>1. 缓存文件格式</h1><h2 id=\"1-1-缓存日志文件\"><a href=\"#1-1-缓存日志文件\" class=\"headerlink\" title=\"1.1 缓存日志文件\"></a>1.1 缓存日志文件</h2><p>OkHttp3的缓存数据保存在名为<code>journal</code>的文件中。<br>标准的<code>journal</code>文件格式<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">libcore.io.DiskLruCache</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">CLEAN <span class=\"number\">3400330</span>d1dfc7f3f7f4b8d4d803dfcf6 <span class=\"number\">832</span> <span class=\"number\">21054</span></div><div class=\"line\">DIRTY <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52</div><div class=\"line\">CLEAN <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52 <span class=\"number\">3934</span> <span class=\"number\">2342</span></div><div class=\"line\">REMOVE <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52</div><div class=\"line\">DIRTY <span class=\"number\">1</span>ab96a171faeeee38496d8b330771a7a</div><div class=\"line\">CLEAN <span class=\"number\">1</span>ab96a171faeeee38496d8b330771a7a <span class=\"number\">1600</span> <span class=\"number\">234</span></div><div class=\"line\">READ <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52</div><div class=\"line\">READ <span class=\"number\">3400330</span>d1dfc7f3f7f4b8d4d803dfcf6</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>前五行是文件头部，分别是区分文件格式的++MAGIC数++（固定为<code>libcore.io.DiskLruCache</code>）、++缓存版本++、++应用版本++、++Key对应Value值个数++和一个++空白行++。<br>之后的每行都对应一个Cache实体的状态记录。由++状态++、++键值++和++可选择具体状态值++组成。</p>\n<ul>\n<li>DIRTY<br>正在++创建++或++更新++缓存数据的监视信息。每个成功的DIRTY操作之后都会紧跟一个CLEAN或REMOVE操作。如果没有对应的CLEAN或REMOVE操作说明应该删除掉临时文件。</li>\n<li>CLEAN<br>可以读取缓存的记录。之后是缓存文件的长度。</li>\n<li>READ<br>缓存访问记录</li>\n<li>REMOVE<br>缓存删除记录</li>\n</ul>\n<p><code>journal</code>文件偶尔会丢掉多余的行数来压缩，压缩时使用<code>journal.tmp</code>的临时文件，打开缓存时如果临时文件存在，则删除临时文件。</p>\n<h2 id=\"1-2-缓存文件\"><a href=\"#1-2-缓存文件\" class=\"headerlink\" title=\"1.2 缓存文件\"></a>1.2 缓存文件</h2><p><code>DiskLruCache</code>用了两种文件来保存缓存：++缓存元数据++文件和++缓存体++文件。</p>\n<ul>\n<li>缓存元数据文件保存响应的请求和响应的首部信息，如果是HTTPS请求还保存对应的加密和握手协议。</li>\n<li>缓存体文件保存具体的文件<h3 id=\"1-2-1-缓存元数据文件\"><a href=\"#1-2-1-缓存元数据文件\" class=\"headerlink\" title=\"1.2.1 缓存元数据文件\"></a>1.2.1 缓存元数据文件</h3></li>\n</ul>\n<p>标准的==HTTP== META_DATA<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://google.com/foo</div><div class=\"line\">GET</div><div class=\"line\">2</div><div class=\"line\">Accept-Language: fr-CA</div><div class=\"line\">Accept-Charset: UTF-8</div><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">3</div><div class=\"line\">Content-Type: image/png</div><div class=\"line\">Content-Length: 100</div><div class=\"line\">Cache-Control: max-age=600</div></pre></td></tr></table></figure></p>\n<p>标准的==HTTPS== META_DATA<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://google.com/foo</div><div class=\"line\">GET</div><div class=\"line\">2</div><div class=\"line\">Accept-Language: fr-CA</div><div class=\"line\">Accept-Charset: UTF-8</div><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">3</div><div class=\"line\">Content-Type: image/png</div><div class=\"line\">Content-Length: 100</div><div class=\"line\">Cache-Control: max-age=600</div><div class=\"line\"></div><div class=\"line\">AES_256_WITH_MD5</div><div class=\"line\">2</div><div class=\"line\">base64-encoded peerCertificate[0]</div><div class=\"line\">base64-encoded peerCertificate[1]</div><div class=\"line\">-1</div><div class=\"line\">TLSv1.2</div></pre></td></tr></table></figure></p>\n<ol>\n<li>1-2行是++URL++与++请求方法++。</li>\n<li>第3行是HTTP请求Vary头部字段数量，表示++请求头部数++</li>\n<li>紧跟之后的是Vary响应字段，表示++请求的头部信息++。</li>\n<li>在请求Vary头部字段之后是响应状态。包含++HTTP版本++，++状态码++和++Message++</li>\n<li>在响应行之后是++响应头部数量++值。之后是++响应头部++信息详情。</li>\n<li>对于HTTPS请求还包含SSL的session信息。由一个++空行++、++密码组++、++证书链长度++、++证书链++、++本地证书长度++（<code>-1</code>表示无本地证书）、最后一行为++可选信息++（如果有表示<code>TLS</code>的版本号）。<h3 id=\"1-2-3-缓存体文件\"><a href=\"#1-2-3-缓存体文件\" class=\"headerlink\" title=\"1.2.3 缓存体文件\"></a>1.2.3 缓存体文件</h3>缓存内容存储的是响应的具体信息。如<code>Json</code>、<code>图片</code>等具体的文件内容。<h2 id=\"1-3-缓存类的结构\"><a href=\"#1-3-缓存类的结构\" class=\"headerlink\" title=\"1.3 缓存类的结构\"></a>1.3 缓存类的结构</h2><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1490865300/wechat/OkHttpCache.jpg\" alt=\"img\"><h1 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2. 初始化\"></a>2. 初始化</h1>任何对缓存的操作都会调用缓存的初始化。读取缓存的日志文件，用<code>LinkHashMap.java</code>来存储日志的操作记录，方便删除与查找。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// If a bkp file exists, use it instead.</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Prefer to pick up where we left off.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (fileSystem.exists(journalFile)) &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// [1]</span></div><div class=\"line\">        readJournal();</div><div class=\"line\">        <span class=\"comment\">// [2]</span></div><div class=\"line\">        processJournal();</div><div class=\"line\">        initialized = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException journalIsCorrupt) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// [3]</span></div><div class=\"line\">        delete();</div><div class=\"line\">        closed = <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// [4]</span></div><div class=\"line\">    rebuildJournal();</div><div class=\"line\">    initialized = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-1-读取本地缓存\"><a href=\"#2-1-读取本地缓存\" class=\"headerlink\" title=\"2.1 读取本地缓存\"></a>2.1 读取本地缓存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readJournal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    BufferedSource source = Okio.buffer(fileSystem.source(journalFile));</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// check journal header</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">int</span> lineCount = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// [1.1]</span></div><div class=\"line\">          readJournalLine(source.readUtf8LineStrict());</div><div class=\"line\">          lineCount++;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (EOFException endOfJournal) &#123;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 记录有效的缓存操作记录数</span></div><div class=\"line\">      redundantOpCount = lineCount - lruEntries.size();</div><div class=\"line\">      <span class=\"comment\">// If we ended on a truncated line, rebuild the journal before appending to it.</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      Util.closeQuietly(source);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迭代读取缓存日志文件每行操作，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readJournalLine</span><span class=\"params\">(String line)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否是有效的操作行</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">int</span> keyBegin = firstSpace + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> secondSpace = line.indexOf(<span class=\"string\">' '</span>, keyBegin);</div><div class=\"line\">    <span class=\"keyword\">final</span> String key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (secondSpace == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果是REMOVE操作，移除内存中对应的失效缓存</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      key = line.substring(keyBegin, secondSpace);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 读取内存中的Entry，如果没有则创建新的Entry并添加到LinkHashMap中</span></div><div class=\"line\">    Entry entry = lruEntries.get(key);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (secondSpace != -<span class=\"number\">1</span> &amp;&amp; firstSpace == CLEAN.length() &amp;&amp; line.startsWith(CLEAN)) &#123;</div><div class=\"line\">      <span class=\"comment\">// CLEAN操作</span></div><div class=\"line\">      String[] parts = line.substring(secondSpace + <span class=\"number\">1</span>).split(<span class=\"string\">\" \"</span>);</div><div class=\"line\">      entry.readable = <span class=\"keyword\">true</span>;</div><div class=\"line\">      entry.currentEditor = <span class=\"keyword\">null</span>;</div><div class=\"line\">      entry.setLengths(parts);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondSpace == -<span class=\"number\">1</span> &amp;&amp; firstSpace == DIRTY.length() &amp;&amp; line.startsWith(DIRTY)) &#123;</div><div class=\"line\">      <span class=\"comment\">// 脏数据，赋值Editor待后续清理</span></div><div class=\"line\">      entry.currentEditor = <span class=\"keyword\">new</span> Editor(entry);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondSpace == -<span class=\"number\">1</span> &amp;&amp; firstSpace == READ.length() &amp;&amp; line.startsWith(READ)) &#123;</div><div class=\"line\">      <span class=\"comment\">// READ操作</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 非法操作行数据</span></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"unexpected journal line: \"</span> + line);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-2-处理读取到的缓存\"><a href=\"#2-2-处理读取到的缓存\" class=\"headerlink\" title=\"2.2 处理读取到的缓存\"></a>2.2 处理读取到的缓存</h2><p>处理读取到Entry链表，清理垃圾缓存和操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [2] 计算初始大小，回收垃圾缓存。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processJournal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    fileSystem.delete(journalFileTmp);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;Entry&gt; i = lruEntries.values().iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">      Entry entry = i.next();</div><div class=\"line\">      <span class=\"comment\">// entry.currentEditor 如果不是空说明是DIRTY的数据，上面分析过</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (entry.currentEditor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; valueCount; t++) &#123;</div><div class=\"line\">          size += entry.lengths[t];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        entry.currentEditor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"comment\">// valueCount = 2</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; valueCount; t++) &#123;</div><div class=\"line\">          fileSystem.delete(entry.cleanFiles[t]);</div><div class=\"line\">          fileSystem.delete(entry.dirtyFiles[t]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        i.remove();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-3-异常处理\"><a href=\"#2-3-异常处理\" class=\"headerlink\" title=\"2.3 异常处理\"></a>2.3 异常处理</h2><p>读取或处理缓存时发生异常，说明缓存文件已破坏，清空缓存目录下的所有文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [3] 出现异常时，关闭缓存并删除缓存目录下所有文件</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    close();</div><div class=\"line\">    fileSystem.deleteContents(directory);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-异常后的恢复\"><a href=\"#2-4-异常后的恢复\" class=\"headerlink\" title=\"2.4 异常后的恢复\"></a>2.4 异常后的恢复</h2><p>出现异常清空缓存目录后，需要重新创建Clean的缓存文件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [4] 创建新的日志文件，会替换当前存在的日志文件</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">rebuildJournal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先关闭日志写操作</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 创建一个临时文件</span></div><div class=\"line\">    BufferedSink writer = Okio.buffer(fileSystem.sink(journalFileTmp));</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 写入日志必要的头信息</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"comment\">// 迭代内存中日志记录</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (Entry entry : lruEntries.values()) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (entry.currentEditor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">// 写入DIRTY记录</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 写入CLEAN记录</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      writer.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 备份现有日志文件，保存新日志文件，然后删除备份文件</span></div><div class=\"line\">    hasJournalErrors = <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-缓存读取\"><a href=\"#3-缓存读取\" class=\"headerlink\" title=\"3. 缓存读取\"></a>3. 缓存读取</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\">Response <span class=\"title\">get</span><span class=\"params\">(Request request)</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 缓存的KEY值实际就是Request的Url的MD5值</span></div><div class=\"line\">    String key = urlToKey(request);</div><div class=\"line\">    DiskLruCache.Snapshot snapshot; <span class=\"comment\">// 缓存快照，包装了Source和Sink</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// [1]</span></div><div class=\"line\">    snapshot = cache.get(key);</div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [2]</span></div><div class=\"line\">      entry = <span class=\"keyword\">new</span> Entry(snapshot.getSource(ENTRY_METADATA));</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      Util.closeQuietly(snapshot);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// [3]</span></div><div class=\"line\">    Response response = entry.response(snapshot);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> response;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-1-缓存文件快照\"><a href=\"#3-1-缓存文件快照\" class=\"headerlink\" title=\"3.1 缓存文件快照\"></a>3.1 缓存文件快照</h2><p>Snapshot内是缓存文件的Source、每个文件的具体大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Snapshot.java</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String key;          <span class=\"comment\">// Request key值</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceNumber; <span class=\"comment\">// 多线程</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Source[] sources;    <span class=\"comment\">// 缓存元数据和缓存体文件输入流</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span>[] lengths;      <span class=\"comment\">// metadata和body缓存文件长度</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Snapshot <span class=\"title\">get</span><span class=\"params\">(String key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    Entry entry = lruEntries.get(key);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// [1.1]</span></div><div class=\"line\">    Snapshot snapshot = entry.snapshot();</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Entry.java</div><div class=\"line\"><span class=\"comment\">// [1.1]</span></div><div class=\"line\"><span class=\"function\">Snapshot <span class=\"title\">snapshot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// valueCount = 2</span></div><div class=\"line\">  Source[] sources = <span class=\"keyword\">new</span> Source[valueCount];</div><div class=\"line\">  <span class=\"keyword\">long</span>[] lengths = <span class=\"keyword\">this</span>.lengths.clone(); <span class=\"comment\">// Defensive copy since these can be zeroed out.</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; valueCount; i++) &#123;</div><div class=\"line\">      sources[i] = fileSystem.source(cleanFiles[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Snapshot(key, sequenceNumber, sources, lengths);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-构建缓存响应\"><a href=\"#3-2-构建缓存响应\" class=\"headerlink\" title=\"3.2 构建缓存响应\"></a>3.2 构建缓存响应</h2><p>缓存响应包括请求的详细信息，协议，响应码和响应体<code>CacheResponseBody.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.Entry.java</div><div class=\"line\"><span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">response</span><span class=\"params\">(DiskLruCache.Snapshot snapshot)</span> </span>&#123;</div><div class=\"line\">  String contentType = responseHeaders.get(<span class=\"string\">\"Content-Type\"</span>);</div><div class=\"line\">  String contentLength = responseHeaders.get(<span class=\"string\">\"Content-Length\"</span>);</div><div class=\"line\">  Request cacheRequest = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">      .url(url)</div><div class=\"line\">      .method(requestMethod, <span class=\"keyword\">null</span>)</div><div class=\"line\">      .headers(varyHeaders)</div><div class=\"line\">      .build();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response.Builder()</div><div class=\"line\">      .request(cacheRequest)</div><div class=\"line\">      .protocol(protocol)</div><div class=\"line\">      .code(code)</div><div class=\"line\">      .message(message)</div><div class=\"line\">      .headers(responseHeaders)</div><div class=\"line\">      <span class=\"comment\">// [3.1]</span></div><div class=\"line\">      .body(<span class=\"keyword\">new</span> CacheResponseBody(snapshot, contentType, contentLength))</div><div class=\"line\">      .handshake(handshake)</div><div class=\"line\">      .build();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.CacheResponseBody.java</div><div class=\"line\"><span class=\"comment\">// [3.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheResponseBody</span><span class=\"params\">(<span class=\"keyword\">final</span> DiskLruCache.Snapshot snapshot,</span></span></div><div class=\"line\">    String contentType, String contentLength) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 创建缓存体文件Source</span></div><div class=\"line\">  <span class=\"comment\">// [3.1.1]</span></div><div class=\"line\">  Source source = snapshot.getSource(ENTRY_BODY);</div><div class=\"line\">  bodySource = Okio.buffer(<span class=\"keyword\">new</span> ForwardingSource(source) &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      snapshot.close();</div><div class=\"line\">      <span class=\"keyword\">super</span>.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"4-缓存写入\"><a href=\"#4-缓存写入\" class=\"headerlink\" title=\"4. 缓存写入\"></a>4. 缓存写入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">private</span> CacheRequest <span class=\"title\">put</span><span class=\"params\">(Response response)</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    String requestMethod = response.request().method();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (HttpMethod.invalidatesCache(response.request().method())) &#123;</div><div class=\"line\">      <span class=\"comment\">// OkHttp3只支持GET请求缓存</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!requestMethod.equals(<span class=\"string\">\"GET\"</span>)) &#123;</div><div class=\"line\">      <span class=\"comment\">// Don't cache non-GET responses. We're technically allowed to cache</span></div><div class=\"line\">      <span class=\"comment\">// HEAD requests and some POST requests, but the complexity of doing</span></div><div class=\"line\">      <span class=\"comment\">// so is high and the benefit is low.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (OkHeaders.hasVaryAll(response)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    Entry entry = <span class=\"keyword\">new</span> Entry(response);</div><div class=\"line\">    DiskLruCache.Editor editor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [1] 将请求的URL的MD5值作为缓存Key值</span></div><div class=\"line\">      editor = cache.edit(urlToKey(response.request()));</div><div class=\"line\">      <span class=\"keyword\">if</span> (editor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// [2] 写入请求META_DATA信息</span></div><div class=\"line\">      entry.writeTo(editor);</div><div class=\"line\">      <span class=\"comment\">// [3] 初始化缓存请求，用于写入缓存体</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CacheRequestImpl(editor);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 出现异常，结束Editor任务</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-1-初始Editor对象\"><a href=\"#4-1-初始Editor对象\" class=\"headerlink\" title=\"4.1 初始Editor对象\"></a>4.1 初始Editor对象</h2><p>Editor主要作用就是创建写入。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Editor <span class=\"title\">edit</span><span class=\"params\">(String key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> edit(key, ANY_SEQUENCE_NUMBER);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Editor <span class=\"title\">edit</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> expectedSequenceNumber)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否初始化，是否关闭，Key值验证</span></div><div class=\"line\">    ...</div><div class=\"line\">    Entry entry = lruEntries.get(key);</div><div class=\"line\">    <span class=\"comment\">// Snapshot是否过期，是否已有Editor在运行</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 日志文件是否超过最大值</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// DIRTY记录，防止缓存文件泄露问题，先Flush记录日志</span></div><div class=\"line\">    <span class=\"comment\">// Flush the journal before creating files to prevent file leaks.</span></div><div class=\"line\">    journalWriter.writeUtf8(DIRTY).writeByte(<span class=\"string\">' '</span>).writeUtf8(key).writeByte(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">    journalWriter.flush();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (hasJournalErrors) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// Don't edit; the journal can't be written.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 初始化新的Editor</span></div><div class=\"line\">    Editor editor = <span class=\"keyword\">new</span> Editor(entry);</div><div class=\"line\">    entry.currentEditor = editor;</div><div class=\"line\">    <span class=\"keyword\">return</span> editor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-写入元数据\"><a href=\"#4-2-写入元数据\" class=\"headerlink\" title=\"4.2 写入元数据\"></a>4.2 写入元数据</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.Entry.java</div><div class=\"line\"><span class=\"comment\">// [2]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeTo</span><span class=\"params\">(DiskLruCache.Editor editor)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));</div><div class=\"line\">  <span class=\"comment\">// 写入缓存元数据，参考缓存元数据节</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-3-CacheRequest\"><a href=\"#4-3-CacheRequest\" class=\"headerlink\" title=\"4.3 CacheRequest\"></a>4.3 CacheRequest</h2><p>创建<code>CacheRequestImpl</code>目的是处理缓存输出流的处理。创建一个临时缓存文件来写入缓存。写入成功后，由Editor完成最后的缓存体的处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@CacheRequestImpl</span>.java</div><div class=\"line\"><span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheRequestImpl</span><span class=\"params\">(<span class=\"keyword\">final</span> DiskLruCache.Editor editor)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.editor = editor;</div><div class=\"line\">  <span class=\"comment\">// [3.1] 初始化缓存体</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">this</span>.cacheOut = editor.newSink(ENTRY_BODY);</div><div class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"keyword\">new</span> ForwardingSink(cacheOut) &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (Cache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (done) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        done = <span class=\"keyword\">true</span>;</div><div class=\"line\">        writeSuccessCount++;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">super</span>.close();</div><div class=\"line\">      <span class=\"comment\">// [3.2] 完成缓存体文件写入</span></div><div class=\"line\">      editor.commit();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-3-1-未缓冲的输出流\"><a href=\"#4-3-1-未缓冲的输出流\" class=\"headerlink\" title=\"4.3.1 未缓冲的输出流\"></a>4.3.1 未缓冲的输出流</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Editor.java</div><div class=\"line\"><span class=\"comment\">// [3.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Sink <span class=\"title\">newSink</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (DiskLruCache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 保证编辑的是对应缓存文件</span></div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">if</span> (!entry.readable) &#123;</div><div class=\"line\">      <span class=\"comment\">// 缓存文件是否正在编辑</span></div><div class=\"line\">      written[index] = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 初始化临时缓存文件</span></div><div class=\"line\">    File dirtyFile = entry.dirtyFiles[index];</div><div class=\"line\">    Sink sink;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 初始化缓存文件的Sink</span></div><div class=\"line\">      sink = fileSystem.sink(dirtyFile);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> NULL_SINK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 初始化错误流处理的Sink</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FaultHidingSink(sink) &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(IOException e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (DiskLruCache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">          hasErrors = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-3-1-提交写入操作\"><a href=\"#4-3-1-提交写入操作\" class=\"headerlink\" title=\"4.3.1 提交写入操作\"></a>4.3.1 提交写入操作</h3><p>如果输出流写入缓存文件出现错误，需要删除缓存文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Edtor.java</div><div class=\"line\"><span class=\"comment\">// [3.2]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (DiskLruCache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (hasErrors) &#123;</div><div class=\"line\">      <span class=\"comment\">// [3.2.1] 缓存出错，记录REMOVE日志</span></div><div class=\"line\">      completeEdit(<span class=\"keyword\">this</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"comment\">// [3.2.2] 记录REMOVE日志，移除Entry</span></div><div class=\"line\">      removeEntry(entry);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [3.2.1] 完成缓存体写入</span></div><div class=\"line\">      completeEdit(<span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    committed = <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-1-完成提交\"><a href=\"#4-3-1-完成提交\" class=\"headerlink\" title=\"4.3.1 完成提交\"></a>4.3.1 完成提交</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [3.2.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">completeEdit</span><span class=\"params\">(Editor editor, <span class=\"keyword\">boolean</span> success)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// success : true表示成功写入缓存文件</span></div><div class=\"line\">    Entry entry = editor.entry;</div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// If this edit is creating the entry for the first time, every index must have a value.</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 保存临时缓存文件（成功时且临时文件存在）或删除临时缓存文件（失败时）</span></div><div class=\"line\">    <span class=\"comment\">// 成功写入缓存文件时，需要更新Map中对应的Entry信息</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; valueCount; i++) &#123;</div><div class=\"line\">      File dirty = entry.dirtyFiles[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fileSystem.exists(dirty)) &#123;</div><div class=\"line\">          <span class=\"comment\">// 存储临时文件到缓存体文件</span></div><div class=\"line\">          File clean = entry.cleanFiles[i];</div><div class=\"line\">          fileSystem.rename(dirty, clean);</div><div class=\"line\">          <span class=\"keyword\">long</span> oldLength = entry.lengths[i];</div><div class=\"line\">          <span class=\"keyword\">long</span> newLength = fileSystem.size(clean);</div><div class=\"line\">          entry.lengths[i] = newLength;</div><div class=\"line\">          size = size - oldLength + newLength;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 删除临时缓存文件</span></div><div class=\"line\">        fileSystem.delete(dirty);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 日志记录数</span></div><div class=\"line\">    redundantOpCount++;</div><div class=\"line\">    entry.currentEditor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry.readable | success) &#123;</div><div class=\"line\">      <span class=\"comment\">// 记录CLEAN日志</span></div><div class=\"line\">      entry.readable = <span class=\"keyword\">true</span>;</div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">        entry.sequenceNumber = nextSequenceNumber++;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 记录REMOVE日志</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    journalWriter.flush();</div><div class=\"line\">    <span class=\"comment\">// 整理日志大小</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt; maxSize || journalRebuildRequired()) &#123;</div><div class=\"line\">      executor.execute(cleanupRunnable);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [3.2.2]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeEntry</span><span class=\"params\">(Entry entry)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry.currentEditor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      entry.currentEditor.hasErrors = <span class=\"keyword\">true</span>; <span class=\"comment\">// Prevent the edit from completing normally.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 删除失效的缓存文件</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 记录日志操作数</span></div><div class=\"line\">    redundantOpCount++;</div><div class=\"line\">    <span class=\"comment\">// 记录REMOVE操作</span></div><div class=\"line\">    journalWriter.writeUtf8(REMOVE).writeByte(<span class=\"string\">' '</span>).writeUtf8(entry.key).writeByte(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">    lruEntries.remove(entry.key);</div><div class=\"line\">    <span class=\"comment\">// 超过一定操作次数后，对文件进行清理操作</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (journalRebuildRequired()) &#123;</div><div class=\"line\">      executor.execute(cleanupRunnable);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"5-缓存更新\"><a href=\"#5-缓存更新\" class=\"headerlink\" title=\"5. 缓存更新\"></a>5. 缓存更新</h1><p>更新的操作是在读取缓存操作，使用缓存策略与服务器返回的状态或头部信息来决定是否更新缓存。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Response cached, Response network)</span> &#123;</div><div class=\"line\">    Entry entry = <span class=\"keyword\">new</span> Entry(network);</div><div class=\"line\">    <span class=\"comment\">// [1] 读取缓存文件快照，cached 是读取缓存得到的Response，由读取缓存小节中知道cached.body()实际上就是CacheResponseBody</span></div><div class=\"line\">    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;</div><div class=\"line\">    DiskLruCache.Editor editor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [2] snapshot.edit调用就是DiskLruCache的edit(String key, long expectedSequenceNumber)方法。</span></div><div class=\"line\">      editor = snapshot.edit(); <span class=\"comment\">// Returns null if snapshot is not current.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (editor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// [3] 更新缓存元数据，参考缓存小节</span></div><div class=\"line\">        entry.writeTo(editor);</div><div class=\"line\">        <span class=\"comment\">// [4] 更新缓存体，记录操作日志，参考缓存写入小节</span></div><div class=\"line\">        editor.commit();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 更新出现异常，清理本地缓存文件</span></div><div class=\"line\">      abortQuietly(editor);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"6-缓存清理\"><a href=\"#6-缓存清理\" class=\"headerlink\" title=\"6. 缓存清理\"></a>6. 缓存清理</h1><p>OkHttp3缓存清理支持++手动++和++自动++两种。</p>\n<ul>\n<li>手动清理缓存文件，直接调用<code>Cache.remove(Request request)</code>方法，可以清理指定请求的缓存文件，也支持批量缓存清理<code>Cache.evictAll()</code>将缓存文件全部清空</li>\n<li>自动清理缓存则在运行时自动判断。如果服务器响应的不需要缓存，判断本地是否进行过缓存决定是否清理已有的缓存文件。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    <span class=\"comment\">// [1] 调用DiskLruCache删除缓存</span></div><div class=\"line\">    cache.remove(urlToKey(request));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(String key)</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    <span class=\"comment\">// 一些判断</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// [1] 清理缓存文件，记录缓存操作，参考写入。</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> removed = removeEntry(entry);</div><div class=\"line\">    <span class=\"keyword\">if</span> (removed &amp;&amp; size &lt;= maxSize) mostRecentTrimFailed = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> removed;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"7-关闭缓存\"><a href=\"#7-关闭缓存\" class=\"headerlink\" title=\"7. 关闭缓存\"></a>7. 关闭缓存</h1><p>清空全部缓存或调用<code>Cache.close</code>关闭缓存。关闭缓存时会清除所有正在读写操作的缓存任务。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!initialized || closed) &#123;</div><div class=\"line\">      closed = <span class=\"keyword\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Copying for safe iteration.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Entry entry : lruEntries.values().toArray(<span class=\"keyword\">new</span> Entry[lruEntries.size()])) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (entry.currentEditor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        entry.currentEditor.abort();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    trimToSize();</div><div class=\"line\">    journalWriter.close();</div><div class=\"line\">    journalWriter = <span class=\"keyword\">null</span>;</div><div class=\"line\">    closed = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>磁盘缓存是将网络资源先保存到系统分配出的内存空间中，当内存中的资源容量达到某个限度时，在将内存中的资源保存的磁盘中。这样做可以有效减少磁盘的读写操作。</p>\n<p>OkHttp3的网络缓存主要实现由<code>DiskLruCache</code>这个类来实现。缓存保存在应用指定的内部缓存文件夹中，在调用磁盘缓存时，<code>DisLruCache</code>读取缓存文件快照到内存。涉及到缓存的读写任务都由类<code>DiskLruCache.Edit.java</code>完成。</p>\n<h1 id=\"1-缓存文件格式\"><a href=\"#1-缓存文件格式\" class=\"headerlink\" title=\"1. 缓存文件格式\"></a>1. 缓存文件格式</h1><h2 id=\"1-1-缓存日志文件\"><a href=\"#1-1-缓存日志文件\" class=\"headerlink\" title=\"1.1 缓存日志文件\"></a>1.1 缓存日志文件</h2><p>OkHttp3的缓存数据保存在名为<code>journal</code>的文件中。<br>标准的<code>journal</code>文件格式<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">libcore.io.DiskLruCache</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">CLEAN <span class=\"number\">3400330</span>d1dfc7f3f7f4b8d4d803dfcf6 <span class=\"number\">832</span> <span class=\"number\">21054</span></div><div class=\"line\">DIRTY <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52</div><div class=\"line\">CLEAN <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52 <span class=\"number\">3934</span> <span class=\"number\">2342</span></div><div class=\"line\">REMOVE <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52</div><div class=\"line\">DIRTY <span class=\"number\">1</span>ab96a171faeeee38496d8b330771a7a</div><div class=\"line\">CLEAN <span class=\"number\">1</span>ab96a171faeeee38496d8b330771a7a <span class=\"number\">1600</span> <span class=\"number\">234</span></div><div class=\"line\">READ <span class=\"number\">335</span>c4c6028171cfddfbaae1a9c313c52</div><div class=\"line\">READ <span class=\"number\">3400330</span>d1dfc7f3f7f4b8d4d803dfcf6</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>前五行是文件头部，分别是区分文件格式的++MAGIC数++（固定为<code>libcore.io.DiskLruCache</code>）、++缓存版本++、++应用版本++、++Key对应Value值个数++和一个++空白行++。<br>之后的每行都对应一个Cache实体的状态记录。由++状态++、++键值++和++可选择具体状态值++组成。</p>\n<ul>\n<li>DIRTY<br>正在++创建++或++更新++缓存数据的监视信息。每个成功的DIRTY操作之后都会紧跟一个CLEAN或REMOVE操作。如果没有对应的CLEAN或REMOVE操作说明应该删除掉临时文件。</li>\n<li>CLEAN<br>可以读取缓存的记录。之后是缓存文件的长度。</li>\n<li>READ<br>缓存访问记录</li>\n<li>REMOVE<br>缓存删除记录</li>\n</ul>\n<p><code>journal</code>文件偶尔会丢掉多余的行数来压缩，压缩时使用<code>journal.tmp</code>的临时文件，打开缓存时如果临时文件存在，则删除临时文件。</p>\n<h2 id=\"1-2-缓存文件\"><a href=\"#1-2-缓存文件\" class=\"headerlink\" title=\"1.2 缓存文件\"></a>1.2 缓存文件</h2><p><code>DiskLruCache</code>用了两种文件来保存缓存：++缓存元数据++文件和++缓存体++文件。</p>\n<ul>\n<li>缓存元数据文件保存响应的请求和响应的首部信息，如果是HTTPS请求还保存对应的加密和握手协议。</li>\n<li>缓存体文件保存具体的文件<h3 id=\"1-2-1-缓存元数据文件\"><a href=\"#1-2-1-缓存元数据文件\" class=\"headerlink\" title=\"1.2.1 缓存元数据文件\"></a>1.2.1 缓存元数据文件</h3></li>\n</ul>\n<p>标准的==HTTP== META_DATA<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://google.com/foo</div><div class=\"line\">GET</div><div class=\"line\">2</div><div class=\"line\">Accept-Language: fr-CA</div><div class=\"line\">Accept-Charset: UTF-8</div><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">3</div><div class=\"line\">Content-Type: image/png</div><div class=\"line\">Content-Length: 100</div><div class=\"line\">Cache-Control: max-age=600</div></pre></td></tr></table></figure></p>\n<p>标准的==HTTPS== META_DATA<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://google.com/foo</div><div class=\"line\">GET</div><div class=\"line\">2</div><div class=\"line\">Accept-Language: fr-CA</div><div class=\"line\">Accept-Charset: UTF-8</div><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">3</div><div class=\"line\">Content-Type: image/png</div><div class=\"line\">Content-Length: 100</div><div class=\"line\">Cache-Control: max-age=600</div><div class=\"line\"></div><div class=\"line\">AES_256_WITH_MD5</div><div class=\"line\">2</div><div class=\"line\">base64-encoded peerCertificate[0]</div><div class=\"line\">base64-encoded peerCertificate[1]</div><div class=\"line\">-1</div><div class=\"line\">TLSv1.2</div></pre></td></tr></table></figure></p>\n<ol>\n<li>1-2行是++URL++与++请求方法++。</li>\n<li>第3行是HTTP请求Vary头部字段数量，表示++请求头部数++</li>\n<li>紧跟之后的是Vary响应字段，表示++请求的头部信息++。</li>\n<li>在请求Vary头部字段之后是响应状态。包含++HTTP版本++，++状态码++和++Message++</li>\n<li>在响应行之后是++响应头部数量++值。之后是++响应头部++信息详情。</li>\n<li>对于HTTPS请求还包含SSL的session信息。由一个++空行++、++密码组++、++证书链长度++、++证书链++、++本地证书长度++（<code>-1</code>表示无本地证书）、最后一行为++可选信息++（如果有表示<code>TLS</code>的版本号）。<h3 id=\"1-2-3-缓存体文件\"><a href=\"#1-2-3-缓存体文件\" class=\"headerlink\" title=\"1.2.3 缓存体文件\"></a>1.2.3 缓存体文件</h3>缓存内容存储的是响应的具体信息。如<code>Json</code>、<code>图片</code>等具体的文件内容。<h2 id=\"1-3-缓存类的结构\"><a href=\"#1-3-缓存类的结构\" class=\"headerlink\" title=\"1.3 缓存类的结构\"></a>1.3 缓存类的结构</h2><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1490865300/wechat/OkHttpCache.jpg\" alt=\"img\"><h1 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2. 初始化\"></a>2. 初始化</h1>任何对缓存的操作都会调用缓存的初始化。读取缓存的日志文件，用<code>LinkHashMap.java</code>来存储日志的操作记录，方便删除与查找。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// If a bkp file exists, use it instead.</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Prefer to pick up where we left off.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (fileSystem.exists(journalFile)) &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// [1]</span></div><div class=\"line\">        readJournal();</div><div class=\"line\">        <span class=\"comment\">// [2]</span></div><div class=\"line\">        processJournal();</div><div class=\"line\">        initialized = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException journalIsCorrupt) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// [3]</span></div><div class=\"line\">        delete();</div><div class=\"line\">        closed = <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// [4]</span></div><div class=\"line\">    rebuildJournal();</div><div class=\"line\">    initialized = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-1-读取本地缓存\"><a href=\"#2-1-读取本地缓存\" class=\"headerlink\" title=\"2.1 读取本地缓存\"></a>2.1 读取本地缓存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readJournal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    BufferedSource source = Okio.buffer(fileSystem.source(journalFile));</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// check journal header</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">int</span> lineCount = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// [1.1]</span></div><div class=\"line\">          readJournalLine(source.readUtf8LineStrict());</div><div class=\"line\">          lineCount++;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (EOFException endOfJournal) &#123;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 记录有效的缓存操作记录数</span></div><div class=\"line\">      redundantOpCount = lineCount - lruEntries.size();</div><div class=\"line\">      <span class=\"comment\">// If we ended on a truncated line, rebuild the journal before appending to it.</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      Util.closeQuietly(source);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迭代读取缓存日志文件每行操作，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readJournalLine</span><span class=\"params\">(String line)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否是有效的操作行</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">int</span> keyBegin = firstSpace + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> secondSpace = line.indexOf(<span class=\"string\">' '</span>, keyBegin);</div><div class=\"line\">    <span class=\"keyword\">final</span> String key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (secondSpace == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果是REMOVE操作，移除内存中对应的失效缓存</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      key = line.substring(keyBegin, secondSpace);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 读取内存中的Entry，如果没有则创建新的Entry并添加到LinkHashMap中</span></div><div class=\"line\">    Entry entry = lruEntries.get(key);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (secondSpace != -<span class=\"number\">1</span> &amp;&amp; firstSpace == CLEAN.length() &amp;&amp; line.startsWith(CLEAN)) &#123;</div><div class=\"line\">      <span class=\"comment\">// CLEAN操作</span></div><div class=\"line\">      String[] parts = line.substring(secondSpace + <span class=\"number\">1</span>).split(<span class=\"string\">\" \"</span>);</div><div class=\"line\">      entry.readable = <span class=\"keyword\">true</span>;</div><div class=\"line\">      entry.currentEditor = <span class=\"keyword\">null</span>;</div><div class=\"line\">      entry.setLengths(parts);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondSpace == -<span class=\"number\">1</span> &amp;&amp; firstSpace == DIRTY.length() &amp;&amp; line.startsWith(DIRTY)) &#123;</div><div class=\"line\">      <span class=\"comment\">// 脏数据，赋值Editor待后续清理</span></div><div class=\"line\">      entry.currentEditor = <span class=\"keyword\">new</span> Editor(entry);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondSpace == -<span class=\"number\">1</span> &amp;&amp; firstSpace == READ.length() &amp;&amp; line.startsWith(READ)) &#123;</div><div class=\"line\">      <span class=\"comment\">// READ操作</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 非法操作行数据</span></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"unexpected journal line: \"</span> + line);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-2-处理读取到的缓存\"><a href=\"#2-2-处理读取到的缓存\" class=\"headerlink\" title=\"2.2 处理读取到的缓存\"></a>2.2 处理读取到的缓存</h2><p>处理读取到Entry链表，清理垃圾缓存和操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [2] 计算初始大小，回收垃圾缓存。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processJournal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    fileSystem.delete(journalFileTmp);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;Entry&gt; i = lruEntries.values().iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">      Entry entry = i.next();</div><div class=\"line\">      <span class=\"comment\">// entry.currentEditor 如果不是空说明是DIRTY的数据，上面分析过</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (entry.currentEditor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; valueCount; t++) &#123;</div><div class=\"line\">          size += entry.lengths[t];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        entry.currentEditor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"comment\">// valueCount = 2</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; valueCount; t++) &#123;</div><div class=\"line\">          fileSystem.delete(entry.cleanFiles[t]);</div><div class=\"line\">          fileSystem.delete(entry.dirtyFiles[t]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        i.remove();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-3-异常处理\"><a href=\"#2-3-异常处理\" class=\"headerlink\" title=\"2.3 异常处理\"></a>2.3 异常处理</h2><p>读取或处理缓存时发生异常，说明缓存文件已破坏，清空缓存目录下的所有文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [3] 出现异常时，关闭缓存并删除缓存目录下所有文件</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    close();</div><div class=\"line\">    fileSystem.deleteContents(directory);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-异常后的恢复\"><a href=\"#2-4-异常后的恢复\" class=\"headerlink\" title=\"2.4 异常后的恢复\"></a>2.4 异常后的恢复</h2><p>出现异常清空缓存目录后，需要重新创建Clean的缓存文件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [4] 创建新的日志文件，会替换当前存在的日志文件</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">rebuildJournal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先关闭日志写操作</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 创建一个临时文件</span></div><div class=\"line\">    BufferedSink writer = Okio.buffer(fileSystem.sink(journalFileTmp));</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 写入日志必要的头信息</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"comment\">// 迭代内存中日志记录</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (Entry entry : lruEntries.values()) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (entry.currentEditor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">// 写入DIRTY记录</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 写入CLEAN记录</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      writer.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 备份现有日志文件，保存新日志文件，然后删除备份文件</span></div><div class=\"line\">    hasJournalErrors = <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-缓存读取\"><a href=\"#3-缓存读取\" class=\"headerlink\" title=\"3. 缓存读取\"></a>3. 缓存读取</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\">Response <span class=\"title\">get</span><span class=\"params\">(Request request)</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 缓存的KEY值实际就是Request的Url的MD5值</span></div><div class=\"line\">    String key = urlToKey(request);</div><div class=\"line\">    DiskLruCache.Snapshot snapshot; <span class=\"comment\">// 缓存快照，包装了Source和Sink</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// [1]</span></div><div class=\"line\">    snapshot = cache.get(key);</div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [2]</span></div><div class=\"line\">      entry = <span class=\"keyword\">new</span> Entry(snapshot.getSource(ENTRY_METADATA));</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      Util.closeQuietly(snapshot);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// [3]</span></div><div class=\"line\">    Response response = entry.response(snapshot);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> response;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-1-缓存文件快照\"><a href=\"#3-1-缓存文件快照\" class=\"headerlink\" title=\"3.1 缓存文件快照\"></a>3.1 缓存文件快照</h2><p>Snapshot内是缓存文件的Source、每个文件的具体大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Snapshot.java</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String key;          <span class=\"comment\">// Request key值</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceNumber; <span class=\"comment\">// 多线程</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Source[] sources;    <span class=\"comment\">// 缓存元数据和缓存体文件输入流</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span>[] lengths;      <span class=\"comment\">// metadata和body缓存文件长度</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Snapshot <span class=\"title\">get</span><span class=\"params\">(String key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    Entry entry = lruEntries.get(key);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// [1.1]</span></div><div class=\"line\">    Snapshot snapshot = entry.snapshot();</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Entry.java</div><div class=\"line\"><span class=\"comment\">// [1.1]</span></div><div class=\"line\"><span class=\"function\">Snapshot <span class=\"title\">snapshot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// valueCount = 2</span></div><div class=\"line\">  Source[] sources = <span class=\"keyword\">new</span> Source[valueCount];</div><div class=\"line\">  <span class=\"keyword\">long</span>[] lengths = <span class=\"keyword\">this</span>.lengths.clone(); <span class=\"comment\">// Defensive copy since these can be zeroed out.</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; valueCount; i++) &#123;</div><div class=\"line\">      sources[i] = fileSystem.source(cleanFiles[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Snapshot(key, sequenceNumber, sources, lengths);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-构建缓存响应\"><a href=\"#3-2-构建缓存响应\" class=\"headerlink\" title=\"3.2 构建缓存响应\"></a>3.2 构建缓存响应</h2><p>缓存响应包括请求的详细信息，协议，响应码和响应体<code>CacheResponseBody.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.Entry.java</div><div class=\"line\"><span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">response</span><span class=\"params\">(DiskLruCache.Snapshot snapshot)</span> </span>&#123;</div><div class=\"line\">  String contentType = responseHeaders.get(<span class=\"string\">\"Content-Type\"</span>);</div><div class=\"line\">  String contentLength = responseHeaders.get(<span class=\"string\">\"Content-Length\"</span>);</div><div class=\"line\">  Request cacheRequest = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">      .url(url)</div><div class=\"line\">      .method(requestMethod, <span class=\"keyword\">null</span>)</div><div class=\"line\">      .headers(varyHeaders)</div><div class=\"line\">      .build();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response.Builder()</div><div class=\"line\">      .request(cacheRequest)</div><div class=\"line\">      .protocol(protocol)</div><div class=\"line\">      .code(code)</div><div class=\"line\">      .message(message)</div><div class=\"line\">      .headers(responseHeaders)</div><div class=\"line\">      <span class=\"comment\">// [3.1]</span></div><div class=\"line\">      .body(<span class=\"keyword\">new</span> CacheResponseBody(snapshot, contentType, contentLength))</div><div class=\"line\">      .handshake(handshake)</div><div class=\"line\">      .build();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.CacheResponseBody.java</div><div class=\"line\"><span class=\"comment\">// [3.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheResponseBody</span><span class=\"params\">(<span class=\"keyword\">final</span> DiskLruCache.Snapshot snapshot,</span></span></div><div class=\"line\">    String contentType, String contentLength) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 创建缓存体文件Source</span></div><div class=\"line\">  <span class=\"comment\">// [3.1.1]</span></div><div class=\"line\">  Source source = snapshot.getSource(ENTRY_BODY);</div><div class=\"line\">  bodySource = Okio.buffer(<span class=\"keyword\">new</span> ForwardingSource(source) &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      snapshot.close();</div><div class=\"line\">      <span class=\"keyword\">super</span>.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"4-缓存写入\"><a href=\"#4-缓存写入\" class=\"headerlink\" title=\"4. 缓存写入\"></a>4. 缓存写入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">private</span> CacheRequest <span class=\"title\">put</span><span class=\"params\">(Response response)</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    String requestMethod = response.request().method();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (HttpMethod.invalidatesCache(response.request().method())) &#123;</div><div class=\"line\">      <span class=\"comment\">// OkHttp3只支持GET请求缓存</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!requestMethod.equals(<span class=\"string\">\"GET\"</span>)) &#123;</div><div class=\"line\">      <span class=\"comment\">// Don't cache non-GET responses. We're technically allowed to cache</span></div><div class=\"line\">      <span class=\"comment\">// HEAD requests and some POST requests, but the complexity of doing</span></div><div class=\"line\">      <span class=\"comment\">// so is high and the benefit is low.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (OkHeaders.hasVaryAll(response)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    Entry entry = <span class=\"keyword\">new</span> Entry(response);</div><div class=\"line\">    DiskLruCache.Editor editor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [1] 将请求的URL的MD5值作为缓存Key值</span></div><div class=\"line\">      editor = cache.edit(urlToKey(response.request()));</div><div class=\"line\">      <span class=\"keyword\">if</span> (editor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// [2] 写入请求META_DATA信息</span></div><div class=\"line\">      entry.writeTo(editor);</div><div class=\"line\">      <span class=\"comment\">// [3] 初始化缓存请求，用于写入缓存体</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CacheRequestImpl(editor);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 出现异常，结束Editor任务</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-1-初始Editor对象\"><a href=\"#4-1-初始Editor对象\" class=\"headerlink\" title=\"4.1 初始Editor对象\"></a>4.1 初始Editor对象</h2><p>Editor主要作用就是创建写入。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Editor <span class=\"title\">edit</span><span class=\"params\">(String key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> edit(key, ANY_SEQUENCE_NUMBER);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> Editor <span class=\"title\">edit</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> expectedSequenceNumber)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否初始化，是否关闭，Key值验证</span></div><div class=\"line\">    ...</div><div class=\"line\">    Entry entry = lruEntries.get(key);</div><div class=\"line\">    <span class=\"comment\">// Snapshot是否过期，是否已有Editor在运行</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 日志文件是否超过最大值</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// DIRTY记录，防止缓存文件泄露问题，先Flush记录日志</span></div><div class=\"line\">    <span class=\"comment\">// Flush the journal before creating files to prevent file leaks.</span></div><div class=\"line\">    journalWriter.writeUtf8(DIRTY).writeByte(<span class=\"string\">' '</span>).writeUtf8(key).writeByte(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">    journalWriter.flush();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (hasJournalErrors) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// Don't edit; the journal can't be written.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 初始化新的Editor</span></div><div class=\"line\">    Editor editor = <span class=\"keyword\">new</span> Editor(entry);</div><div class=\"line\">    entry.currentEditor = editor;</div><div class=\"line\">    <span class=\"keyword\">return</span> editor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-写入元数据\"><a href=\"#4-2-写入元数据\" class=\"headerlink\" title=\"4.2 写入元数据\"></a>4.2 写入元数据</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.Entry.java</div><div class=\"line\"><span class=\"comment\">// [2]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeTo</span><span class=\"params\">(DiskLruCache.Editor editor)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));</div><div class=\"line\">  <span class=\"comment\">// 写入缓存元数据，参考缓存元数据节</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-3-CacheRequest\"><a href=\"#4-3-CacheRequest\" class=\"headerlink\" title=\"4.3 CacheRequest\"></a>4.3 CacheRequest</h2><p>创建<code>CacheRequestImpl</code>目的是处理缓存输出流的处理。创建一个临时缓存文件来写入缓存。写入成功后，由Editor完成最后的缓存体的处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@CacheRequestImpl</span>.java</div><div class=\"line\"><span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheRequestImpl</span><span class=\"params\">(<span class=\"keyword\">final</span> DiskLruCache.Editor editor)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.editor = editor;</div><div class=\"line\">  <span class=\"comment\">// [3.1] 初始化缓存体</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">this</span>.cacheOut = editor.newSink(ENTRY_BODY);</div><div class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"keyword\">new</span> ForwardingSink(cacheOut) &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (Cache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (done) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        done = <span class=\"keyword\">true</span>;</div><div class=\"line\">        writeSuccessCount++;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">super</span>.close();</div><div class=\"line\">      <span class=\"comment\">// [3.2] 完成缓存体文件写入</span></div><div class=\"line\">      editor.commit();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-3-1-未缓冲的输出流\"><a href=\"#4-3-1-未缓冲的输出流\" class=\"headerlink\" title=\"4.3.1 未缓冲的输出流\"></a>4.3.1 未缓冲的输出流</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Editor.java</div><div class=\"line\"><span class=\"comment\">// [3.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Sink <span class=\"title\">newSink</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (DiskLruCache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 保证编辑的是对应缓存文件</span></div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">if</span> (!entry.readable) &#123;</div><div class=\"line\">      <span class=\"comment\">// 缓存文件是否正在编辑</span></div><div class=\"line\">      written[index] = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 初始化临时缓存文件</span></div><div class=\"line\">    File dirtyFile = entry.dirtyFiles[index];</div><div class=\"line\">    Sink sink;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 初始化缓存文件的Sink</span></div><div class=\"line\">      sink = fileSystem.sink(dirtyFile);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> NULL_SINK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 初始化错误流处理的Sink</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FaultHidingSink(sink) &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(IOException e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (DiskLruCache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">          hasErrors = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-3-1-提交写入操作\"><a href=\"#4-3-1-提交写入操作\" class=\"headerlink\" title=\"4.3.1 提交写入操作\"></a>4.3.1 提交写入操作</h3><p>如果输出流写入缓存文件出现错误，需要删除缓存文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.Edtor.java</div><div class=\"line\"><span class=\"comment\">// [3.2]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (DiskLruCache.<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (hasErrors) &#123;</div><div class=\"line\">      <span class=\"comment\">// [3.2.1] 缓存出错，记录REMOVE日志</span></div><div class=\"line\">      completeEdit(<span class=\"keyword\">this</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"comment\">// [3.2.2] 记录REMOVE日志，移除Entry</span></div><div class=\"line\">      removeEntry(entry);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [3.2.1] 完成缓存体写入</span></div><div class=\"line\">      completeEdit(<span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    committed = <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-1-完成提交\"><a href=\"#4-3-1-完成提交\" class=\"headerlink\" title=\"4.3.1 完成提交\"></a>4.3.1 完成提交</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [3.2.1]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">completeEdit</span><span class=\"params\">(Editor editor, <span class=\"keyword\">boolean</span> success)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// success : true表示成功写入缓存文件</span></div><div class=\"line\">    Entry entry = editor.entry;</div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// If this edit is creating the entry for the first time, every index must have a value.</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 保存临时缓存文件（成功时且临时文件存在）或删除临时缓存文件（失败时）</span></div><div class=\"line\">    <span class=\"comment\">// 成功写入缓存文件时，需要更新Map中对应的Entry信息</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; valueCount; i++) &#123;</div><div class=\"line\">      File dirty = entry.dirtyFiles[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fileSystem.exists(dirty)) &#123;</div><div class=\"line\">          <span class=\"comment\">// 存储临时文件到缓存体文件</span></div><div class=\"line\">          File clean = entry.cleanFiles[i];</div><div class=\"line\">          fileSystem.rename(dirty, clean);</div><div class=\"line\">          <span class=\"keyword\">long</span> oldLength = entry.lengths[i];</div><div class=\"line\">          <span class=\"keyword\">long</span> newLength = fileSystem.size(clean);</div><div class=\"line\">          entry.lengths[i] = newLength;</div><div class=\"line\">          size = size - oldLength + newLength;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 删除临时缓存文件</span></div><div class=\"line\">        fileSystem.delete(dirty);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 日志记录数</span></div><div class=\"line\">    redundantOpCount++;</div><div class=\"line\">    entry.currentEditor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry.readable | success) &#123;</div><div class=\"line\">      <span class=\"comment\">// 记录CLEAN日志</span></div><div class=\"line\">      entry.readable = <span class=\"keyword\">true</span>;</div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">        entry.sequenceNumber = nextSequenceNumber++;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 记录REMOVE日志</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    journalWriter.flush();</div><div class=\"line\">    <span class=\"comment\">// 整理日志大小</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt; maxSize || journalRebuildRequired()) &#123;</div><div class=\"line\">      executor.execute(cleanupRunnable);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.java</div><div class=\"line\"><span class=\"comment\">// [3.2.2]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeEntry</span><span class=\"params\">(Entry entry)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry.currentEditor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      entry.currentEditor.hasErrors = <span class=\"keyword\">true</span>; <span class=\"comment\">// Prevent the edit from completing normally.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 删除失效的缓存文件</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 记录日志操作数</span></div><div class=\"line\">    redundantOpCount++;</div><div class=\"line\">    <span class=\"comment\">// 记录REMOVE操作</span></div><div class=\"line\">    journalWriter.writeUtf8(REMOVE).writeByte(<span class=\"string\">' '</span>).writeUtf8(entry.key).writeByte(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">    lruEntries.remove(entry.key);</div><div class=\"line\">    <span class=\"comment\">// 超过一定操作次数后，对文件进行清理操作</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (journalRebuildRequired()) &#123;</div><div class=\"line\">      executor.execute(cleanupRunnable);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"5-缓存更新\"><a href=\"#5-缓存更新\" class=\"headerlink\" title=\"5. 缓存更新\"></a>5. 缓存更新</h1><p>更新的操作是在读取缓存操作，使用缓存策略与服务器返回的状态或头部信息来决定是否更新缓存。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Response cached, Response network)</span> &#123;</div><div class=\"line\">    Entry entry = <span class=\"keyword\">new</span> Entry(network);</div><div class=\"line\">    <span class=\"comment\">// [1] 读取缓存文件快照，cached 是读取缓存得到的Response，由读取缓存小节中知道cached.body()实际上就是CacheResponseBody</span></div><div class=\"line\">    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;</div><div class=\"line\">    DiskLruCache.Editor editor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// [2] snapshot.edit调用就是DiskLruCache的edit(String key, long expectedSequenceNumber)方法。</span></div><div class=\"line\">      editor = snapshot.edit(); <span class=\"comment\">// Returns null if snapshot is not current.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (editor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// [3] 更新缓存元数据，参考缓存小节</span></div><div class=\"line\">        entry.writeTo(editor);</div><div class=\"line\">        <span class=\"comment\">// [4] 更新缓存体，记录操作日志，参考缓存写入小节</span></div><div class=\"line\">        editor.commit();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      <span class=\"comment\">// 更新出现异常，清理本地缓存文件</span></div><div class=\"line\">      abortQuietly(editor);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"6-缓存清理\"><a href=\"#6-缓存清理\" class=\"headerlink\" title=\"6. 缓存清理\"></a>6. 缓存清理</h1><p>OkHttp3缓存清理支持++手动++和++自动++两种。</p>\n<ul>\n<li>手动清理缓存文件，直接调用<code>Cache.remove(Request request)</code>方法，可以清理指定请求的缓存文件，也支持批量缓存清理<code>Cache.evictAll()</code>将缓存文件全部清空</li>\n<li>自动清理缓存则在运行时自动判断。如果服务器响应的不需要缓存，判断本地是否进行过缓存决定是否清理已有的缓存文件。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Cache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    <span class=\"comment\">// [1] 调用DiskLruCache删除缓存</span></div><div class=\"line\">    cache.remove(urlToKey(request));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(String key)</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    <span class=\"comment\">// 一些判断</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// [1] 清理缓存文件，记录缓存操作，参考写入。</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> removed = removeEntry(entry);</div><div class=\"line\">    <span class=\"keyword\">if</span> (removed &amp;&amp; size &lt;= maxSize) mostRecentTrimFailed = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> removed;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"7-关闭缓存\"><a href=\"#7-关闭缓存\" class=\"headerlink\" title=\"7. 关闭缓存\"></a>7. 关闭缓存</h1><p>清空全部缓存或调用<code>Cache.close</code>关闭缓存。关闭缓存时会清除所有正在读写操作的缓存任务。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DiskLruCache</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!initialized || closed) &#123;</div><div class=\"line\">      closed = <span class=\"keyword\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Copying for safe iteration.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Entry entry : lruEntries.values().toArray(<span class=\"keyword\">new</span> Entry[lruEntries.size()])) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (entry.currentEditor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        entry.currentEditor.abort();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    trimToSize();</div><div class=\"line\">    journalWriter.close();</div><div class=\"line\">    journalWriter = <span class=\"keyword\">null</span>;</div><div class=\"line\">    closed = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"深入理解OkHttp3的Connections（3）","date":"2017-04-24T09:34:07.000Z","_content":"![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1492768247/wechat/OkHttpCore.jpg)\nOkHttp3的网络连接创建和数据传输由责任链网络层的`ConnectInterceptor`和`CallServerInterceptor`完成。`ConnectInterceptor`为请求创建与服务器网络连接，`CallServerInterceptor`负责网络数据读写的具体操作。\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1493002739/wechat/OkHttp_connection.jpg)\n## 1. StreamAllocation\nStreamAllocation类似中介者模式，协调Connections、Stream和Call三者之间的关系。每个Call在Application层`RetryAndFollowUpInterceptor`实例化一个`StreamAllocation`。\n\n相同Address（相同的Host与端口）可以共用相同的连接RealConnection。\n1. StreamAllocation通过Address，从连接池ConnectionPools中取出有效的RealConnection，与远程服务器建立Socket连接。\n2. 在处理响应结束后或出现网络异常时，释放Socket连接。\n3. 每个RealConnection都持有对StreamAllocation的弱引用，用于连接闲置状态的判断。\n\n查找可用连接\n```java\n  private RealConnection findConnection(int connectTimeout, int readTimeout, int writeTimeout,\n      boolean connectionRetryEnabled) throws IOException {\n    Route selectedRoute;\n    synchronized (connectionPool) {\n      // prediction check\n      ...\n      // 尝试使用已分配的连接\n      ...\n      // 尝试从连接池获取\n      Internal.instance.get(connectionPool, address, this);\n      ...\n      selectedRoute = route;\n    }\n\n    // 未路由寻址时，查找可用路由\n    ...\n\n    // 立即创建RealConnection\n    RealConnection result;\n    // 并发\n    synchronized (connectionPool) {\n      route = selectedRoute;\n      refusedStreamCount = 0;\n      result = new RealConnection(connectionPool, selectedRoute);\n      ...\n      if (canceled) throw new IOException(\"Canceled\");\n    }\n\n    // 进行TCP和TLS握手，建立与服务器连接通道\n    result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);\n    // 路由可用，从失败路由表中移除\n    routeDatabase().connected(result.route());\n\n    Socket socket = null;\n    synchronized (connectionPool) {\n      // 添加到连接池，如果其他并发线程已创建同个多路复用的连接，则丢弃当前的连接\n      // 并释放Socket资源\n      ...\n    }\n    ...\n    return result;\n  }\n```\n\n## 2. ConnectionPool\n\nOkhttp3封装了网络连接的逻辑，通过`RealConnection`建立Socket连接。因为建立Socket网络连接会增加网络延迟，尤其是对于应用程序客户端的频繁的网络请求，需要建立HTTP和HTTP/2的重用策略，降低网络连接代理性能损耗。\n\n`ConnectionPool`针对于相同Address的请求复用同一个connection，，维护`RealConnection`类似循环队列形式的双端队列。\nConnectionPool默认的最大空闲连接数为5，最大的空闲时间为5分钟。\n\n```java\n  public ConnectionPool() {\n    this(5, 5, TimeUnit.MINUTES);\n  }\n```\n\nConnectionPool使用ArrayDeque来维护池内的连接。`ArrayDeque`大多数操作时间复杂度为O(1)。对于remove、removeFirstOccurrence、removeLastOccurrence、contains和iterator.remove()方法，时间复杂度为O(n)，线性复杂度。双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两边进行。\n### 2.1. 循环数组\n```java\nprivate final Deque<RealConnection> connections = new ArrayDeque<>();\n```\nArrayDeque是双端队列的数组的实现，`ArrayDeque`是一个可变大小的循环数组，没有长度大小限制，非线程安全，因此不支持多线程并发，需要对数组的操作需要加上同步锁。\n它的默认长度是16。\n```java\n    public ArrayDeque() {\n        elements = new Object[16];\n    }\n```\n设定指定长度数组时，则初始长度为比选择的数大的最小2的指数的整数。\n```java\n    private void allocateElements(int numElements) {\n        int initialCapacity = MIN_INITIAL_CAPACITY;\n        // 移位操作将最高位以下的为置为1，正好比\n        if (numElements >= initialCapacity) {\n            initialCapacity = numElements;\n            initialCapacity |= (initialCapacity >>>  1);\n            initialCapacity |= (initialCapacity >>>  2);\n            initialCapacity |= (initialCapacity >>>  4);\n            initialCapacity |= (initialCapacity >>>  8);\n            initialCapacity |= (initialCapacity >>> 16);\n            initialCapacity++; \n            ...\n        }\n        elements = new Object[initialCapacity];\n    }\n```\n\n1. 添加连接\n```java\n  void put(RealConnection connection) {\n    ...\n    // 是否需要清理连接池\n    ...\n    connections.add(connection);\n  }\n```\n2. 查找连接\n```java\n// 使用迭代来查找连接池连接\nconnections.iterator()\n```\n3. 清理连接\n```java\n  // 如果返回true , 表示连接已经从连接池移除，需要立刻关闭\n  boolean connectionBecameIdle(RealConnection connection) {\n    assert (Thread.holdsLock(this));\n    if (connection.noNewStreams || maxIdleConnections == 0) {\n      connections.remove(connection);\n      return true;\n    } else {\n      // 唤醒清理线程，因为可能超过了最大空闲连接数\n      notifyAll();\n      return false;\n    }\n  }\n\n```\n\n### 2.2. 连接清理\n内置的清理线程会定时对连接池检查，清理空闲连接。根据空闲连接的最大空闲时间和连接数，判断执行清理操作。\n\n```java\n  private final Runnable cleanupRunnable = new Runnable() {\n    @Override public void run() {\n      while (true) {\n        long waitNanos = cleanup(System.nanoTime());\n        // waitNanos等于-1表示无空闲或在用的连接\n        ...\n        // 如果有空闲或在用连接则定时启动清理线程\n        ...\n      }\n    }\n  };\n  \n  /**\n  * 维护连接池，清理超过最大空闲存活时间或数量的空闲连接。\n  * 返回下次调用这个方法的纳秒大小的睡眠时间。返回-1表示无须再次执行。\n  */\n  long cleanup(long now) {\n    int inUseConnectionCount = 0;  // 在用连接数\n    int idleConnectionCount = 0;   // 空闲连接数\n    RealConnection longestIdleConnection = null; // 临时最大空闲连接\n    long longestIdleDurationNs = Long.MIN_VALUE; // 最大空闲持续时间\n\n    ...\n    synchronized (this) {\n      for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {\n        RealConnection connection = i.next();\n        // 迭代查找最大空闲时间的连接，记录空闲连接和在用连接数\n        ...\n      }\n\n      if (longestIdleDurationNs >= this.keepAliveDurationNs\n          || idleConnectionCount > this.maxIdleConnections) {\n        // 超过最大空闲连接时间或空闲数据超过最大空闲连接数，从连接池移除连接\n        connections.remove(longestIdleConnection);\n      } else if (idleConnectionCount > 0) {\n        // 有空闲连接但是未超标，返回下次执行清理的时间间隔\n        return keepAliveDurationNs - longestIdleDurationNs;\n      } else if (inUseConnectionCount > 0) {\n        // 所有连接都在使用，返回最大连接时间\n        return keepAliveDurationNs;\n      } else {\n        // 无空闲和在用时间\n        cleanupRunning = false;\n        return -1;\n      }\n    }\n    ...\n    // 立即清理\n    return 0;\n  }\n```\n除了自动清理，还支持手动清理空闲的连接\n```java\n  public void evictAll() {\n    List<RealConnection> evictedConnections = new ArrayList<>();\n    synchronized (this) {\n      for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {\n        RealConnection connection = i.next();\n        if (connection.allocations.isEmpty()) {\n          // 如果处于空闲状态，直接移除\n          connection.noNewStreams = true;\n          evictedConnections.add(connection);\n          i.remove();\n        }\n      }\n    }\n\n    for (RealConnection connection : evictedConnections) {\n      // 循环关闭连接\n    }\n  }\n```\n### 2.3. Address\n连接池通过Address来判断是否有可复用的连接。依据服务器地址、端口号判断是否相同的Address\n```java\n@Address.java \n  @Override public boolean equals(Object other) {\n    if (other instanceof Address) {\n      Address that = (Address) other;\n      return this.url.equals(that.url) && ...;\n    }\n    return false;\n  }\n```\n`ConnectionPools`中不存在对应的Address的RealConnection则须进行路由寻址，初始化RealConnection，执行网络建立和传输操作。\n## 3. RealConnection\n初始化一个连接需要`ConnectionPool`和`Route`两个参数\n```java\n  public RealConnection(ConnectionPool connectionPool, Route route) {\n    this.connectionPool = connectionPool;\n    this.route = route;\n  }\n```\n`Route` 在创建`RealConnection`实例前，执行路由寻址操作，找到可用的路由。出现异常，则返回到应用层进行重试处理。\n## 3.1. 路由寻址\n路由寻址为指定Address初始化Route实例。\n```java\n  public Route next() throws IOException {\n    // Compute the next route to attempt.\n    if (!hasNextInetSocketAddress()) {\n      // 未进行寻址\n      if (!hasNextProxy()) {\n        // 无可用代理，尝试之前连接失败的路由\n        ...\n        return nextPostponed();\n      }\n      // 代理\n      lastProxy = nextProxy();\n    }\n    lastInetSocketAddress = nextInetSocketAddress();\n\n    Route route = new Route(address, lastProxy, lastInetSocketAddress);\n    if (routeDatabase.shouldPostpone(route)) {\n      // 如果路由曾失败过，添加到待用的路由表中\n      postponedRoutes.add(route);\n      // 继续查找合适的路由\n      return next();\n    }\n\n    return route;\n  }\n```\n代理设置，配置连接的host和端口号。\n```java\n  private void resetNextInetSocketAddress(Proxy proxy) throws IOException {\n    // Clear the addresses. Necessary if getAllByName() below throws!\n    inetSocketAddresses = new ArrayList<>();\n\n    String socketHost;\n    int socketPort;\n    if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {\n      // 无代理\n      socketHost = address.url().host();\n      socketPort = address.url().port();\n    } else {\n      // 代理\n      ....\n    }\n\n    // 端口号检查\n    ...\n    if (proxy.type() == Proxy.Type.SOCKS) {\n      ...\n    } else {\n      // Dns寻址\n      List<InetAddress> addresses = address.dns().lookup(socketHost);\n      for (int i = 0, size = addresses.size(); i < size; i++) {\n        InetAddress inetAddress = addresses.get(i);\n        inetSocketAddresses.add(new InetSocketAddress(inetAddress, socketPort));\n      }\n    }\n    ...\n  }\n```\n路由寻址成功后，初始化RealConnection并添加到连接池中，建立Socket连接\n### 3.2. Socket连接\nOkHttp3支持HTTP与HTTP/2。HTTP/2需要进行TLS的握手流程。\n```java\n@StreamAllocation.java\npublic void connect(\n      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {\n    if (protocol != null) throw new IllegalStateException(\"already connected\");\n\n    RouteException routeException = null;\n    List<ConnectionSpec> connectionSpecs = route.address().connectionSpecs();\n    ConnectionSpecSelector connectionSpecSelector = new ConnectionSpecSelector(connectionSpecs);\n\n    if (route.address().sslSocketFactory() == null) {\n      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {\n        throw new RouteException(new UnknownServiceException(\n            \"CLEARTEXT communication not enabled for client\"));\n      }\n      String host = route.address().url().host();\n      if (!Platform.get().isCleartextTrafficPermitted(host)) {\n        throw new RouteException(new UnknownServiceException(\n            \"CLEARTEXT communication to \" + host + \" not permitted by network security policy\"));\n      }\n    }\n\n    while (true) {\n      try {\n        if (route.requiresTunnel()) {\n          // 使用隧道在不兼容的网络上传输数据，或在不安全网络上提供安全路径\n          connectTunnel(connectTimeout, readTimeout, writeTimeout);\n        } else {\n          // 直接建立socket连接\n          connectSocket(connectTimeout, readTimeout);\n        }\n        // 协议连接方式，HTTP/1或者HTTP/2\n        establishProtocol(connectionSpecSelector);\n        break;\n      } catch (IOException e) {\n        ...\n      }\n    }\n\n    if (http2Connection != null) {\n      synchronized (connectionPool) {\n        allocationLimit = http2Connection.maxConcurrentStreams();\n      }\n    }\n  }\n```\nTLS 握手流程\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1493025333/wechat/tls_handshake.jpg)\n\n建立Socket连接成功之后，客户端就可以与服务端进行通讯了。\n","source":"_posts/深入理解OkHttp3的Connections.md","raw":"---\ntitle: 深入理解OkHttp3的Connections（3）\ndate: 2017-04-24 17:34:07\ntags: okhttp3 android\ncategories: okhttp3\n---\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1492768247/wechat/OkHttpCore.jpg)\nOkHttp3的网络连接创建和数据传输由责任链网络层的`ConnectInterceptor`和`CallServerInterceptor`完成。`ConnectInterceptor`为请求创建与服务器网络连接，`CallServerInterceptor`负责网络数据读写的具体操作。\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1493002739/wechat/OkHttp_connection.jpg)\n## 1. StreamAllocation\nStreamAllocation类似中介者模式，协调Connections、Stream和Call三者之间的关系。每个Call在Application层`RetryAndFollowUpInterceptor`实例化一个`StreamAllocation`。\n\n相同Address（相同的Host与端口）可以共用相同的连接RealConnection。\n1. StreamAllocation通过Address，从连接池ConnectionPools中取出有效的RealConnection，与远程服务器建立Socket连接。\n2. 在处理响应结束后或出现网络异常时，释放Socket连接。\n3. 每个RealConnection都持有对StreamAllocation的弱引用，用于连接闲置状态的判断。\n\n查找可用连接\n```java\n  private RealConnection findConnection(int connectTimeout, int readTimeout, int writeTimeout,\n      boolean connectionRetryEnabled) throws IOException {\n    Route selectedRoute;\n    synchronized (connectionPool) {\n      // prediction check\n      ...\n      // 尝试使用已分配的连接\n      ...\n      // 尝试从连接池获取\n      Internal.instance.get(connectionPool, address, this);\n      ...\n      selectedRoute = route;\n    }\n\n    // 未路由寻址时，查找可用路由\n    ...\n\n    // 立即创建RealConnection\n    RealConnection result;\n    // 并发\n    synchronized (connectionPool) {\n      route = selectedRoute;\n      refusedStreamCount = 0;\n      result = new RealConnection(connectionPool, selectedRoute);\n      ...\n      if (canceled) throw new IOException(\"Canceled\");\n    }\n\n    // 进行TCP和TLS握手，建立与服务器连接通道\n    result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);\n    // 路由可用，从失败路由表中移除\n    routeDatabase().connected(result.route());\n\n    Socket socket = null;\n    synchronized (connectionPool) {\n      // 添加到连接池，如果其他并发线程已创建同个多路复用的连接，则丢弃当前的连接\n      // 并释放Socket资源\n      ...\n    }\n    ...\n    return result;\n  }\n```\n\n## 2. ConnectionPool\n\nOkhttp3封装了网络连接的逻辑，通过`RealConnection`建立Socket连接。因为建立Socket网络连接会增加网络延迟，尤其是对于应用程序客户端的频繁的网络请求，需要建立HTTP和HTTP/2的重用策略，降低网络连接代理性能损耗。\n\n`ConnectionPool`针对于相同Address的请求复用同一个connection，，维护`RealConnection`类似循环队列形式的双端队列。\nConnectionPool默认的最大空闲连接数为5，最大的空闲时间为5分钟。\n\n```java\n  public ConnectionPool() {\n    this(5, 5, TimeUnit.MINUTES);\n  }\n```\n\nConnectionPool使用ArrayDeque来维护池内的连接。`ArrayDeque`大多数操作时间复杂度为O(1)。对于remove、removeFirstOccurrence、removeLastOccurrence、contains和iterator.remove()方法，时间复杂度为O(n)，线性复杂度。双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两边进行。\n### 2.1. 循环数组\n```java\nprivate final Deque<RealConnection> connections = new ArrayDeque<>();\n```\nArrayDeque是双端队列的数组的实现，`ArrayDeque`是一个可变大小的循环数组，没有长度大小限制，非线程安全，因此不支持多线程并发，需要对数组的操作需要加上同步锁。\n它的默认长度是16。\n```java\n    public ArrayDeque() {\n        elements = new Object[16];\n    }\n```\n设定指定长度数组时，则初始长度为比选择的数大的最小2的指数的整数。\n```java\n    private void allocateElements(int numElements) {\n        int initialCapacity = MIN_INITIAL_CAPACITY;\n        // 移位操作将最高位以下的为置为1，正好比\n        if (numElements >= initialCapacity) {\n            initialCapacity = numElements;\n            initialCapacity |= (initialCapacity >>>  1);\n            initialCapacity |= (initialCapacity >>>  2);\n            initialCapacity |= (initialCapacity >>>  4);\n            initialCapacity |= (initialCapacity >>>  8);\n            initialCapacity |= (initialCapacity >>> 16);\n            initialCapacity++; \n            ...\n        }\n        elements = new Object[initialCapacity];\n    }\n```\n\n1. 添加连接\n```java\n  void put(RealConnection connection) {\n    ...\n    // 是否需要清理连接池\n    ...\n    connections.add(connection);\n  }\n```\n2. 查找连接\n```java\n// 使用迭代来查找连接池连接\nconnections.iterator()\n```\n3. 清理连接\n```java\n  // 如果返回true , 表示连接已经从连接池移除，需要立刻关闭\n  boolean connectionBecameIdle(RealConnection connection) {\n    assert (Thread.holdsLock(this));\n    if (connection.noNewStreams || maxIdleConnections == 0) {\n      connections.remove(connection);\n      return true;\n    } else {\n      // 唤醒清理线程，因为可能超过了最大空闲连接数\n      notifyAll();\n      return false;\n    }\n  }\n\n```\n\n### 2.2. 连接清理\n内置的清理线程会定时对连接池检查，清理空闲连接。根据空闲连接的最大空闲时间和连接数，判断执行清理操作。\n\n```java\n  private final Runnable cleanupRunnable = new Runnable() {\n    @Override public void run() {\n      while (true) {\n        long waitNanos = cleanup(System.nanoTime());\n        // waitNanos等于-1表示无空闲或在用的连接\n        ...\n        // 如果有空闲或在用连接则定时启动清理线程\n        ...\n      }\n    }\n  };\n  \n  /**\n  * 维护连接池，清理超过最大空闲存活时间或数量的空闲连接。\n  * 返回下次调用这个方法的纳秒大小的睡眠时间。返回-1表示无须再次执行。\n  */\n  long cleanup(long now) {\n    int inUseConnectionCount = 0;  // 在用连接数\n    int idleConnectionCount = 0;   // 空闲连接数\n    RealConnection longestIdleConnection = null; // 临时最大空闲连接\n    long longestIdleDurationNs = Long.MIN_VALUE; // 最大空闲持续时间\n\n    ...\n    synchronized (this) {\n      for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {\n        RealConnection connection = i.next();\n        // 迭代查找最大空闲时间的连接，记录空闲连接和在用连接数\n        ...\n      }\n\n      if (longestIdleDurationNs >= this.keepAliveDurationNs\n          || idleConnectionCount > this.maxIdleConnections) {\n        // 超过最大空闲连接时间或空闲数据超过最大空闲连接数，从连接池移除连接\n        connections.remove(longestIdleConnection);\n      } else if (idleConnectionCount > 0) {\n        // 有空闲连接但是未超标，返回下次执行清理的时间间隔\n        return keepAliveDurationNs - longestIdleDurationNs;\n      } else if (inUseConnectionCount > 0) {\n        // 所有连接都在使用，返回最大连接时间\n        return keepAliveDurationNs;\n      } else {\n        // 无空闲和在用时间\n        cleanupRunning = false;\n        return -1;\n      }\n    }\n    ...\n    // 立即清理\n    return 0;\n  }\n```\n除了自动清理，还支持手动清理空闲的连接\n```java\n  public void evictAll() {\n    List<RealConnection> evictedConnections = new ArrayList<>();\n    synchronized (this) {\n      for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {\n        RealConnection connection = i.next();\n        if (connection.allocations.isEmpty()) {\n          // 如果处于空闲状态，直接移除\n          connection.noNewStreams = true;\n          evictedConnections.add(connection);\n          i.remove();\n        }\n      }\n    }\n\n    for (RealConnection connection : evictedConnections) {\n      // 循环关闭连接\n    }\n  }\n```\n### 2.3. Address\n连接池通过Address来判断是否有可复用的连接。依据服务器地址、端口号判断是否相同的Address\n```java\n@Address.java \n  @Override public boolean equals(Object other) {\n    if (other instanceof Address) {\n      Address that = (Address) other;\n      return this.url.equals(that.url) && ...;\n    }\n    return false;\n  }\n```\n`ConnectionPools`中不存在对应的Address的RealConnection则须进行路由寻址，初始化RealConnection，执行网络建立和传输操作。\n## 3. RealConnection\n初始化一个连接需要`ConnectionPool`和`Route`两个参数\n```java\n  public RealConnection(ConnectionPool connectionPool, Route route) {\n    this.connectionPool = connectionPool;\n    this.route = route;\n  }\n```\n`Route` 在创建`RealConnection`实例前，执行路由寻址操作，找到可用的路由。出现异常，则返回到应用层进行重试处理。\n## 3.1. 路由寻址\n路由寻址为指定Address初始化Route实例。\n```java\n  public Route next() throws IOException {\n    // Compute the next route to attempt.\n    if (!hasNextInetSocketAddress()) {\n      // 未进行寻址\n      if (!hasNextProxy()) {\n        // 无可用代理，尝试之前连接失败的路由\n        ...\n        return nextPostponed();\n      }\n      // 代理\n      lastProxy = nextProxy();\n    }\n    lastInetSocketAddress = nextInetSocketAddress();\n\n    Route route = new Route(address, lastProxy, lastInetSocketAddress);\n    if (routeDatabase.shouldPostpone(route)) {\n      // 如果路由曾失败过，添加到待用的路由表中\n      postponedRoutes.add(route);\n      // 继续查找合适的路由\n      return next();\n    }\n\n    return route;\n  }\n```\n代理设置，配置连接的host和端口号。\n```java\n  private void resetNextInetSocketAddress(Proxy proxy) throws IOException {\n    // Clear the addresses. Necessary if getAllByName() below throws!\n    inetSocketAddresses = new ArrayList<>();\n\n    String socketHost;\n    int socketPort;\n    if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {\n      // 无代理\n      socketHost = address.url().host();\n      socketPort = address.url().port();\n    } else {\n      // 代理\n      ....\n    }\n\n    // 端口号检查\n    ...\n    if (proxy.type() == Proxy.Type.SOCKS) {\n      ...\n    } else {\n      // Dns寻址\n      List<InetAddress> addresses = address.dns().lookup(socketHost);\n      for (int i = 0, size = addresses.size(); i < size; i++) {\n        InetAddress inetAddress = addresses.get(i);\n        inetSocketAddresses.add(new InetSocketAddress(inetAddress, socketPort));\n      }\n    }\n    ...\n  }\n```\n路由寻址成功后，初始化RealConnection并添加到连接池中，建立Socket连接\n### 3.2. Socket连接\nOkHttp3支持HTTP与HTTP/2。HTTP/2需要进行TLS的握手流程。\n```java\n@StreamAllocation.java\npublic void connect(\n      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {\n    if (protocol != null) throw new IllegalStateException(\"already connected\");\n\n    RouteException routeException = null;\n    List<ConnectionSpec> connectionSpecs = route.address().connectionSpecs();\n    ConnectionSpecSelector connectionSpecSelector = new ConnectionSpecSelector(connectionSpecs);\n\n    if (route.address().sslSocketFactory() == null) {\n      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {\n        throw new RouteException(new UnknownServiceException(\n            \"CLEARTEXT communication not enabled for client\"));\n      }\n      String host = route.address().url().host();\n      if (!Platform.get().isCleartextTrafficPermitted(host)) {\n        throw new RouteException(new UnknownServiceException(\n            \"CLEARTEXT communication to \" + host + \" not permitted by network security policy\"));\n      }\n    }\n\n    while (true) {\n      try {\n        if (route.requiresTunnel()) {\n          // 使用隧道在不兼容的网络上传输数据，或在不安全网络上提供安全路径\n          connectTunnel(connectTimeout, readTimeout, writeTimeout);\n        } else {\n          // 直接建立socket连接\n          connectSocket(connectTimeout, readTimeout);\n        }\n        // 协议连接方式，HTTP/1或者HTTP/2\n        establishProtocol(connectionSpecSelector);\n        break;\n      } catch (IOException e) {\n        ...\n      }\n    }\n\n    if (http2Connection != null) {\n      synchronized (connectionPool) {\n        allocationLimit = http2Connection.maxConcurrentStreams();\n      }\n    }\n  }\n```\nTLS 握手流程\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1493025333/wechat/tls_handshake.jpg)\n\n建立Socket连接成功之后，客户端就可以与服务端进行通讯了。\n","slug":"深入理解OkHttp3的Connections","published":1,"updated":"2017-04-24T09:40:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j2eq3001yc0m34m8npppg","content":"<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1492768247/wechat/OkHttpCore.jpg\" alt=\"img\"><br>OkHttp3的网络连接创建和数据传输由责任链网络层的<code>ConnectInterceptor</code>和<code>CallServerInterceptor</code>完成。<code>ConnectInterceptor</code>为请求创建与服务器网络连接，<code>CallServerInterceptor</code>负责网络数据读写的具体操作。</p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1493002739/wechat/OkHttp_connection.jpg\" alt=\"img\"></p>\n<h2 id=\"1-StreamAllocation\"><a href=\"#1-StreamAllocation\" class=\"headerlink\" title=\"1. StreamAllocation\"></a>1. StreamAllocation</h2><p>StreamAllocation类似中介者模式，协调Connections、Stream和Call三者之间的关系。每个Call在Application层<code>RetryAndFollowUpInterceptor</code>实例化一个<code>StreamAllocation</code>。</p>\n<p>相同Address（相同的Host与端口）可以共用相同的连接RealConnection。</p>\n<ol>\n<li>StreamAllocation通过Address，从连接池ConnectionPools中取出有效的RealConnection，与远程服务器建立Socket连接。</li>\n<li>在处理响应结束后或出现网络异常时，释放Socket连接。</li>\n<li>每个RealConnection都持有对StreamAllocation的弱引用，用于连接闲置状态的判断。</li>\n</ol>\n<p>查找可用连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RealConnection <span class=\"title\">findConnection</span><span class=\"params\">(<span class=\"keyword\">int</span> connectTimeout, <span class=\"keyword\">int</span> readTimeout, <span class=\"keyword\">int</span> writeTimeout,</span></span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> connectionRetryEnabled) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">  Route selectedRoute;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">    <span class=\"comment\">// prediction check</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 尝试使用已分配的连接</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 尝试从连接池获取</span></div><div class=\"line\">    Internal.instance.get(connectionPool, address, <span class=\"keyword\">this</span>);</div><div class=\"line\">    ...</div><div class=\"line\">    selectedRoute = route;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 未路由寻址时，查找可用路由</span></div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 立即创建RealConnection</span></div><div class=\"line\">  RealConnection result;</div><div class=\"line\">  <span class=\"comment\">// 并发</span></div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">    route = selectedRoute;</div><div class=\"line\">    refusedStreamCount = <span class=\"number\">0</span>;</div><div class=\"line\">    result = <span class=\"keyword\">new</span> RealConnection(connectionPool, selectedRoute);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (canceled) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Canceled\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 进行TCP和TLS握手，建立与服务器连接通道</span></div><div class=\"line\">  result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);</div><div class=\"line\">  <span class=\"comment\">// 路由可用，从失败路由表中移除</span></div><div class=\"line\">  routeDatabase().connected(result.route());</div><div class=\"line\"></div><div class=\"line\">  Socket socket = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">    <span class=\"comment\">// 添加到连接池，如果其他并发线程已创建同个多路复用的连接，则丢弃当前的连接</span></div><div class=\"line\">    <span class=\"comment\">// 并释放Socket资源</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-ConnectionPool\"><a href=\"#2-ConnectionPool\" class=\"headerlink\" title=\"2. ConnectionPool\"></a>2. ConnectionPool</h2><p>Okhttp3封装了网络连接的逻辑，通过<code>RealConnection</code>建立Socket连接。因为建立Socket网络连接会增加网络延迟，尤其是对于应用程序客户端的频繁的网络请求，需要建立HTTP和HTTP/2的重用策略，降低网络连接代理性能损耗。</p>\n<p><code>ConnectionPool</code>针对于相同Address的请求复用同一个connection，，维护<code>RealConnection</code>类似循环队列形式的双端队列。<br>ConnectionPool默认的最大空闲连接数为5，最大的空闲时间为5分钟。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConnectionPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>, TimeUnit.MINUTES);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConnectionPool使用ArrayDeque来维护池内的连接。<code>ArrayDeque</code>大多数操作时间复杂度为O(1)。对于remove、removeFirstOccurrence、removeLastOccurrence、contains和iterator.remove()方法，时间复杂度为O(n)，线性复杂度。双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两边进行。</p>\n<h3 id=\"2-1-循环数组\"><a href=\"#2-1-循环数组\" class=\"headerlink\" title=\"2.1. 循环数组\"></a>2.1. 循环数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Deque&lt;RealConnection&gt; connections = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</div></pre></td></tr></table></figure>\n<p>ArrayDeque是双端队列的数组的实现，<code>ArrayDeque</code>是一个可变大小的循环数组，没有长度大小限制，非线程安全，因此不支持多线程并发，需要对数组的操作需要加上同步锁。<br>它的默认长度是16。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayDeque</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    elements = <span class=\"keyword\">new</span> Object[<span class=\"number\">16</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设定指定长度数组时，则初始长度为比选择的数大的最小2的指数的整数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">allocateElements</span><span class=\"params\">(<span class=\"keyword\">int</span> numElements)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> initialCapacity = MIN_INITIAL_CAPACITY;</div><div class=\"line\">    <span class=\"comment\">// 移位操作将最高位以下的为置为1，正好比</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (numElements &gt;= initialCapacity) &#123;</div><div class=\"line\">        initialCapacity = numElements;</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">1</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">2</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">4</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">8</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class=\"number\">16</span>);</div><div class=\"line\">        initialCapacity++; </div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    elements = <span class=\"keyword\">new</span> Object[initialCapacity];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>添加连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(RealConnection connection)</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 是否需要清理连接池</span></div><div class=\"line\">  ...</div><div class=\"line\">  connections.add(connection);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查找连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用迭代来查找连接池连接</span></div><div class=\"line\">connections.iterator()</div></pre></td></tr></table></figure>\n</li>\n<li><p>清理连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果返回true , 表示连接已经从连接池移除，需要立刻关闭</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">connectionBecameIdle</span><span class=\"params\">(RealConnection connection)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">assert</span> (Thread.holdsLock(<span class=\"keyword\">this</span>));</div><div class=\"line\">  <span class=\"keyword\">if</span> (connection.noNewStreams || maxIdleConnections == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    connections.remove(connection);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 唤醒清理线程，因为可能超过了最大空闲连接数</span></div><div class=\"line\">    notifyAll();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-2-连接清理\"><a href=\"#2-2-连接清理\" class=\"headerlink\" title=\"2.2. 连接清理\"></a>2.2. 连接清理</h3><p>内置的清理线程会定时对连接池检查，清理空闲连接。根据空闲连接的最大空闲时间和连接数，判断执行清理操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable cleanupRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">long</span> waitNanos = cleanup(System.nanoTime());</div><div class=\"line\">      <span class=\"comment\">// waitNanos等于-1表示无空闲或在用的连接</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"comment\">// 如果有空闲或在用连接则定时启动清理线程</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 维护连接池，清理超过最大空闲存活时间或数量的空闲连接。</div><div class=\"line\">* 返回下次调用这个方法的纳秒大小的睡眠时间。返回-1表示无须再次执行。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">cleanup</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> inUseConnectionCount = <span class=\"number\">0</span>;  <span class=\"comment\">// 在用连接数</span></div><div class=\"line\">  <span class=\"keyword\">int</span> idleConnectionCount = <span class=\"number\">0</span>;   <span class=\"comment\">// 空闲连接数</span></div><div class=\"line\">  RealConnection longestIdleConnection = <span class=\"keyword\">null</span>; <span class=\"comment\">// 临时最大空闲连接</span></div><div class=\"line\">  <span class=\"keyword\">long</span> longestIdleDurationNs = Long.MIN_VALUE; <span class=\"comment\">// 最大空闲持续时间</span></div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">      RealConnection connection = i.next();</div><div class=\"line\">      <span class=\"comment\">// 迭代查找最大空闲时间的连接，记录空闲连接和在用连接数</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (longestIdleDurationNs &gt;= <span class=\"keyword\">this</span>.keepAliveDurationNs</div><div class=\"line\">        || idleConnectionCount &gt; <span class=\"keyword\">this</span>.maxIdleConnections) &#123;</div><div class=\"line\">      <span class=\"comment\">// 超过最大空闲连接时间或空闲数据超过最大空闲连接数，从连接池移除连接</span></div><div class=\"line\">      connections.remove(longestIdleConnection);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idleConnectionCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 有空闲连接但是未超标，返回下次执行清理的时间间隔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> keepAliveDurationNs - longestIdleDurationNs;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (inUseConnectionCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 所有连接都在使用，返回最大连接时间</span></div><div class=\"line\">      <span class=\"keyword\">return</span> keepAliveDurationNs;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 无空闲和在用时间</span></div><div class=\"line\">      cleanupRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 立即清理</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了自动清理，还支持手动清理空闲的连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">evictAll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  List&lt;RealConnection&gt; evictedConnections = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">      RealConnection connection = i.next();</div><div class=\"line\">      <span class=\"keyword\">if</span> (connection.allocations.isEmpty()) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果处于空闲状态，直接移除</span></div><div class=\"line\">        connection.noNewStreams = <span class=\"keyword\">true</span>;</div><div class=\"line\">        evictedConnections.add(connection);</div><div class=\"line\">        i.remove();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (RealConnection connection : evictedConnections) &#123;</div><div class=\"line\">    <span class=\"comment\">// 循环关闭连接</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-Address\"><a href=\"#2-3-Address\" class=\"headerlink\" title=\"2.3. Address\"></a>2.3. Address</h3><p>连接池通过Address来判断是否有可复用的连接。依据服务器地址、端口号判断是否相同的Address<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Address</span>.java </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> Address) &#123;</div><div class=\"line\">      Address that = (Address) other;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.url.equals(that.url) &amp;&amp; ...;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>ConnectionPools</code>中不存在对应的Address的RealConnection则须进行路由寻址，初始化RealConnection，执行网络建立和传输操作。</p>\n<h2 id=\"3-RealConnection\"><a href=\"#3-RealConnection\" class=\"headerlink\" title=\"3. RealConnection\"></a>3. RealConnection</h2><p>初始化一个连接需要<code>ConnectionPool</code>和<code>Route</code>两个参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealConnection</span><span class=\"params\">(ConnectionPool connectionPool, Route route)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.connectionPool = connectionPool;</div><div class=\"line\">  <span class=\"keyword\">this</span>.route = route;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Route</code> 在创建<code>RealConnection</code>实例前，执行路由寻址操作，找到可用的路由。出现异常，则返回到应用层进行重试处理。</p>\n<h2 id=\"3-1-路由寻址\"><a href=\"#3-1-路由寻址\" class=\"headerlink\" title=\"3.1. 路由寻址\"></a>3.1. 路由寻址</h2><p>路由寻址为指定Address初始化Route实例。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Route <span class=\"title\">next</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Compute the next route to attempt.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!hasNextInetSocketAddress()) &#123;</div><div class=\"line\">    <span class=\"comment\">// 未进行寻址</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!hasNextProxy()) &#123;</div><div class=\"line\">      <span class=\"comment\">// 无可用代理，尝试之前连接失败的路由</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">return</span> nextPostponed();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 代理</span></div><div class=\"line\">    lastProxy = nextProxy();</div><div class=\"line\">  &#125;</div><div class=\"line\">  lastInetSocketAddress = nextInetSocketAddress();</div><div class=\"line\"></div><div class=\"line\">  Route route = <span class=\"keyword\">new</span> Route(address, lastProxy, lastInetSocketAddress);</div><div class=\"line\">  <span class=\"keyword\">if</span> (routeDatabase.shouldPostpone(route)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果路由曾失败过，添加到待用的路由表中</span></div><div class=\"line\">    postponedRoutes.add(route);</div><div class=\"line\">    <span class=\"comment\">// 继续查找合适的路由</span></div><div class=\"line\">    <span class=\"keyword\">return</span> next();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> route;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代理设置，配置连接的host和端口号。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resetNextInetSocketAddress</span><span class=\"params\">(Proxy proxy)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Clear the addresses. Necessary if getAllByName() below throws!</span></div><div class=\"line\">  inetSocketAddresses = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">  String socketHost;</div><div class=\"line\">  <span class=\"keyword\">int</span> socketPort;</div><div class=\"line\">  <span class=\"keyword\">if</span> (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) &#123;</div><div class=\"line\">    <span class=\"comment\">// 无代理</span></div><div class=\"line\">    socketHost = address.url().host();</div><div class=\"line\">    socketPort = address.url().port();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 代理</span></div><div class=\"line\">    ....</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 端口号检查</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">if</span> (proxy.type() == Proxy.Type.SOCKS) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Dns寻址</span></div><div class=\"line\">    List&lt;InetAddress&gt; addresses = address.dns().lookup(socketHost);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = addresses.size(); i &lt; size; i++) &#123;</div><div class=\"line\">      InetAddress inetAddress = addresses.get(i);</div><div class=\"line\">      inetSocketAddresses.add(<span class=\"keyword\">new</span> InetSocketAddress(inetAddress, socketPort));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>路由寻址成功后，初始化RealConnection并添加到连接池中，建立Socket连接</p>\n<h3 id=\"3-2-Socket连接\"><a href=\"#3-2-Socket连接\" class=\"headerlink\" title=\"3.2. Socket连接\"></a>3.2. Socket连接</h3><p>OkHttp3支持HTTP与HTTP/2。HTTP/2需要进行TLS的握手流程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@StreamAllocation</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(</span></div><div class=\"line\">      <span class=\"keyword\">int</span> connectTimeout, <span class=\"keyword\">int</span> readTimeout, <span class=\"keyword\">int</span> writeTimeout, <span class=\"keyword\">boolean</span> connectionRetryEnabled) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (protocol != <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"already connected\"</span>);</div><div class=\"line\"></div><div class=\"line\">    RouteException routeException = <span class=\"keyword\">null</span>;</div><div class=\"line\">    List&lt;ConnectionSpec&gt; connectionSpecs = route.address().connectionSpecs();</div><div class=\"line\">    ConnectionSpecSelector connectionSpecSelector = <span class=\"keyword\">new</span> ConnectionSpecSelector(connectionSpecs);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (route.address().sslSocketFactory() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RouteException(<span class=\"keyword\">new</span> UnknownServiceException(</div><div class=\"line\">            <span class=\"string\">\"CLEARTEXT communication not enabled for client\"</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\">      String host = route.address().url().host();</div><div class=\"line\">      <span class=\"keyword\">if</span> (!Platform.get().isCleartextTrafficPermitted(host)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RouteException(<span class=\"keyword\">new</span> UnknownServiceException(</div><div class=\"line\">            <span class=\"string\">\"CLEARTEXT communication to \"</span> + host + <span class=\"string\">\" not permitted by network security policy\"</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (route.requiresTunnel()) &#123;</div><div class=\"line\">          <span class=\"comment\">// 使用隧道在不兼容的网络上传输数据，或在不安全网络上提供安全路径</span></div><div class=\"line\">          connectTunnel(connectTimeout, readTimeout, writeTimeout);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 直接建立socket连接</span></div><div class=\"line\">          connectSocket(connectTimeout, readTimeout);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 协议连接方式，HTTP/1或者HTTP/2</span></div><div class=\"line\">        establishProtocol(connectionSpecSelector);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (http2Connection != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">        allocationLimit = http2Connection.maxConcurrentStreams();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>TLS 握手流程</p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1493025333/wechat/tls_handshake.jpg\" alt=\"img\"></p>\n<p>建立Socket连接成功之后，客户端就可以与服务端进行通讯了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1492768247/wechat/OkHttpCore.jpg\" alt=\"img\"><br>OkHttp3的网络连接创建和数据传输由责任链网络层的<code>ConnectInterceptor</code>和<code>CallServerInterceptor</code>完成。<code>ConnectInterceptor</code>为请求创建与服务器网络连接，<code>CallServerInterceptor</code>负责网络数据读写的具体操作。</p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1493002739/wechat/OkHttp_connection.jpg\" alt=\"img\"></p>\n<h2 id=\"1-StreamAllocation\"><a href=\"#1-StreamAllocation\" class=\"headerlink\" title=\"1. StreamAllocation\"></a>1. StreamAllocation</h2><p>StreamAllocation类似中介者模式，协调Connections、Stream和Call三者之间的关系。每个Call在Application层<code>RetryAndFollowUpInterceptor</code>实例化一个<code>StreamAllocation</code>。</p>\n<p>相同Address（相同的Host与端口）可以共用相同的连接RealConnection。</p>\n<ol>\n<li>StreamAllocation通过Address，从连接池ConnectionPools中取出有效的RealConnection，与远程服务器建立Socket连接。</li>\n<li>在处理响应结束后或出现网络异常时，释放Socket连接。</li>\n<li>每个RealConnection都持有对StreamAllocation的弱引用，用于连接闲置状态的判断。</li>\n</ol>\n<p>查找可用连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RealConnection <span class=\"title\">findConnection</span><span class=\"params\">(<span class=\"keyword\">int</span> connectTimeout, <span class=\"keyword\">int</span> readTimeout, <span class=\"keyword\">int</span> writeTimeout,</span></span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> connectionRetryEnabled) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">  Route selectedRoute;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">    <span class=\"comment\">// prediction check</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 尝试使用已分配的连接</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 尝试从连接池获取</span></div><div class=\"line\">    Internal.instance.get(connectionPool, address, <span class=\"keyword\">this</span>);</div><div class=\"line\">    ...</div><div class=\"line\">    selectedRoute = route;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 未路由寻址时，查找可用路由</span></div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 立即创建RealConnection</span></div><div class=\"line\">  RealConnection result;</div><div class=\"line\">  <span class=\"comment\">// 并发</span></div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">    route = selectedRoute;</div><div class=\"line\">    refusedStreamCount = <span class=\"number\">0</span>;</div><div class=\"line\">    result = <span class=\"keyword\">new</span> RealConnection(connectionPool, selectedRoute);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (canceled) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Canceled\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 进行TCP和TLS握手，建立与服务器连接通道</span></div><div class=\"line\">  result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);</div><div class=\"line\">  <span class=\"comment\">// 路由可用，从失败路由表中移除</span></div><div class=\"line\">  routeDatabase().connected(result.route());</div><div class=\"line\"></div><div class=\"line\">  Socket socket = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">    <span class=\"comment\">// 添加到连接池，如果其他并发线程已创建同个多路复用的连接，则丢弃当前的连接</span></div><div class=\"line\">    <span class=\"comment\">// 并释放Socket资源</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-ConnectionPool\"><a href=\"#2-ConnectionPool\" class=\"headerlink\" title=\"2. ConnectionPool\"></a>2. ConnectionPool</h2><p>Okhttp3封装了网络连接的逻辑，通过<code>RealConnection</code>建立Socket连接。因为建立Socket网络连接会增加网络延迟，尤其是对于应用程序客户端的频繁的网络请求，需要建立HTTP和HTTP/2的重用策略，降低网络连接代理性能损耗。</p>\n<p><code>ConnectionPool</code>针对于相同Address的请求复用同一个connection，，维护<code>RealConnection</code>类似循环队列形式的双端队列。<br>ConnectionPool默认的最大空闲连接数为5，最大的空闲时间为5分钟。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConnectionPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>, TimeUnit.MINUTES);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConnectionPool使用ArrayDeque来维护池内的连接。<code>ArrayDeque</code>大多数操作时间复杂度为O(1)。对于remove、removeFirstOccurrence、removeLastOccurrence、contains和iterator.remove()方法，时间复杂度为O(n)，线性复杂度。双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两边进行。</p>\n<h3 id=\"2-1-循环数组\"><a href=\"#2-1-循环数组\" class=\"headerlink\" title=\"2.1. 循环数组\"></a>2.1. 循环数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Deque&lt;RealConnection&gt; connections = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</div></pre></td></tr></table></figure>\n<p>ArrayDeque是双端队列的数组的实现，<code>ArrayDeque</code>是一个可变大小的循环数组，没有长度大小限制，非线程安全，因此不支持多线程并发，需要对数组的操作需要加上同步锁。<br>它的默认长度是16。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayDeque</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    elements = <span class=\"keyword\">new</span> Object[<span class=\"number\">16</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设定指定长度数组时，则初始长度为比选择的数大的最小2的指数的整数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">allocateElements</span><span class=\"params\">(<span class=\"keyword\">int</span> numElements)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> initialCapacity = MIN_INITIAL_CAPACITY;</div><div class=\"line\">    <span class=\"comment\">// 移位操作将最高位以下的为置为1，正好比</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (numElements &gt;= initialCapacity) &#123;</div><div class=\"line\">        initialCapacity = numElements;</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">1</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">2</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">4</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class=\"number\">8</span>);</div><div class=\"line\">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class=\"number\">16</span>);</div><div class=\"line\">        initialCapacity++; </div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    elements = <span class=\"keyword\">new</span> Object[initialCapacity];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>添加连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(RealConnection connection)</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 是否需要清理连接池</span></div><div class=\"line\">  ...</div><div class=\"line\">  connections.add(connection);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查找连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用迭代来查找连接池连接</span></div><div class=\"line\">connections.iterator()</div></pre></td></tr></table></figure>\n</li>\n<li><p>清理连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果返回true , 表示连接已经从连接池移除，需要立刻关闭</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">connectionBecameIdle</span><span class=\"params\">(RealConnection connection)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">assert</span> (Thread.holdsLock(<span class=\"keyword\">this</span>));</div><div class=\"line\">  <span class=\"keyword\">if</span> (connection.noNewStreams || maxIdleConnections == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    connections.remove(connection);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 唤醒清理线程，因为可能超过了最大空闲连接数</span></div><div class=\"line\">    notifyAll();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-2-连接清理\"><a href=\"#2-2-连接清理\" class=\"headerlink\" title=\"2.2. 连接清理\"></a>2.2. 连接清理</h3><p>内置的清理线程会定时对连接池检查，清理空闲连接。根据空闲连接的最大空闲时间和连接数，判断执行清理操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable cleanupRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">long</span> waitNanos = cleanup(System.nanoTime());</div><div class=\"line\">      <span class=\"comment\">// waitNanos等于-1表示无空闲或在用的连接</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"comment\">// 如果有空闲或在用连接则定时启动清理线程</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 维护连接池，清理超过最大空闲存活时间或数量的空闲连接。</div><div class=\"line\">* 返回下次调用这个方法的纳秒大小的睡眠时间。返回-1表示无须再次执行。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">cleanup</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> inUseConnectionCount = <span class=\"number\">0</span>;  <span class=\"comment\">// 在用连接数</span></div><div class=\"line\">  <span class=\"keyword\">int</span> idleConnectionCount = <span class=\"number\">0</span>;   <span class=\"comment\">// 空闲连接数</span></div><div class=\"line\">  RealConnection longestIdleConnection = <span class=\"keyword\">null</span>; <span class=\"comment\">// 临时最大空闲连接</span></div><div class=\"line\">  <span class=\"keyword\">long</span> longestIdleDurationNs = Long.MIN_VALUE; <span class=\"comment\">// 最大空闲持续时间</span></div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">      RealConnection connection = i.next();</div><div class=\"line\">      <span class=\"comment\">// 迭代查找最大空闲时间的连接，记录空闲连接和在用连接数</span></div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (longestIdleDurationNs &gt;= <span class=\"keyword\">this</span>.keepAliveDurationNs</div><div class=\"line\">        || idleConnectionCount &gt; <span class=\"keyword\">this</span>.maxIdleConnections) &#123;</div><div class=\"line\">      <span class=\"comment\">// 超过最大空闲连接时间或空闲数据超过最大空闲连接数，从连接池移除连接</span></div><div class=\"line\">      connections.remove(longestIdleConnection);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idleConnectionCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 有空闲连接但是未超标，返回下次执行清理的时间间隔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> keepAliveDurationNs - longestIdleDurationNs;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (inUseConnectionCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 所有连接都在使用，返回最大连接时间</span></div><div class=\"line\">      <span class=\"keyword\">return</span> keepAliveDurationNs;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 无空闲和在用时间</span></div><div class=\"line\">      cleanupRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">// 立即清理</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了自动清理，还支持手动清理空闲的连接<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">evictAll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  List&lt;RealConnection&gt; evictedConnections = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</div><div class=\"line\">      RealConnection connection = i.next();</div><div class=\"line\">      <span class=\"keyword\">if</span> (connection.allocations.isEmpty()) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果处于空闲状态，直接移除</span></div><div class=\"line\">        connection.noNewStreams = <span class=\"keyword\">true</span>;</div><div class=\"line\">        evictedConnections.add(connection);</div><div class=\"line\">        i.remove();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (RealConnection connection : evictedConnections) &#123;</div><div class=\"line\">    <span class=\"comment\">// 循环关闭连接</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-Address\"><a href=\"#2-3-Address\" class=\"headerlink\" title=\"2.3. Address\"></a>2.3. Address</h3><p>连接池通过Address来判断是否有可复用的连接。依据服务器地址、端口号判断是否相同的Address<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Address</span>.java </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> Address) &#123;</div><div class=\"line\">      Address that = (Address) other;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.url.equals(that.url) &amp;&amp; ...;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><code>ConnectionPools</code>中不存在对应的Address的RealConnection则须进行路由寻址，初始化RealConnection，执行网络建立和传输操作。</p>\n<h2 id=\"3-RealConnection\"><a href=\"#3-RealConnection\" class=\"headerlink\" title=\"3. RealConnection\"></a>3. RealConnection</h2><p>初始化一个连接需要<code>ConnectionPool</code>和<code>Route</code>两个参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealConnection</span><span class=\"params\">(ConnectionPool connectionPool, Route route)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.connectionPool = connectionPool;</div><div class=\"line\">  <span class=\"keyword\">this</span>.route = route;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Route</code> 在创建<code>RealConnection</code>实例前，执行路由寻址操作，找到可用的路由。出现异常，则返回到应用层进行重试处理。</p>\n<h2 id=\"3-1-路由寻址\"><a href=\"#3-1-路由寻址\" class=\"headerlink\" title=\"3.1. 路由寻址\"></a>3.1. 路由寻址</h2><p>路由寻址为指定Address初始化Route实例。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Route <span class=\"title\">next</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Compute the next route to attempt.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!hasNextInetSocketAddress()) &#123;</div><div class=\"line\">    <span class=\"comment\">// 未进行寻址</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!hasNextProxy()) &#123;</div><div class=\"line\">      <span class=\"comment\">// 无可用代理，尝试之前连接失败的路由</span></div><div class=\"line\">      ...</div><div class=\"line\">      <span class=\"keyword\">return</span> nextPostponed();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 代理</span></div><div class=\"line\">    lastProxy = nextProxy();</div><div class=\"line\">  &#125;</div><div class=\"line\">  lastInetSocketAddress = nextInetSocketAddress();</div><div class=\"line\"></div><div class=\"line\">  Route route = <span class=\"keyword\">new</span> Route(address, lastProxy, lastInetSocketAddress);</div><div class=\"line\">  <span class=\"keyword\">if</span> (routeDatabase.shouldPostpone(route)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果路由曾失败过，添加到待用的路由表中</span></div><div class=\"line\">    postponedRoutes.add(route);</div><div class=\"line\">    <span class=\"comment\">// 继续查找合适的路由</span></div><div class=\"line\">    <span class=\"keyword\">return</span> next();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> route;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代理设置，配置连接的host和端口号。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resetNextInetSocketAddress</span><span class=\"params\">(Proxy proxy)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Clear the addresses. Necessary if getAllByName() below throws!</span></div><div class=\"line\">  inetSocketAddresses = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">  String socketHost;</div><div class=\"line\">  <span class=\"keyword\">int</span> socketPort;</div><div class=\"line\">  <span class=\"keyword\">if</span> (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) &#123;</div><div class=\"line\">    <span class=\"comment\">// 无代理</span></div><div class=\"line\">    socketHost = address.url().host();</div><div class=\"line\">    socketPort = address.url().port();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 代理</span></div><div class=\"line\">    ....</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 端口号检查</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">if</span> (proxy.type() == Proxy.Type.SOCKS) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Dns寻址</span></div><div class=\"line\">    List&lt;InetAddress&gt; addresses = address.dns().lookup(socketHost);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = addresses.size(); i &lt; size; i++) &#123;</div><div class=\"line\">      InetAddress inetAddress = addresses.get(i);</div><div class=\"line\">      inetSocketAddresses.add(<span class=\"keyword\">new</span> InetSocketAddress(inetAddress, socketPort));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>路由寻址成功后，初始化RealConnection并添加到连接池中，建立Socket连接</p>\n<h3 id=\"3-2-Socket连接\"><a href=\"#3-2-Socket连接\" class=\"headerlink\" title=\"3.2. Socket连接\"></a>3.2. Socket连接</h3><p>OkHttp3支持HTTP与HTTP/2。HTTP/2需要进行TLS的握手流程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@StreamAllocation</span>.<span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(</span></div><div class=\"line\">      <span class=\"keyword\">int</span> connectTimeout, <span class=\"keyword\">int</span> readTimeout, <span class=\"keyword\">int</span> writeTimeout, <span class=\"keyword\">boolean</span> connectionRetryEnabled) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (protocol != <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"already connected\"</span>);</div><div class=\"line\"></div><div class=\"line\">    RouteException routeException = <span class=\"keyword\">null</span>;</div><div class=\"line\">    List&lt;ConnectionSpec&gt; connectionSpecs = route.address().connectionSpecs();</div><div class=\"line\">    ConnectionSpecSelector connectionSpecSelector = <span class=\"keyword\">new</span> ConnectionSpecSelector(connectionSpecs);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (route.address().sslSocketFactory() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RouteException(<span class=\"keyword\">new</span> UnknownServiceException(</div><div class=\"line\">            <span class=\"string\">\"CLEARTEXT communication not enabled for client\"</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\">      String host = route.address().url().host();</div><div class=\"line\">      <span class=\"keyword\">if</span> (!Platform.get().isCleartextTrafficPermitted(host)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RouteException(<span class=\"keyword\">new</span> UnknownServiceException(</div><div class=\"line\">            <span class=\"string\">\"CLEARTEXT communication to \"</span> + host + <span class=\"string\">\" not permitted by network security policy\"</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (route.requiresTunnel()) &#123;</div><div class=\"line\">          <span class=\"comment\">// 使用隧道在不兼容的网络上传输数据，或在不安全网络上提供安全路径</span></div><div class=\"line\">          connectTunnel(connectTimeout, readTimeout, writeTimeout);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 直接建立socket连接</span></div><div class=\"line\">          connectSocket(connectTimeout, readTimeout);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 协议连接方式，HTTP/1或者HTTP/2</span></div><div class=\"line\">        establishProtocol(connectionSpecSelector);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (http2Connection != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (connectionPool) &#123;</div><div class=\"line\">        allocationLimit = http2Connection.maxConcurrentStreams();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>TLS 握手流程</p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1493025333/wechat/tls_handshake.jpg\" alt=\"img\"></p>\n<p>建立Socket连接成功之后，客户端就可以与服务端进行通讯了。</p>\n"},{"title":"Android  React Native系列（一）：学习路径","date":"2016-02-08T08:02:51.000Z","thumbnailImage":"https://cdn.discordapp.com/icons/102860784329052160/109fd014c718f40110c4a182f105ca71.jpg","_content":"### 一、JavaScript/HTML/CSS\n\n1. [ECMAScript 6 入门](http://es6.ruanyifeng.com/#README)\n2. [给 JavaScript 初心者的 ES2015 实战](http://gank.io/post/564151c1f1df1210001c9161)\n3. [JavaScript 标准库](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects)\n\n### 二、NodeJs/Jquery\n1. [Node.js 新手入门](https://cnodejs.org/getstart)\n2. [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)\n\n### 三、ReactJs\n1. [React](http://reactjs.cn/react/docs/getting-started.html)\n\n### 四、Flux/Redux\n\n### 五、React Native\n1. [React Native 中文网](http://reactnative.cn/)","source":"_posts/Android  React Native系列（一）：学习路径.md","raw":"---\ntitle: Android  React Native系列（一）：学习路径\ndate: 2016-02-08 16:02:51\ntags:\nthumbnailImage: https://cdn.discordapp.com/icons/102860784329052160/109fd014c718f40110c4a182f105ca71.jpg\n---\n### 一、JavaScript/HTML/CSS\n\n1. [ECMAScript 6 入门](http://es6.ruanyifeng.com/#README)\n2. [给 JavaScript 初心者的 ES2015 实战](http://gank.io/post/564151c1f1df1210001c9161)\n3. [JavaScript 标准库](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects)\n\n### 二、NodeJs/Jquery\n1. [Node.js 新手入门](https://cnodejs.org/getstart)\n2. [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)\n\n### 三、ReactJs\n1. [React](http://reactjs.cn/react/docs/getting-started.html)\n\n### 四、Flux/Redux\n\n### 五、React Native\n1. [React Native 中文网](http://reactnative.cn/)","slug":"Android  React Native系列（一）：学习路径","published":1,"updated":"2016-02-27T05:04:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txi0000grm3w0pd9rxw","content":"<h3 id=\"一、JavaScript-HTML-CSS\"><a href=\"#一、JavaScript-HTML-CSS\" class=\"headerlink\" title=\"一、JavaScript/HTML/CSS\"></a>一、JavaScript/HTML/CSS</h3><ol>\n<li><a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></li>\n<li><a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"external\">给 JavaScript 初心者的 ES2015 实战</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\" rel=\"external\">JavaScript 标准库</a></li>\n</ol>\n<h3 id=\"二、NodeJs-Jquery\"><a href=\"#二、NodeJs-Jquery\" class=\"headerlink\" title=\"二、NodeJs/Jquery\"></a>二、NodeJs/Jquery</h3><ol>\n<li><a href=\"https://cnodejs.org/getstart\" target=\"_blank\" rel=\"external\">Node.js 新手入门</a></li>\n<li><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">七天学会NodeJS</a></li>\n</ol>\n<h3 id=\"三、ReactJs\"><a href=\"#三、ReactJs\" class=\"headerlink\" title=\"三、ReactJs\"></a>三、ReactJs</h3><ol>\n<li><a href=\"http://reactjs.cn/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React</a></li>\n</ol>\n<h3 id=\"四、Flux-Redux\"><a href=\"#四、Flux-Redux\" class=\"headerlink\" title=\"四、Flux/Redux\"></a>四、Flux/Redux</h3><h3 id=\"五、React-Native\"><a href=\"#五、React-Native\" class=\"headerlink\" title=\"五、React Native\"></a>五、React Native</h3><ol>\n<li><a href=\"http://reactnative.cn/\" target=\"_blank\" rel=\"external\">React Native 中文网</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、JavaScript-HTML-CSS\"><a href=\"#一、JavaScript-HTML-CSS\" class=\"headerlink\" title=\"一、JavaScript/HTML/CSS\"></a>一、JavaScript/HTML/CSS</h3><ol>\n<li><a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></li>\n<li><a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"external\">给 JavaScript 初心者的 ES2015 实战</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\" rel=\"external\">JavaScript 标准库</a></li>\n</ol>\n<h3 id=\"二、NodeJs-Jquery\"><a href=\"#二、NodeJs-Jquery\" class=\"headerlink\" title=\"二、NodeJs/Jquery\"></a>二、NodeJs/Jquery</h3><ol>\n<li><a href=\"https://cnodejs.org/getstart\" target=\"_blank\" rel=\"external\">Node.js 新手入门</a></li>\n<li><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">七天学会NodeJS</a></li>\n</ol>\n<h3 id=\"三、ReactJs\"><a href=\"#三、ReactJs\" class=\"headerlink\" title=\"三、ReactJs\"></a>三、ReactJs</h3><ol>\n<li><a href=\"http://reactjs.cn/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React</a></li>\n</ol>\n<h3 id=\"四、Flux-Redux\"><a href=\"#四、Flux-Redux\" class=\"headerlink\" title=\"四、Flux/Redux\"></a>四、Flux/Redux</h3><h3 id=\"五、React-Native\"><a href=\"#五、React-Native\" class=\"headerlink\" title=\"五、React Native\"></a>五、React Native</h3><ol>\n<li><a href=\"http://reactnative.cn/\" target=\"_blank\" rel=\"external\">React Native 中文网</a></li>\n</ol>\n"},{"title":"Android:WebView开发笔记（一）","date":"2016-01-19T08:58:34.000Z","_content":"[讲解WebView](http://kymjs.com/code/2015/05/03/01/)\n\n[技术小黑屋：WebView重写onJsAlert那些事](http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n[技术小黑屋：Android中WebView拦截替换网络请求数据](http://droidyue.com/blog/2014/11/23/block-web-resource-in-webview/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n### 一、Android WebView\n1.添加网络访问权限\n\t\n```java\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n2.添加JavaScript支持\n```java\n\tWebView.getSettings().setJavaScriptEnabled(true);\n```\n3.只在当前WebView进行跳转，则必须覆盖`WebViewClient`对象\n```java\n\tmWebView.setWebViewClient(new WebViewClient(){\n\t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url){ \n\t\t\tview.loadUrl(url);\n\t\t\treturn true;\n\t\t}\n\t});\n```\n4.支持点击返回键回到上一页，而不是关闭当前Actvitiy或Fragment，则复写`onBackPress`方法。\n```java\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif ((keyCode == KEYCODE_BACK) && mWebView.canGoBack()) { \n\t\t\tmWebView.goBack();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n```\n5.调用页面Js方法\n```java\npublic class WebViewDemo extends Activity{\n\tmWebView.addJavascriptInterface(new Object() {\n\t\tpublic void clickOnAndroid() {\n\t\t\tmHandler.post(new Runnable() {\n\t\t\t\t// 在子线程中执行\n\t\t\t\tpublic void run() { \n\t\t\t\t\t// java 调用Js 方法\n\t\t\t\t\tmWebView.loadUrl(\"javascript:wave()\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, \"demo\"); \n\t\n\tmWebView.loadUrl(\"file:///android_asset/demo.html\"); \t\n\t}\n}\n```\n主要方法\n```java\n\taddJavascriptInterface(Object obj,String interfaceName)\n```\n`addJavascriptInterface`将Java对象绑定到JavaScript对象中,\n```javascript\n\t<html>\n\t<script language=\"javascript\">\n\t  function wave() {\n\t    document.getElementById(\"droid\").src=\"android_waving.png\";\n\t  }\n\t</script>\n\t<body>\n\t\t// js调用java方法\n\t  <a onClick=\"window.demo.clickOnAndroid()\">\n\t  <img id=\"droid\" src=\"android_normal.png\" mce_src=\"android_normal.png\"/><br> Click me! </a>\n\t</body>\n\t</html>\n```\n\n### 二、Js调用Android代码\n1.\t- WebView主要用来解析和渲染界面。\n\t- WebViewClient 处理通知、请求事件等。\n\t- WebChromeClient辅助WebView处理Js的对话框、网站图标、标题等。\n\n```java\nwebView.addJavascriptInterface(new JavaScriperface(this) , \"android\");\n// 加载 htmlText 是以字符串的方式读取assets下的html内容\nwebView.loadData(htmlText , \"text/html\" , \"utf-8\");\n\n// 返回上一页\nwebview.goBack();\n```\n\n### 三、WebView缓存\n1.加载网页时，webview会在`/data/data/包名`目录下生成database与cache两个文件夹。请求url的记录保存在`WebViewCache.db`，内容保存在WebViewCache文件夹下。\n\t\n```java\n\t// 启用缓存\n\t// 优先使用缓存\n\twebView.getSetting.setCacheMode(WebSettings. LOAD_CACHE_ELSE_NETWORK);\n\t// 不使用缓存\n\twebView.getSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);\n```\n2.删除缓存\n```java\nprivate int clearCacheFolder(File dir , long numDays){\n\tint deletedFiles = 0;\n\tif(dir != null && dir.isDirectory){\n\t\ttry{\n\t\t\tfor(File child:dir.listFiles()){\n\t\t\t\tif(child.isDirectory()){\n\t\t\t\t\tdeletedFiles += clearCacheFolder(child , numDays);\n\t\t\t\t}\n\t\t\t\tif(child.lastModified() < numDays){\n\t\t\t\t\tif(child.delete){\n\t\t\t\t\t\tdeleteFiles++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch (Exception e){\n\t\t\te.printStackTrace();\t\n\t\t}\n\t}\n\treturn deletedFiles;\n}\n\n```\n\n### 四、处理404\n\t\n```java\nwebView.setWebViewClient(new WebViewClient() {\n\t@Override\n\tpublic void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n\t\t// stop load and handle errorcode\n\t\tif(errorCode == 404){\n\t\t\t// load 404 \n\t\t}\n\t}\n}\n```\n\n### 五、判断是否滑动到底部\n- getScrollY() 当前可见区域的距离整个页面顶端的距离，即当前内容滚动的距离\n- getHeight() 当前WebView的高度\n- getBottom() 当前WebView\n- getContentHeight() 返回整个html页面的高度，不是当前页面的高度，因为webview的缩放\n\n```java\n// 是否可以缩放\nwebView.getSettings().setSupportZoom(true);\n// 是否显示缩放控制\nwebView.getSettings().setBuildInZoomControls(true);\n// 默认缩放大小\nwebView.getSettings(). setDefaultZoom(ZoomDensity.CLOSE);\n```\n当前整个页面的高度\n```java\nint currentHeight = webView.getContentHeight * getScale();\nboolean isBottom = currentHeight - webView.getHeight() - webView.getScroll() <= 0\n```\n\n### 六、服务器Session\n\n```Java\nCookieManager manager = CookieManager.getInstance();\n// 删除cookie\nmanager.removeAllCookie();\n// 获取cookie\nmanager.getCookie(url);\n// 设置cookie，覆盖之前的path，host，name的cookie\nmanager.setCookie(url , cookie);\n```\n1.设置和清除SessionCookies\n\n```java\n/**\n*  同步本地cookie到Webview中\n*/\npublic void synCookies(){\n\tif(!CacheUtils.isLogin(this)) return;\n\tCookiesSyncManager.createInstance(this);\n\tCookieManager manager = CookieManager.getInstance();\n\t// 是否发送和接收cookies，默认为true\n\tmanager.setAcceptCookie(true);\n\t// 移除session cookie\n\tmanager.removeSessionCookies(new ValueCallback<Boolean>(){\n\t\t\tpublic void onReceiveValue(Boolean value){\n\t\t\t\t//TODO\n\t\t\t}\n\t});\n\tString cookies = PreferenceHelper.readString(this , key , key);\n\tmanager.setCookie(url , cookies);\n\tCookieSyncManager.getInstance().sync();\n}\n```\n\n2.WebView本身也记录html缓存\n\t\n```java\n// 清除缓存\nwebview.clearCache(true);\nwebview.clearHistory();\n```\n### 七、Android中WebView替换网络资源\n`shouldInterceptRequest`\n通知主程序WebView处理资源文件，允许主程序返回处理后的数据。如果返回数据为null，WebView会自行加载网络资源，否则使用主程序提供的数据。回调是在子线程中处理，不能直接进行UI操作。\n```java\n    @Deprecated\n    public WebResourceResponse shouldInterceptRequest(WebView view,\n            String url) {\n        return null;\n    }\n\t\n    public WebResourceResponse shouldInterceptRequest(WebView view,\n            WebResourceRequest request) {\n        return shouldInterceptRequest(view, request.getUrl().toString());\n    }\n```\nExample\n```java\nWebView webView = new WebView(this);\nwebView.setWebViewClient(new WebViewClient(){\n\t@Override\n\tpublic WebResourceResponse shouldInterceptRequest(WebView view,\n            String url) {\n\t\tWebResourceResponse response = null;\n\t\tif(url.contains(\"logo\")){\n\t\t\tInputStream localCopy = null;\n\t\t\ttry{\n\t\t\t\tlocalCopy = getAssets().open(\"xx.png\");\n\t\t\t\t// MIME类型，数据编码，数据(InputStream流形式)\n\t\t\t\tresponse = new WebResourceResponse(\"image/png\" , \"UTF-8\" , localCopy);\n\t\t\t} catch(Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t} finally{\n\t\t\t\ttry{\n\t\t\t\t\tif(localCopy != null){\n\t\t\t\t\t\tlocalCopy.close();\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        return response;\n    }\n})\n```","source":"_posts/Android-WebView开发笔记（一）.md","raw":"---\ntitle: 'Android:WebView开发笔记（一）'\ndate: 2016-01-19 16:58:34\ntags:\n---\n[讲解WebView](http://kymjs.com/code/2015/05/03/01/)\n\n[技术小黑屋：WebView重写onJsAlert那些事](http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n[技术小黑屋：Android中WebView拦截替换网络请求数据](http://droidyue.com/blog/2014/11/23/block-web-resource-in-webview/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n### 一、Android WebView\n1.添加网络访问权限\n\t\n```java\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n2.添加JavaScript支持\n```java\n\tWebView.getSettings().setJavaScriptEnabled(true);\n```\n3.只在当前WebView进行跳转，则必须覆盖`WebViewClient`对象\n```java\n\tmWebView.setWebViewClient(new WebViewClient(){\n\t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url){ \n\t\t\tview.loadUrl(url);\n\t\t\treturn true;\n\t\t}\n\t});\n```\n4.支持点击返回键回到上一页，而不是关闭当前Actvitiy或Fragment，则复写`onBackPress`方法。\n```java\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif ((keyCode == KEYCODE_BACK) && mWebView.canGoBack()) { \n\t\t\tmWebView.goBack();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n```\n5.调用页面Js方法\n```java\npublic class WebViewDemo extends Activity{\n\tmWebView.addJavascriptInterface(new Object() {\n\t\tpublic void clickOnAndroid() {\n\t\t\tmHandler.post(new Runnable() {\n\t\t\t\t// 在子线程中执行\n\t\t\t\tpublic void run() { \n\t\t\t\t\t// java 调用Js 方法\n\t\t\t\t\tmWebView.loadUrl(\"javascript:wave()\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, \"demo\"); \n\t\n\tmWebView.loadUrl(\"file:///android_asset/demo.html\"); \t\n\t}\n}\n```\n主要方法\n```java\n\taddJavascriptInterface(Object obj,String interfaceName)\n```\n`addJavascriptInterface`将Java对象绑定到JavaScript对象中,\n```javascript\n\t<html>\n\t<script language=\"javascript\">\n\t  function wave() {\n\t    document.getElementById(\"droid\").src=\"android_waving.png\";\n\t  }\n\t</script>\n\t<body>\n\t\t// js调用java方法\n\t  <a onClick=\"window.demo.clickOnAndroid()\">\n\t  <img id=\"droid\" src=\"android_normal.png\" mce_src=\"android_normal.png\"/><br> Click me! </a>\n\t</body>\n\t</html>\n```\n\n### 二、Js调用Android代码\n1.\t- WebView主要用来解析和渲染界面。\n\t- WebViewClient 处理通知、请求事件等。\n\t- WebChromeClient辅助WebView处理Js的对话框、网站图标、标题等。\n\n```java\nwebView.addJavascriptInterface(new JavaScriperface(this) , \"android\");\n// 加载 htmlText 是以字符串的方式读取assets下的html内容\nwebView.loadData(htmlText , \"text/html\" , \"utf-8\");\n\n// 返回上一页\nwebview.goBack();\n```\n\n### 三、WebView缓存\n1.加载网页时，webview会在`/data/data/包名`目录下生成database与cache两个文件夹。请求url的记录保存在`WebViewCache.db`，内容保存在WebViewCache文件夹下。\n\t\n```java\n\t// 启用缓存\n\t// 优先使用缓存\n\twebView.getSetting.setCacheMode(WebSettings. LOAD_CACHE_ELSE_NETWORK);\n\t// 不使用缓存\n\twebView.getSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);\n```\n2.删除缓存\n```java\nprivate int clearCacheFolder(File dir , long numDays){\n\tint deletedFiles = 0;\n\tif(dir != null && dir.isDirectory){\n\t\ttry{\n\t\t\tfor(File child:dir.listFiles()){\n\t\t\t\tif(child.isDirectory()){\n\t\t\t\t\tdeletedFiles += clearCacheFolder(child , numDays);\n\t\t\t\t}\n\t\t\t\tif(child.lastModified() < numDays){\n\t\t\t\t\tif(child.delete){\n\t\t\t\t\t\tdeleteFiles++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch (Exception e){\n\t\t\te.printStackTrace();\t\n\t\t}\n\t}\n\treturn deletedFiles;\n}\n\n```\n\n### 四、处理404\n\t\n```java\nwebView.setWebViewClient(new WebViewClient() {\n\t@Override\n\tpublic void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n\t\t// stop load and handle errorcode\n\t\tif(errorCode == 404){\n\t\t\t// load 404 \n\t\t}\n\t}\n}\n```\n\n### 五、判断是否滑动到底部\n- getScrollY() 当前可见区域的距离整个页面顶端的距离，即当前内容滚动的距离\n- getHeight() 当前WebView的高度\n- getBottom() 当前WebView\n- getContentHeight() 返回整个html页面的高度，不是当前页面的高度，因为webview的缩放\n\n```java\n// 是否可以缩放\nwebView.getSettings().setSupportZoom(true);\n// 是否显示缩放控制\nwebView.getSettings().setBuildInZoomControls(true);\n// 默认缩放大小\nwebView.getSettings(). setDefaultZoom(ZoomDensity.CLOSE);\n```\n当前整个页面的高度\n```java\nint currentHeight = webView.getContentHeight * getScale();\nboolean isBottom = currentHeight - webView.getHeight() - webView.getScroll() <= 0\n```\n\n### 六、服务器Session\n\n```Java\nCookieManager manager = CookieManager.getInstance();\n// 删除cookie\nmanager.removeAllCookie();\n// 获取cookie\nmanager.getCookie(url);\n// 设置cookie，覆盖之前的path，host，name的cookie\nmanager.setCookie(url , cookie);\n```\n1.设置和清除SessionCookies\n\n```java\n/**\n*  同步本地cookie到Webview中\n*/\npublic void synCookies(){\n\tif(!CacheUtils.isLogin(this)) return;\n\tCookiesSyncManager.createInstance(this);\n\tCookieManager manager = CookieManager.getInstance();\n\t// 是否发送和接收cookies，默认为true\n\tmanager.setAcceptCookie(true);\n\t// 移除session cookie\n\tmanager.removeSessionCookies(new ValueCallback<Boolean>(){\n\t\t\tpublic void onReceiveValue(Boolean value){\n\t\t\t\t//TODO\n\t\t\t}\n\t});\n\tString cookies = PreferenceHelper.readString(this , key , key);\n\tmanager.setCookie(url , cookies);\n\tCookieSyncManager.getInstance().sync();\n}\n```\n\n2.WebView本身也记录html缓存\n\t\n```java\n// 清除缓存\nwebview.clearCache(true);\nwebview.clearHistory();\n```\n### 七、Android中WebView替换网络资源\n`shouldInterceptRequest`\n通知主程序WebView处理资源文件，允许主程序返回处理后的数据。如果返回数据为null，WebView会自行加载网络资源，否则使用主程序提供的数据。回调是在子线程中处理，不能直接进行UI操作。\n```java\n    @Deprecated\n    public WebResourceResponse shouldInterceptRequest(WebView view,\n            String url) {\n        return null;\n    }\n\t\n    public WebResourceResponse shouldInterceptRequest(WebView view,\n            WebResourceRequest request) {\n        return shouldInterceptRequest(view, request.getUrl().toString());\n    }\n```\nExample\n```java\nWebView webView = new WebView(this);\nwebView.setWebViewClient(new WebViewClient(){\n\t@Override\n\tpublic WebResourceResponse shouldInterceptRequest(WebView view,\n            String url) {\n\t\tWebResourceResponse response = null;\n\t\tif(url.contains(\"logo\")){\n\t\t\tInputStream localCopy = null;\n\t\t\ttry{\n\t\t\t\tlocalCopy = getAssets().open(\"xx.png\");\n\t\t\t\t// MIME类型，数据编码，数据(InputStream流形式)\n\t\t\t\tresponse = new WebResourceResponse(\"image/png\" , \"UTF-8\" , localCopy);\n\t\t\t} catch(Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t} finally{\n\t\t\t\ttry{\n\t\t\t\t\tif(localCopy != null){\n\t\t\t\t\t\tlocalCopy.close();\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        return response;\n    }\n})\n```","slug":"Android-WebView开发笔记（一）","published":1,"updated":"2016-01-21T07:13:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txl0001grm37i555pu6","content":"<p><a href=\"http://kymjs.com/code/2015/05/03/01/\" target=\"_blank\" rel=\"external\">讲解WebView</a></p>\n<p><a href=\"http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">技术小黑屋：WebView重写onJsAlert那些事</a></p>\n<p><a href=\"http://droidyue.com/blog/2014/11/23/block-web-resource-in-webview/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">技术小黑屋：Android中WebView拦截替换网络请求数据</a></p>\n<h3 id=\"一、Android-WebView\"><a href=\"#一、Android-WebView\" class=\"headerlink\" title=\"一、Android WebView\"></a>一、Android WebView</h3><p>1.添加网络访问权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>2.添加JavaScript支持<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>3.只在当前WebView进行跳转，则必须覆盖<code>WebViewClient</code>对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span></span>&#123; </div><div class=\"line\">\t\tview.loadUrl(url);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.支持点击返回键回到上一页，而不是关闭当前Actvitiy或Fragment，则复写<code>onBackPress</code>方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((keyCode == KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123; </div><div class=\"line\">\t\tmWebView.goBack();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.调用页面Js方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span>&#123;</div><div class=\"line\">\tmWebView.addJavascriptInterface(<span class=\"keyword\">new</span> Object() &#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clickOnAndroid</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tmHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 在子线程中执行</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// java 调用Js 方法</span></div><div class=\"line\">\t\t\t\t\tmWebView.loadUrl(<span class=\"string\">\"javascript:wave()\"</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"string\">\"demo\"</span>); </div><div class=\"line\">\t</div><div class=\"line\">\tmWebView.loadUrl(<span class=\"string\">\"file:///android_asset/demo.html\"</span>); \t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主要方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">addJavascriptInterface(Object obj,String interfaceName)</div></pre></td></tr></table></figure></p>\n<p><code>addJavascriptInterface</code>将Java对象绑定到JavaScript对象中,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span><span class=\"javascript\"></span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wave</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"droid\"</span>).src=<span class=\"string\">\"android_waving.png\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t<span class=\"comment\">// js调用java方法</span></div><div class=\"line\">  &lt;a onClick=<span class=\"string\">\"window.demo.clickOnAndroid()\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"droid\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"android_normal.png\"</span> <span class=\"attr\">mce_src</span>=<span class=\"string\">\"android_normal.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> Click me! <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"二、Js调用Android代码\"><a href=\"#二、Js调用Android代码\" class=\"headerlink\" title=\"二、Js调用Android代码\"></a>二、Js调用Android代码</h3><ol>\n<li><ul>\n<li>WebView主要用来解析和渲染界面。</li>\n<li>WebViewClient 处理通知、请求事件等。</li>\n<li>WebChromeClient辅助WebView处理Js的对话框、网站图标、标题等。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> JavaScriperface(<span class=\"keyword\">this</span>) , <span class=\"string\">\"android\"</span>);</div><div class=\"line\"><span class=\"comment\">// 加载 htmlText 是以字符串的方式读取assets下的html内容</span></div><div class=\"line\">webView.loadData(htmlText , <span class=\"string\">\"text/html\"</span> , <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回上一页</span></div><div class=\"line\">webview.goBack();</div></pre></td></tr></table></figure>\n<h3 id=\"三、WebView缓存\"><a href=\"#三、WebView缓存\" class=\"headerlink\" title=\"三、WebView缓存\"></a>三、WebView缓存</h3><p>1.加载网页时，webview会在<code>/data/data/包名</code>目录下生成database与cache两个文件夹。请求url的记录保存在<code>WebViewCache.db</code>，内容保存在WebViewCache文件夹下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 启用缓存</span></div><div class=\"line\"><span class=\"comment\">// 优先使用缓存</span></div><div class=\"line\">webView.getSetting.setCacheMode(WebSettings. LOAD_CACHE_ELSE_NETWORK);</div><div class=\"line\"><span class=\"comment\">// 不使用缓存</span></div><div class=\"line\">webView.getSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);</div></pre></td></tr></table></figure>\n<p>2.删除缓存<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">clearCacheFolder</span><span class=\"params\">(File dir , <span class=\"keyword\">long</span> numDays)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> deletedFiles = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(dir != <span class=\"keyword\">null</span> &amp;&amp; dir.isDirectory)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(File child:dir.listFiles())&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(child.isDirectory())&#123;</div><div class=\"line\">\t\t\t\t\tdeletedFiles += clearCacheFolder(child , numDays);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(child.lastModified() &lt; numDays)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(child.delete)&#123;</div><div class=\"line\">\t\t\t\t\t\tdeleteFiles++;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> deletedFiles;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"四、处理404\"><a href=\"#四、处理404\" class=\"headerlink\" title=\"四、处理404\"></a>四、处理404</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// stop load and handle errorcode</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(errorCode == <span class=\"number\">404</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// load 404 </span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"五、判断是否滑动到底部\"><a href=\"#五、判断是否滑动到底部\" class=\"headerlink\" title=\"五、判断是否滑动到底部\"></a>五、判断是否滑动到底部</h3><ul>\n<li>getScrollY() 当前可见区域的距离整个页面顶端的距离，即当前内容滚动的距离</li>\n<li>getHeight() 当前WebView的高度</li>\n<li>getBottom() 当前WebView</li>\n<li>getContentHeight() 返回整个html页面的高度，不是当前页面的高度，因为webview的缩放</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 是否可以缩放</span></div><div class=\"line\">webView.getSettings().setSupportZoom(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 是否显示缩放控制</span></div><div class=\"line\">webView.getSettings().setBuildInZoomControls(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 默认缩放大小</span></div><div class=\"line\">webView.getSettings(). setDefaultZoom(ZoomDensity.CLOSE);</div></pre></td></tr></table></figure>\n<p>当前整个页面的高度<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> currentHeight = webView.getContentHeight * getScale();</div><div class=\"line\"><span class=\"keyword\">boolean</span> isBottom = currentHeight - webView.getHeight() - webView.getScroll() &lt;= <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"六、服务器Session\"><a href=\"#六、服务器Session\" class=\"headerlink\" title=\"六、服务器Session\"></a>六、服务器Session</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager manager = CookieManager.getInstance();</div><div class=\"line\"><span class=\"comment\">// 删除cookie</span></div><div class=\"line\">manager.removeAllCookie();</div><div class=\"line\"><span class=\"comment\">// 获取cookie</span></div><div class=\"line\">manager.getCookie(url);</div><div class=\"line\"><span class=\"comment\">// 设置cookie，覆盖之前的path，host，name的cookie</span></div><div class=\"line\">manager.setCookie(url , cookie);</div></pre></td></tr></table></figure>\n<p>1.设置和清除SessionCookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">*  同步本地cookie到Webview中</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">synCookies</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!CacheUtils.isLogin(<span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span>;</div><div class=\"line\">\tCookiesSyncManager.createInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">\tCookieManager manager = CookieManager.getInstance();</div><div class=\"line\">\t<span class=\"comment\">// 是否发送和接收cookies，默认为true</span></div><div class=\"line\">\tmanager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t<span class=\"comment\">// 移除session cookie</span></div><div class=\"line\">\tmanager.removeSessionCookies(<span class=\"keyword\">new</span> ValueCallback&lt;Boolean&gt;()&#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(Boolean value)</span></span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//TODO</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tString cookies = PreferenceHelper.readString(<span class=\"keyword\">this</span> , key , key);</div><div class=\"line\">\tmanager.setCookie(url , cookies);</div><div class=\"line\">\tCookieSyncManager.getInstance().sync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.WebView本身也记录html缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 清除缓存</span></div><div class=\"line\">webview.clearCache(<span class=\"keyword\">true</span>);</div><div class=\"line\">webview.clearHistory();</div></pre></td></tr></table></figure>\n<h3 id=\"七、Android中WebView替换网络资源\"><a href=\"#七、Android中WebView替换网络资源\" class=\"headerlink\" title=\"七、Android中WebView替换网络资源\"></a>七、Android中WebView替换网络资源</h3><p><code>shouldInterceptRequest</code><br>通知主程序WebView处理资源文件，允许主程序返回处理后的数据。如果返回数据为null，WebView会自行加载网络资源，否则使用主程序提供的数据。回调是在子线程中处理，不能直接进行UI操作。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Deprecated</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,</span></span></div><div class=\"line\">        String url) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,</span></span></div><div class=\"line\">        WebResourceRequest request) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> shouldInterceptRequest(view, request.getUrl().toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Example<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = <span class=\"keyword\">new</span> WebView(<span class=\"keyword\">this</span>);</div><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,</span></span></div><div class=\"line\">            String url) &#123;</div><div class=\"line\">\t\tWebResourceResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(url.contains(<span class=\"string\">\"logo\"</span>))&#123;</div><div class=\"line\">\t\t\tInputStream localCopy = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t\tlocalCopy = getAssets().open(<span class=\"string\">\"xx.png\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// MIME类型，数据编码，数据(InputStream流形式)</span></div><div class=\"line\">\t\t\t\tresponse = <span class=\"keyword\">new</span> WebResourceResponse(<span class=\"string\">\"image/png\"</span> , <span class=\"string\">\"UTF-8\"</span> , localCopy);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(localCopy != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\t\t\tlocalCopy.close();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> response;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://kymjs.com/code/2015/05/03/01/\" target=\"_blank\" rel=\"external\">讲解WebView</a></p>\n<p><a href=\"http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">技术小黑屋：WebView重写onJsAlert那些事</a></p>\n<p><a href=\"http://droidyue.com/blog/2014/11/23/block-web-resource-in-webview/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">技术小黑屋：Android中WebView拦截替换网络请求数据</a></p>\n<h3 id=\"一、Android-WebView\"><a href=\"#一、Android-WebView\" class=\"headerlink\" title=\"一、Android WebView\"></a>一、Android WebView</h3><p>1.添加网络访问权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>2.添加JavaScript支持<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>3.只在当前WebView进行跳转，则必须覆盖<code>WebViewClient</code>对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span></span>&#123; </div><div class=\"line\">\t\tview.loadUrl(url);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.支持点击返回键回到上一页，而不是关闭当前Actvitiy或Fragment，则复写<code>onBackPress</code>方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((keyCode == KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123; </div><div class=\"line\">\t\tmWebView.goBack();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.调用页面Js方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span>&#123;</div><div class=\"line\">\tmWebView.addJavascriptInterface(<span class=\"keyword\">new</span> Object() &#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clickOnAndroid</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tmHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 在子线程中执行</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// java 调用Js 方法</span></div><div class=\"line\">\t\t\t\t\tmWebView.loadUrl(<span class=\"string\">\"javascript:wave()\"</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"string\">\"demo\"</span>); </div><div class=\"line\">\t</div><div class=\"line\">\tmWebView.loadUrl(<span class=\"string\">\"file:///android_asset/demo.html\"</span>); \t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主要方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">addJavascriptInterface(Object obj,String interfaceName)</div></pre></td></tr></table></figure></p>\n<p><code>addJavascriptInterface</code>将Java对象绑定到JavaScript对象中,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span><span class=\"javascript\"></span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wave</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"droid\"</span>).src=<span class=\"string\">\"android_waving.png\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t<span class=\"comment\">// js调用java方法</span></div><div class=\"line\">  &lt;a onClick=<span class=\"string\">\"window.demo.clickOnAndroid()\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"droid\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"android_normal.png\"</span> <span class=\"attr\">mce_src</span>=<span class=\"string\">\"android_normal.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> Click me! <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"二、Js调用Android代码\"><a href=\"#二、Js调用Android代码\" class=\"headerlink\" title=\"二、Js调用Android代码\"></a>二、Js调用Android代码</h3><ol>\n<li><ul>\n<li>WebView主要用来解析和渲染界面。</li>\n<li>WebViewClient 处理通知、请求事件等。</li>\n<li>WebChromeClient辅助WebView处理Js的对话框、网站图标、标题等。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> JavaScriperface(<span class=\"keyword\">this</span>) , <span class=\"string\">\"android\"</span>);</div><div class=\"line\"><span class=\"comment\">// 加载 htmlText 是以字符串的方式读取assets下的html内容</span></div><div class=\"line\">webView.loadData(htmlText , <span class=\"string\">\"text/html\"</span> , <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回上一页</span></div><div class=\"line\">webview.goBack();</div></pre></td></tr></table></figure>\n<h3 id=\"三、WebView缓存\"><a href=\"#三、WebView缓存\" class=\"headerlink\" title=\"三、WebView缓存\"></a>三、WebView缓存</h3><p>1.加载网页时，webview会在<code>/data/data/包名</code>目录下生成database与cache两个文件夹。请求url的记录保存在<code>WebViewCache.db</code>，内容保存在WebViewCache文件夹下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 启用缓存</span></div><div class=\"line\"><span class=\"comment\">// 优先使用缓存</span></div><div class=\"line\">webView.getSetting.setCacheMode(WebSettings. LOAD_CACHE_ELSE_NETWORK);</div><div class=\"line\"><span class=\"comment\">// 不使用缓存</span></div><div class=\"line\">webView.getSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);</div></pre></td></tr></table></figure>\n<p>2.删除缓存<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">clearCacheFolder</span><span class=\"params\">(File dir , <span class=\"keyword\">long</span> numDays)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> deletedFiles = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(dir != <span class=\"keyword\">null</span> &amp;&amp; dir.isDirectory)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(File child:dir.listFiles())&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(child.isDirectory())&#123;</div><div class=\"line\">\t\t\t\t\tdeletedFiles += clearCacheFolder(child , numDays);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(child.lastModified() &lt; numDays)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(child.delete)&#123;</div><div class=\"line\">\t\t\t\t\t\tdeleteFiles++;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> deletedFiles;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"四、处理404\"><a href=\"#四、处理404\" class=\"headerlink\" title=\"四、处理404\"></a>四、处理404</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// stop load and handle errorcode</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(errorCode == <span class=\"number\">404</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// load 404 </span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"五、判断是否滑动到底部\"><a href=\"#五、判断是否滑动到底部\" class=\"headerlink\" title=\"五、判断是否滑动到底部\"></a>五、判断是否滑动到底部</h3><ul>\n<li>getScrollY() 当前可见区域的距离整个页面顶端的距离，即当前内容滚动的距离</li>\n<li>getHeight() 当前WebView的高度</li>\n<li>getBottom() 当前WebView</li>\n<li>getContentHeight() 返回整个html页面的高度，不是当前页面的高度，因为webview的缩放</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 是否可以缩放</span></div><div class=\"line\">webView.getSettings().setSupportZoom(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 是否显示缩放控制</span></div><div class=\"line\">webView.getSettings().setBuildInZoomControls(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 默认缩放大小</span></div><div class=\"line\">webView.getSettings(). setDefaultZoom(ZoomDensity.CLOSE);</div></pre></td></tr></table></figure>\n<p>当前整个页面的高度<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> currentHeight = webView.getContentHeight * getScale();</div><div class=\"line\"><span class=\"keyword\">boolean</span> isBottom = currentHeight - webView.getHeight() - webView.getScroll() &lt;= <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"六、服务器Session\"><a href=\"#六、服务器Session\" class=\"headerlink\" title=\"六、服务器Session\"></a>六、服务器Session</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager manager = CookieManager.getInstance();</div><div class=\"line\"><span class=\"comment\">// 删除cookie</span></div><div class=\"line\">manager.removeAllCookie();</div><div class=\"line\"><span class=\"comment\">// 获取cookie</span></div><div class=\"line\">manager.getCookie(url);</div><div class=\"line\"><span class=\"comment\">// 设置cookie，覆盖之前的path，host，name的cookie</span></div><div class=\"line\">manager.setCookie(url , cookie);</div></pre></td></tr></table></figure>\n<p>1.设置和清除SessionCookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">*  同步本地cookie到Webview中</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">synCookies</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!CacheUtils.isLogin(<span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span>;</div><div class=\"line\">\tCookiesSyncManager.createInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">\tCookieManager manager = CookieManager.getInstance();</div><div class=\"line\">\t<span class=\"comment\">// 是否发送和接收cookies，默认为true</span></div><div class=\"line\">\tmanager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t<span class=\"comment\">// 移除session cookie</span></div><div class=\"line\">\tmanager.removeSessionCookies(<span class=\"keyword\">new</span> ValueCallback&lt;Boolean&gt;()&#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(Boolean value)</span></span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//TODO</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tString cookies = PreferenceHelper.readString(<span class=\"keyword\">this</span> , key , key);</div><div class=\"line\">\tmanager.setCookie(url , cookies);</div><div class=\"line\">\tCookieSyncManager.getInstance().sync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.WebView本身也记录html缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 清除缓存</span></div><div class=\"line\">webview.clearCache(<span class=\"keyword\">true</span>);</div><div class=\"line\">webview.clearHistory();</div></pre></td></tr></table></figure>\n<h3 id=\"七、Android中WebView替换网络资源\"><a href=\"#七、Android中WebView替换网络资源\" class=\"headerlink\" title=\"七、Android中WebView替换网络资源\"></a>七、Android中WebView替换网络资源</h3><p><code>shouldInterceptRequest</code><br>通知主程序WebView处理资源文件，允许主程序返回处理后的数据。如果返回数据为null，WebView会自行加载网络资源，否则使用主程序提供的数据。回调是在子线程中处理，不能直接进行UI操作。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Deprecated</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,</span></span></div><div class=\"line\">        String url) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,</span></span></div><div class=\"line\">        WebResourceRequest request) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> shouldInterceptRequest(view, request.getUrl().toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Example<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = <span class=\"keyword\">new</span> WebView(<span class=\"keyword\">this</span>);</div><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> WebResourceResponse <span class=\"title\">shouldInterceptRequest</span><span class=\"params\">(WebView view,</span></span></div><div class=\"line\">            String url) &#123;</div><div class=\"line\">\t\tWebResourceResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(url.contains(<span class=\"string\">\"logo\"</span>))&#123;</div><div class=\"line\">\t\t\tInputStream localCopy = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t\tlocalCopy = getAssets().open(<span class=\"string\">\"xx.png\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// MIME类型，数据编码，数据(InputStream流形式)</span></div><div class=\"line\">\t\t\t\tresponse = <span class=\"keyword\">new</span> WebResourceResponse(<span class=\"string\">\"image/png\"</span> , <span class=\"string\">\"UTF-8\"</span> , localCopy);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(localCopy != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\t\t\tlocalCopy.close();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> response;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n"},{"title":"Android：6.0运行时权限","date":"2016-04-06T02:47:42.000Z","thumbnailImage":null,"_content":"[Working with System Permissions](http://developer.android.com/intl/zh-cn/training/permissions/index.html)\n\n[聊一聊Android 6.0的运行时权限](http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/index.html)\n\n[Android 6.0: 动态权限管理的解决方案](http://blog.csdn.net/caroline_wendy/article/details/50587230)\n\n###Android 6.0运行时权限\n#### 权限声明\n\n#### 请求运行时权限\n\n##### 权限检查\n#### 权限最佳实践","source":"_posts/Android：6-0运行时权限.md","raw":"---\ntitle: Android：6.0运行时权限\ndate: 2016-04-06 10:47:42\ntags:\nthumbnailImage:\n---\n[Working with System Permissions](http://developer.android.com/intl/zh-cn/training/permissions/index.html)\n\n[聊一聊Android 6.0的运行时权限](http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/index.html)\n\n[Android 6.0: 动态权限管理的解决方案](http://blog.csdn.net/caroline_wendy/article/details/50587230)\n\n###Android 6.0运行时权限\n#### 权限声明\n\n#### 请求运行时权限\n\n##### 权限检查\n#### 权限最佳实践","slug":"Android：6-0运行时权限","published":1,"updated":"2016-04-06T07:54:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txn0002grm3gps1tm1p","content":"<p><a href=\"http://developer.android.com/intl/zh-cn/training/permissions/index.html\" target=\"_blank\" rel=\"external\">Working with System Permissions</a></p>\n<p><a href=\"http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/index.html\" target=\"_blank\" rel=\"external\">聊一聊Android 6.0的运行时权限</a></p>\n<p><a href=\"http://blog.csdn.net/caroline_wendy/article/details/50587230\" target=\"_blank\" rel=\"external\">Android 6.0: 动态权限管理的解决方案</a></p>\n<p>###Android 6.0运行时权限</p>\n<h4 id=\"权限声明\"><a href=\"#权限声明\" class=\"headerlink\" title=\"权限声明\"></a>权限声明</h4><h4 id=\"请求运行时权限\"><a href=\"#请求运行时权限\" class=\"headerlink\" title=\"请求运行时权限\"></a>请求运行时权限</h4><h5 id=\"权限检查\"><a href=\"#权限检查\" class=\"headerlink\" title=\"权限检查\"></a>权限检查</h5><h4 id=\"权限最佳实践\"><a href=\"#权限最佳实践\" class=\"headerlink\" title=\"权限最佳实践\"></a>权限最佳实践</h4>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://developer.android.com/intl/zh-cn/training/permissions/index.html\" target=\"_blank\" rel=\"external\">Working with System Permissions</a></p>\n<p><a href=\"http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/index.html\" target=\"_blank\" rel=\"external\">聊一聊Android 6.0的运行时权限</a></p>\n<p><a href=\"http://blog.csdn.net/caroline_wendy/article/details/50587230\" target=\"_blank\" rel=\"external\">Android 6.0: 动态权限管理的解决方案</a></p>\n<p>###Android 6.0运行时权限</p>\n<h4 id=\"权限声明\"><a href=\"#权限声明\" class=\"headerlink\" title=\"权限声明\"></a>权限声明</h4><h4 id=\"请求运行时权限\"><a href=\"#请求运行时权限\" class=\"headerlink\" title=\"请求运行时权限\"></a>请求运行时权限</h4><h5 id=\"权限检查\"><a href=\"#权限检查\" class=\"headerlink\" title=\"权限检查\"></a>权限检查</h5><h4 id=\"权限最佳实践\"><a href=\"#权限最佳实践\" class=\"headerlink\" title=\"权限最佳实践\"></a>权限最佳实践</h4>"},{"title":"Android：DFM弹幕开发之基本配置","date":"2016-09-19T01:34:37.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/b_rgb:fff,c_fit,dpr_0.75,e_grayscale,w_564/v1474249270/android/bilibili_dfm.png","_content":"[DanmakuFlameMaster](https://github.com/Bilibili/DanmakuFlameMaster)(以下简称DFM)是哔哩哔哩开源的Android弹幕解析绘制引擎项目。`DFM`使用多种方式(View/SurfaceView/TextureView)实现高效绘制，支持自定义字体，支持多种弹幕参数设置等\n\n# 一、配置\n\nGradle\n\n```java\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    compile 'com.github.ctiao:DanmakuFlameMaster:0.4.9'\n}\n```\n在布局中应用\n\n```xml\n<master.flame.danmaku.ui.widget.DanmakuView\n    android:id=\"@+id/sv_danmaku\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n\n# 二、基础用法\n\n## 1、弹幕播放\n\n```java\n\n// Activity onCreate 中初始化弹幕的配置\nfinal DanmakuView svDanmaku = (DanmakuView) findViewById(R.id.sv_danmaku);\n\nHashMap<Integer, Integer> maxLinesPair = new HashMap<>(); // 最大行数\nmaxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, 5);\n\nHashMap<Integer, Boolean> overlappingEnablePair = new HashMap<>(); // 防止弹幕重叠\noverlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_RL, true);\noverlappingEnablePair.put(BaseDanmaku.TYPE_FIX_TOP, true);\n\nDanmakuContext mDanmakuContext = DanmakuContext.create();   // 创建弹幕所需的上下文信息\nmDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3) // 弹幕样式\n        .setDuplicateMergingEnabled(true)    // 合并重复弹幕\n        .setScrollSpeedFactor(1.5f)          // 滚动弹幕速度系数\n        .setScaleTextSize(0.8f)              // 弹幕文字大小\n        .setCacheStuffer(new SpannedCacheStuffer(), mCacheStufferAdapter) // 缓存绘制\n        .setMaximumLines(maxLinesPair)       // 弹幕最大行数\n        .preventOverlapping(overlappingEnablePair); // 防止弹幕重叠\n\nBaseDanmakuParser mParser = createParser(this.getResources().openRawResource(R.raw.comments)); // 创建弹幕解析器\n// 设置弹幕播放的状态回调\nsvDanmaku.setCallback(new DrawHandler.Callback() {\n    @Override\n    public void prepared() {\n        // 弹幕准备完成\n        Log.d(\"DFM\" , \"prepared\");\n        svDanmaku.start();\n    }\n\n    @Override\n    public void updateTimer(DanmakuTimer timer) {\n        // 弹幕播放时间\n        Log.d(\"DFM\" , \"updateTimer : timer = \" + timer.currMillisecond);\n    }\n\n    @Override\n    public void danmakuShown(BaseDanmaku danmaku) {\n        // 播放新的一条弹幕\n        Log.d(\"DFM\" , \"danmakuShown : danmaku = \" + danmaku.text);\n    }\n\n    @Override\n    public void drawingFinished() {\n        // 弹幕播放结束\n        Log.d(\"DFM\" , \"drawingFinished\");\n    }});\n    \n    // 设置弹幕点击监听\n    mMainBinding.svDanmaku.setOnDanmakuClickListener(new IDanmakuView.OnDanmakuClickListener() {\n        @Override\n        public boolean onViewClick(IDanmakuView view) {\n            // 点击的弹幕\n            return false;\n        }\n\n        @Override\n        public boolean onDanmakuClick(IDanmakus danmakus) {\n            // 弹幕\n            Log.d(\"DFM\", \"onDanmakuClick danmakus size:\" + danmakus.size());\n            return false;\n        }\n    });\n\n    // 播放准备\n    svDanmaku.prepare(mParser, mDanmakuContext);\n    // 显示播放FPS,一般用作调试时使用\n    svDanmaku.showFPS(false);\n    // 开启绘制缓存\n    svDanmaku.enableDanmakuDrawingCache(true);\n\n```\n创建弹幕解析器\n```java\n    /**\n     * 创建弹幕解析器\n     * @param stream stream\n     * @return BaseDanmakuParser\n     */\n    private BaseDanmakuParser createParser(InputStream stream) {\n\n        if (stream == null) {\n            return new BaseDanmakuParser() {\n                @Override\n                protected Danmakus parse() {\n                    return new Danmakus();\n                }\n            };\n        }\n        // TAG_BILI XML数据格式的弹幕。TAG_ACFUN JSON数据格式的弹幕\n        ILoader loader = DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI);\n\n        try {\n            loader.load(stream);\n        } catch (IllegalDataException e) {\n            e.printStackTrace();\n        }\n        BaseDanmakuParser parser = new BiliDanmukuParser();\n        IDataSource<?> dataSource = loader.getDataSource();\n        parser.load(dataSource);\n        return parser;\n    }\n```\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278152/android/dfm_play.gif)\n## 2、发送弹幕\n常见的弹幕内容一般由以下部分组成\n```java\n1 : 时间(弹幕出现时间) long类型的时间戳\n2 : 类型(1从左至右滚动弹幕 ； 6从右至左滚动弹幕； 5顶端固定弹幕；4底端固定弹幕；7高级弹幕；8脚本弹幕)\n3 : 字号\n4 : 颜色\n5 : 弹幕池id\n6 : 用户hash\n7 : 弹幕id\n```\n发送弹幕处理\n```java\nBaseDanmaku baseDanmaku = mDanmakuContext.mDanmakuFactory.createDanmaku(BaseDanmaku.TYPE_FIX_BOTTOM); // 通过DanmakuFactory来创建弹幕\n\n// 弹幕内容信息\nbaseDanmaku.text = \"简单的一条弹幕\" + System.nanoTime(); // 文本内容\nbaseDanmaku.textSize = 25f * (mParser.getDisplayer().getDensity() - 0.6f); // 字体大小\nbaseDanmaku.textColor = Color.RED;         // 字体颜色\nbaseDanmaku.textShadowColor = Color.WHITE; // 描边颜色\nbaseDanmaku.borderColor = Color.RED;       // 弹幕边框颜色\nbaseDanmaku.padding = 5;                   // 内边距\nbaseDanmaku.priority = 0;                  // 弹幕优先级,0为低优先级\nbaseDanmaku.isLive = false;                // 是否是直播弹幕\nbaseDanmaku.underlineColor = 0;            // 0表示无下划线\n// baseDanmaku.lines = new String[]{\"两行弹幕第1行弹幕\" , \"两行弹幕第2行弹幕\"};\n\n// 发送时的时间由弹幕播放时间来确定\nbaseDanmaku.setTime(mMainBinding.svDanmaku.getCurrentTime());// 弹幕出现的时间\n\n// 发送弹幕，根据业务内容是否执行弹幕上传操作 TODO\nmMainBinding.svDanmaku.addDanmaku(baseDanmaku);\n```\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278810/android/dfm_add.gif)\n\n## 3. 弹幕状态操作\n（1）. 隐藏\n```java\nmMainBinding.svDanmaku.hide();\n```\n（2）. 显示\n```java\nmMainBinding.svDanmaku.show();\n```\n（3）. 暂停\n```java\nmMainBinding.svDanmaku.pause();\n```\n（4）. 恢复继续\n```java\nmMainBinding.svDanmaku.onResume();\n```\n（2）. 跳转\n```java\nmMainBinding.svDanmaku.seekTo(0);   // 跳转到起始位置\n```\n## 4. 弹幕周期管理及资源释放\n弹幕需要与Activity的生命周期配合来处理。防止未及时释放资源，造成Activity的内存问题。\n```java\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    if (mDanmakuView != null && mDanmakuView.isPrepared()) {\n        mDanmakuView.pause();\n    }\n}\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    if (mDanmakuView != null && mDanmakuView.isPrepared() && mDanmakuView.isPaused()) {\n        mDanmakuView.resume();\n    }\n}\n\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    if (mDanmakuView != null) {\n        // 及时释放弹幕资源\n        mDanmakuView.release();\n        mDanmakuView = null;\n    }\n}\n\n@Override\npublic void onBackPressed() {\n    super.onBackPressed();\n    if (mDanmakuView != null) {\n        // 及时释放弹幕资源\n        mDanmakuView.release();\n        mDanmakuView = null;\n    }\n}\n\n```\n# 二、高级弹幕\n\n## 1. 背景绘制\n\n[DFM](https://github.com/Bilibili/DanmakuFlameMaster)自定义SpannedCacheStuffer，drawBackground方法中实现背景绘制操作\n\n```java\n// 绘制有背景的弹幕\nprivate class BackgroundCacheStuffer extends SpannedCacheStuffer{\n    final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    @Override\n    public void measure(BaseDanmaku danmaku, TextPaint paint, boolean fromWorkerThread) {\n        danmaku.padding = 10;\n        super.measure(danmaku, paint, fromWorkerThread);\n    }\n\n    @Override\n    public void drawBackground(BaseDanmaku danmaku, Canvas canvas, float left, float top) {\n        mPaint.setColor(0xEE90A4AE);   // 背景颜色\n        RectF rectF = new RectF(left + 5, top + 5, left + danmaku.paintWidth - 5, top + danmaku.paintHeight - 5); // 圆角矩形\n        canvas.drawRoundRect(rectF, 50 , 50 , mPaint);\n    }\n\n    @Override\n    public void drawStroke(BaseDanmaku danmaku, String lineText, Canvas canvas, float left, float top, Paint paint) {\n        // 绘制背景时建议禁止绘制描边\n    }\n}\n```\n配置DanmakuContext\n```java\nprivate DanmakuContext mDanmakuContext;\n...\nmDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3) // 弹幕样式\n        .setDuplicateMergingEnabled(true)    // 合并重复弹幕\n        .setScrollSpeedFactor(1.5f)          // 滚动弹幕速度系数\n        .setScaleTextSize(0.8f)              // 弹幕文字大小\n        .setCacheStuffer(new BackgroundCacheStuffer(), mCacheStufferAdapter) // 缓存绘制\n        ...\n```\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_521/v1474442790/android/danmaku_bg.png)\n\n## 2. 自定义解析器\n\n[DFM](https://github.com/Bilibili/DanmakuFlameMaster)内置两种解析器[BiliDanmukuParser](https://github.com/Bilibili/DanmakuFlameMaster/blob/d4abc40bcaa8cc6786c1dff4ca1694dd626955b5/Sample/src/main/java/com/sample/BiliDanmukuParser.java)。`BiliDanmukuParser`使用XML数据格式的弹幕，是BiliBili标准的弹幕格式。`AcFunDanmakuParser`使用JSON数据格式的弹幕，适用于解析Acfun标准的弹幕。除了使用这两种弹幕格式以外，还可以根据具体弹幕内容来自定义弹幕解析器。如有以下内容Json格式的弹幕，那么如何来处理这种数据呢，此时就需要自定义实现弹幕数据的解析。\n```java\n[{\n    \"content\":   \"弹幕内容\" ,      // 弹幕显示的内容\n    \"time\" :     23.826000213623, // 弹幕出现的时间\n    \"type\":       6      ,        // 弹幕类型（参考danmaku中弹幕类型）\n    \"fontsize\":   12     ,        // 弹幕显示的字体大小\n    \"fontcolor\":  16777215,       // 弹幕字体颜色\n    \"userid\":     6,              // 用户hash\n    \"username\":   \"alexwan\",      // 用户名称\n    \"avatar\":     \"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467081842/android/3397490934332211.jpg\",\n    \"danmakuid\":  90              // 弹幕id\n}, \n...\n]\n```\n（1）定义弹幕JavaBean\n```java\npublic class DanmakuData {\n    private String content;\n    private double time;\n    private int type;\n    private float fontSize;\n    private int fontColor;\n    private int userId;\n    private String userName;\n    private String avatar;\n    private int danmakuId;\n    ...\n}\n```\n（2）实现[IDataSource](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/IDataSource.java)，定义弹幕数据源（参考[JSONSource](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/android/JSONSource.java)），加载指定数据源的弹幕数据。在[ILoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java)子类中初始化。\n{% codeblock lang:java DanmakuSource.java %}\n\npublic class DanmakuSource implements IDataSource<String> \n...\nprivate String mJson;\nprivate InputStream mInput;\npublic DanmakuSource(String json) throws JSONException{...}                      // 指定json字符串\npublic DanmakuSource(InputStream in) throws JSONException{...}                   // 指定json数据流\npublic DanmakuSource(URL url) throws JSONException, IOException{...}             // 指定URL源json\npublic DanmakuSource(File file) throws FileNotFoundException, JSONException{...} // 指定file源json\npublic DanmakuSource(Uri uri) throws IOException, JSONException{...}             // 指定Uri源json\nprivate void init(InputStream in) throws JSONException \n...\nprivate void init(String json) throws JSONException {\n    if (!TextUtils.isEmpty(json)) {\n        // 初始化json\n        mJson = json;\n    }\n}\n...\n@Override\npublic String data() {\n    return mJson;\n}\n...\n{% endcodeblock %}\n\n\n（3）实现[ILoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java)，执行`IDataSource `的初始化管理操作。XML格式弹幕直接使用[BiliDanmakuLoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/BiliDanmakuLoader.java)加载，JSON格式弹幕可以使用[AcFunDanmakuLoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/AcFunDanmakuLoader.java)用`JSONSource`来加载弹幕数据。也可以自定义实现弹幕加载方式。\n{% codeblock lang:java SimpleDanmakuLoader.java %}\npublic class SimpleDanmakuLoader implements ILoader {\n\n    private SimpleDanmakuLoader() {\n    }\n\t\n    private static volatile SimpleDanmakuLoader instance;\n    private IDataSource<String> mDataSource;\n\t\n    //  这里使用单例保证加载器只会被实例化一次\n    public static ILoader instance() {\n        if (instance == null) {\n            synchronized (SimpleDanmakuLoader.class) {\n                if (instance == null) {\n                    instance = new SimpleDanmakuLoader();\n                }\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    public IDataSource<String> getDataSource() {\n        return mDataSource;\n    }\n\n    /*\n    * 加载Uri类型弹幕数据\n    */\n    @Override\n    public void load(String uri) throws IllegalDataException {\n        try {\n             mDataSource = new DanmakuSource(UriUtil.parseUriOrNull(uri));\n        } catch (Exception e) {\n            throw new IllegalDataException(e);\n        }\n    }\n\n    /**\n    * 加载流数据弹幕\n    */\n    @Override\n    public void load(InputStream in) throws IllegalDataException {\n        try {\n            mDataSource = new DanmakuSource(in);\n        } catch (JSONException e) {\n            throw new IllegalDataException(e);\n        }\n    }\n}\n{% endcodeblock %}\n`SimpleDanmakuLoader`创建`DanmakuSource`来获取弹幕内容。在初始化弹幕数据解析器时，调用`load`方法获取弹幕数据。\n\n（4）定义弹幕解析类，继承[BaseDanmakuParser](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/BaseDanmakuParser.java)创建自定义的弹幕解析类。\n{% codeblock lang:java SimpleDanmakuParser.java%}\npublic class SimpleDanmakuParser extends BaseDanmakuParser{\n    private static final String TAG = SimpleDanmakuParser.class.getSimpleName();\n    @Override\n    protected IDanmakus parse() {\n        if(mDataSource != null && mDataSource instanceof DanmakuSource){\n            DanmakuSource source = (DanmakuSource) mDataSource;\n            return doParse(source.data());\n        }\n        return new Danmakus();\n    }\n\n    private Danmakus doParse(String json){\n        Danmakus danmakus = new Danmakus();\n        if(TextUtils.isEmpty(json)){\n            return danmakus;\n        }\n        // 使用Gson解析弹幕json数据\n        Type type = new TypeToken<List<DanmakuData>>(){}.getType();\n        List<DanmakuData> list = new Gson().fromJson(json , type);\n        int size = list.size();\n        for (int i = 0 ; i < size; i ++){\n            danmakus = parse(list.get(i) , danmakus , i);\n        }\n        return danmakus;\n    }\n\n    /**\n     * 解析弹幕数据,组装BaseDanmaku\n     * @param data DanmakuData\n     * @param danmakus Danmakus\n     * @param index index\n     * @return Danmakus\n     */\n    private Danmakus parse(DanmakuData data, Danmakus danmakus , int index) {\n        if(danmakus == null){\n            danmakus =  new Danmakus();\n        }\n        BaseDanmaku item = mContext.mDanmakuFactory.createDanmaku(data.getType() , mContext);\n        if(item != null){\n            item.setTime((long) (data.getTime() * 1000));\n            item.textSize = data.getFontSize();\n            item.textColor = data.getFontColor() | 0xFF000000 ;\n            DanmakuUtils.fillText(item , data.getContent());\n            item.index = index;\n            item.setTimer(mTimer);\n            danmakus.addItem(item);\n            Log.i(TAG , \"parse : time = \" + data.getTime() * 1000 + \" ; textSize = \" + data.getFontSize()\n                    + \" ; textColor = \" + item.textColor + \" ; content = \" + item.text);\n        }\n        return danmakus;\n    }\n{% endcodeblock %}\n\n（5）配置弹幕解析器\n\n{% codeblock lang:java MainActivity.java %}\n...\nmParser = customParser();\nmDanmakuView.prepare(mParser, mDanmakuContext);\n...\nprivate BaseDanmakuParser customParser(){\n    ILoader loader = SimpleDanmakuLoader.instance();\n    try {\n        loader.load(\"http://...\");\n        Log.i(TAG , \"customParser : json = \" + new Gson().toJson(list) );\n    } catch (IllegalDataException e) {\n        Log.e(TAG , \"customParser : json = \" + new Gson().toJson(list) + \" ; error = \" , e);\n    }\n    BaseDanmakuParser parser = new SimpleDanmakuParser();\n    IDataSource<?> dataSource = loader.getDataSource();\n    parser.load(dataSource);\n    return parser;\n}\n{% endcodeblock %}\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_556/v1474625129/android/danmaku_parser.png)\n## 3. 图文混排弹幕\n\n（1）单排图文\n```java\n// TODO\n\n\n```\n（2）双排图文\n\n```java\n// TODO\n```\n\n# 参考\n1、[Android开源弹幕引擎·烈焰弹幕使 ～ ](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/Sample/src/main/java/com/sample/MainActivity.java)\n2、[记一次弹幕的开发](http://wangpeiyuan.cn/2016/02/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%B9%E5%B9%95%E7%9A%84%E5%BC%80%E5%8F%91/)\n3、[图文弹幕的实现](http://blog.csdn.net/zxq614/article/details/52622792)\n4、[Simple drawee spannable text view based on Fresco](https://github.com/Bilibili/drawee-text-view)\n\n\n\n\n","source":"_posts/Android：DFM弹幕开发之基本配置.md","raw":"title: Android：DFM弹幕开发之基本配置\ndate: 2016-09-19 09:34:37\nthumbnailImage:  http://res.cloudinary.com/dmfz9aun7/image/upload/b_rgb:fff,c_fit,dpr_0.75,e_grayscale,w_564/v1474249270/android/bilibili_dfm.png\ntags: danmaku\ncategories: danmaku\n---\n[DanmakuFlameMaster](https://github.com/Bilibili/DanmakuFlameMaster)(以下简称DFM)是哔哩哔哩开源的Android弹幕解析绘制引擎项目。`DFM`使用多种方式(View/SurfaceView/TextureView)实现高效绘制，支持自定义字体，支持多种弹幕参数设置等\n\n# 一、配置\n\nGradle\n\n```java\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    compile 'com.github.ctiao:DanmakuFlameMaster:0.4.9'\n}\n```\n在布局中应用\n\n```xml\n<master.flame.danmaku.ui.widget.DanmakuView\n    android:id=\"@+id/sv_danmaku\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n\n# 二、基础用法\n\n## 1、弹幕播放\n\n```java\n\n// Activity onCreate 中初始化弹幕的配置\nfinal DanmakuView svDanmaku = (DanmakuView) findViewById(R.id.sv_danmaku);\n\nHashMap<Integer, Integer> maxLinesPair = new HashMap<>(); // 最大行数\nmaxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, 5);\n\nHashMap<Integer, Boolean> overlappingEnablePair = new HashMap<>(); // 防止弹幕重叠\noverlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_RL, true);\noverlappingEnablePair.put(BaseDanmaku.TYPE_FIX_TOP, true);\n\nDanmakuContext mDanmakuContext = DanmakuContext.create();   // 创建弹幕所需的上下文信息\nmDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3) // 弹幕样式\n        .setDuplicateMergingEnabled(true)    // 合并重复弹幕\n        .setScrollSpeedFactor(1.5f)          // 滚动弹幕速度系数\n        .setScaleTextSize(0.8f)              // 弹幕文字大小\n        .setCacheStuffer(new SpannedCacheStuffer(), mCacheStufferAdapter) // 缓存绘制\n        .setMaximumLines(maxLinesPair)       // 弹幕最大行数\n        .preventOverlapping(overlappingEnablePair); // 防止弹幕重叠\n\nBaseDanmakuParser mParser = createParser(this.getResources().openRawResource(R.raw.comments)); // 创建弹幕解析器\n// 设置弹幕播放的状态回调\nsvDanmaku.setCallback(new DrawHandler.Callback() {\n    @Override\n    public void prepared() {\n        // 弹幕准备完成\n        Log.d(\"DFM\" , \"prepared\");\n        svDanmaku.start();\n    }\n\n    @Override\n    public void updateTimer(DanmakuTimer timer) {\n        // 弹幕播放时间\n        Log.d(\"DFM\" , \"updateTimer : timer = \" + timer.currMillisecond);\n    }\n\n    @Override\n    public void danmakuShown(BaseDanmaku danmaku) {\n        // 播放新的一条弹幕\n        Log.d(\"DFM\" , \"danmakuShown : danmaku = \" + danmaku.text);\n    }\n\n    @Override\n    public void drawingFinished() {\n        // 弹幕播放结束\n        Log.d(\"DFM\" , \"drawingFinished\");\n    }});\n    \n    // 设置弹幕点击监听\n    mMainBinding.svDanmaku.setOnDanmakuClickListener(new IDanmakuView.OnDanmakuClickListener() {\n        @Override\n        public boolean onViewClick(IDanmakuView view) {\n            // 点击的弹幕\n            return false;\n        }\n\n        @Override\n        public boolean onDanmakuClick(IDanmakus danmakus) {\n            // 弹幕\n            Log.d(\"DFM\", \"onDanmakuClick danmakus size:\" + danmakus.size());\n            return false;\n        }\n    });\n\n    // 播放准备\n    svDanmaku.prepare(mParser, mDanmakuContext);\n    // 显示播放FPS,一般用作调试时使用\n    svDanmaku.showFPS(false);\n    // 开启绘制缓存\n    svDanmaku.enableDanmakuDrawingCache(true);\n\n```\n创建弹幕解析器\n```java\n    /**\n     * 创建弹幕解析器\n     * @param stream stream\n     * @return BaseDanmakuParser\n     */\n    private BaseDanmakuParser createParser(InputStream stream) {\n\n        if (stream == null) {\n            return new BaseDanmakuParser() {\n                @Override\n                protected Danmakus parse() {\n                    return new Danmakus();\n                }\n            };\n        }\n        // TAG_BILI XML数据格式的弹幕。TAG_ACFUN JSON数据格式的弹幕\n        ILoader loader = DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI);\n\n        try {\n            loader.load(stream);\n        } catch (IllegalDataException e) {\n            e.printStackTrace();\n        }\n        BaseDanmakuParser parser = new BiliDanmukuParser();\n        IDataSource<?> dataSource = loader.getDataSource();\n        parser.load(dataSource);\n        return parser;\n    }\n```\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278152/android/dfm_play.gif)\n## 2、发送弹幕\n常见的弹幕内容一般由以下部分组成\n```java\n1 : 时间(弹幕出现时间) long类型的时间戳\n2 : 类型(1从左至右滚动弹幕 ； 6从右至左滚动弹幕； 5顶端固定弹幕；4底端固定弹幕；7高级弹幕；8脚本弹幕)\n3 : 字号\n4 : 颜色\n5 : 弹幕池id\n6 : 用户hash\n7 : 弹幕id\n```\n发送弹幕处理\n```java\nBaseDanmaku baseDanmaku = mDanmakuContext.mDanmakuFactory.createDanmaku(BaseDanmaku.TYPE_FIX_BOTTOM); // 通过DanmakuFactory来创建弹幕\n\n// 弹幕内容信息\nbaseDanmaku.text = \"简单的一条弹幕\" + System.nanoTime(); // 文本内容\nbaseDanmaku.textSize = 25f * (mParser.getDisplayer().getDensity() - 0.6f); // 字体大小\nbaseDanmaku.textColor = Color.RED;         // 字体颜色\nbaseDanmaku.textShadowColor = Color.WHITE; // 描边颜色\nbaseDanmaku.borderColor = Color.RED;       // 弹幕边框颜色\nbaseDanmaku.padding = 5;                   // 内边距\nbaseDanmaku.priority = 0;                  // 弹幕优先级,0为低优先级\nbaseDanmaku.isLive = false;                // 是否是直播弹幕\nbaseDanmaku.underlineColor = 0;            // 0表示无下划线\n// baseDanmaku.lines = new String[]{\"两行弹幕第1行弹幕\" , \"两行弹幕第2行弹幕\"};\n\n// 发送时的时间由弹幕播放时间来确定\nbaseDanmaku.setTime(mMainBinding.svDanmaku.getCurrentTime());// 弹幕出现的时间\n\n// 发送弹幕，根据业务内容是否执行弹幕上传操作 TODO\nmMainBinding.svDanmaku.addDanmaku(baseDanmaku);\n```\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278810/android/dfm_add.gif)\n\n## 3. 弹幕状态操作\n（1）. 隐藏\n```java\nmMainBinding.svDanmaku.hide();\n```\n（2）. 显示\n```java\nmMainBinding.svDanmaku.show();\n```\n（3）. 暂停\n```java\nmMainBinding.svDanmaku.pause();\n```\n（4）. 恢复继续\n```java\nmMainBinding.svDanmaku.onResume();\n```\n（2）. 跳转\n```java\nmMainBinding.svDanmaku.seekTo(0);   // 跳转到起始位置\n```\n## 4. 弹幕周期管理及资源释放\n弹幕需要与Activity的生命周期配合来处理。防止未及时释放资源，造成Activity的内存问题。\n```java\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    if (mDanmakuView != null && mDanmakuView.isPrepared()) {\n        mDanmakuView.pause();\n    }\n}\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    if (mDanmakuView != null && mDanmakuView.isPrepared() && mDanmakuView.isPaused()) {\n        mDanmakuView.resume();\n    }\n}\n\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    if (mDanmakuView != null) {\n        // 及时释放弹幕资源\n        mDanmakuView.release();\n        mDanmakuView = null;\n    }\n}\n\n@Override\npublic void onBackPressed() {\n    super.onBackPressed();\n    if (mDanmakuView != null) {\n        // 及时释放弹幕资源\n        mDanmakuView.release();\n        mDanmakuView = null;\n    }\n}\n\n```\n# 二、高级弹幕\n\n## 1. 背景绘制\n\n[DFM](https://github.com/Bilibili/DanmakuFlameMaster)自定义SpannedCacheStuffer，drawBackground方法中实现背景绘制操作\n\n```java\n// 绘制有背景的弹幕\nprivate class BackgroundCacheStuffer extends SpannedCacheStuffer{\n    final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    @Override\n    public void measure(BaseDanmaku danmaku, TextPaint paint, boolean fromWorkerThread) {\n        danmaku.padding = 10;\n        super.measure(danmaku, paint, fromWorkerThread);\n    }\n\n    @Override\n    public void drawBackground(BaseDanmaku danmaku, Canvas canvas, float left, float top) {\n        mPaint.setColor(0xEE90A4AE);   // 背景颜色\n        RectF rectF = new RectF(left + 5, top + 5, left + danmaku.paintWidth - 5, top + danmaku.paintHeight - 5); // 圆角矩形\n        canvas.drawRoundRect(rectF, 50 , 50 , mPaint);\n    }\n\n    @Override\n    public void drawStroke(BaseDanmaku danmaku, String lineText, Canvas canvas, float left, float top, Paint paint) {\n        // 绘制背景时建议禁止绘制描边\n    }\n}\n```\n配置DanmakuContext\n```java\nprivate DanmakuContext mDanmakuContext;\n...\nmDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3) // 弹幕样式\n        .setDuplicateMergingEnabled(true)    // 合并重复弹幕\n        .setScrollSpeedFactor(1.5f)          // 滚动弹幕速度系数\n        .setScaleTextSize(0.8f)              // 弹幕文字大小\n        .setCacheStuffer(new BackgroundCacheStuffer(), mCacheStufferAdapter) // 缓存绘制\n        ...\n```\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_521/v1474442790/android/danmaku_bg.png)\n\n## 2. 自定义解析器\n\n[DFM](https://github.com/Bilibili/DanmakuFlameMaster)内置两种解析器[BiliDanmukuParser](https://github.com/Bilibili/DanmakuFlameMaster/blob/d4abc40bcaa8cc6786c1dff4ca1694dd626955b5/Sample/src/main/java/com/sample/BiliDanmukuParser.java)。`BiliDanmukuParser`使用XML数据格式的弹幕，是BiliBili标准的弹幕格式。`AcFunDanmakuParser`使用JSON数据格式的弹幕，适用于解析Acfun标准的弹幕。除了使用这两种弹幕格式以外，还可以根据具体弹幕内容来自定义弹幕解析器。如有以下内容Json格式的弹幕，那么如何来处理这种数据呢，此时就需要自定义实现弹幕数据的解析。\n```java\n[{\n    \"content\":   \"弹幕内容\" ,      // 弹幕显示的内容\n    \"time\" :     23.826000213623, // 弹幕出现的时间\n    \"type\":       6      ,        // 弹幕类型（参考danmaku中弹幕类型）\n    \"fontsize\":   12     ,        // 弹幕显示的字体大小\n    \"fontcolor\":  16777215,       // 弹幕字体颜色\n    \"userid\":     6,              // 用户hash\n    \"username\":   \"alexwan\",      // 用户名称\n    \"avatar\":     \"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467081842/android/3397490934332211.jpg\",\n    \"danmakuid\":  90              // 弹幕id\n}, \n...\n]\n```\n（1）定义弹幕JavaBean\n```java\npublic class DanmakuData {\n    private String content;\n    private double time;\n    private int type;\n    private float fontSize;\n    private int fontColor;\n    private int userId;\n    private String userName;\n    private String avatar;\n    private int danmakuId;\n    ...\n}\n```\n（2）实现[IDataSource](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/IDataSource.java)，定义弹幕数据源（参考[JSONSource](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/android/JSONSource.java)），加载指定数据源的弹幕数据。在[ILoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java)子类中初始化。\n{% codeblock lang:java DanmakuSource.java %}\n\npublic class DanmakuSource implements IDataSource<String> \n...\nprivate String mJson;\nprivate InputStream mInput;\npublic DanmakuSource(String json) throws JSONException{...}                      // 指定json字符串\npublic DanmakuSource(InputStream in) throws JSONException{...}                   // 指定json数据流\npublic DanmakuSource(URL url) throws JSONException, IOException{...}             // 指定URL源json\npublic DanmakuSource(File file) throws FileNotFoundException, JSONException{...} // 指定file源json\npublic DanmakuSource(Uri uri) throws IOException, JSONException{...}             // 指定Uri源json\nprivate void init(InputStream in) throws JSONException \n...\nprivate void init(String json) throws JSONException {\n    if (!TextUtils.isEmpty(json)) {\n        // 初始化json\n        mJson = json;\n    }\n}\n...\n@Override\npublic String data() {\n    return mJson;\n}\n...\n{% endcodeblock %}\n\n\n（3）实现[ILoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java)，执行`IDataSource `的初始化管理操作。XML格式弹幕直接使用[BiliDanmakuLoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/BiliDanmakuLoader.java)加载，JSON格式弹幕可以使用[AcFunDanmakuLoader](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/AcFunDanmakuLoader.java)用`JSONSource`来加载弹幕数据。也可以自定义实现弹幕加载方式。\n{% codeblock lang:java SimpleDanmakuLoader.java %}\npublic class SimpleDanmakuLoader implements ILoader {\n\n    private SimpleDanmakuLoader() {\n    }\n\t\n    private static volatile SimpleDanmakuLoader instance;\n    private IDataSource<String> mDataSource;\n\t\n    //  这里使用单例保证加载器只会被实例化一次\n    public static ILoader instance() {\n        if (instance == null) {\n            synchronized (SimpleDanmakuLoader.class) {\n                if (instance == null) {\n                    instance = new SimpleDanmakuLoader();\n                }\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    public IDataSource<String> getDataSource() {\n        return mDataSource;\n    }\n\n    /*\n    * 加载Uri类型弹幕数据\n    */\n    @Override\n    public void load(String uri) throws IllegalDataException {\n        try {\n             mDataSource = new DanmakuSource(UriUtil.parseUriOrNull(uri));\n        } catch (Exception e) {\n            throw new IllegalDataException(e);\n        }\n    }\n\n    /**\n    * 加载流数据弹幕\n    */\n    @Override\n    public void load(InputStream in) throws IllegalDataException {\n        try {\n            mDataSource = new DanmakuSource(in);\n        } catch (JSONException e) {\n            throw new IllegalDataException(e);\n        }\n    }\n}\n{% endcodeblock %}\n`SimpleDanmakuLoader`创建`DanmakuSource`来获取弹幕内容。在初始化弹幕数据解析器时，调用`load`方法获取弹幕数据。\n\n（4）定义弹幕解析类，继承[BaseDanmakuParser](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/BaseDanmakuParser.java)创建自定义的弹幕解析类。\n{% codeblock lang:java SimpleDanmakuParser.java%}\npublic class SimpleDanmakuParser extends BaseDanmakuParser{\n    private static final String TAG = SimpleDanmakuParser.class.getSimpleName();\n    @Override\n    protected IDanmakus parse() {\n        if(mDataSource != null && mDataSource instanceof DanmakuSource){\n            DanmakuSource source = (DanmakuSource) mDataSource;\n            return doParse(source.data());\n        }\n        return new Danmakus();\n    }\n\n    private Danmakus doParse(String json){\n        Danmakus danmakus = new Danmakus();\n        if(TextUtils.isEmpty(json)){\n            return danmakus;\n        }\n        // 使用Gson解析弹幕json数据\n        Type type = new TypeToken<List<DanmakuData>>(){}.getType();\n        List<DanmakuData> list = new Gson().fromJson(json , type);\n        int size = list.size();\n        for (int i = 0 ; i < size; i ++){\n            danmakus = parse(list.get(i) , danmakus , i);\n        }\n        return danmakus;\n    }\n\n    /**\n     * 解析弹幕数据,组装BaseDanmaku\n     * @param data DanmakuData\n     * @param danmakus Danmakus\n     * @param index index\n     * @return Danmakus\n     */\n    private Danmakus parse(DanmakuData data, Danmakus danmakus , int index) {\n        if(danmakus == null){\n            danmakus =  new Danmakus();\n        }\n        BaseDanmaku item = mContext.mDanmakuFactory.createDanmaku(data.getType() , mContext);\n        if(item != null){\n            item.setTime((long) (data.getTime() * 1000));\n            item.textSize = data.getFontSize();\n            item.textColor = data.getFontColor() | 0xFF000000 ;\n            DanmakuUtils.fillText(item , data.getContent());\n            item.index = index;\n            item.setTimer(mTimer);\n            danmakus.addItem(item);\n            Log.i(TAG , \"parse : time = \" + data.getTime() * 1000 + \" ; textSize = \" + data.getFontSize()\n                    + \" ; textColor = \" + item.textColor + \" ; content = \" + item.text);\n        }\n        return danmakus;\n    }\n{% endcodeblock %}\n\n（5）配置弹幕解析器\n\n{% codeblock lang:java MainActivity.java %}\n...\nmParser = customParser();\nmDanmakuView.prepare(mParser, mDanmakuContext);\n...\nprivate BaseDanmakuParser customParser(){\n    ILoader loader = SimpleDanmakuLoader.instance();\n    try {\n        loader.load(\"http://...\");\n        Log.i(TAG , \"customParser : json = \" + new Gson().toJson(list) );\n    } catch (IllegalDataException e) {\n        Log.e(TAG , \"customParser : json = \" + new Gson().toJson(list) + \" ; error = \" , e);\n    }\n    BaseDanmakuParser parser = new SimpleDanmakuParser();\n    IDataSource<?> dataSource = loader.getDataSource();\n    parser.load(dataSource);\n    return parser;\n}\n{% endcodeblock %}\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_556/v1474625129/android/danmaku_parser.png)\n## 3. 图文混排弹幕\n\n（1）单排图文\n```java\n// TODO\n\n\n```\n（2）双排图文\n\n```java\n// TODO\n```\n\n# 参考\n1、[Android开源弹幕引擎·烈焰弹幕使 ～ ](https://github.com/Bilibili/DanmakuFlameMaster/blob/master/Sample/src/main/java/com/sample/MainActivity.java)\n2、[记一次弹幕的开发](http://wangpeiyuan.cn/2016/02/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%B9%E5%B9%95%E7%9A%84%E5%BC%80%E5%8F%91/)\n3、[图文弹幕的实现](http://blog.csdn.net/zxq614/article/details/52622792)\n4、[Simple drawee spannable text view based on Fresco](https://github.com/Bilibili/drawee-text-view)\n\n\n\n\n","slug":"Android：DFM弹幕开发之基本配置","published":1,"updated":"2017-07-16T08:37:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txo0003grm3sy6o429d","content":"<p><a href=\"https://github.com/Bilibili/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">DanmakuFlameMaster</a>(以下简称DFM)是哔哩哔哩开源的Android弹幕解析绘制引擎项目。<code>DFM</code>使用多种方式(View/SurfaceView/TextureView)实现高效绘制，支持自定义字体，支持多种弹幕参数设置等</p>\n<h1 id=\"一、配置\"><a href=\"#一、配置\" class=\"headerlink\" title=\"一、配置\"></a>一、配置</h1><p>Gradle</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">    jcenter()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.ctiao:DanmakuFlameMaster:0.4.9'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在布局中应用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">master.flame.danmaku.ui.widget.DanmakuView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/sv_danmaku\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"二、基础用法\"><a href=\"#二、基础用法\" class=\"headerlink\" title=\"二、基础用法\"></a>二、基础用法</h1><h2 id=\"1、弹幕播放\"><a href=\"#1、弹幕播放\" class=\"headerlink\" title=\"1、弹幕播放\"></a>1、弹幕播放</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Activity onCreate 中初始化弹幕的配置</span></div><div class=\"line\"><span class=\"keyword\">final</span> DanmakuView svDanmaku = (DanmakuView) findViewById(R.id.sv_danmaku);</div><div class=\"line\"></div><div class=\"line\">HashMap&lt;Integer, Integer&gt; maxLinesPair = <span class=\"keyword\">new</span> HashMap&lt;&gt;(); <span class=\"comment\">// 最大行数</span></div><div class=\"line\">maxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">HashMap&lt;Integer, Boolean&gt; overlappingEnablePair = <span class=\"keyword\">new</span> HashMap&lt;&gt;(); <span class=\"comment\">// 防止弹幕重叠</span></div><div class=\"line\">overlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_RL, <span class=\"keyword\">true</span>);</div><div class=\"line\">overlappingEnablePair.put(BaseDanmaku.TYPE_FIX_TOP, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">DanmakuContext mDanmakuContext = DanmakuContext.create();   <span class=\"comment\">// 创建弹幕所需的上下文信息</span></div><div class=\"line\">mDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, <span class=\"number\">3</span>) <span class=\"comment\">// 弹幕样式</span></div><div class=\"line\">        .setDuplicateMergingEnabled(<span class=\"keyword\">true</span>)    <span class=\"comment\">// 合并重复弹幕</span></div><div class=\"line\">        .setScrollSpeedFactor(<span class=\"number\">1.5f</span>)          <span class=\"comment\">// 滚动弹幕速度系数</span></div><div class=\"line\">        .setScaleTextSize(<span class=\"number\">0.8f</span>)              <span class=\"comment\">// 弹幕文字大小</span></div><div class=\"line\">        .setCacheStuffer(<span class=\"keyword\">new</span> SpannedCacheStuffer(), mCacheStufferAdapter) <span class=\"comment\">// 缓存绘制</span></div><div class=\"line\">        .setMaximumLines(maxLinesPair)       <span class=\"comment\">// 弹幕最大行数</span></div><div class=\"line\">        .preventOverlapping(overlappingEnablePair); <span class=\"comment\">// 防止弹幕重叠</span></div><div class=\"line\"></div><div class=\"line\">BaseDanmakuParser mParser = createParser(<span class=\"keyword\">this</span>.getResources().openRawResource(R.raw.comments)); <span class=\"comment\">// 创建弹幕解析器</span></div><div class=\"line\"><span class=\"comment\">// 设置弹幕播放的状态回调</span></div><div class=\"line\">svDanmaku.setCallback(<span class=\"keyword\">new</span> DrawHandler.Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepared</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 弹幕准备完成</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"prepared\"</span>);</div><div class=\"line\">        svDanmaku.start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateTimer</span><span class=\"params\">(DanmakuTimer timer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 弹幕播放时间</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"updateTimer : timer = \"</span> + timer.currMillisecond);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">danmakuShown</span><span class=\"params\">(BaseDanmaku danmaku)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 播放新的一条弹幕</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"danmakuShown : danmaku = \"</span> + danmaku.text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawingFinished</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 弹幕播放结束</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"drawingFinished\"</span>);</div><div class=\"line\">    &#125;&#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置弹幕点击监听</span></div><div class=\"line\">    mMainBinding.svDanmaku.setOnDanmakuClickListener(<span class=\"keyword\">new</span> IDanmakuView.OnDanmakuClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onViewClick</span><span class=\"params\">(IDanmakuView view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 点击的弹幕</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDanmakuClick</span><span class=\"params\">(IDanmakus danmakus)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 弹幕</span></div><div class=\"line\">            Log.d(<span class=\"string\">\"DFM\"</span>, <span class=\"string\">\"onDanmakuClick danmakus size:\"</span> + danmakus.size());</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 播放准备</span></div><div class=\"line\">    svDanmaku.prepare(mParser, mDanmakuContext);</div><div class=\"line\">    <span class=\"comment\">// 显示播放FPS,一般用作调试时使用</span></div><div class=\"line\">    svDanmaku.showFPS(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">// 开启绘制缓存</span></div><div class=\"line\">    svDanmaku.enableDanmakuDrawingCache(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>创建弹幕解析器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 创建弹幕解析器</div><div class=\"line\"> * <span class=\"doctag\">@param</span> stream stream</div><div class=\"line\"> * <span class=\"doctag\">@return</span> BaseDanmakuParser</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> BaseDanmakuParser <span class=\"title\">createParser</span><span class=\"params\">(InputStream stream)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (stream == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseDanmakuParser() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> Danmakus <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// TAG_BILI XML数据格式的弹幕。TAG_ACFUN JSON数据格式的弹幕</span></div><div class=\"line\">    ILoader loader = DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        loader.load(stream);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalDataException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    BaseDanmakuParser parser = <span class=\"keyword\">new</span> BiliDanmukuParser();</div><div class=\"line\">    IDataSource&lt;?&gt; dataSource = loader.getDataSource();</div><div class=\"line\">    parser.load(dataSource);</div><div class=\"line\">    <span class=\"keyword\">return</span> parser;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278152/android/dfm_play.gif\" alt=\"img\"></p>\n<h2 id=\"2、发送弹幕\"><a href=\"#2、发送弹幕\" class=\"headerlink\" title=\"2、发送弹幕\"></a>2、发送弹幕</h2><p>常见的弹幕内容一般由以下部分组成<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> : 时间(弹幕出现时间) <span class=\"keyword\">long</span>类型的时间戳</div><div class=\"line\"><span class=\"number\">2</span> : 类型(<span class=\"number\">1</span>从左至右滚动弹幕 ； <span class=\"number\">6</span>从右至左滚动弹幕； <span class=\"number\">5</span>顶端固定弹幕；<span class=\"number\">4</span>底端固定弹幕；<span class=\"number\">7</span>高级弹幕；<span class=\"number\">8</span>脚本弹幕)</div><div class=\"line\"><span class=\"number\">3</span> : 字号</div><div class=\"line\"><span class=\"number\">4</span> : 颜色</div><div class=\"line\"><span class=\"number\">5</span> : 弹幕池id</div><div class=\"line\"><span class=\"number\">6</span> : 用户hash</div><div class=\"line\"><span class=\"number\">7</span> : 弹幕id</div></pre></td></tr></table></figure></p>\n<p>发送弹幕处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">BaseDanmaku baseDanmaku = mDanmakuContext.mDanmakuFactory.createDanmaku(BaseDanmaku.TYPE_FIX_BOTTOM); <span class=\"comment\">// 通过DanmakuFactory来创建弹幕</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 弹幕内容信息</span></div><div class=\"line\">baseDanmaku.text = <span class=\"string\">\"简单的一条弹幕\"</span> + System.nanoTime(); <span class=\"comment\">// 文本内容</span></div><div class=\"line\">baseDanmaku.textSize = <span class=\"number\">25f</span> * (mParser.getDisplayer().getDensity() - <span class=\"number\">0.6f</span>); <span class=\"comment\">// 字体大小</span></div><div class=\"line\">baseDanmaku.textColor = Color.RED;         <span class=\"comment\">// 字体颜色</span></div><div class=\"line\">baseDanmaku.textShadowColor = Color.WHITE; <span class=\"comment\">// 描边颜色</span></div><div class=\"line\">baseDanmaku.borderColor = Color.RED;       <span class=\"comment\">// 弹幕边框颜色</span></div><div class=\"line\">baseDanmaku.padding = <span class=\"number\">5</span>;                   <span class=\"comment\">// 内边距</span></div><div class=\"line\">baseDanmaku.priority = <span class=\"number\">0</span>;                  <span class=\"comment\">// 弹幕优先级,0为低优先级</span></div><div class=\"line\">baseDanmaku.isLive = <span class=\"keyword\">false</span>;                <span class=\"comment\">// 是否是直播弹幕</span></div><div class=\"line\">baseDanmaku.underlineColor = <span class=\"number\">0</span>;            <span class=\"comment\">// 0表示无下划线</span></div><div class=\"line\"><span class=\"comment\">// baseDanmaku.lines = new String[]&#123;\"两行弹幕第1行弹幕\" , \"两行弹幕第2行弹幕\"&#125;;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发送时的时间由弹幕播放时间来确定</span></div><div class=\"line\">baseDanmaku.setTime(mMainBinding.svDanmaku.getCurrentTime());<span class=\"comment\">// 弹幕出现的时间</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发送弹幕，根据业务内容是否执行弹幕上传操作 TODO</span></div><div class=\"line\">mMainBinding.svDanmaku.addDanmaku(baseDanmaku);</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278810/android/dfm_add.gif\" alt=\"img\"></p>\n<h2 id=\"3-弹幕状态操作\"><a href=\"#3-弹幕状态操作\" class=\"headerlink\" title=\"3. 弹幕状态操作\"></a>3. 弹幕状态操作</h2><p>（1）. 隐藏<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.hide();</div></pre></td></tr></table></figure></p>\n<p>（2）. 显示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.show();</div></pre></td></tr></table></figure></p>\n<p>（3）. 暂停<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.pause();</div></pre></td></tr></table></figure></p>\n<p>（4）. 恢复继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.onResume();</div></pre></td></tr></table></figure></p>\n<p>（2）. 跳转<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.seekTo(<span class=\"number\">0</span>);   <span class=\"comment\">// 跳转到起始位置</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"4-弹幕周期管理及资源释放\"><a href=\"#4-弹幕周期管理及资源释放\" class=\"headerlink\" title=\"4. 弹幕周期管理及资源释放\"></a>4. 弹幕周期管理及资源释放</h2><p>弹幕需要与Activity的生命周期配合来处理。防止未及时释放资源，造成Activity的内存问题。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span> &amp;&amp; mDanmakuView.isPrepared()) &#123;</div><div class=\"line\">        mDanmakuView.pause();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span> &amp;&amp; mDanmakuView.isPrepared() &amp;&amp; mDanmakuView.isPaused()) &#123;</div><div class=\"line\">        mDanmakuView.resume();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 及时释放弹幕资源</span></div><div class=\"line\">        mDanmakuView.release();</div><div class=\"line\">        mDanmakuView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onBackPressed();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 及时释放弹幕资源</span></div><div class=\"line\">        mDanmakuView.release();</div><div class=\"line\">        mDanmakuView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"二、高级弹幕\"><a href=\"#二、高级弹幕\" class=\"headerlink\" title=\"二、高级弹幕\"></a>二、高级弹幕</h1><h2 id=\"1-背景绘制\"><a href=\"#1-背景绘制\" class=\"headerlink\" title=\"1. 背景绘制\"></a>1. 背景绘制</h2><p><a href=\"https://github.com/Bilibili/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">DFM</a>自定义SpannedCacheStuffer，drawBackground方法中实现背景绘制操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 绘制有背景的弹幕</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BackgroundCacheStuffer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpannedCacheStuffer</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(BaseDanmaku danmaku, TextPaint paint, <span class=\"keyword\">boolean</span> fromWorkerThread)</span> </span>&#123;</div><div class=\"line\">        danmaku.padding = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.measure(danmaku, paint, fromWorkerThread);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(BaseDanmaku danmaku, Canvas canvas, <span class=\"keyword\">float</span> left, <span class=\"keyword\">float</span> top)</span> </span>&#123;</div><div class=\"line\">        mPaint.setColor(<span class=\"number\">0xEE90A4AE</span>);   <span class=\"comment\">// 背景颜色</span></div><div class=\"line\">        RectF rectF = <span class=\"keyword\">new</span> RectF(left + <span class=\"number\">5</span>, top + <span class=\"number\">5</span>, left + danmaku.paintWidth - <span class=\"number\">5</span>, top + danmaku.paintHeight - <span class=\"number\">5</span>); <span class=\"comment\">// 圆角矩形</span></div><div class=\"line\">        canvas.drawRoundRect(rectF, <span class=\"number\">50</span> , <span class=\"number\">50</span> , mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawStroke</span><span class=\"params\">(BaseDanmaku danmaku, String lineText, Canvas canvas, <span class=\"keyword\">float</span> left, <span class=\"keyword\">float</span> top, Paint paint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 绘制背景时建议禁止绘制描边</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置DanmakuContext<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> DanmakuContext mDanmakuContext;</div><div class=\"line\">...</div><div class=\"line\">mDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, <span class=\"number\">3</span>) <span class=\"comment\">// 弹幕样式</span></div><div class=\"line\">        .setDuplicateMergingEnabled(<span class=\"keyword\">true</span>)    <span class=\"comment\">// 合并重复弹幕</span></div><div class=\"line\">        .setScrollSpeedFactor(<span class=\"number\">1.5f</span>)          <span class=\"comment\">// 滚动弹幕速度系数</span></div><div class=\"line\">        .setScaleTextSize(<span class=\"number\">0.8f</span>)              <span class=\"comment\">// 弹幕文字大小</span></div><div class=\"line\">        .setCacheStuffer(<span class=\"keyword\">new</span> BackgroundCacheStuffer(), mCacheStufferAdapter) <span class=\"comment\">// 缓存绘制</span></div><div class=\"line\">        ...</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_521/v1474442790/android/danmaku_bg.png\" alt=\"img\"></p>\n<h2 id=\"2-自定义解析器\"><a href=\"#2-自定义解析器\" class=\"headerlink\" title=\"2. 自定义解析器\"></a>2. 自定义解析器</h2><p><a href=\"https://github.com/Bilibili/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">DFM</a>内置两种解析器<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/d4abc40bcaa8cc6786c1dff4ca1694dd626955b5/Sample/src/main/java/com/sample/BiliDanmukuParser.java\" target=\"_blank\" rel=\"external\">BiliDanmukuParser</a>。<code>BiliDanmukuParser</code>使用XML数据格式的弹幕，是BiliBili标准的弹幕格式。<code>AcFunDanmakuParser</code>使用JSON数据格式的弹幕，适用于解析Acfun标准的弹幕。除了使用这两种弹幕格式以外，还可以根据具体弹幕内容来自定义弹幕解析器。如有以下内容Json格式的弹幕，那么如何来处理这种数据呢，此时就需要自定义实现弹幕数据的解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&#123;</div><div class=\"line\">    <span class=\"string\">\"content\"</span>:   <span class=\"string\">\"弹幕内容\"</span> ,      <span class=\"comment\">// 弹幕显示的内容</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span> :     <span class=\"number\">23.826000213623</span>, <span class=\"comment\">// 弹幕出现的时间</span></div><div class=\"line\">    <span class=\"string\">\"type\"</span>:       <span class=\"number\">6</span>      ,        <span class=\"comment\">// 弹幕类型（参考danmaku中弹幕类型）</span></div><div class=\"line\">    <span class=\"string\">\"fontsize\"</span>:   <span class=\"number\">12</span>     ,        <span class=\"comment\">// 弹幕显示的字体大小</span></div><div class=\"line\">    <span class=\"string\">\"fontcolor\"</span>:  <span class=\"number\">16777215</span>,       <span class=\"comment\">// 弹幕字体颜色</span></div><div class=\"line\">    <span class=\"string\">\"userid\"</span>:     <span class=\"number\">6</span>,              <span class=\"comment\">// 用户hash</span></div><div class=\"line\">    <span class=\"string\">\"username\"</span>:   <span class=\"string\">\"alexwan\"</span>,      <span class=\"comment\">// 用户名称</span></div><div class=\"line\">    <span class=\"string\">\"avatar\"</span>:     <span class=\"string\">\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467081842/android/3397490934332211.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"danmakuid\"</span>:  <span class=\"number\">90</span>              <span class=\"comment\">// 弹幕id</span></div><div class=\"line\">&#125;, </div><div class=\"line\">...</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>（1）定义弹幕JavaBean<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DanmakuData</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String content;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> time;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> fontSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> fontColor;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> userId;</div><div class=\"line\">    <span class=\"keyword\">private</span> String userName;</div><div class=\"line\">    <span class=\"keyword\">private</span> String avatar;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> danmakuId;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>（2）实现<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/IDataSource.java\" target=\"_blank\" rel=\"external\">IDataSource</a>，定义弹幕数据源（参考<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/android/JSONSource.java\" target=\"_blank\" rel=\"external\">JSONSource</a>），加载指定数据源的弹幕数据。在<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java\" target=\"_blank\" rel=\"external\">ILoader</a>子类中初始化。<br><figure class=\"highlight java\"><figcaption><span>DanmakuSource.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DanmakuSource</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDataSource</span>&lt;<span class=\"title\">String</span>&gt; </span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"title\">private</span> <span class=\"title\">String</span> <span class=\"title\">mJson</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> InputStream mInput;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> JSONException</span>&#123;...&#125;                      <span class=\"comment\">// 指定json字符串</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> JSONException</span>&#123;...&#125;                   <span class=\"comment\">// 指定json数据流</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(URL url)</span> <span class=\"keyword\">throws</span> JSONException, IOException</span>&#123;...&#125;             <span class=\"comment\">// 指定URL源json</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> FileNotFoundException, JSONException</span>&#123;...&#125; <span class=\"comment\">// 指定file源json</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(Uri uri)</span> <span class=\"keyword\">throws</span> IOException, JSONException</span>&#123;...&#125;             <span class=\"comment\">// 指定Uri源json</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> JSONException </span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> JSONException &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!TextUtils.isEmpty(json)) &#123;</div><div class=\"line\">        <span class=\"comment\">// 初始化json</span></div><div class=\"line\">        mJson = json;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">data</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mJson;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>（3）实现<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java\" target=\"_blank\" rel=\"external\">ILoader</a>，执行<code>IDataSource</code>的初始化管理操作。XML格式弹幕直接使用<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/BiliDanmakuLoader.java\" target=\"_blank\" rel=\"external\">BiliDanmakuLoader</a>加载，JSON格式弹幕可以使用<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/AcFunDanmakuLoader.java\" target=\"_blank\" rel=\"external\">AcFunDanmakuLoader</a>用<code>JSONSource</code>来加载弹幕数据。也可以自定义实现弹幕加载方式。<br><figure class=\"highlight java\"><figcaption><span>SimpleDanmakuLoader.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDanmakuLoader</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILoader</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SimpleDanmakuLoader</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SimpleDanmakuLoader instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> IDataSource&lt;String&gt; mDataSource;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">//  这里使用单例保证加载器只会被实例化一次</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoader <span class=\"title\">instance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (SimpleDanmakuLoader.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> SimpleDanmakuLoader();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IDataSource&lt;String&gt; <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mDataSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 加载Uri类型弹幕数据</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String uri)</span> <span class=\"keyword\">throws</span> IllegalDataException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             mDataSource = <span class=\"keyword\">new</span> DanmakuSource(UriUtil.parseUriOrNull(uri));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalDataException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 加载流数据弹幕</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> IllegalDataException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDataSource = <span class=\"keyword\">new</span> DanmakuSource(in);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalDataException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><code>SimpleDanmakuLoader</code>创建<code>DanmakuSource</code>来获取弹幕内容。在初始化弹幕数据解析器时，调用<code>load</code>方法获取弹幕数据。</p>\n<p>（4）定义弹幕解析类，继承<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/BaseDanmakuParser.java\" target=\"_blank\" rel=\"external\">BaseDanmakuParser</a>创建自定义的弹幕解析类。<br><figure class=\"highlight java\"><figcaption><span>SimpleDanmakuParser.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDanmakuParser</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDanmakuParser</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = SimpleDanmakuParser.class.getSimpleName();</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> IDanmakus <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(mDataSource != <span class=\"keyword\">null</span> &amp;&amp; mDataSource <span class=\"keyword\">instanceof</span> DanmakuSource)&#123;</div><div class=\"line\">            DanmakuSource source = (DanmakuSource) mDataSource;</div><div class=\"line\">            <span class=\"keyword\">return</span> doParse(source.data());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Danmakus <span class=\"title\">doParse</span><span class=\"params\">(String json)</span></span>&#123;</div><div class=\"line\">        Danmakus danmakus = <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">        <span class=\"keyword\">if</span>(TextUtils.isEmpty(json))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> danmakus;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 使用Gson解析弹幕json数据</span></div><div class=\"line\">        Type type = <span class=\"keyword\">new</span> TypeToken&lt;List&lt;DanmakuData&gt;&gt;()&#123;&#125;.getType();</div><div class=\"line\">        List&lt;DanmakuData&gt; list = <span class=\"keyword\">new</span> Gson().fromJson(json , type);</div><div class=\"line\">        <span class=\"keyword\">int</span> size = list.size();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; size; i ++)&#123;</div><div class=\"line\">            danmakus = parse(list.get(i) , danmakus , i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> danmakus;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 解析弹幕数据,组装BaseDanmaku</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data DanmakuData</div><div class=\"line\">     * <span class=\"doctag\">@param</span> danmakus Danmakus</div><div class=\"line\">     * <span class=\"doctag\">@param</span> index index</div><div class=\"line\">     * <span class=\"doctag\">@return</span> Danmakus</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Danmakus <span class=\"title\">parse</span><span class=\"params\">(DanmakuData data, Danmakus danmakus , <span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(danmakus == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            danmakus =  <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">        &#125;</div><div class=\"line\">        BaseDanmaku item = mContext.mDanmakuFactory.createDanmaku(data.getType() , mContext);</div><div class=\"line\">        <span class=\"keyword\">if</span>(item != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            item.setTime((<span class=\"keyword\">long</span>) (data.getTime() * <span class=\"number\">1000</span>));</div><div class=\"line\">            item.textSize = data.getFontSize();</div><div class=\"line\">            item.textColor = data.getFontColor() | <span class=\"number\">0xFF000000</span> ;</div><div class=\"line\">            DanmakuUtils.fillText(item , data.getContent());</div><div class=\"line\">            item.index = index;</div><div class=\"line\">            item.setTimer(mTimer);</div><div class=\"line\">            danmakus.addItem(item);</div><div class=\"line\">            Log.i(TAG , <span class=\"string\">\"parse : time = \"</span> + data.getTime() * <span class=\"number\">1000</span> + <span class=\"string\">\" ; textSize = \"</span> + data.getFontSize()</div><div class=\"line\">                    + <span class=\"string\">\" ; textColor = \"</span> + item.textColor + <span class=\"string\">\" ; content = \"</span> + item.text);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> danmakus;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>（5）配置弹幕解析器</p>\n<figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">mParser = customParser();</div><div class=\"line\">mDanmakuView.prepare(mParser, mDanmakuContext);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> BaseDanmakuParser <span class=\"title\">customParser</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ILoader loader = SimpleDanmakuLoader.instance();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        loader.load(<span class=\"string\">\"http://...\"</span>);</div><div class=\"line\">        Log.i(TAG , <span class=\"string\">\"customParser : json = \"</span> + <span class=\"keyword\">new</span> Gson().toJson(list) );</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalDataException e) &#123;</div><div class=\"line\">        Log.e(TAG , <span class=\"string\">\"customParser : json = \"</span> + <span class=\"keyword\">new</span> Gson().toJson(list) + <span class=\"string\">\" ; error = \"</span> , e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    BaseDanmakuParser parser = <span class=\"keyword\">new</span> SimpleDanmakuParser();</div><div class=\"line\">    IDataSource&lt;?&gt; dataSource = loader.getDataSource();</div><div class=\"line\">    parser.load(dataSource);</div><div class=\"line\">    <span class=\"keyword\">return</span> parser;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_556/v1474625129/android/danmaku_parser.png\" alt=\"img\"></p>\n<h2 id=\"3-图文混排弹幕\"><a href=\"#3-图文混排弹幕\" class=\"headerlink\" title=\"3. 图文混排弹幕\"></a>3. 图文混排弹幕</h2><p>（1）单排图文<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// TODO</span></div></pre></td></tr></table></figure></p>\n<p>（2）双排图文</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// TODO</span></div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>1、<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/Sample/src/main/java/com/sample/MainActivity.java\" target=\"_blank\" rel=\"external\">Android开源弹幕引擎·烈焰弹幕使 ～ </a><br>2、<a href=\"http://wangpeiyuan.cn/2016/02/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%B9%E5%B9%95%E7%9A%84%E5%BC%80%E5%8F%91/\" target=\"_blank\" rel=\"external\">记一次弹幕的开发</a><br>3、<a href=\"http://blog.csdn.net/zxq614/article/details/52622792\" target=\"_blank\" rel=\"external\">图文弹幕的实现</a><br>4、<a href=\"https://github.com/Bilibili/drawee-text-view\" target=\"_blank\" rel=\"external\">Simple drawee spannable text view based on Fresco</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/Bilibili/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">DanmakuFlameMaster</a>(以下简称DFM)是哔哩哔哩开源的Android弹幕解析绘制引擎项目。<code>DFM</code>使用多种方式(View/SurfaceView/TextureView)实现高效绘制，支持自定义字体，支持多种弹幕参数设置等</p>\n<h1 id=\"一、配置\"><a href=\"#一、配置\" class=\"headerlink\" title=\"一、配置\"></a>一、配置</h1><p>Gradle</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">    jcenter()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.ctiao:DanmakuFlameMaster:0.4.9'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在布局中应用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">master.flame.danmaku.ui.widget.DanmakuView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/sv_danmaku\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"二、基础用法\"><a href=\"#二、基础用法\" class=\"headerlink\" title=\"二、基础用法\"></a>二、基础用法</h1><h2 id=\"1、弹幕播放\"><a href=\"#1、弹幕播放\" class=\"headerlink\" title=\"1、弹幕播放\"></a>1、弹幕播放</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Activity onCreate 中初始化弹幕的配置</span></div><div class=\"line\"><span class=\"keyword\">final</span> DanmakuView svDanmaku = (DanmakuView) findViewById(R.id.sv_danmaku);</div><div class=\"line\"></div><div class=\"line\">HashMap&lt;Integer, Integer&gt; maxLinesPair = <span class=\"keyword\">new</span> HashMap&lt;&gt;(); <span class=\"comment\">// 最大行数</span></div><div class=\"line\">maxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">HashMap&lt;Integer, Boolean&gt; overlappingEnablePair = <span class=\"keyword\">new</span> HashMap&lt;&gt;(); <span class=\"comment\">// 防止弹幕重叠</span></div><div class=\"line\">overlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_RL, <span class=\"keyword\">true</span>);</div><div class=\"line\">overlappingEnablePair.put(BaseDanmaku.TYPE_FIX_TOP, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">DanmakuContext mDanmakuContext = DanmakuContext.create();   <span class=\"comment\">// 创建弹幕所需的上下文信息</span></div><div class=\"line\">mDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, <span class=\"number\">3</span>) <span class=\"comment\">// 弹幕样式</span></div><div class=\"line\">        .setDuplicateMergingEnabled(<span class=\"keyword\">true</span>)    <span class=\"comment\">// 合并重复弹幕</span></div><div class=\"line\">        .setScrollSpeedFactor(<span class=\"number\">1.5f</span>)          <span class=\"comment\">// 滚动弹幕速度系数</span></div><div class=\"line\">        .setScaleTextSize(<span class=\"number\">0.8f</span>)              <span class=\"comment\">// 弹幕文字大小</span></div><div class=\"line\">        .setCacheStuffer(<span class=\"keyword\">new</span> SpannedCacheStuffer(), mCacheStufferAdapter) <span class=\"comment\">// 缓存绘制</span></div><div class=\"line\">        .setMaximumLines(maxLinesPair)       <span class=\"comment\">// 弹幕最大行数</span></div><div class=\"line\">        .preventOverlapping(overlappingEnablePair); <span class=\"comment\">// 防止弹幕重叠</span></div><div class=\"line\"></div><div class=\"line\">BaseDanmakuParser mParser = createParser(<span class=\"keyword\">this</span>.getResources().openRawResource(R.raw.comments)); <span class=\"comment\">// 创建弹幕解析器</span></div><div class=\"line\"><span class=\"comment\">// 设置弹幕播放的状态回调</span></div><div class=\"line\">svDanmaku.setCallback(<span class=\"keyword\">new</span> DrawHandler.Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepared</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 弹幕准备完成</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"prepared\"</span>);</div><div class=\"line\">        svDanmaku.start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateTimer</span><span class=\"params\">(DanmakuTimer timer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 弹幕播放时间</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"updateTimer : timer = \"</span> + timer.currMillisecond);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">danmakuShown</span><span class=\"params\">(BaseDanmaku danmaku)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 播放新的一条弹幕</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"danmakuShown : danmaku = \"</span> + danmaku.text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawingFinished</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 弹幕播放结束</span></div><div class=\"line\">        Log.d(<span class=\"string\">\"DFM\"</span> , <span class=\"string\">\"drawingFinished\"</span>);</div><div class=\"line\">    &#125;&#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置弹幕点击监听</span></div><div class=\"line\">    mMainBinding.svDanmaku.setOnDanmakuClickListener(<span class=\"keyword\">new</span> IDanmakuView.OnDanmakuClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onViewClick</span><span class=\"params\">(IDanmakuView view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 点击的弹幕</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDanmakuClick</span><span class=\"params\">(IDanmakus danmakus)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 弹幕</span></div><div class=\"line\">            Log.d(<span class=\"string\">\"DFM\"</span>, <span class=\"string\">\"onDanmakuClick danmakus size:\"</span> + danmakus.size());</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 播放准备</span></div><div class=\"line\">    svDanmaku.prepare(mParser, mDanmakuContext);</div><div class=\"line\">    <span class=\"comment\">// 显示播放FPS,一般用作调试时使用</span></div><div class=\"line\">    svDanmaku.showFPS(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">// 开启绘制缓存</span></div><div class=\"line\">    svDanmaku.enableDanmakuDrawingCache(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>创建弹幕解析器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 创建弹幕解析器</div><div class=\"line\"> * <span class=\"doctag\">@param</span> stream stream</div><div class=\"line\"> * <span class=\"doctag\">@return</span> BaseDanmakuParser</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> BaseDanmakuParser <span class=\"title\">createParser</span><span class=\"params\">(InputStream stream)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (stream == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseDanmakuParser() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> Danmakus <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// TAG_BILI XML数据格式的弹幕。TAG_ACFUN JSON数据格式的弹幕</span></div><div class=\"line\">    ILoader loader = DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        loader.load(stream);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalDataException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    BaseDanmakuParser parser = <span class=\"keyword\">new</span> BiliDanmukuParser();</div><div class=\"line\">    IDataSource&lt;?&gt; dataSource = loader.getDataSource();</div><div class=\"line\">    parser.load(dataSource);</div><div class=\"line\">    <span class=\"keyword\">return</span> parser;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278152/android/dfm_play.gif\" alt=\"img\"></p>\n<h2 id=\"2、发送弹幕\"><a href=\"#2、发送弹幕\" class=\"headerlink\" title=\"2、发送弹幕\"></a>2、发送弹幕</h2><p>常见的弹幕内容一般由以下部分组成<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> : 时间(弹幕出现时间) <span class=\"keyword\">long</span>类型的时间戳</div><div class=\"line\"><span class=\"number\">2</span> : 类型(<span class=\"number\">1</span>从左至右滚动弹幕 ； <span class=\"number\">6</span>从右至左滚动弹幕； <span class=\"number\">5</span>顶端固定弹幕；<span class=\"number\">4</span>底端固定弹幕；<span class=\"number\">7</span>高级弹幕；<span class=\"number\">8</span>脚本弹幕)</div><div class=\"line\"><span class=\"number\">3</span> : 字号</div><div class=\"line\"><span class=\"number\">4</span> : 颜色</div><div class=\"line\"><span class=\"number\">5</span> : 弹幕池id</div><div class=\"line\"><span class=\"number\">6</span> : 用户hash</div><div class=\"line\"><span class=\"number\">7</span> : 弹幕id</div></pre></td></tr></table></figure></p>\n<p>发送弹幕处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">BaseDanmaku baseDanmaku = mDanmakuContext.mDanmakuFactory.createDanmaku(BaseDanmaku.TYPE_FIX_BOTTOM); <span class=\"comment\">// 通过DanmakuFactory来创建弹幕</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 弹幕内容信息</span></div><div class=\"line\">baseDanmaku.text = <span class=\"string\">\"简单的一条弹幕\"</span> + System.nanoTime(); <span class=\"comment\">// 文本内容</span></div><div class=\"line\">baseDanmaku.textSize = <span class=\"number\">25f</span> * (mParser.getDisplayer().getDensity() - <span class=\"number\">0.6f</span>); <span class=\"comment\">// 字体大小</span></div><div class=\"line\">baseDanmaku.textColor = Color.RED;         <span class=\"comment\">// 字体颜色</span></div><div class=\"line\">baseDanmaku.textShadowColor = Color.WHITE; <span class=\"comment\">// 描边颜色</span></div><div class=\"line\">baseDanmaku.borderColor = Color.RED;       <span class=\"comment\">// 弹幕边框颜色</span></div><div class=\"line\">baseDanmaku.padding = <span class=\"number\">5</span>;                   <span class=\"comment\">// 内边距</span></div><div class=\"line\">baseDanmaku.priority = <span class=\"number\">0</span>;                  <span class=\"comment\">// 弹幕优先级,0为低优先级</span></div><div class=\"line\">baseDanmaku.isLive = <span class=\"keyword\">false</span>;                <span class=\"comment\">// 是否是直播弹幕</span></div><div class=\"line\">baseDanmaku.underlineColor = <span class=\"number\">0</span>;            <span class=\"comment\">// 0表示无下划线</span></div><div class=\"line\"><span class=\"comment\">// baseDanmaku.lines = new String[]&#123;\"两行弹幕第1行弹幕\" , \"两行弹幕第2行弹幕\"&#125;;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发送时的时间由弹幕播放时间来确定</span></div><div class=\"line\">baseDanmaku.setTime(mMainBinding.svDanmaku.getCurrentTime());<span class=\"comment\">// 弹幕出现的时间</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发送弹幕，根据业务内容是否执行弹幕上传操作 TODO</span></div><div class=\"line\">mMainBinding.svDanmaku.addDanmaku(baseDanmaku);</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1474278810/android/dfm_add.gif\" alt=\"img\"></p>\n<h2 id=\"3-弹幕状态操作\"><a href=\"#3-弹幕状态操作\" class=\"headerlink\" title=\"3. 弹幕状态操作\"></a>3. 弹幕状态操作</h2><p>（1）. 隐藏<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.hide();</div></pre></td></tr></table></figure></p>\n<p>（2）. 显示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.show();</div></pre></td></tr></table></figure></p>\n<p>（3）. 暂停<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.pause();</div></pre></td></tr></table></figure></p>\n<p>（4）. 恢复继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.onResume();</div></pre></td></tr></table></figure></p>\n<p>（2）. 跳转<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mMainBinding.svDanmaku.seekTo(<span class=\"number\">0</span>);   <span class=\"comment\">// 跳转到起始位置</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"4-弹幕周期管理及资源释放\"><a href=\"#4-弹幕周期管理及资源释放\" class=\"headerlink\" title=\"4. 弹幕周期管理及资源释放\"></a>4. 弹幕周期管理及资源释放</h2><p>弹幕需要与Activity的生命周期配合来处理。防止未及时释放资源，造成Activity的内存问题。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span> &amp;&amp; mDanmakuView.isPrepared()) &#123;</div><div class=\"line\">        mDanmakuView.pause();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span> &amp;&amp; mDanmakuView.isPrepared() &amp;&amp; mDanmakuView.isPaused()) &#123;</div><div class=\"line\">        mDanmakuView.resume();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 及时释放弹幕资源</span></div><div class=\"line\">        mDanmakuView.release();</div><div class=\"line\">        mDanmakuView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onBackPressed();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDanmakuView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 及时释放弹幕资源</span></div><div class=\"line\">        mDanmakuView.release();</div><div class=\"line\">        mDanmakuView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"二、高级弹幕\"><a href=\"#二、高级弹幕\" class=\"headerlink\" title=\"二、高级弹幕\"></a>二、高级弹幕</h1><h2 id=\"1-背景绘制\"><a href=\"#1-背景绘制\" class=\"headerlink\" title=\"1. 背景绘制\"></a>1. 背景绘制</h2><p><a href=\"https://github.com/Bilibili/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">DFM</a>自定义SpannedCacheStuffer，drawBackground方法中实现背景绘制操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 绘制有背景的弹幕</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BackgroundCacheStuffer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpannedCacheStuffer</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(BaseDanmaku danmaku, TextPaint paint, <span class=\"keyword\">boolean</span> fromWorkerThread)</span> </span>&#123;</div><div class=\"line\">        danmaku.padding = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.measure(danmaku, paint, fromWorkerThread);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBackground</span><span class=\"params\">(BaseDanmaku danmaku, Canvas canvas, <span class=\"keyword\">float</span> left, <span class=\"keyword\">float</span> top)</span> </span>&#123;</div><div class=\"line\">        mPaint.setColor(<span class=\"number\">0xEE90A4AE</span>);   <span class=\"comment\">// 背景颜色</span></div><div class=\"line\">        RectF rectF = <span class=\"keyword\">new</span> RectF(left + <span class=\"number\">5</span>, top + <span class=\"number\">5</span>, left + danmaku.paintWidth - <span class=\"number\">5</span>, top + danmaku.paintHeight - <span class=\"number\">5</span>); <span class=\"comment\">// 圆角矩形</span></div><div class=\"line\">        canvas.drawRoundRect(rectF, <span class=\"number\">50</span> , <span class=\"number\">50</span> , mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawStroke</span><span class=\"params\">(BaseDanmaku danmaku, String lineText, Canvas canvas, <span class=\"keyword\">float</span> left, <span class=\"keyword\">float</span> top, Paint paint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 绘制背景时建议禁止绘制描边</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置DanmakuContext<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> DanmakuContext mDanmakuContext;</div><div class=\"line\">...</div><div class=\"line\">mDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, <span class=\"number\">3</span>) <span class=\"comment\">// 弹幕样式</span></div><div class=\"line\">        .setDuplicateMergingEnabled(<span class=\"keyword\">true</span>)    <span class=\"comment\">// 合并重复弹幕</span></div><div class=\"line\">        .setScrollSpeedFactor(<span class=\"number\">1.5f</span>)          <span class=\"comment\">// 滚动弹幕速度系数</span></div><div class=\"line\">        .setScaleTextSize(<span class=\"number\">0.8f</span>)              <span class=\"comment\">// 弹幕文字大小</span></div><div class=\"line\">        .setCacheStuffer(<span class=\"keyword\">new</span> BackgroundCacheStuffer(), mCacheStufferAdapter) <span class=\"comment\">// 缓存绘制</span></div><div class=\"line\">        ...</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_521/v1474442790/android/danmaku_bg.png\" alt=\"img\"></p>\n<h2 id=\"2-自定义解析器\"><a href=\"#2-自定义解析器\" class=\"headerlink\" title=\"2. 自定义解析器\"></a>2. 自定义解析器</h2><p><a href=\"https://github.com/Bilibili/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">DFM</a>内置两种解析器<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/d4abc40bcaa8cc6786c1dff4ca1694dd626955b5/Sample/src/main/java/com/sample/BiliDanmukuParser.java\" target=\"_blank\" rel=\"external\">BiliDanmukuParser</a>。<code>BiliDanmukuParser</code>使用XML数据格式的弹幕，是BiliBili标准的弹幕格式。<code>AcFunDanmakuParser</code>使用JSON数据格式的弹幕，适用于解析Acfun标准的弹幕。除了使用这两种弹幕格式以外，还可以根据具体弹幕内容来自定义弹幕解析器。如有以下内容Json格式的弹幕，那么如何来处理这种数据呢，此时就需要自定义实现弹幕数据的解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&#123;</div><div class=\"line\">    <span class=\"string\">\"content\"</span>:   <span class=\"string\">\"弹幕内容\"</span> ,      <span class=\"comment\">// 弹幕显示的内容</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span> :     <span class=\"number\">23.826000213623</span>, <span class=\"comment\">// 弹幕出现的时间</span></div><div class=\"line\">    <span class=\"string\">\"type\"</span>:       <span class=\"number\">6</span>      ,        <span class=\"comment\">// 弹幕类型（参考danmaku中弹幕类型）</span></div><div class=\"line\">    <span class=\"string\">\"fontsize\"</span>:   <span class=\"number\">12</span>     ,        <span class=\"comment\">// 弹幕显示的字体大小</span></div><div class=\"line\">    <span class=\"string\">\"fontcolor\"</span>:  <span class=\"number\">16777215</span>,       <span class=\"comment\">// 弹幕字体颜色</span></div><div class=\"line\">    <span class=\"string\">\"userid\"</span>:     <span class=\"number\">6</span>,              <span class=\"comment\">// 用户hash</span></div><div class=\"line\">    <span class=\"string\">\"username\"</span>:   <span class=\"string\">\"alexwan\"</span>,      <span class=\"comment\">// 用户名称</span></div><div class=\"line\">    <span class=\"string\">\"avatar\"</span>:     <span class=\"string\">\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467081842/android/3397490934332211.jpg\"</span>,</div><div class=\"line\">    <span class=\"string\">\"danmakuid\"</span>:  <span class=\"number\">90</span>              <span class=\"comment\">// 弹幕id</span></div><div class=\"line\">&#125;, </div><div class=\"line\">...</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>（1）定义弹幕JavaBean<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DanmakuData</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String content;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> time;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> fontSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> fontColor;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> userId;</div><div class=\"line\">    <span class=\"keyword\">private</span> String userName;</div><div class=\"line\">    <span class=\"keyword\">private</span> String avatar;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> danmakuId;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>（2）实现<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/IDataSource.java\" target=\"_blank\" rel=\"external\">IDataSource</a>，定义弹幕数据源（参考<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/android/JSONSource.java\" target=\"_blank\" rel=\"external\">JSONSource</a>），加载指定数据源的弹幕数据。在<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java\" target=\"_blank\" rel=\"external\">ILoader</a>子类中初始化。<br><figure class=\"highlight java\"><figcaption><span>DanmakuSource.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DanmakuSource</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDataSource</span>&lt;<span class=\"title\">String</span>&gt; </span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"title\">private</span> <span class=\"title\">String</span> <span class=\"title\">mJson</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> InputStream mInput;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> JSONException</span>&#123;...&#125;                      <span class=\"comment\">// 指定json字符串</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> JSONException</span>&#123;...&#125;                   <span class=\"comment\">// 指定json数据流</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(URL url)</span> <span class=\"keyword\">throws</span> JSONException, IOException</span>&#123;...&#125;             <span class=\"comment\">// 指定URL源json</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> FileNotFoundException, JSONException</span>&#123;...&#125; <span class=\"comment\">// 指定file源json</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DanmakuSource</span><span class=\"params\">(Uri uri)</span> <span class=\"keyword\">throws</span> IOException, JSONException</span>&#123;...&#125;             <span class=\"comment\">// 指定Uri源json</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> JSONException </span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> JSONException &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!TextUtils.isEmpty(json)) &#123;</div><div class=\"line\">        <span class=\"comment\">// 初始化json</span></div><div class=\"line\">        mJson = json;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">data</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mJson;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>（3）实现<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/ILoader.java\" target=\"_blank\" rel=\"external\">ILoader</a>，执行<code>IDataSource</code>的初始化管理操作。XML格式弹幕直接使用<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/BiliDanmakuLoader.java\" target=\"_blank\" rel=\"external\">BiliDanmakuLoader</a>加载，JSON格式弹幕可以使用<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/loader/android/AcFunDanmakuLoader.java\" target=\"_blank\" rel=\"external\">AcFunDanmakuLoader</a>用<code>JSONSource</code>来加载弹幕数据。也可以自定义实现弹幕加载方式。<br><figure class=\"highlight java\"><figcaption><span>SimpleDanmakuLoader.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDanmakuLoader</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILoader</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SimpleDanmakuLoader</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SimpleDanmakuLoader instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> IDataSource&lt;String&gt; mDataSource;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">//  这里使用单例保证加载器只会被实例化一次</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoader <span class=\"title\">instance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (SimpleDanmakuLoader.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> SimpleDanmakuLoader();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IDataSource&lt;String&gt; <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mDataSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 加载Uri类型弹幕数据</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String uri)</span> <span class=\"keyword\">throws</span> IllegalDataException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             mDataSource = <span class=\"keyword\">new</span> DanmakuSource(UriUtil.parseUriOrNull(uri));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalDataException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 加载流数据弹幕</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> IllegalDataException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDataSource = <span class=\"keyword\">new</span> DanmakuSource(in);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalDataException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><code>SimpleDanmakuLoader</code>创建<code>DanmakuSource</code>来获取弹幕内容。在初始化弹幕数据解析器时，调用<code>load</code>方法获取弹幕数据。</p>\n<p>（4）定义弹幕解析类，继承<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/BaseDanmakuParser.java\" target=\"_blank\" rel=\"external\">BaseDanmakuParser</a>创建自定义的弹幕解析类。<br><figure class=\"highlight java\"><figcaption><span>SimpleDanmakuParser.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDanmakuParser</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDanmakuParser</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = SimpleDanmakuParser.class.getSimpleName();</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> IDanmakus <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(mDataSource != <span class=\"keyword\">null</span> &amp;&amp; mDataSource <span class=\"keyword\">instanceof</span> DanmakuSource)&#123;</div><div class=\"line\">            DanmakuSource source = (DanmakuSource) mDataSource;</div><div class=\"line\">            <span class=\"keyword\">return</span> doParse(source.data());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Danmakus <span class=\"title\">doParse</span><span class=\"params\">(String json)</span></span>&#123;</div><div class=\"line\">        Danmakus danmakus = <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">        <span class=\"keyword\">if</span>(TextUtils.isEmpty(json))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> danmakus;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 使用Gson解析弹幕json数据</span></div><div class=\"line\">        Type type = <span class=\"keyword\">new</span> TypeToken&lt;List&lt;DanmakuData&gt;&gt;()&#123;&#125;.getType();</div><div class=\"line\">        List&lt;DanmakuData&gt; list = <span class=\"keyword\">new</span> Gson().fromJson(json , type);</div><div class=\"line\">        <span class=\"keyword\">int</span> size = list.size();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; size; i ++)&#123;</div><div class=\"line\">            danmakus = parse(list.get(i) , danmakus , i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> danmakus;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 解析弹幕数据,组装BaseDanmaku</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data DanmakuData</div><div class=\"line\">     * <span class=\"doctag\">@param</span> danmakus Danmakus</div><div class=\"line\">     * <span class=\"doctag\">@param</span> index index</div><div class=\"line\">     * <span class=\"doctag\">@return</span> Danmakus</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Danmakus <span class=\"title\">parse</span><span class=\"params\">(DanmakuData data, Danmakus danmakus , <span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(danmakus == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            danmakus =  <span class=\"keyword\">new</span> Danmakus();</div><div class=\"line\">        &#125;</div><div class=\"line\">        BaseDanmaku item = mContext.mDanmakuFactory.createDanmaku(data.getType() , mContext);</div><div class=\"line\">        <span class=\"keyword\">if</span>(item != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            item.setTime((<span class=\"keyword\">long</span>) (data.getTime() * <span class=\"number\">1000</span>));</div><div class=\"line\">            item.textSize = data.getFontSize();</div><div class=\"line\">            item.textColor = data.getFontColor() | <span class=\"number\">0xFF000000</span> ;</div><div class=\"line\">            DanmakuUtils.fillText(item , data.getContent());</div><div class=\"line\">            item.index = index;</div><div class=\"line\">            item.setTimer(mTimer);</div><div class=\"line\">            danmakus.addItem(item);</div><div class=\"line\">            Log.i(TAG , <span class=\"string\">\"parse : time = \"</span> + data.getTime() * <span class=\"number\">1000</span> + <span class=\"string\">\" ; textSize = \"</span> + data.getFontSize()</div><div class=\"line\">                    + <span class=\"string\">\" ; textColor = \"</span> + item.textColor + <span class=\"string\">\" ; content = \"</span> + item.text);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> danmakus;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>（5）配置弹幕解析器</p>\n<figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">mParser = customParser();</div><div class=\"line\">mDanmakuView.prepare(mParser, mDanmakuContext);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> BaseDanmakuParser <span class=\"title\">customParser</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ILoader loader = SimpleDanmakuLoader.instance();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        loader.load(<span class=\"string\">\"http://...\"</span>);</div><div class=\"line\">        Log.i(TAG , <span class=\"string\">\"customParser : json = \"</span> + <span class=\"keyword\">new</span> Gson().toJson(list) );</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalDataException e) &#123;</div><div class=\"line\">        Log.e(TAG , <span class=\"string\">\"customParser : json = \"</span> + <span class=\"keyword\">new</span> Gson().toJson(list) + <span class=\"string\">\" ; error = \"</span> , e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    BaseDanmakuParser parser = <span class=\"keyword\">new</span> SimpleDanmakuParser();</div><div class=\"line\">    IDataSource&lt;?&gt; dataSource = loader.getDataSource();</div><div class=\"line\">    parser.load(dataSource);</div><div class=\"line\">    <span class=\"keyword\">return</span> parser;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_556/v1474625129/android/danmaku_parser.png\" alt=\"img\"></p>\n<h2 id=\"3-图文混排弹幕\"><a href=\"#3-图文混排弹幕\" class=\"headerlink\" title=\"3. 图文混排弹幕\"></a>3. 图文混排弹幕</h2><p>（1）单排图文<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// TODO</span></div></pre></td></tr></table></figure></p>\n<p>（2）双排图文</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// TODO</span></div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>1、<a href=\"https://github.com/Bilibili/DanmakuFlameMaster/blob/master/Sample/src/main/java/com/sample/MainActivity.java\" target=\"_blank\" rel=\"external\">Android开源弹幕引擎·烈焰弹幕使 ～ </a><br>2、<a href=\"http://wangpeiyuan.cn/2016/02/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%B9%E5%B9%95%E7%9A%84%E5%BC%80%E5%8F%91/\" target=\"_blank\" rel=\"external\">记一次弹幕的开发</a><br>3、<a href=\"http://blog.csdn.net/zxq614/article/details/52622792\" target=\"_blank\" rel=\"external\">图文弹幕的实现</a><br>4、<a href=\"https://github.com/Bilibili/drawee-text-view\" target=\"_blank\" rel=\"external\">Simple drawee spannable text view based on Fresco</a></p>\n"},{"title":"Android：Handler、Message、MessageQueue、Looper","date":"2016-06-28T01:46:10.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467081862/android/android_aosp_code.png","_content":"Android中引入消息事件驱动的机制。每个Thread通过ThreadLocal来绑定一个Looper对象，每个Looper对应一个消息队列MessageQueue，在创建一个Handler时，绑定当前线程的MessageQueue，来用来接收消息和分发处理消息。\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1467083788/android/android_message_mechanism.png)\n\nHandler、Message、MessageQueue、Message关系图\n\n## 一、Handler\n\n### 1.创建一个Handler\n```java\nHandler handler = new Handler();\n```\nHandler在创建时，都做了什么呢？\n{% codeblock lang:java Handler.java%}\n\npublic interface Callback {\n    public boolean handlerMessage(Message msg);\n}\n...\n/*---Handler构造器---*/\n/**\n* Handler默认构造器，关联当前线程的Looper对象，\n* 如果当前线程Looper没有初始化， Handler则抛出异常\n*/\npublic Handler(){\n    this(null , false);\n}\n\n/**\n* 关联当前线程Looper对象的Handler构造器，接受一个callback接口来处理Messages\n* 如果当前线程Looper没有初始化， Handler无法接收消息并抛出异常\n*/\npublic Handler(Callback callback){\n    this(callback ,false);\n}\n\n/**\n* 使用提供的Looper 替换默认Looper的\n*/\npublic Handler(Looper looper) {\n    this(looper, null, false);\n}\n\n/**\n* 使用提供的Looper ，接受一个callback接口来处理消息\n*/\npublic Handler(Looper looper, Callback callback) {\n    this(looper, callback, false);\n}\n...\n/**\n* 默认Handler构造 最终会调用这个方法来初始化Handler对象\n*/\npublic Handler(Callback callback  , boolean async){\n    if(FIND_POTENTIAL_LEAKS){\n        final Class<? extends Handler> klass = getClass();\n        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n            (klass.getModifiers() & Modifier.STATIC) == 0) {\n            Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                klass.getCanonicalName());\n        }\n\n        // 获取当前线程绑定的Looper\n        mLooper = Looper.myLooper();\n        if(mLooper == null){\n            throw new RuntimeException(\n                \"Can't create handler inside thread that has not called Looper.prepare()\");\n        }\n        // 绑定Looper的MessageQueue\n        mQueue = mLooper.mQueue;\n        mCallback = callback;\n        mAsynchronous = async;\n\t}\n\n}\n\n/**\n* 指定Looper，Callback 初始化Handler\n* Handler默认为同步调用\n*/\npublic Handler(Looper looper, Callback callback, boolean async) {\n    mLooper = looper;\n    mQueue = looper.mQueue;\n    mCallback = callback;\n    mAsynchronous = async;\n}\n...\n{% endcodeblock %}\n\n每个Handler都关联一个消息队列，消息队列被封装在Looper中，每个Looper又会关联一个Thread，也就是每个消息队列都会关联一个Thread。\n### 2.发送消息\nHandler就是一个消息处理器，将消息投递给消息队列，然后再由对应的线程从消息队列中取出消息。\nHandler发送消息分为postXXX和sendXXX方法，postXXX方法，接受Runnable对象作为参数\n{% codeblock lang:java Handler.java%}\n\n// post\n...\npublic final boolean post(Runnable r){\n    return sendMessageDelay(getPostMessage(r) , 0);\n}\n...\n// 通过getPostMessage方法把Runnable作为参数分装为Message\nprivate static Message getPostMessage(Runnable r){\n    Message m = Message.obtain();\n    m.callback = r;\n    return m;\n}\n\n{% endcodeblock %}\n\nsendXXX方法用Message对象作为参数。\n发送Message的方法最后都调用sendMessageAtTime方法，\n\n{% codeblock lang:java Handler.java%}\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n    // 获得绑定的MessageQueue\n    MessageQueue queue = mQueue;\n    if (queue == null) {\n        RuntimeException e = new RuntimeException(\n                this + \" sendMessageAtTime() called with no mQueue\");\n        Log.w(\"Looper\", e.getMessage(), e);\n        return false;\n    }\n    return enqueueMessage(queue, msg, uptimeMillis);\n}\n...\nprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n    // 将Message target 与当前Handler对象绑定\n    msg.target = this;\n    if (mAsynchronous) {\n        msg.setAsynchronous(true);\n    }\n    // 调用MessageQueue的enqueueMessage方法，将消息加入消息队列中\n    return queue.enqueueMessage(msg, uptimeMillis);\n}\n{% endcodeblock %}\n\nHandler发送消息，通过在初始化时绑定的MessageQueue对象，将要发送的消息加入到当线程的唯一的MessageQueue队列中。\n那么Handler在哪里来处理从消息队列中发送出的消息呢？答案在Looper源码中\n\n## 二、Looper\nLooper 用来运行循环线程中消息队列，但是默认情况下Thread并没有关联的消息循环。Looper提供`prepare()`方法将一个Looper对象与Thread来进行关联。并调用`loop()`方法来开启消息队列的循环任务。比如下面是Looper与Thread关联的经典范例。\n{% codeblock lang:java Looper.java%}\nclass LooperThread extends Thread{\n    public Handler mHandler;\n    public void run(){\n        // init looper here\n        Looper.prepare();\n        mHandler = new Handler(){\n            public void handleMessage(Message msg) {\n                // 处理接收到的消息\n            }\n        };\n         // start loop message queue here actually\n         Looper.loop();\n    }\n}\n... \n{% endcodeblock %}\n\nLooper调用`prepare()`将当前线程与Looper对象进行关联\n\n```java\n/*\n* 构造方法为private ， 不能直接通过构造方法直接初始化\n* 初始化MessageQueue，与当前线程进行关联\n*/\nprivate Looper(boolean quitAllowed) {\n    mQueue = new MessageQueue(quitAllowed);\n    mThread = Thread.currentThread();\n}\n\n/**\n* 初始化当前线程为Looper\n*/\npublic static void prepare() {\n    prepare(true);\n}\n\n// 实际调用\nprivate static void prepare(boolean quitAllowed){\n    if (sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\n    }\n    sThreadLocal.set(new Looper(quitAllowed));\n}\n\n\n```\nLooper在初始化时，先通过ThreadLocal获取当前线程关联的Looper对象，判断是否Thread已经关联过Looper，如果已经关联，抛出异常。如果未关联，在将实例化一个新的Looper实例，并保存到ThreadLocal中\n在实例化Looper中，创建MessageQueue对象，关联当前线程。\n### 1.ThreadLocal\n什么是ThreadLocal，ThreadLocal是一个关于创建线程局部变量的类。使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。\n- 实现单个线程单例以及当个线程上下文信息存储\n- 实现线程安全，非线程安全的对象使用ThreadLocal之后变为线程安全。因为每个线程都对应一个实例。\n- 承载一些线程相关的数据，避免在方法中来回传递参数\n- ThreadLocal不会产生内存泄露，ThreadLocal选做Key时，是ThreadLocal实例的弱引用\n\n```java \n\n// a simple threadlocal sample\n\nThread t = new Thread{\n    ThreadLocal<String> mStringThreadLocal = new ThreadLocal<String>(){\n        public void run(){\n            super.run();\n            mStringThreadLocal.set(\"alexwan\");\n            mStringThreadLocal.get();\n        }\n    }\n}\n...\nt.start();\n\n```\nThreadLocal的`set`方法把当前线程作为key，把需要存储的变量作为值存储在ThreadLocalMap中\n{% codeblock lang:java ThreadLocal %}\npublic class ThreadLocal {\n    public ThreadLocal(){}\n    ...\n    public void set(T value){\n        // get current thread\n        Thread t = Thread.currentThread();\n        // get thread local map values;\n        ThreadLocalMap map = getMap(t);\n        if( map != null ){\n            map.set(this , value);\n        } else {\n            // create local values map\n            createMap(t , value);\n         }\n    }\n    ...\n    ThreadLocalMap getMap(Thread t){\n        return t.threadLocals;\n    }\n    ...\n}\n{% endcodeblock %}\n\nLooper 本地维护一个ThreadLocal对象，保证当前线程中Looper对象的唯一性，\n\n{% codeblock lang:java Looper%}\nstatic final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();\n{% endcodeblock %}\n\n### 2.循环消息队列\n执行Looper.prepare()之后，可以在外部通过调用Looper.myLooper()获取当前线程关联的Looper对象。\n```java\npublic static Looper myLooper(){\n    return sThreadLocal.get();\n}\n```\nLooper初始化后，调用方法`loop()`开始执行循环消息的任务\n\n{% codeblock lang:java Looper %}\n\n/**\n* 执行循环消息任务，调用quit()方法结束循环\n*/\npublic static void loop() {\n    // 获取当前线程关联的Looper对象  \n    final Looper me = myLooper();\n    if (me == null) {\n        throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n    }\n    // Looper实例化时创建的MessageQueue对象\n    final MessageQueue queue = me.mQueue;\n\n    // Make sure the identity of this thread is that of the local process,\n    // and keep track of what that identity token actually is.\n    Binder.clearCallingIdentity();\n    final long ident = Binder.clearCallingIdentity();\n\n    for (;;) {\n        // 无限循环消息队列，调用MessageQueue next()方法取出消息\n        Message msg = queue.next(); // 可能会阻塞\n        if (msg == null) {\n            // No message indicates that the message queue is quitting.\n            return;\n        }\n\n        // This must be in a local variable, in case a UI event sets the logger\n        Printer logging = me.mLogging;\n        if (logging != null) {\n            logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                    msg.callback + \": \" + msg.what);\n        }\n        // 这里的target对象即是Handler，这里调用的Handler dispatchMessage()方法来处理\n        // 从消息队列中取出的Message\n        msg.target.dispatchMessage(msg);\n\n        if (logging != null) {\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n        }\n\n        // Make sure that during the course of dispatching the\n        // identity of the thread wasn't corrupted.\n        final long newIdent = Binder.clearCallingIdentity();\n        if (ident != newIdent) {\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\n                    + Long.toHexString(ident) + \" to 0x\"\n                    + Long.toHexString(newIdent) + \" while dispatching to \"\n                    + msg.target.getClass().getName() + \" \"\n                    + msg.callback + \" what=\" + msg.what);\n        }\n\n        msg.recycleUnchecked();\n    }\n}\n\n{% endcodeblock %}\n\nLooper获取当前线程关联的Looper对象，通过Looper对象拿到Looper创建的MessageQueue消息队列，对消息队列开启无限循环。从MessageQueue中取消息，如果队列无消息，则等待新的消息。取到消息时，则由Masssge对象绑定的target来分发处理消息。在Handler分析的中Message的target关联就是发送消息的Handler对象。调用Handler的`dispatchMessage `方法让Handler处理Message\n\n{% codeblock lang:java Handler %}\n/**\n* Handle system messages here.\n*/\npublic void dispatchMessage(Message msg) {\n    if (msg.callback != null) {\n        handleCallback(msg);\n    } else {\n        if (mCallback != null) {\n            if (mCallback.handleMessage(msg)) {\n                return;\n            }\n        }\n        handleMessage(msg);\n    }\n}\n{% endcodeblock %}\n\ndispatchMessage 只是一个分发的方法，如果callback不为空，表示是Handler是调用`postxxx`方法发送的消息，callback实际为Runnable对象，此时调用`handleCallback`方法，则执行callback的run方法。否则判断mCallback是否为空，mCallback是在创建Handler时传递的Callbacl接口对象。如果mCallback接口对象也为空，则具体实现由handler的方法`handleMessage`实现\n\n```java\nprivate static void handleCallback(Message message) {\n    message.callback.run();\n}\n...\n/**\n* 子类具体实现\n*/\npublic void handleMessage(Message msg) {\n}\n\n```\n\n## 三、主线程MainThread\n\nAndroid的程序入口为ActivityThread的main方法，而主线程的Looper也是在这里初始化\n\n{% codeblock lang:java ActivityThread %}\n\npublic static void main(String[] args){\n    ...\n    // Make sure TrustedCertificateStore looks in the right place for CA certificates\n    final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n    TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n    Process.setArgV0(\"<pre-initialized>\");\n    // 初始化主线程的Looper\n    Looper.prepareMainLooper();\n\n    ActivityThread thread = new ActivityThread();\n    ...\n\n    // End of event ActivityThreadMain.\n    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n    // 开启消息循环\n    Looper.loop();\n    ...\n}\n...\n{% endcodeblock %}\n\n主线程的消息队列在AcitivityThread的main中，调用Looper的静态方法prepareMainLooper()来创建，最后调用looper来启动消息循环。\n在很多情况下，在线程中执行耗时任务，通过调用主线程Handler更新UI。\n\n```java\nHandler handler = new Handler(Looper.getMainLooper()){\n    @Override\n    public void handleMessage(Message msg) {\n        // 更新界面UI TODO\n    }\n};\n\nThread thread = new Thread(new Runnable() {\n    @Override\n    public void run() {       \n        // 处理耗时任务\n        Message msg = new Message();\n        // message 设置处理的结果\n        // 发送带有处理结果的消息\n        handler.sendMessage(msg);\n    }\n});\n\n```\n## 四、总结\n\nAndroid的消息事件机制基本的流程：线程关联有且唯一的Looper对象，Looper对象中维护一个消息队列MessageQueue对象。通过Handler来发送或处理消息Message或Runnable的属性的Message，加入到队列中。Looper对象开启无限的消息循环，来取队列中Message，调用发送消息的Handler的消息分发方法，由开发者来具体处理业务或UI界面的操作。","source":"_posts/Android：Handler、Message、MessageQueue、Looper.md","raw":"title: Android：Handler、Message、MessageQueue、Looper\ndate: 2016-06-28 09:46:10\ntags: android-aosp\ncategories: android-aosp\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1467081862/android/android_aosp_code.png\n---\nAndroid中引入消息事件驱动的机制。每个Thread通过ThreadLocal来绑定一个Looper对象，每个Looper对应一个消息队列MessageQueue，在创建一个Handler时，绑定当前线程的MessageQueue，来用来接收消息和分发处理消息。\n\n![img](http://res.cloudinary.com/dmfz9aun7/image/upload/v1467083788/android/android_message_mechanism.png)\n\nHandler、Message、MessageQueue、Message关系图\n\n## 一、Handler\n\n### 1.创建一个Handler\n```java\nHandler handler = new Handler();\n```\nHandler在创建时，都做了什么呢？\n{% codeblock lang:java Handler.java%}\n\npublic interface Callback {\n    public boolean handlerMessage(Message msg);\n}\n...\n/*---Handler构造器---*/\n/**\n* Handler默认构造器，关联当前线程的Looper对象，\n* 如果当前线程Looper没有初始化， Handler则抛出异常\n*/\npublic Handler(){\n    this(null , false);\n}\n\n/**\n* 关联当前线程Looper对象的Handler构造器，接受一个callback接口来处理Messages\n* 如果当前线程Looper没有初始化， Handler无法接收消息并抛出异常\n*/\npublic Handler(Callback callback){\n    this(callback ,false);\n}\n\n/**\n* 使用提供的Looper 替换默认Looper的\n*/\npublic Handler(Looper looper) {\n    this(looper, null, false);\n}\n\n/**\n* 使用提供的Looper ，接受一个callback接口来处理消息\n*/\npublic Handler(Looper looper, Callback callback) {\n    this(looper, callback, false);\n}\n...\n/**\n* 默认Handler构造 最终会调用这个方法来初始化Handler对象\n*/\npublic Handler(Callback callback  , boolean async){\n    if(FIND_POTENTIAL_LEAKS){\n        final Class<? extends Handler> klass = getClass();\n        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n            (klass.getModifiers() & Modifier.STATIC) == 0) {\n            Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                klass.getCanonicalName());\n        }\n\n        // 获取当前线程绑定的Looper\n        mLooper = Looper.myLooper();\n        if(mLooper == null){\n            throw new RuntimeException(\n                \"Can't create handler inside thread that has not called Looper.prepare()\");\n        }\n        // 绑定Looper的MessageQueue\n        mQueue = mLooper.mQueue;\n        mCallback = callback;\n        mAsynchronous = async;\n\t}\n\n}\n\n/**\n* 指定Looper，Callback 初始化Handler\n* Handler默认为同步调用\n*/\npublic Handler(Looper looper, Callback callback, boolean async) {\n    mLooper = looper;\n    mQueue = looper.mQueue;\n    mCallback = callback;\n    mAsynchronous = async;\n}\n...\n{% endcodeblock %}\n\n每个Handler都关联一个消息队列，消息队列被封装在Looper中，每个Looper又会关联一个Thread，也就是每个消息队列都会关联一个Thread。\n### 2.发送消息\nHandler就是一个消息处理器，将消息投递给消息队列，然后再由对应的线程从消息队列中取出消息。\nHandler发送消息分为postXXX和sendXXX方法，postXXX方法，接受Runnable对象作为参数\n{% codeblock lang:java Handler.java%}\n\n// post\n...\npublic final boolean post(Runnable r){\n    return sendMessageDelay(getPostMessage(r) , 0);\n}\n...\n// 通过getPostMessage方法把Runnable作为参数分装为Message\nprivate static Message getPostMessage(Runnable r){\n    Message m = Message.obtain();\n    m.callback = r;\n    return m;\n}\n\n{% endcodeblock %}\n\nsendXXX方法用Message对象作为参数。\n发送Message的方法最后都调用sendMessageAtTime方法，\n\n{% codeblock lang:java Handler.java%}\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n    // 获得绑定的MessageQueue\n    MessageQueue queue = mQueue;\n    if (queue == null) {\n        RuntimeException e = new RuntimeException(\n                this + \" sendMessageAtTime() called with no mQueue\");\n        Log.w(\"Looper\", e.getMessage(), e);\n        return false;\n    }\n    return enqueueMessage(queue, msg, uptimeMillis);\n}\n...\nprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n    // 将Message target 与当前Handler对象绑定\n    msg.target = this;\n    if (mAsynchronous) {\n        msg.setAsynchronous(true);\n    }\n    // 调用MessageQueue的enqueueMessage方法，将消息加入消息队列中\n    return queue.enqueueMessage(msg, uptimeMillis);\n}\n{% endcodeblock %}\n\nHandler发送消息，通过在初始化时绑定的MessageQueue对象，将要发送的消息加入到当线程的唯一的MessageQueue队列中。\n那么Handler在哪里来处理从消息队列中发送出的消息呢？答案在Looper源码中\n\n## 二、Looper\nLooper 用来运行循环线程中消息队列，但是默认情况下Thread并没有关联的消息循环。Looper提供`prepare()`方法将一个Looper对象与Thread来进行关联。并调用`loop()`方法来开启消息队列的循环任务。比如下面是Looper与Thread关联的经典范例。\n{% codeblock lang:java Looper.java%}\nclass LooperThread extends Thread{\n    public Handler mHandler;\n    public void run(){\n        // init looper here\n        Looper.prepare();\n        mHandler = new Handler(){\n            public void handleMessage(Message msg) {\n                // 处理接收到的消息\n            }\n        };\n         // start loop message queue here actually\n         Looper.loop();\n    }\n}\n... \n{% endcodeblock %}\n\nLooper调用`prepare()`将当前线程与Looper对象进行关联\n\n```java\n/*\n* 构造方法为private ， 不能直接通过构造方法直接初始化\n* 初始化MessageQueue，与当前线程进行关联\n*/\nprivate Looper(boolean quitAllowed) {\n    mQueue = new MessageQueue(quitAllowed);\n    mThread = Thread.currentThread();\n}\n\n/**\n* 初始化当前线程为Looper\n*/\npublic static void prepare() {\n    prepare(true);\n}\n\n// 实际调用\nprivate static void prepare(boolean quitAllowed){\n    if (sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\n    }\n    sThreadLocal.set(new Looper(quitAllowed));\n}\n\n\n```\nLooper在初始化时，先通过ThreadLocal获取当前线程关联的Looper对象，判断是否Thread已经关联过Looper，如果已经关联，抛出异常。如果未关联，在将实例化一个新的Looper实例，并保存到ThreadLocal中\n在实例化Looper中，创建MessageQueue对象，关联当前线程。\n### 1.ThreadLocal\n什么是ThreadLocal，ThreadLocal是一个关于创建线程局部变量的类。使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。\n- 实现单个线程单例以及当个线程上下文信息存储\n- 实现线程安全，非线程安全的对象使用ThreadLocal之后变为线程安全。因为每个线程都对应一个实例。\n- 承载一些线程相关的数据，避免在方法中来回传递参数\n- ThreadLocal不会产生内存泄露，ThreadLocal选做Key时，是ThreadLocal实例的弱引用\n\n```java \n\n// a simple threadlocal sample\n\nThread t = new Thread{\n    ThreadLocal<String> mStringThreadLocal = new ThreadLocal<String>(){\n        public void run(){\n            super.run();\n            mStringThreadLocal.set(\"alexwan\");\n            mStringThreadLocal.get();\n        }\n    }\n}\n...\nt.start();\n\n```\nThreadLocal的`set`方法把当前线程作为key，把需要存储的变量作为值存储在ThreadLocalMap中\n{% codeblock lang:java ThreadLocal %}\npublic class ThreadLocal {\n    public ThreadLocal(){}\n    ...\n    public void set(T value){\n        // get current thread\n        Thread t = Thread.currentThread();\n        // get thread local map values;\n        ThreadLocalMap map = getMap(t);\n        if( map != null ){\n            map.set(this , value);\n        } else {\n            // create local values map\n            createMap(t , value);\n         }\n    }\n    ...\n    ThreadLocalMap getMap(Thread t){\n        return t.threadLocals;\n    }\n    ...\n}\n{% endcodeblock %}\n\nLooper 本地维护一个ThreadLocal对象，保证当前线程中Looper对象的唯一性，\n\n{% codeblock lang:java Looper%}\nstatic final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();\n{% endcodeblock %}\n\n### 2.循环消息队列\n执行Looper.prepare()之后，可以在外部通过调用Looper.myLooper()获取当前线程关联的Looper对象。\n```java\npublic static Looper myLooper(){\n    return sThreadLocal.get();\n}\n```\nLooper初始化后，调用方法`loop()`开始执行循环消息的任务\n\n{% codeblock lang:java Looper %}\n\n/**\n* 执行循环消息任务，调用quit()方法结束循环\n*/\npublic static void loop() {\n    // 获取当前线程关联的Looper对象  \n    final Looper me = myLooper();\n    if (me == null) {\n        throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n    }\n    // Looper实例化时创建的MessageQueue对象\n    final MessageQueue queue = me.mQueue;\n\n    // Make sure the identity of this thread is that of the local process,\n    // and keep track of what that identity token actually is.\n    Binder.clearCallingIdentity();\n    final long ident = Binder.clearCallingIdentity();\n\n    for (;;) {\n        // 无限循环消息队列，调用MessageQueue next()方法取出消息\n        Message msg = queue.next(); // 可能会阻塞\n        if (msg == null) {\n            // No message indicates that the message queue is quitting.\n            return;\n        }\n\n        // This must be in a local variable, in case a UI event sets the logger\n        Printer logging = me.mLogging;\n        if (logging != null) {\n            logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                    msg.callback + \": \" + msg.what);\n        }\n        // 这里的target对象即是Handler，这里调用的Handler dispatchMessage()方法来处理\n        // 从消息队列中取出的Message\n        msg.target.dispatchMessage(msg);\n\n        if (logging != null) {\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n        }\n\n        // Make sure that during the course of dispatching the\n        // identity of the thread wasn't corrupted.\n        final long newIdent = Binder.clearCallingIdentity();\n        if (ident != newIdent) {\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\n                    + Long.toHexString(ident) + \" to 0x\"\n                    + Long.toHexString(newIdent) + \" while dispatching to \"\n                    + msg.target.getClass().getName() + \" \"\n                    + msg.callback + \" what=\" + msg.what);\n        }\n\n        msg.recycleUnchecked();\n    }\n}\n\n{% endcodeblock %}\n\nLooper获取当前线程关联的Looper对象，通过Looper对象拿到Looper创建的MessageQueue消息队列，对消息队列开启无限循环。从MessageQueue中取消息，如果队列无消息，则等待新的消息。取到消息时，则由Masssge对象绑定的target来分发处理消息。在Handler分析的中Message的target关联就是发送消息的Handler对象。调用Handler的`dispatchMessage `方法让Handler处理Message\n\n{% codeblock lang:java Handler %}\n/**\n* Handle system messages here.\n*/\npublic void dispatchMessage(Message msg) {\n    if (msg.callback != null) {\n        handleCallback(msg);\n    } else {\n        if (mCallback != null) {\n            if (mCallback.handleMessage(msg)) {\n                return;\n            }\n        }\n        handleMessage(msg);\n    }\n}\n{% endcodeblock %}\n\ndispatchMessage 只是一个分发的方法，如果callback不为空，表示是Handler是调用`postxxx`方法发送的消息，callback实际为Runnable对象，此时调用`handleCallback`方法，则执行callback的run方法。否则判断mCallback是否为空，mCallback是在创建Handler时传递的Callbacl接口对象。如果mCallback接口对象也为空，则具体实现由handler的方法`handleMessage`实现\n\n```java\nprivate static void handleCallback(Message message) {\n    message.callback.run();\n}\n...\n/**\n* 子类具体实现\n*/\npublic void handleMessage(Message msg) {\n}\n\n```\n\n## 三、主线程MainThread\n\nAndroid的程序入口为ActivityThread的main方法，而主线程的Looper也是在这里初始化\n\n{% codeblock lang:java ActivityThread %}\n\npublic static void main(String[] args){\n    ...\n    // Make sure TrustedCertificateStore looks in the right place for CA certificates\n    final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n    TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n    Process.setArgV0(\"<pre-initialized>\");\n    // 初始化主线程的Looper\n    Looper.prepareMainLooper();\n\n    ActivityThread thread = new ActivityThread();\n    ...\n\n    // End of event ActivityThreadMain.\n    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n    // 开启消息循环\n    Looper.loop();\n    ...\n}\n...\n{% endcodeblock %}\n\n主线程的消息队列在AcitivityThread的main中，调用Looper的静态方法prepareMainLooper()来创建，最后调用looper来启动消息循环。\n在很多情况下，在线程中执行耗时任务，通过调用主线程Handler更新UI。\n\n```java\nHandler handler = new Handler(Looper.getMainLooper()){\n    @Override\n    public void handleMessage(Message msg) {\n        // 更新界面UI TODO\n    }\n};\n\nThread thread = new Thread(new Runnable() {\n    @Override\n    public void run() {       \n        // 处理耗时任务\n        Message msg = new Message();\n        // message 设置处理的结果\n        // 发送带有处理结果的消息\n        handler.sendMessage(msg);\n    }\n});\n\n```\n## 四、总结\n\nAndroid的消息事件机制基本的流程：线程关联有且唯一的Looper对象，Looper对象中维护一个消息队列MessageQueue对象。通过Handler来发送或处理消息Message或Runnable的属性的Message，加入到队列中。Looper对象开启无限的消息循环，来取队列中Message，调用发送消息的Handler的消息分发方法，由开发者来具体处理业务或UI界面的操作。","slug":"Android：Handler、Message、MessageQueue、Looper","published":1,"updated":"2016-07-18T14:47:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txq0004grm3z8ov3gac","content":"<p>Android中引入消息事件驱动的机制。每个Thread通过ThreadLocal来绑定一个Looper对象，每个Looper对应一个消息队列MessageQueue，在创建一个Handler时，绑定当前线程的MessageQueue，来用来接收消息和分发处理消息。</p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467083788/android/android_message_mechanism.png\" alt=\"img\"></p>\n<p>Handler、Message、MessageQueue、Message关系图</p>\n<h2 id=\"一、Handler\"><a href=\"#一、Handler\" class=\"headerlink\" title=\"一、Handler\"></a>一、Handler</h2><h3 id=\"1-创建一个Handler\"><a href=\"#1-创建一个Handler\" class=\"headerlink\" title=\"1.创建一个Handler\"></a>1.创建一个Handler</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler();</div></pre></td></tr></table></figure>\n<p>Handler在创建时，都做了什么呢？<br><figure class=\"highlight java\"><figcaption><span>Handler.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handlerMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/*---Handler构造器---*/</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Handler默认构造器，关联当前线程的Looper对象，</div><div class=\"line\">* 如果当前线程Looper没有初始化， Handler则抛出异常</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"keyword\">null</span> , <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 关联当前线程Looper对象的Handler构造器，接受一个callback接口来处理Messages</div><div class=\"line\">* 如果当前线程Looper没有初始化， Handler无法接收消息并抛出异常</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(callback ,<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 使用提供的Looper 替换默认Looper的</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(looper, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 使用提供的Looper ，接受一个callback接口来处理消息</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Looper looper, Callback callback)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(looper, callback, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 默认Handler构造 最终会调用这个方法来初始化Handler对象</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback  , <span class=\"keyword\">boolean</span> async)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(FIND_POTENTIAL_LEAKS)&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">        <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">            (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                klass.getCanonicalName());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取当前线程绑定的Looper</span></div><div class=\"line\">        mLooper = Looper.myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span>(mLooper == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 绑定Looper的MessageQueue</span></div><div class=\"line\">        mQueue = mLooper.mQueue;</div><div class=\"line\">        mCallback = callback;</div><div class=\"line\">        mAsynchronous = async;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 指定Looper，Callback 初始化Handler</div><div class=\"line\">* Handler默认为同步调用</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Looper looper, Callback callback, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">    mLooper = looper;</div><div class=\"line\">    mQueue = looper.mQueue;</div><div class=\"line\">    mCallback = callback;</div><div class=\"line\">    mAsynchronous = async;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>每个Handler都关联一个消息队列，消息队列被封装在Looper中，每个Looper又会关联一个Thread，也就是每个消息队列都会关联一个Thread。</p>\n<h3 id=\"2-发送消息\"><a href=\"#2-发送消息\" class=\"headerlink\" title=\"2.发送消息\"></a>2.发送消息</h3><p>Handler就是一个消息处理器，将消息投递给消息队列，然后再由对应的线程从消息队列中取出消息。<br>Handler发送消息分为postXXX和sendXXX方法，postXXX方法，接受Runnable对象作为参数<br><figure class=\"highlight java\"><figcaption><span>Handler.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// post</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">post</span><span class=\"params\">(Runnable r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sendMessageDelay(getPostMessage(r) , <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 通过getPostMessage方法把Runnable作为参数分装为Message</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Message <span class=\"title\">getPostMessage</span><span class=\"params\">(Runnable r)</span></span>&#123;</div><div class=\"line\">    Message m = Message.obtain();</div><div class=\"line\">    m.callback = r;</div><div class=\"line\">    <span class=\"keyword\">return</span> m;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>sendXXX方法用Message对象作为参数。<br>发送Message的方法最后都调用sendMessageAtTime方法，</p>\n<figure class=\"highlight java\"><figcaption><span>Handler.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获得绑定的MessageQueue</span></div><div class=\"line\">    MessageQueue queue = mQueue;</div><div class=\"line\">    <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">        Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 将Message target 与当前Handler对象绑定</span></div><div class=\"line\">    msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 调用MessageQueue的enqueueMessage方法，将消息加入消息队列中</span></div><div class=\"line\">    <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Handler发送消息，通过在初始化时绑定的MessageQueue对象，将要发送的消息加入到当线程的唯一的MessageQueue队列中。<br>那么Handler在哪里来处理从消息队列中发送出的消息呢？答案在Looper源码中</p>\n<h2 id=\"二、Looper\"><a href=\"#二、Looper\" class=\"headerlink\" title=\"二、Looper\"></a>二、Looper</h2><p>Looper 用来运行循环线程中消息队列，但是默认情况下Thread并没有关联的消息循环。Looper提供<code>prepare()</code>方法将一个Looper对象与Thread来进行关联。并调用<code>loop()</code>方法来开启消息队列的循环任务。比如下面是Looper与Thread关联的经典范例。<br><figure class=\"highlight java\"><figcaption><span>Looper.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LooperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> Handler mHandler;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// init looper here</span></div><div class=\"line\">        Looper.prepare();</div><div class=\"line\">        mHandler = <span class=\"keyword\">new</span> Handler()&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 处理接收到的消息</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">         <span class=\"comment\">// start loop message queue here actually</span></div><div class=\"line\">         Looper.loop();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">... </div></pre></td></tr></table></figure></p>\n<p>Looper调用<code>prepare()</code>将当前线程与Looper对象进行关联</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">* 构造方法为private ， 不能直接通过构造方法直接初始化</div><div class=\"line\">* 初始化MessageQueue，与当前线程进行关联</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">    mThread = Thread.currentThread();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 初始化当前线程为Looper</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实际调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Looper在初始化时，先通过ThreadLocal获取当前线程关联的Looper对象，判断是否Thread已经关联过Looper，如果已经关联，抛出异常。如果未关联，在将实例化一个新的Looper实例，并保存到ThreadLocal中<br>在实例化Looper中，创建MessageQueue对象，关联当前线程。</p>\n<h3 id=\"1-ThreadLocal\"><a href=\"#1-ThreadLocal\" class=\"headerlink\" title=\"1.ThreadLocal\"></a>1.ThreadLocal</h3><p>什么是ThreadLocal，ThreadLocal是一个关于创建线程局部变量的类。使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。</p>\n<ul>\n<li>实现单个线程单例以及当个线程上下文信息存储</li>\n<li>实现线程安全，非线程安全的对象使用ThreadLocal之后变为线程安全。因为每个线程都对应一个实例。</li>\n<li>承载一些线程相关的数据，避免在方法中来回传递参数</li>\n<li>ThreadLocal不会产生内存泄露，ThreadLocal选做Key时，是ThreadLocal实例的弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a simple threadlocal sample</span></div><div class=\"line\"></div><div class=\"line\">Thread t = <span class=\"keyword\">new</span> Thread&#123;</div><div class=\"line\">    ThreadLocal&lt;String&gt; mStringThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;String&gt;()&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.run();</div><div class=\"line\">            mStringThreadLocal.set(<span class=\"string\">\"alexwan\"</span>);</div><div class=\"line\">            mStringThreadLocal.get();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\">t.start();</div></pre></td></tr></table></figure>\n<p>ThreadLocal的<code>set</code>方法把当前线程作为key，把需要存储的变量作为值存储在ThreadLocalMap中<br><figure class=\"highlight java\"><figcaption><span>ThreadLocal</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadLocal</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// get current thread</span></div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        <span class=\"comment\">// get thread local map values;</span></div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span>( map != <span class=\"keyword\">null</span> )&#123;</div><div class=\"line\">            map.set(<span class=\"keyword\">this</span> , value);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// create local values map</span></div><div class=\"line\">            createMap(t , value);</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Looper 本地维护一个ThreadLocal对象，保证当前线程中Looper对象的唯一性，</p>\n<figure class=\"highlight java\"><figcaption><span>Looper</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;Looper&gt;();</div></pre></td></tr></table></figure>\n<h3 id=\"2-循环消息队列\"><a href=\"#2-循环消息队列\" class=\"headerlink\" title=\"2.循环消息队列\"></a>2.循环消息队列</h3><p>执行Looper.prepare()之后，可以在外部通过调用Looper.myLooper()获取当前线程关联的Looper对象。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Looper <span class=\"title\">myLooper</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sThreadLocal.get();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Looper初始化后，调用方法<code>loop()</code>开始执行循环消息的任务</p>\n<figure class=\"highlight java\"><figcaption><span>Looper</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 执行循环消息任务，调用quit()方法结束循环</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取当前线程关联的Looper对象  </span></div><div class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Looper实例化时创建的MessageQueue对象</span></div><div class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">    <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">    Binder.clearCallingIdentity();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">        <span class=\"comment\">// 无限循环消息队列，调用MessageQueue next()方法取出消息</span></div><div class=\"line\">        Message msg = queue.next(); <span class=\"comment\">// 可能会阻塞</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">        Printer logging = me.mLogging;</div><div class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                    msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 这里的target对象即是Handler，这里调用的Handler dispatchMessage()方法来处理</span></div><div class=\"line\">        <span class=\"comment\">// 从消息队列中取出的Message</span></div><div class=\"line\">        msg.target.dispatchMessage(msg);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">        <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">            Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                    + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                    + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                    + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                    + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        msg.recycleUnchecked();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>Looper获取当前线程关联的Looper对象，通过Looper对象拿到Looper创建的MessageQueue消息队列，对消息队列开启无限循环。从MessageQueue中取消息，如果队列无消息，则等待新的消息。取到消息时，则由Masssge对象绑定的target来分发处理消息。在Handler分析的中Message的target关联就是发送消息的Handler对象。调用Handler的<code>dispatchMessage</code>方法让Handler处理Message</p>\n<figure class=\"highlight java\"><figcaption><span>Handler</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Handle system messages here.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dispatchMessage 只是一个分发的方法，如果callback不为空，表示是Handler是调用<code>postxxx</code>方法发送的消息，callback实际为Runnable对象，此时调用<code>handleCallback</code>方法，则执行callback的run方法。否则判断mCallback是否为空，mCallback是在创建Handler时传递的Callbacl接口对象。如果mCallback接口对象也为空，则具体实现由handler的方法<code>handleMessage</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">    message.callback.run();</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 子类具体实现</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"三、主线程MainThread\"><a href=\"#三、主线程MainThread\" class=\"headerlink\" title=\"三、主线程MainThread\"></a>三、主线程MainThread</h2><p>Android的程序入口为ActivityThread的main方法，而主线程的Looper也是在这里初始化</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">    <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">    <span class=\"comment\">// 初始化主线程的Looper</span></div><div class=\"line\">    Looper.prepareMainLooper();</div><div class=\"line\"></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">    <span class=\"comment\">// 开启消息循环</span></div><div class=\"line\">    Looper.loop();</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>主线程的消息队列在AcitivityThread的main中，调用Looper的静态方法prepareMainLooper()来创建，最后调用looper来启动消息循环。<br>在很多情况下，在线程中执行耗时任务，通过调用主线程Handler更新UI。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper())&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 更新界面UI TODO</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;       </div><div class=\"line\">        <span class=\"comment\">// 处理耗时任务</span></div><div class=\"line\">        Message msg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">        <span class=\"comment\">// message 设置处理的结果</span></div><div class=\"line\">        <span class=\"comment\">// 发送带有处理结果的消息</span></div><div class=\"line\">        handler.sendMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>Android的消息事件机制基本的流程：线程关联有且唯一的Looper对象，Looper对象中维护一个消息队列MessageQueue对象。通过Handler来发送或处理消息Message或Runnable的属性的Message，加入到队列中。Looper对象开启无限的消息循环，来取队列中Message，调用发送消息的Handler的消息分发方法，由开发者来具体处理业务或UI界面的操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android中引入消息事件驱动的机制。每个Thread通过ThreadLocal来绑定一个Looper对象，每个Looper对应一个消息队列MessageQueue，在创建一个Handler时，绑定当前线程的MessageQueue，来用来接收消息和分发处理消息。</p>\n<p><img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467083788/android/android_message_mechanism.png\" alt=\"img\"></p>\n<p>Handler、Message、MessageQueue、Message关系图</p>\n<h2 id=\"一、Handler\"><a href=\"#一、Handler\" class=\"headerlink\" title=\"一、Handler\"></a>一、Handler</h2><h3 id=\"1-创建一个Handler\"><a href=\"#1-创建一个Handler\" class=\"headerlink\" title=\"1.创建一个Handler\"></a>1.创建一个Handler</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler();</div></pre></td></tr></table></figure>\n<p>Handler在创建时，都做了什么呢？<br><figure class=\"highlight java\"><figcaption><span>Handler.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handlerMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/*---Handler构造器---*/</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Handler默认构造器，关联当前线程的Looper对象，</div><div class=\"line\">* 如果当前线程Looper没有初始化， Handler则抛出异常</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"keyword\">null</span> , <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 关联当前线程Looper对象的Handler构造器，接受一个callback接口来处理Messages</div><div class=\"line\">* 如果当前线程Looper没有初始化， Handler无法接收消息并抛出异常</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(callback ,<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 使用提供的Looper 替换默认Looper的</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(looper, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 使用提供的Looper ，接受一个callback接口来处理消息</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Looper looper, Callback callback)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(looper, callback, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 默认Handler构造 最终会调用这个方法来初始化Handler对象</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback  , <span class=\"keyword\">boolean</span> async)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(FIND_POTENTIAL_LEAKS)&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">        <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">            (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                klass.getCanonicalName());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取当前线程绑定的Looper</span></div><div class=\"line\">        mLooper = Looper.myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span>(mLooper == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 绑定Looper的MessageQueue</span></div><div class=\"line\">        mQueue = mLooper.mQueue;</div><div class=\"line\">        mCallback = callback;</div><div class=\"line\">        mAsynchronous = async;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 指定Looper，Callback 初始化Handler</div><div class=\"line\">* Handler默认为同步调用</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Looper looper, Callback callback, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">    mLooper = looper;</div><div class=\"line\">    mQueue = looper.mQueue;</div><div class=\"line\">    mCallback = callback;</div><div class=\"line\">    mAsynchronous = async;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>每个Handler都关联一个消息队列，消息队列被封装在Looper中，每个Looper又会关联一个Thread，也就是每个消息队列都会关联一个Thread。</p>\n<h3 id=\"2-发送消息\"><a href=\"#2-发送消息\" class=\"headerlink\" title=\"2.发送消息\"></a>2.发送消息</h3><p>Handler就是一个消息处理器，将消息投递给消息队列，然后再由对应的线程从消息队列中取出消息。<br>Handler发送消息分为postXXX和sendXXX方法，postXXX方法，接受Runnable对象作为参数<br><figure class=\"highlight java\"><figcaption><span>Handler.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// post</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">post</span><span class=\"params\">(Runnable r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sendMessageDelay(getPostMessage(r) , <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 通过getPostMessage方法把Runnable作为参数分装为Message</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Message <span class=\"title\">getPostMessage</span><span class=\"params\">(Runnable r)</span></span>&#123;</div><div class=\"line\">    Message m = Message.obtain();</div><div class=\"line\">    m.callback = r;</div><div class=\"line\">    <span class=\"keyword\">return</span> m;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>sendXXX方法用Message对象作为参数。<br>发送Message的方法最后都调用sendMessageAtTime方法，</p>\n<figure class=\"highlight java\"><figcaption><span>Handler.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获得绑定的MessageQueue</span></div><div class=\"line\">    MessageQueue queue = mQueue;</div><div class=\"line\">    <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">        Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 将Message target 与当前Handler对象绑定</span></div><div class=\"line\">    msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 调用MessageQueue的enqueueMessage方法，将消息加入消息队列中</span></div><div class=\"line\">    <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Handler发送消息，通过在初始化时绑定的MessageQueue对象，将要发送的消息加入到当线程的唯一的MessageQueue队列中。<br>那么Handler在哪里来处理从消息队列中发送出的消息呢？答案在Looper源码中</p>\n<h2 id=\"二、Looper\"><a href=\"#二、Looper\" class=\"headerlink\" title=\"二、Looper\"></a>二、Looper</h2><p>Looper 用来运行循环线程中消息队列，但是默认情况下Thread并没有关联的消息循环。Looper提供<code>prepare()</code>方法将一个Looper对象与Thread来进行关联。并调用<code>loop()</code>方法来开启消息队列的循环任务。比如下面是Looper与Thread关联的经典范例。<br><figure class=\"highlight java\"><figcaption><span>Looper.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LooperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> Handler mHandler;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// init looper here</span></div><div class=\"line\">        Looper.prepare();</div><div class=\"line\">        mHandler = <span class=\"keyword\">new</span> Handler()&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 处理接收到的消息</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">         <span class=\"comment\">// start loop message queue here actually</span></div><div class=\"line\">         Looper.loop();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">... </div></pre></td></tr></table></figure></p>\n<p>Looper调用<code>prepare()</code>将当前线程与Looper对象进行关联</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">* 构造方法为private ， 不能直接通过构造方法直接初始化</div><div class=\"line\">* 初始化MessageQueue，与当前线程进行关联</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">    mThread = Thread.currentThread();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 初始化当前线程为Looper</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实际调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Looper在初始化时，先通过ThreadLocal获取当前线程关联的Looper对象，判断是否Thread已经关联过Looper，如果已经关联，抛出异常。如果未关联，在将实例化一个新的Looper实例，并保存到ThreadLocal中<br>在实例化Looper中，创建MessageQueue对象，关联当前线程。</p>\n<h3 id=\"1-ThreadLocal\"><a href=\"#1-ThreadLocal\" class=\"headerlink\" title=\"1.ThreadLocal\"></a>1.ThreadLocal</h3><p>什么是ThreadLocal，ThreadLocal是一个关于创建线程局部变量的类。使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。</p>\n<ul>\n<li>实现单个线程单例以及当个线程上下文信息存储</li>\n<li>实现线程安全，非线程安全的对象使用ThreadLocal之后变为线程安全。因为每个线程都对应一个实例。</li>\n<li>承载一些线程相关的数据，避免在方法中来回传递参数</li>\n<li>ThreadLocal不会产生内存泄露，ThreadLocal选做Key时，是ThreadLocal实例的弱引用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a simple threadlocal sample</span></div><div class=\"line\"></div><div class=\"line\">Thread t = <span class=\"keyword\">new</span> Thread&#123;</div><div class=\"line\">    ThreadLocal&lt;String&gt; mStringThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;String&gt;()&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.run();</div><div class=\"line\">            mStringThreadLocal.set(<span class=\"string\">\"alexwan\"</span>);</div><div class=\"line\">            mStringThreadLocal.get();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\">t.start();</div></pre></td></tr></table></figure>\n<p>ThreadLocal的<code>set</code>方法把当前线程作为key，把需要存储的变量作为值存储在ThreadLocalMap中<br><figure class=\"highlight java\"><figcaption><span>ThreadLocal</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadLocal</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// get current thread</span></div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        <span class=\"comment\">// get thread local map values;</span></div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span>( map != <span class=\"keyword\">null</span> )&#123;</div><div class=\"line\">            map.set(<span class=\"keyword\">this</span> , value);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// create local values map</span></div><div class=\"line\">            createMap(t , value);</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Looper 本地维护一个ThreadLocal对象，保证当前线程中Looper对象的唯一性，</p>\n<figure class=\"highlight java\"><figcaption><span>Looper</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;Looper&gt;();</div></pre></td></tr></table></figure>\n<h3 id=\"2-循环消息队列\"><a href=\"#2-循环消息队列\" class=\"headerlink\" title=\"2.循环消息队列\"></a>2.循环消息队列</h3><p>执行Looper.prepare()之后，可以在外部通过调用Looper.myLooper()获取当前线程关联的Looper对象。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Looper <span class=\"title\">myLooper</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sThreadLocal.get();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Looper初始化后，调用方法<code>loop()</code>开始执行循环消息的任务</p>\n<figure class=\"highlight java\"><figcaption><span>Looper</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 执行循环消息任务，调用quit()方法结束循环</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取当前线程关联的Looper对象  </span></div><div class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Looper实例化时创建的MessageQueue对象</span></div><div class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">    <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">    Binder.clearCallingIdentity();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">        <span class=\"comment\">// 无限循环消息队列，调用MessageQueue next()方法取出消息</span></div><div class=\"line\">        Message msg = queue.next(); <span class=\"comment\">// 可能会阻塞</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">        Printer logging = me.mLogging;</div><div class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                    msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 这里的target对象即是Handler，这里调用的Handler dispatchMessage()方法来处理</span></div><div class=\"line\">        <span class=\"comment\">// 从消息队列中取出的Message</span></div><div class=\"line\">        msg.target.dispatchMessage(msg);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">        <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">            Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                    + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                    + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                    + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                    + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        msg.recycleUnchecked();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>Looper获取当前线程关联的Looper对象，通过Looper对象拿到Looper创建的MessageQueue消息队列，对消息队列开启无限循环。从MessageQueue中取消息，如果队列无消息，则等待新的消息。取到消息时，则由Masssge对象绑定的target来分发处理消息。在Handler分析的中Message的target关联就是发送消息的Handler对象。调用Handler的<code>dispatchMessage</code>方法让Handler处理Message</p>\n<figure class=\"highlight java\"><figcaption><span>Handler</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Handle system messages here.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dispatchMessage 只是一个分发的方法，如果callback不为空，表示是Handler是调用<code>postxxx</code>方法发送的消息，callback实际为Runnable对象，此时调用<code>handleCallback</code>方法，则执行callback的run方法。否则判断mCallback是否为空，mCallback是在创建Handler时传递的Callbacl接口对象。如果mCallback接口对象也为空，则具体实现由handler的方法<code>handleMessage</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">    message.callback.run();</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 子类具体实现</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"三、主线程MainThread\"><a href=\"#三、主线程MainThread\" class=\"headerlink\" title=\"三、主线程MainThread\"></a>三、主线程MainThread</h2><p>Android的程序入口为ActivityThread的main方法，而主线程的Looper也是在这里初始化</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">    <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">    <span class=\"comment\">// 初始化主线程的Looper</span></div><div class=\"line\">    Looper.prepareMainLooper();</div><div class=\"line\"></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">    <span class=\"comment\">// 开启消息循环</span></div><div class=\"line\">    Looper.loop();</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>主线程的消息队列在AcitivityThread的main中，调用Looper的静态方法prepareMainLooper()来创建，最后调用looper来启动消息循环。<br>在很多情况下，在线程中执行耗时任务，通过调用主线程Handler更新UI。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper())&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 更新界面UI TODO</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;       </div><div class=\"line\">        <span class=\"comment\">// 处理耗时任务</span></div><div class=\"line\">        Message msg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">        <span class=\"comment\">// message 设置处理的结果</span></div><div class=\"line\">        <span class=\"comment\">// 发送带有处理结果的消息</span></div><div class=\"line\">        handler.sendMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>Android的消息事件机制基本的流程：线程关联有且唯一的Looper对象，Looper对象中维护一个消息队列MessageQueue对象。通过Handler来发送或处理消息Message或Runnable的属性的Message，加入到队列中。Looper对象开启无限的消息循环，来取队列中Message，调用发送消息的Handler的消息分发方法，由开发者来具体处理业务或UI界面的操作。</p>\n"},{"title":"Android：NDK开发（一）","date":"2016-04-12T09:28:12.000Z","_content":"## 一、Mac NDK开发环境搭建\n\n## 二、Android Studio配置\n\n## 三、NDK 配置文件介绍\n\n### （一）、Android.MK\n\nAndroid.MK文件位于`./jni`文件夹下，描述编译系统的资源和共享库信息。对于定义项目配置å`Application.mk`、环境变量。\n\n#### 1. 基本属性\n\n```java\n// LOCAL_PATH\nLOCAL_PATH := $(call my-dir)\n\n// CLEAR_VARS\ninclude $(CLEAR_VARS)\n\n// LOCAL_MODULE\nLOCAL_MODULE := hello-jni\n\n// LOCAL_SRC_FILES\nLOCAL_SRC_FILES := hello-jni.c\n\n// BUILD_SHARED_LIBRARY\ninclude $(BUILD_SHARED_LIBRARY)\n```\n#### 2. 变量和宏\n#### 3. NDK定义的变量\n（1） CLEAR_VARS\n\n（2）2BUILD_SHARED_LIBRARY\n\n（3）BUILD_STATIC_LIBRARY\n\n（4）PREBUILT_SHARED_LIBRARY\n\n（5）PREBUILT_STATIC_LIBRARY\n\n（6）TARGET_ARCH\n\n（7）TARGET_PLATFORM\n\n（8）TARGET_ARCH_ABI\n\n（9）TARGET_ABI\n#### 4. 组件描述的变量\n（1）LOCAL_PATH\n\n（2）LOCAL_MODULE\n\n（3）LOCAL_MODULE_FILENAME\n\n（4）LOCAL_SRC_FILES\n\n（5）LOCAL_CPP_EXTENSION\n\n（6）LOCAL_CPP_FEATURES\n\n（7）LOCAL_C_INCLUDES\n\n（8）LOCAL_CFLAGS\n\n（9）LOCAL_CPPFLAGS\n\n（10）LOCAL_STATIC_LIBRARIES\n\n（11）LOCAL_SHARED_LIBRARIES\n\n（12）LOCAL_WHOLE_STATIC_LIBRARIES\n\n（13）LOCAL_LDLIBS\n\n（14）LOCAL_LDFLAGS\n\n（15）LOCAL_ALLOW_UNDEFINED_SYMBOLS\n\n（16）LOCAL_ARM_MODE\n\n（17）LOCAL_ARM_NEON\n\n（18）LOCAL_DISABLE_NO_EXECUTE\n\n（19）LOCAL_DISABLE_RELRO\n\n（20）LOCAL_DISABLE_FORMAT_STRING_CHECKS\n\n（21）LOCAL_EXPORT_CFLAGS\n\n（22）LOCAL_EXPORT_CPPFLAGS\n\n（23）LOCAL_EXPORT_C_INCLUDES\n\n（24）LOCAL_EXPORT_LDFLAGS\n\n（25）LOCAL_EXPORT_LDLIBS\n\n（26）LOCAL_SHORT_COMMANDS\n\n（27）LOCAL_THIN_ARCHIVE\n\n（28）LOCAL_FILTER_ASM\n\n#### 5. NDK提供的函数宏\n（1）my-dir\n\n（2）all-subdir-makefiles\n\n（3）this-makefile\n\n（4）parent-makefile\n\n（5）grand-parent-makefile\n\n（6）import-module\n\n### （二）、Application.mk\n\n### （三）、属性\n（1）APP_PROJECT_PATH\n\n（2）APP_OPTIM\n\n（3）APP_OPTIM\n\n（4）APP_CFLAGS\n\n（5）APP_CPPFLAGS\n\n（6）APP_LDFLAGS\n\n（7）APP_BUILD_SCRIPT\n\n（8）APP_ABI\n\n（9）APP_PLATFORM\n\n（10）APP_STL\n\n（11）APP_SHORT_COMMANDS\n\n（12）APP_SHORT_COMMANDS\n\n（13）APP_PIE\n\n（14）APP_THIN_ARCHIVE\n\n## 四、ndk-build\n### （一）、核心\n### （二）、运行\n### （三）、可选参数\n\n\n## 五、NDK实战\n\n### \njavah -jni io.github.yanbober.ndkapplication.NdkJniUtils\n\n### \nnative 方法的第一个参数为 JNI接口指针 ：JNIEnv。\n第二个参数","source":"_posts/Android：NDK开发（一）.md","raw":"---\ntitle: Android：NDK开发（一）\ndate: 2016-04-12T17:28:12.000Z\ntags: null\n---\n## 一、Mac NDK开发环境搭建\n\n## 二、Android Studio配置\n\n## 三、NDK 配置文件介绍\n\n### （一）、Android.MK\n\nAndroid.MK文件位于`./jni`文件夹下，描述编译系统的资源和共享库信息。对于定义项目配置å`Application.mk`、环境变量。\n\n#### 1. 基本属性\n\n```java\n// LOCAL_PATH\nLOCAL_PATH := $(call my-dir)\n\n// CLEAR_VARS\ninclude $(CLEAR_VARS)\n\n// LOCAL_MODULE\nLOCAL_MODULE := hello-jni\n\n// LOCAL_SRC_FILES\nLOCAL_SRC_FILES := hello-jni.c\n\n// BUILD_SHARED_LIBRARY\ninclude $(BUILD_SHARED_LIBRARY)\n```\n#### 2. 变量和宏\n#### 3. NDK定义的变量\n（1） CLEAR_VARS\n\n（2）2BUILD_SHARED_LIBRARY\n\n（3）BUILD_STATIC_LIBRARY\n\n（4）PREBUILT_SHARED_LIBRARY\n\n（5）PREBUILT_STATIC_LIBRARY\n\n（6）TARGET_ARCH\n\n（7）TARGET_PLATFORM\n\n（8）TARGET_ARCH_ABI\n\n（9）TARGET_ABI\n#### 4. 组件描述的变量\n（1）LOCAL_PATH\n\n（2）LOCAL_MODULE\n\n（3）LOCAL_MODULE_FILENAME\n\n（4）LOCAL_SRC_FILES\n\n（5）LOCAL_CPP_EXTENSION\n\n（6）LOCAL_CPP_FEATURES\n\n（7）LOCAL_C_INCLUDES\n\n（8）LOCAL_CFLAGS\n\n（9）LOCAL_CPPFLAGS\n\n（10）LOCAL_STATIC_LIBRARIES\n\n（11）LOCAL_SHARED_LIBRARIES\n\n（12）LOCAL_WHOLE_STATIC_LIBRARIES\n\n（13）LOCAL_LDLIBS\n\n（14）LOCAL_LDFLAGS\n\n（15）LOCAL_ALLOW_UNDEFINED_SYMBOLS\n\n（16）LOCAL_ARM_MODE\n\n（17）LOCAL_ARM_NEON\n\n（18）LOCAL_DISABLE_NO_EXECUTE\n\n（19）LOCAL_DISABLE_RELRO\n\n（20）LOCAL_DISABLE_FORMAT_STRING_CHECKS\n\n（21）LOCAL_EXPORT_CFLAGS\n\n（22）LOCAL_EXPORT_CPPFLAGS\n\n（23）LOCAL_EXPORT_C_INCLUDES\n\n（24）LOCAL_EXPORT_LDFLAGS\n\n（25）LOCAL_EXPORT_LDLIBS\n\n（26）LOCAL_SHORT_COMMANDS\n\n（27）LOCAL_THIN_ARCHIVE\n\n（28）LOCAL_FILTER_ASM\n\n#### 5. NDK提供的函数宏\n（1）my-dir\n\n（2）all-subdir-makefiles\n\n（3）this-makefile\n\n（4）parent-makefile\n\n（5）grand-parent-makefile\n\n（6）import-module\n\n### （二）、Application.mk\n\n### （三）、属性\n（1）APP_PROJECT_PATH\n\n（2）APP_OPTIM\n\n（3）APP_OPTIM\n\n（4）APP_CFLAGS\n\n（5）APP_CPPFLAGS\n\n（6）APP_LDFLAGS\n\n（7）APP_BUILD_SCRIPT\n\n（8）APP_ABI\n\n（9）APP_PLATFORM\n\n（10）APP_STL\n\n（11）APP_SHORT_COMMANDS\n\n（12）APP_SHORT_COMMANDS\n\n（13）APP_PIE\n\n（14）APP_THIN_ARCHIVE\n\n## 四、ndk-build\n### （一）、核心\n### （二）、运行\n### （三）、可选参数\n\n\n## 五、NDK实战\n\n### \njavah -jni io.github.yanbober.ndkapplication.NdkJniUtils\n\n### \nnative 方法的第一个参数为 JNI接口指针 ：JNIEnv。\n第二个参数","slug":"Android：NDK开发（一）","published":1,"updated":"2016-05-09T08:57:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txs0006grm37f02le3m","content":"<h2 id=\"一、Mac-NDK开发环境搭建\"><a href=\"#一、Mac-NDK开发环境搭建\" class=\"headerlink\" title=\"一、Mac NDK开发环境搭建\"></a>一、Mac NDK开发环境搭建</h2><h2 id=\"二、Android-Studio配置\"><a href=\"#二、Android-Studio配置\" class=\"headerlink\" title=\"二、Android Studio配置\"></a>二、Android Studio配置</h2><h2 id=\"三、NDK-配置文件介绍\"><a href=\"#三、NDK-配置文件介绍\" class=\"headerlink\" title=\"三、NDK 配置文件介绍\"></a>三、NDK 配置文件介绍</h2><h3 id=\"（一）、Android-MK\"><a href=\"#（一）、Android-MK\" class=\"headerlink\" title=\"（一）、Android.MK\"></a>（一）、Android.MK</h3><p>Android.MK文件位于<code>./jni</code>文件夹下，描述编译系统的资源和共享库信息。对于定义项目配置å<code>Application.mk</code>、环境变量。</p>\n<h4 id=\"1-基本属性\"><a href=\"#1-基本属性\" class=\"headerlink\" title=\"1. 基本属性\"></a>1. 基本属性</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// LOCAL_PATH</span></div><div class=\"line\">LOCAL_PATH := $(call my-dir)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// CLEAR_VARS</span></div><div class=\"line\">include $(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// LOCAL_MODULE</span></div><div class=\"line\">LOCAL_MODULE := hello-jni</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// LOCAL_SRC_FILES</span></div><div class=\"line\">LOCAL_SRC_FILES := hello-jni.c</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// BUILD_SHARED_LIBRARY</span></div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<h4 id=\"2-变量和宏\"><a href=\"#2-变量和宏\" class=\"headerlink\" title=\"2. 变量和宏\"></a>2. 变量和宏</h4><h4 id=\"3-NDK定义的变量\"><a href=\"#3-NDK定义的变量\" class=\"headerlink\" title=\"3. NDK定义的变量\"></a>3. NDK定义的变量</h4><p>（1） CLEAR_VARS</p>\n<p>（2）2BUILD_SHARED_LIBRARY</p>\n<p>（3）BUILD_STATIC_LIBRARY</p>\n<p>（4）PREBUILT_SHARED_LIBRARY</p>\n<p>（5）PREBUILT_STATIC_LIBRARY</p>\n<p>（6）TARGET_ARCH</p>\n<p>（7）TARGET_PLATFORM</p>\n<p>（8）TARGET_ARCH_ABI</p>\n<p>（9）TARGET_ABI</p>\n<h4 id=\"4-组件描述的变量\"><a href=\"#4-组件描述的变量\" class=\"headerlink\" title=\"4. 组件描述的变量\"></a>4. 组件描述的变量</h4><p>（1）LOCAL_PATH</p>\n<p>（2）LOCAL_MODULE</p>\n<p>（3）LOCAL_MODULE_FILENAME</p>\n<p>（4）LOCAL_SRC_FILES</p>\n<p>（5）LOCAL_CPP_EXTENSION</p>\n<p>（6）LOCAL_CPP_FEATURES</p>\n<p>（7）LOCAL_C_INCLUDES</p>\n<p>（8）LOCAL_CFLAGS</p>\n<p>（9）LOCAL_CPPFLAGS</p>\n<p>（10）LOCAL_STATIC_LIBRARIES</p>\n<p>（11）LOCAL_SHARED_LIBRARIES</p>\n<p>（12）LOCAL_WHOLE_STATIC_LIBRARIES</p>\n<p>（13）LOCAL_LDLIBS</p>\n<p>（14）LOCAL_LDFLAGS</p>\n<p>（15）LOCAL_ALLOW_UNDEFINED_SYMBOLS</p>\n<p>（16）LOCAL_ARM_MODE</p>\n<p>（17）LOCAL_ARM_NEON</p>\n<p>（18）LOCAL_DISABLE_NO_EXECUTE</p>\n<p>（19）LOCAL_DISABLE_RELRO</p>\n<p>（20）LOCAL_DISABLE_FORMAT_STRING_CHECKS</p>\n<p>（21）LOCAL_EXPORT_CFLAGS</p>\n<p>（22）LOCAL_EXPORT_CPPFLAGS</p>\n<p>（23）LOCAL_EXPORT_C_INCLUDES</p>\n<p>（24）LOCAL_EXPORT_LDFLAGS</p>\n<p>（25）LOCAL_EXPORT_LDLIBS</p>\n<p>（26）LOCAL_SHORT_COMMANDS</p>\n<p>（27）LOCAL_THIN_ARCHIVE</p>\n<p>（28）LOCAL_FILTER_ASM</p>\n<h4 id=\"5-NDK提供的函数宏\"><a href=\"#5-NDK提供的函数宏\" class=\"headerlink\" title=\"5. NDK提供的函数宏\"></a>5. NDK提供的函数宏</h4><p>（1）my-dir</p>\n<p>（2）all-subdir-makefiles</p>\n<p>（3）this-makefile</p>\n<p>（4）parent-makefile</p>\n<p>（5）grand-parent-makefile</p>\n<p>（6）import-module</p>\n<h3 id=\"（二）、Application-mk\"><a href=\"#（二）、Application-mk\" class=\"headerlink\" title=\"（二）、Application.mk\"></a>（二）、Application.mk</h3><h3 id=\"（三）、属性\"><a href=\"#（三）、属性\" class=\"headerlink\" title=\"（三）、属性\"></a>（三）、属性</h3><p>（1）APP_PROJECT_PATH</p>\n<p>（2）APP_OPTIM</p>\n<p>（3）APP_OPTIM</p>\n<p>（4）APP_CFLAGS</p>\n<p>（5）APP_CPPFLAGS</p>\n<p>（6）APP_LDFLAGS</p>\n<p>（7）APP_BUILD_SCRIPT</p>\n<p>（8）APP_ABI</p>\n<p>（9）APP_PLATFORM</p>\n<p>（10）APP_STL</p>\n<p>（11）APP_SHORT_COMMANDS</p>\n<p>（12）APP_SHORT_COMMANDS</p>\n<p>（13）APP_PIE</p>\n<p>（14）APP_THIN_ARCHIVE</p>\n<h2 id=\"四、ndk-build\"><a href=\"#四、ndk-build\" class=\"headerlink\" title=\"四、ndk-build\"></a>四、ndk-build</h2><h3 id=\"（一）、核心\"><a href=\"#（一）、核心\" class=\"headerlink\" title=\"（一）、核心\"></a>（一）、核心</h3><h3 id=\"（二）、运行\"><a href=\"#（二）、运行\" class=\"headerlink\" title=\"（二）、运行\"></a>（二）、运行</h3><h3 id=\"（三）、可选参数\"><a href=\"#（三）、可选参数\" class=\"headerlink\" title=\"（三）、可选参数\"></a>（三）、可选参数</h3><h2 id=\"五、NDK实战\"><a href=\"#五、NDK实战\" class=\"headerlink\" title=\"五、NDK实战\"></a>五、NDK实战</h2><p>###<br>javah -jni io.github.yanbober.ndkapplication.NdkJniUtils</p>\n<p>###<br>native 方法的第一个参数为 JNI接口指针 ：JNIEnv。<br>第二个参数</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Mac-NDK开发环境搭建\"><a href=\"#一、Mac-NDK开发环境搭建\" class=\"headerlink\" title=\"一、Mac NDK开发环境搭建\"></a>一、Mac NDK开发环境搭建</h2><h2 id=\"二、Android-Studio配置\"><a href=\"#二、Android-Studio配置\" class=\"headerlink\" title=\"二、Android Studio配置\"></a>二、Android Studio配置</h2><h2 id=\"三、NDK-配置文件介绍\"><a href=\"#三、NDK-配置文件介绍\" class=\"headerlink\" title=\"三、NDK 配置文件介绍\"></a>三、NDK 配置文件介绍</h2><h3 id=\"（一）、Android-MK\"><a href=\"#（一）、Android-MK\" class=\"headerlink\" title=\"（一）、Android.MK\"></a>（一）、Android.MK</h3><p>Android.MK文件位于<code>./jni</code>文件夹下，描述编译系统的资源和共享库信息。对于定义项目配置å<code>Application.mk</code>、环境变量。</p>\n<h4 id=\"1-基本属性\"><a href=\"#1-基本属性\" class=\"headerlink\" title=\"1. 基本属性\"></a>1. 基本属性</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// LOCAL_PATH</span></div><div class=\"line\">LOCAL_PATH := $(call my-dir)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// CLEAR_VARS</span></div><div class=\"line\">include $(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// LOCAL_MODULE</span></div><div class=\"line\">LOCAL_MODULE := hello-jni</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// LOCAL_SRC_FILES</span></div><div class=\"line\">LOCAL_SRC_FILES := hello-jni.c</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// BUILD_SHARED_LIBRARY</span></div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<h4 id=\"2-变量和宏\"><a href=\"#2-变量和宏\" class=\"headerlink\" title=\"2. 变量和宏\"></a>2. 变量和宏</h4><h4 id=\"3-NDK定义的变量\"><a href=\"#3-NDK定义的变量\" class=\"headerlink\" title=\"3. NDK定义的变量\"></a>3. NDK定义的变量</h4><p>（1） CLEAR_VARS</p>\n<p>（2）2BUILD_SHARED_LIBRARY</p>\n<p>（3）BUILD_STATIC_LIBRARY</p>\n<p>（4）PREBUILT_SHARED_LIBRARY</p>\n<p>（5）PREBUILT_STATIC_LIBRARY</p>\n<p>（6）TARGET_ARCH</p>\n<p>（7）TARGET_PLATFORM</p>\n<p>（8）TARGET_ARCH_ABI</p>\n<p>（9）TARGET_ABI</p>\n<h4 id=\"4-组件描述的变量\"><a href=\"#4-组件描述的变量\" class=\"headerlink\" title=\"4. 组件描述的变量\"></a>4. 组件描述的变量</h4><p>（1）LOCAL_PATH</p>\n<p>（2）LOCAL_MODULE</p>\n<p>（3）LOCAL_MODULE_FILENAME</p>\n<p>（4）LOCAL_SRC_FILES</p>\n<p>（5）LOCAL_CPP_EXTENSION</p>\n<p>（6）LOCAL_CPP_FEATURES</p>\n<p>（7）LOCAL_C_INCLUDES</p>\n<p>（8）LOCAL_CFLAGS</p>\n<p>（9）LOCAL_CPPFLAGS</p>\n<p>（10）LOCAL_STATIC_LIBRARIES</p>\n<p>（11）LOCAL_SHARED_LIBRARIES</p>\n<p>（12）LOCAL_WHOLE_STATIC_LIBRARIES</p>\n<p>（13）LOCAL_LDLIBS</p>\n<p>（14）LOCAL_LDFLAGS</p>\n<p>（15）LOCAL_ALLOW_UNDEFINED_SYMBOLS</p>\n<p>（16）LOCAL_ARM_MODE</p>\n<p>（17）LOCAL_ARM_NEON</p>\n<p>（18）LOCAL_DISABLE_NO_EXECUTE</p>\n<p>（19）LOCAL_DISABLE_RELRO</p>\n<p>（20）LOCAL_DISABLE_FORMAT_STRING_CHECKS</p>\n<p>（21）LOCAL_EXPORT_CFLAGS</p>\n<p>（22）LOCAL_EXPORT_CPPFLAGS</p>\n<p>（23）LOCAL_EXPORT_C_INCLUDES</p>\n<p>（24）LOCAL_EXPORT_LDFLAGS</p>\n<p>（25）LOCAL_EXPORT_LDLIBS</p>\n<p>（26）LOCAL_SHORT_COMMANDS</p>\n<p>（27）LOCAL_THIN_ARCHIVE</p>\n<p>（28）LOCAL_FILTER_ASM</p>\n<h4 id=\"5-NDK提供的函数宏\"><a href=\"#5-NDK提供的函数宏\" class=\"headerlink\" title=\"5. NDK提供的函数宏\"></a>5. NDK提供的函数宏</h4><p>（1）my-dir</p>\n<p>（2）all-subdir-makefiles</p>\n<p>（3）this-makefile</p>\n<p>（4）parent-makefile</p>\n<p>（5）grand-parent-makefile</p>\n<p>（6）import-module</p>\n<h3 id=\"（二）、Application-mk\"><a href=\"#（二）、Application-mk\" class=\"headerlink\" title=\"（二）、Application.mk\"></a>（二）、Application.mk</h3><h3 id=\"（三）、属性\"><a href=\"#（三）、属性\" class=\"headerlink\" title=\"（三）、属性\"></a>（三）、属性</h3><p>（1）APP_PROJECT_PATH</p>\n<p>（2）APP_OPTIM</p>\n<p>（3）APP_OPTIM</p>\n<p>（4）APP_CFLAGS</p>\n<p>（5）APP_CPPFLAGS</p>\n<p>（6）APP_LDFLAGS</p>\n<p>（7）APP_BUILD_SCRIPT</p>\n<p>（8）APP_ABI</p>\n<p>（9）APP_PLATFORM</p>\n<p>（10）APP_STL</p>\n<p>（11）APP_SHORT_COMMANDS</p>\n<p>（12）APP_SHORT_COMMANDS</p>\n<p>（13）APP_PIE</p>\n<p>（14）APP_THIN_ARCHIVE</p>\n<h2 id=\"四、ndk-build\"><a href=\"#四、ndk-build\" class=\"headerlink\" title=\"四、ndk-build\"></a>四、ndk-build</h2><h3 id=\"（一）、核心\"><a href=\"#（一）、核心\" class=\"headerlink\" title=\"（一）、核心\"></a>（一）、核心</h3><h3 id=\"（二）、运行\"><a href=\"#（二）、运行\" class=\"headerlink\" title=\"（二）、运行\"></a>（二）、运行</h3><h3 id=\"（三）、可选参数\"><a href=\"#（三）、可选参数\" class=\"headerlink\" title=\"（三）、可选参数\"></a>（三）、可选参数</h3><h2 id=\"五、NDK实战\"><a href=\"#五、NDK实战\" class=\"headerlink\" title=\"五、NDK实战\"></a>五、NDK实战</h2><p>###<br>javah -jni io.github.yanbober.ndkapplication.NdkJniUtils</p>\n<p>###<br>native 方法的第一个参数为 JNI接口指针 ：JNIEnv。<br>第二个参数</p>\n"},{"title":"Android：DataBinding Guide","date":"2016-07-17T08:56:24.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_500/v1468746215/android/android_data_binding.png","_content":"## 一、编译环境配置\n### 1. build.gradle\n```java\nandroid{\n    ...\n    dataBinding{\n        enabled true\n    }\n}\n```\n如果在依赖module中需要支持databinding库，则在对应的依赖module的build.gradle配置文件添加dataBinding。\n### 2. DataBinding 布局文件\n使用DataBinding库的布局文件与普通布局文件不同的是：跟标签使用`<layout/>`：包含`<data></data>`标签和普通的视图布局。\n{% codeblock lang:xml activity_main.xml %}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"/>\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.lastName}\"/>\n   </LinearLayout>\n</layout>\n{% endcodeblock %}\n\n示例中的<data>中的user变量用<variable>标签来引用：用`@{}`语法表示绑定的参数\n```xml\n...\n<data>\n    ...\n    <variable name=\"user\" type=\"com.example.User\"/>\n    ...\n</data>\n...\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"/>\n\n```\n`@{user.firstName}`意味：User中的firstName对应的具体\nJava POJO 类有两种方式\n1. 老式；一旦数据初始化后，值无法再次修改\n\t```java\n\tpublic class User{\n\t\tpublic final String firstName;\n\t\tpublic final String lastName;\n\t\tpublic User(String firstName , String lastName){\n\t\t    this.firstName = firstName;\n\t\t    this.lastName = lastName;\n\t\t}\n\t}\n\t```\n2. 或使用私有private的java POJO类\n\t```java\n\tpublic class User {\n\t   private final String firstName;\n\t   private final String lastName;\n\t   public User(String firstName, String lastName) {\n\t       this.firstName = firstName;\n\t       this.lastName = lastName;\n\t   }\n\t   public String getFirstName() {\n\t       return this.firstName;\n\t   }\n\t   public String getLastName() {\n\t       return this.lastName;\n\t   }\n\t}\n\t```\n从DataBinding角度来看，两个Java POJO类的效果相同。使用第一种Java类，TextView的android:text中表达式`@{user.firstName}`直接访问User的firstName字段。如果使用第二种类型Java类，则通过调用`getFirstName()`来访问User的firstName字段。\n> 注：如果User类中存在firstName()方法，则首先调用firstName()方法。\n\n### 3. 绑定数据\n默认情况下，会根据布局文件的名称，在编译时自动生成首字母大写、驼峰式命名方式并以`Binding`结尾的Binding类。比如有名称为`main_activity.xml`的布局文件，则在编译时生成`MainActivityBinding.java`类。类中有布局绑定的data信息（如main_activity.xml中的user）并生成data的setter方法。最简单地创建binding方式就是在inflate布局时。\n\n{% codeblock lang:java MainActivity.java %}\n...\n@override\nprotected void onCreate(Bundle savedInstanceState){\n\tsuper.onCreate(savedInstanceState);\n\tMainActivityBinding binding = DataBindingUtil.setContentView(this , R.layout.main_activity);\n\tUser user = new User(\"Test\" , \"User\");\n\tbinding.setUser(user);\n}\n...\n{% endcodeblock %}\n\n或通过编译生成的MainActivityBinding类创建Binding\n\n```java\nMainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater);\n```\n如果绑定的是ListView或RecyclerView对应的Adapter，对应的binding类为ListItemBinding\n\n```java\nListItemBinding binding = ListItemBinding.inflater(layoutInflater , viewGroup , false);\n// or\nListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false);\n```\n\n## 二、事件处理\nDataBinding可以使用表达式来处理View的事件分发操作（如：onClick）。事件属性名由监听方法统一管理。如[View.onLongClickListener](https://developer.android.com/reference/android/view/View.OnLongClickListener.html)的方法[onLongClick()](https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View))，则对应属性名为`android:onLongClick`。处理View事件分发有两种方式\n1. 方法关联（[Method References](https://developer.android.com/topic/libraries/data-binding/index.html#method_references)）方式：在表达式中应用符合签名的监听方法。如果表达式签名与对应的方法引用一致，DataBinding将包裹引用的方法和对象到绑定的方法中。如果表达式为null，则不会创建监听。\n2. 监听绑定（[Listener Bindings](https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings)）方式：在触发监听事件时，则调用绑定的lambda表达式。使用这个方式，DataBinding总是会创建View的监听事件。触发View事件时，调用lambda表达式绑定的方法。\n\n### 1. 方法关联\n直接将View对应的事件绑定到对应的方法。类似`android:onClick`关联Activity中的同名方法。比View#onClick属性相比，最大的好处就是这种方式只在编译时生成。所以在方法不存在或签名不正确时，则在编译阶段直接出错。\n方法关联与监听绑定最大的不同就是：实际的Listener是在数据绑定时而不是在事件出发创建。如果希望只在View事件触发时执行表达式，则应该使用[监听绑定](https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings)的方式。\n使用与处理方法名相同的表达式来关联监听事件，假设定义了如下的事件处理的类和方法\n```java\npublic class MyHandlers{\n    public void onClickFriend(View view){...}\n}\n```\n则要在布局文件中通过<variable/> 来声明事件处理类\n\n```xml\n<?xml version=\"1.0\" encoding=\"urf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <!-- 声明View的事件处理类 -->\n       <variable name=\"handlers\" type=\"com.example.Handlers\"/>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"\n           <!-- 绑定声明的事件处理类的对应监听方；保证方法存在且命名相同 -->\n           android:onClick=\"@{handlers::onClickFriend}\"/>\n   </LinearLayout>\n</layout>\n```\n>注：要保证表达式中的方法名签名与事件处理类一致：方法存在且名称一致。\n\n### 2. 监听绑定\n与方法关联类似，但只在触发View响应事件时绑定表达式。表达式中允许存在多个参数（需要Gradle插件版本2.0以上）。\n在方法关联中，方法参数必须符合事件监听的参数。在监听绑定中，只要求返回值符合监听表达式返回的值（除非返回void）。通过触发View事件调用绑定事件处理类中的方法。使用方法如下：\n```java\npublic class Presenter{\n\tpublic void onSaveClick(Task task){}\n}\n```\n绑定点击事件\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <data>\n        <variable name=\"task\" type=\"com.android.example.Task\" />\n        <variable name=\"presenter\" type=\"com.android.example.Presenter\" />\n    </data>\n    <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\">\n        <Button \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\"\n            android:onClick=\"@{() -> presenter.onSaveClick(task)}\" />\n    </LinearLayout>\n</layout>\n\n```\n使用lambda表达式的Listener只允许作为表达式的根元素。当表达式调用事件的回调方法时，DataBinding自动创建和注册必要的监听事件。当View分发事件时，DataBinding则通过事件分发调用绑定的表达式事件。在常规绑定的表达式中，可以得到值为null且线程安全的DataBinding，在执行View事件分发操作时。\n在上面的例子中，我们并没有定义[onClick(android.view.View)](https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View))方法中用到的view参数。在监听绑定的方式中，为Listener的参数提供了两种方式。\n\n1. ）忽略监听中所有的方法或名称\n\n\t```java\n\tandroid:onClick=\"@{(view) -> presenter.onSaveClick(task)}\"\n\t```\n2. ）在自定义的方法中命名要使用的参数\n\n\t```java\n\tpublic class Presenter{\n\t\tpublic void onSaveClick(View view , Task task){};\n\t}\n    // Layout \n\t...\n\tandroid:onClick=\"@{(theView) -> presenter.onSaveClick(theView ,task)}\"\n\t...\n\t```\n\n可以使用有多个参数的lambda表达式\n```java\npublic class Presenter {\n    public void onCompletedChanged(Task task, boolean completed){}\n}\n// Layout\n\n<CheckBox android:layout_width=\"wrap_content\" \n    android:layout_height=\"wrap_content\"\n    android:onCheckedChanged=\"@{(cb, isChecked) -> presenter.completeChanged(task, isChecked)}\" />\n```\n\n如果监听的事件返回值不是`void`类型，则自定义的表达式也必须要返回相同类型的值。如监听`onLongClick`时，则自定义的表达式必须要返回boolean类型。\n```java\npublic class Presenter {\n    public boolean onLongClick(View view, Task task){}\n}\n// Layout\nandroid:onLongClick=\"@{(theView) -> presenter.onLongClick(theView, task)}\"\n```\n\n如果因为null对象无法执行表达式，则Data Binding 会返回默认同种类型的Java 值。如引用类型为null，int为0，boolean默认值false 等。\n如果使用断言类型的表达式（如：三目运算），则可以使用`void`作为标识符\n```xml\nandroid:onClick=\"@{(v) -> v.isVisible() ? doSomething() : void}\"\n```\n\n### 3. 避免使用复杂监听\n监听表达式可以让代码易读性更好。但是含有复杂表达式的监听只会让你的布局易读性变差，更难维护。这些表达式\n应该尽量简单，在回调方法中来实现业务逻辑。如果有特殊点击事件，需要指定除\"android:onClick\"之外的属性，\n来避免冲突。下面的属性用来避免重复\n\n|        |         |         |\n---- | ---- | ----- \n[SearchView](https://developer.android.com/reference/android/widget/SearchView.html)    | setOnSearchClickListener(View.OnClickListener)     | android:onSearchClick\n[ZoomControls](https://developer.android.com/reference/android/widget/ZoomControls.html) | setOnZoomInClickListener(View.OnClickListener)    | android:onZoomIn\n[ZoomControls](https://developer.android.com/reference/android/widget/ZoomControls.html) | setOnZoomOutClickListener(View.OnClickListener) | android:onZoomOut\n\n## 三、布局详解\n### 1. Imports\n在data中不用或引入多个import元素。类似Java的import\n```java\n<data>\n    <import type=\"android.view.View\"/>\n</data>\n```\n现在可以在表达式中使用View了\n```xml\n<TextView\n    android:text=\"@{user.lastName}\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\"/>\n```\n导入的类名冲突时，可以使用别名来避免\n```xml\n<import type=\"android.view.View\"/>\n<import type=\"com.example.real.estate.View\"\n        alias=\"Vista\"/>\n```\n导入类型可以用来作为变量和表达式的类型引用\n```xml\n<data>\n    <import type=\"com.example.User\"/>\n    <import type=\"java.util.List\"/>\n    <variable name=\"user\" type=\"User\"/>\n    <variable name=\"userList\" type=\"List<User>\"/>\n</data>\n```\n>注：Android Studio尚未支持import的处理，所以IDE可能无法处理导入的变量。但是应用仍可以正常运行。\n可以在变量中使用完全限定名解决IDE的问题\n\n```xml\n<TextView\n   android:text=\"@{((User)(user.connection)).lastName}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n表达式可以使用导入类型的静态字段和静态方法。\n\n```xml\n<data>\n    <import type=\"com.example.MyStringUtils\"/>\n    <variable name=\"user\" type=\"com.example.User\"/>\n</data>\n…\n<TextView\n   android:text=\"@{MyStringUtils.capitalize(user.lastName)}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n\n### 2. Variables 变量\ndata中可以使用任意数量的variable元素\n```java\n<data>\n    <import type=\"android.graphics.drawable.Drawable\"/>\n    <variable name=\"user\"  type=\"com.example.User\"/>\n    <variable name=\"image\" type=\"Drawable\"/>\n    <variable name=\"note\"  type=\"String\"/>\n</data>\n```\n变量的类型检查均在编译时完成，所以如果是实现 [Observable](https://developer.android.com/reference/android/databinding/Observable.html)或 [Observable Collections](https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections)类型的变量则对应声明时的类型。如果变量或基类没有实现Observable*系列接口，则无法被观察，即无法实现动态绑定。\n当有不同配置的布局文件（如水平、垂直），变量则会被组合到一起，可能会出现命名冲突，所以这些布局的文件中不允许出现重复定义。\n生成的绑定类会为每个变量生成getter和setter方法，在调用setter方法之前，变量为java默认值。在必要情况下，DataBinding会生成名为context的特殊变量，context的值为root view的[getContext](https://developer.android.com/reference/android/view/View.html#getContext())返回值。如果在布局中显示指定具有相同的名称的context, 默认值则被覆盖。\n## 四、自定义生成Binding的类名\n默认情况，Binding类根据布局文件名，以驼峰形式，以\"Binding\"为后缀的来命名，位于module中的databinding包下。如\"contact_item.xml\"会生成ContactItemBinding的Binding类。如果module包名为`com.example.my.app` ,则生成的Binding 类位于com.example.my.app.databinding包下。\nBinding 类可以在data元素中用class 来重命名\n```xml\n<data class=\"ContactItem\">\n    ...\n</data>\n```\n则生成ContactItem，位于module的databinding包中。\n如果类需要生成在module的根目录，则添加添加前缀\".\"\n```xml\n<data class=\".ContactItem\">\n    ...\n</data>\n```\n或者指定包中\n```xml\n<data class=\"com.example.ContactItem\">\n    ...\n</data>\n```\n\n### 3. Includes布局\n如果使用include方式添加布局文件时，可以用命名空间(namespace)和变量名传递\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <include layout=\"@layout/name\"\n           bind:user=\"@{user}\"/>\n       <include layout=\"@layout/contact\"\n           bind:user=\"@{user}\"/>\n   </LinearLayout>\n</layout>\n```\n>注：name.xml 和 contact中必须也有user变量\n对应的include的布局<data/>的变量名必须要与引用它的布局属性名一致\n\nData Binding不支持使用<merge>作为直接子元素的布局，例如不支持类似以下的使用方式\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <merge>\n       <include layout=\"@layout/name\"\n           bind:user=\"@{user}\"/>\n       <include layout=\"@layout/contact\"\n           bind:user=\"@{user}\"/>\n   </merge>\n</layout>\n```\n### 4. 支持的表达式运算符\n\n1）常用特性\n与Java表达式类似\n\n- 四则运算      + - / * %\n- 字符串连接   +\n- 逻辑运算符   && ||\n- 二元运算符   & | ^\n- 一元运算符   + - ! ~\n- 移位运算符   >> >>> <<\n- 比较             == > < >= <=\n- instanceof\n- 组合 ()\n- 迭代 - character, String, numeric, null\n- 强制转换\n- 方法调用\n- 字段访问\n- 数组调用\n- 三目运算符 ?:\n\n使用范例\n```xml\nandroid:text=\"@{String.valueOf(index + 1)}\"\nandroid:visibility=\"@{age &lt; 13 ? View.GONE : View.VISIBLE}\"\nandroid:transitionName='@{\"image_\" + id}'\n```\n2）不支持特性\n\n- `不支持`Java 中 的this, super，new 操作符\n\n3）空聚合操作符\n```xml\nandroid:text=\"@{user.displayName ?? user.lastName}\"\n```\n与三目运算符`?:`相同\n```xml\nandroid:text=\"@{user.displayName != null ? user.displayName : user.lastName}\"\n```\n4）属性引用\n```xml\nandroid:text=\"@{user.lastName}\"\n```\n5）可以避免空指针\nData Binding自动检查null对象，避免空指针。如：@{user.name}, 如果user为空，则user.name为\n默认值null。类似的user.age为0\n\n6）集合\n常用集合:arrays, lists, sparse lists, and maps。可以用[]操作符。\n```xml\n<data>\n    <import type=\"android.util.SparseArray\"/>\n    <import type=\"java.util.Map\"/>\n    <import type=\"java.util.List\"/>\n    <variable name=\"list\" type=\"List<String>\"/>\n    <variable name=\"sparse\" type=\"SparseArray<String>\"/>\n    <variable name=\"map\" type=\"Map&lt<String, String>\"/>\n    <variable name=\"index\" type=\"int\"/>\n    <variable name=\"key\" type=\"String\"/>\n</data>\n…\nandroid:text=\"@{list[index]}\"\n…\nandroid:text=\"@{sparse[index]}\"\n…\nandroid:text=\"@{map[key]}\"\n```\n7）引用String值\n如果属性使用单引号，则表达式使用双引号\n```xml\nandroid:text='@{map[\"firstName\"]}'\n```\n如果属性使用双引号，String值使用单引号 或 双引号\n```xml\nandroid:text=\"@{map[`firstName`}\"\nandroid:text=\"@{map[\"firstName\"]}\"\n```\n8）引用资源文件\n使用正常资源访问语法\n```xml\n<!-- 访问资源 -->\nandroid:padding=\"@{large? @dimen/largePadding : @dimen/smallPadding}\"\n```\n根据String资源格式化字符串和复数。\n```xml\nandroid:text=\"@{@string/nameFormat(firstName, lastName)}\"\nandroid:text=\"@{@plurals/banana(bananaCount)}\"\n```\n\n带有多个参数的复数，应该传递所有参数。\n```xml\n  Have an orange\n  Have %d oranges\n\nandroid:text=\"@{@plurals/orange(orangeCount, orangeCount)}\"\n```\n需要明确的一些资源类型\n\nType   |    Normal Reference | Expression Reference\n------- | ------- | ---\nString[]\t|@array\t|@stringArray\nint[]\t|@array\t|@intArray\nTypedArray\t|@array\t|@typedArray\nAnimator\t|@animator\t|@animator\nStateListAnimator\t|@animator\t|@stateListAnimator\ncolor int\t|@color\t|@color\nColorStateList\t|@color\t|@colorStateList\n\n## 五、Data对象\n旧式Java POJO可以用做数据绑定，但是修改数据时不能更新UI。而真正的Data Binding在数据变化时能够来修改。\n有三种不同的数据变化通机制。[Observable objects](https://developer.android.com/topic/libraries/data-binding/index.html#observable_objects)、[observable fields](https://developer.android.com/topic/libraries/data-binding/index.html#observablefields)、[observable collection](https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections)。当这些可观察的数据对象绑定UI后，在data对象属性值变化时，会自动更新UI。\n### 1. 可观察对象（Observable Object）\n实现[Observable](https://developer.android.com/reference/android/databinding/Observable.html)接口的类可以绑定一个单独的Listener来监听对象属性值的变化。[Observable](https://developer.android.com/reference/android/databinding/Observable.html)接口提供了添加和移除监听的机制。[BaseObservable](https://developer.android.com/reference/android/databinding/BaseObservable.html)就是实现了Observable的监听注册机制的基类。为了能够让data数据对象在属性值变化时发出通知，可以通过为属性值的getter方法设定[Bindable](https://developer.android.com/reference/android/databinding/Bindable.html)注解并在setter方法中添加通知。\n```java\nprivate static class User extends BaseObservable {\n   private String firstName;\n   private String lastName;\n   @Bindable\n   public String getFirstName() {\n       return this.firstName;\n   }\n   @Bindable\n   public String getLastName() {\n       return this.lastName;\n   }\n   public void setFirstName(String firstName) {\n       this.firstName = firstName;\n       notifyPropertyChanged(BR.firstName);\n   }\n   public void setLastName(String lastName) {\n       this.lastName = lastName;\n       notifyPropertyChanged(BR.lastName);\n   }\n}\n\n```\n在编译时[Bindable](https://developer.android.com/reference/android/databinding/Bindable.html)注解会在BR类中生成对应的访问入口。BR类会在编译时自动在module中生成。如果\n无法修改data类的基类，可以使用[PropertyChangeRegistry](https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html)实现[Observable](https://developer.android.com/reference/android/databinding/Observable.html)接口，更高效存储和通知监听。\n\n### 2. 可观察字段（ObservableFields）\n如果仅有少量属性值或为了节省时间可以使用[ObservableField](https://developer.android.com/reference/android/databinding/ObservableField.html)来创建[Observable](https://developer.android.com/reference/android/databinding/Observable.html)类。与ObservableField类似的还有[ObservableBoolean](https://developer.android.com/reference/android/databinding/ObservableBoolean.html), [ObservableByte](https://developer.android.com/reference/android/databinding/ObservableByte.html), [ObservableChar](https://developer.android.com/reference/android/databinding/ObservableChar.html), [ObservableShort](https://developer.android.com/reference/android/databinding/ObservableShort.html), [ObservableInt](https://developer.android.com/reference/android/databinding/ObservableInt.html), \n[ObservableLong](https://developer.android.com/reference/android/databinding/ObservableLong.html), [ObservableFloat](https://developer.android.com/reference/android/databinding/ObservableFloat.html), [ObservableDouble](https://developer.android.com/reference/android/databinding/ObservableDouble.html)和[ObservableParcelable](https://developer.android.com/reference/android/databinding/ObservableParcelable.html)。ObservableFields是独立的可观察对象。使用基本数据类型可以避免封箱和拆箱操作。使用时需要在数据类中创建`public final`属性的字段\n```java\nprivate static class User {\n   public final ObservableField<String> firstName =\n       new ObservableField<>();\n   public final ObservableField<String> lastName =\n       new ObservableField<>();\n   public final ObservableInt age = new ObservableInt();\n}\n```\n使用set和get方法来存取属性值。\n```java\nuser.firstName.set(\"Google\");\nint age = user.age.get();\n```\n### 3. 可观察集合（Observable Collections）\n一些应用需要使用动态接口（如Map）来保存数据。Observable Collections可以通过键（key）来存取集合中的对象。如在键值为引用类型时，可以使用[ObservableArrayMap](https://developer.android.com/reference/android/databinding/ObservableArrayMap.html)。\n```java\nObservableArrayMap<String, Object> user = new ObservableArrayMap<>();\nuser.put(\"firstName\", \"Google\");\nuser.put(\"lastName\", \"Inc.\");\nuser.put(\"age\", 17);\n```\n在布局文件中 可以通过key来访问map中对象。\n\n```xml\n<data>\n    <import type=\"android.databinding.ObservableMap\"/>\n    <variable name=\"user\" type=\"ObservableMap<String, Object>\"/>\n</data>\n…\n<TextView\n   android:text='@{user[\"lastName\"]}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n<TextView\n   android:text='@{String.valueOf(1 + (Integer)user[\"age\"])}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n如果使用整型作为键值时，可以考虑使用[ObservableArrayList](https://developer.android.com/reference/android/databinding/ObservableArrayList.html)\n```java\nObservableArrayList<Object> user = new ObservableArrayList<>();\nuser.add(\"Google\");\nuser.add(\"Inc.\");\nuser.add(17);\n```\n在布局中使用索引来访问list集合\n```xml\n<data>\n    <import type=\"android.databinding.ObservableList\"/>\n    <import type=\"com.example.my.app.Fields\"/>\n    <variable name=\"user\" type=\"ObservableList<Object>\"/>\n</data>\n…\n<TextView\n   android:text='@{user[Fields.LAST_NAME]}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n<TextView\n   android:text='@{String.valueOf(1 + (Integer)user[Fields.AGE])}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n\n## 六、生成的Binding类\n生成的Binding能够通过layout中的Views对象连接布局变量。如上所述，Binding类的命名和包名可以[自定义](https://developer.android.com/topic/libraries/data-binding/index.html#custom_binding_class_names)，生成的Binding类都继承自[ViewDataBinding](https://developer.android.com/reference/android/databinding/ViewDataBinding.html)。\n\n### 1. 创建Binding类对象\nBinding类对象应该在inflate视图之后尽快创建，保证在表达式绑定View时，View Hierarchy不会被干扰。绑定布局文件有不同方式，最常用是用Binding类的静态方法。\n```java\nMyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate);\n// 或者\nMyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate , viewGroup , false);\n```\n如果布局使用其他方式inflate，则需要分开来完成绑定。\n```java\nMyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);\n```\n有时不能预先知道binding。在这些情况可以使用[DataBindingUtil](https://developer.android.com/reference/android/databinding/DataBindingUtil.html)类\n```java\nViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId,\n    parent, attachToParent);\nViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);\n```\n### 2. 使用ID的View\n当为View指定一个ID时，则会在Binding类中为View生成一个`public final`属性的字段，直接获取View，比通过调用findViewById更加快速。如\n```xml\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"\n           android:id=\"@+id/firstName\"/>\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.lastName}\"\n  android:id=\"@+id/lastName\"/>\n   </LinearLayout>\n</layout>\n```\n则会在Binding类中生成如下的字段\n```java\npublic final TextView firstName;\npublic final TextView lastName;\n```\n对于data binding来说 ID几乎没有必要，但是在需要在代码中来获取view实例时仍有必要。\n### 3. Variables变量\n会为布局中每个声明的变量生成getter和setter方法的。\n```xml\n<data>\n    <import type=\"android.graphics.drawable.Drawable\"/>\n    <variable name=\"user\"  type=\"com.example.User\"/>\n    <variable name=\"image\" type=\"Drawable\"/>\n    <variable name=\"note\"  type=\"String\"/>\n</data>\n```\n会在Binding类中生成如下方法\n```java\npublic abstract com.example.User getUser();\npublic abstract void setUser(com.example.User user);\npublic abstract Drawable getImage();\npublic abstract void setImage(Drawable image);\npublic abstract String getNote();\npublic abstract void setNote(String note);\n```\n### 4. ViewStubs布局\n[ViewStub](https://developer.android.com/reference/android/view/ViewStub.html)与常用View有些不同：起始时不可见，\n```xml\n <ViewStub android:id=\"@+id/stub\"\n     android:inflatedId=\"@+id/subTree\"\n     android:layout=\"@layout/mySubTree\"\n     android:layout_width=\"120dip\"\n     android:layout_height=\"40dip\" />\n```\n用setVisiable变为可见或显式调用inflate时，则用android:layout中的定义布局替换自己与`include`类似。但与`include`不同的的是在初始时并不会inflate到布局文件中，所以Binding的view不会在初始化时完成绑定。因为Binding中的View为final属性，使用[ViewStubProxy](https://developer.android.com/reference/android/databinding/ViewStubProxy.html)代理对象来替代ViewStud，可以在ViewStud创建后来访问。同样在ViewStud被inflate时，能够访问inflated的View Hierarchy。当inflate ViewStud的布局时，必须为新布局建立Binding。因此ViewStubProxy必须监听[ViewStub.OnInflateListener](https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html)并在inflate时建立Binding。又因为只能有一个存在，ViewStubProxy在创建Binding类对象后调用OnInflateListener。\n\n## 七、高级Binding\n### 1. 动态变量\n有时不知道指定的Binding类。如： 操作不同布局的[RecyclerView.Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html)不知道指定的Binding类，但必须要在[onBindViewHolder(VH , int)](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#onBindViewHolder(VH, int))\n中关联Binding值。\n例子中所有RecyclerView绑定的布局都有一个item变量。BindingHolder有一个getBinding方法返回[ViewDataBinding](https://developer.android.com/reference/android/databinding/ViewDataBinding.html)基类。\n```java\npublic void onBindViewHolder(BindingHolder holder, int position) {\n   final T item = mItems.get(position);\n   holder.getBinding().setVariable(BR.item, item);\n   holder.getBinding().executePendingBindings();\n}\n```\n### 2. 立即绑定\n当变量或观察者变化时，Binding在下一帧前执行改变操作。有时Binding必须立即执行。强制执行使用 [executePendingBindings()](https://developer.android.com/reference/android/databinding/ViewDataBinding.html#executePendingBindings())方法\n### 3. 后台线程\nDataBinding可以在后台线程中修改非集合类型的data数据，在线程中执行时，DataBinding会本地化变量和字段，避免多线程引起的同步问题。\n\n## 七、属性Setter\n无论何时绑定值变化，生成的binding类都必须view中绑定的表达式setter方法。DataBinding框架能够自定义setter的方法。\n### 1. 自动setter\n对于属性attribute来说，DataBinding会尝试查找setAttribute方法。attribute的命名空间可以或略，只针对属性的名称。如：关联TextView的android:text属性表达式会查找setText方法。如果表达式返回int，DataBinding会搜索setText(int)的方法。注意要用返回正确类型的表达式，如果必要的话，使用强制类型转换。\n>注：即使不存在指定的属性名，DataBinding也会工作。\n\n你可以使用DataBinding为任意setter方法创建对应的属性名。如：依赖库DrawerLayout没有任何属性名，但是仍有很多setter，可以使用自动的属性名setter方法\n```xml\n<android.support.v4.widget.DrawerLayout\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:scrimColor=\"@{@color/scrim}\"\n    app:drawerListener=\"@{fragment.drawerListener}\"/>\n```\n### 2. setter重命名\n有点setter方法没有对应的属性名。对于这些方法，可以用[BindingMethods](https://developer.android.com/reference/android/databinding/BindingMethods.html)注解关联指定的属性名，使用这种方式时必须关联用[BindingMethods](https://developer.android.com/reference/android/databinding/BindingMethod.html)注解的类。如`android:tint`属性名实际关联的是[setImageTintList(ColorStateList)](https://developer.android.com/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList))方法而不是`setTint()`。\n```java\n@BindingMethods({\n       @BindingMethod(type = \"android.widget.ImageView\",\n                      attribute = \"android:tint\",\n                      method = \"setImageTintList\"),\n})\n```\n一般来说没有必要重命名setters，因为android框架属性已经实现。\n### 3. 自定义setter\n有时需要自定义属性的绑定逻辑。如：`android:paddingLeft`没有对应的setter实现方法，但是存在`setPadding(left, top, right, bottom) `方法。使用` BindingAdapter`注解的静态方法可以用来自定义属性名的setter逻辑。\nandroid属性已经有创建的[BindingAdapter](https://developer.android.com/reference/android/databinding/BindingAdapter.html)，如： paddingLeft\n```java\n@BindingAdapter(\"android:paddingLeft\")\npublic static void setPaddingLeft(View view, int padding) {\n   view.setPadding(padding,\n                   view.getPaddingTop(),\n                   view.getPaddingRight(),\n                   view.getPaddingBottom());\n}\n```\nBindingAdapter对自定义类型的属性很有用。如：创建图片加载方法。\n>注：当默认的Adapter与自定义的BindingAdapter冲突时，自定义的BindingAdapter覆盖默认值。\n\n```java\n// 1. 全部满足\n@BindingAdapter({\"bind:imageUrl\", \"bind:error\"})\npublic static void loadImage(ImageView view, String url, Drawable error) {\n   Picasso.with(view.getContext()).load(url).error(error).into(view);\n}\n// 2. 满足其中一个时\n@BindingAdapter(value = {\"bind:imageUrl\", \"bind:error\"} , requireAll = false)\npublic static void loadImage(ImageView view, String url, Drawable error) {\n   Picasso.with(view.getContext()).load(url).error(error).into(view);\n}\n\n// Layout\n<ImageView app:imageUrl=\"@{venue.imageUrl}\"\napp:error=\"@{@drawable/venueError}\"/>\n```\n使用第一种BindingAdapter时，必须要同时声明`bind:imageUrl`和`bind:error`两个属性时，才会调用。\n\n- 在属性名匹配BindingAdapter时，自动会忽略属性名之前的命名空间\n- 可以自定义以android为命名空间的属性值（此时自定义覆盖默认）。\n\nBindingAdapter可以用在处理方法中使用旧值。如：在新值与旧值不同时，使用新值。\n```java\n@BindingAdapter(\"android:paddingLeft\")\npublic static void setPaddingLeft(View view, int oldPadding, int newPadding) {\n   if (oldPadding != newPadding) {\n       view.setPadding(newPadding,\n                       view.getPaddingTop(),\n                       view.getPaddingRight(),\n                       view.getPaddingBottom());\n   }\n}\n```\n事件处理器可以使用接口类或带有一个抽象方法的抽象类作为参数。如\n```java\n@BindingAdapter(\"android:onLayoutChange\")\npublic static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,\n       View.OnLayoutChangeListener newValue) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        if (oldValue != null) {\n            view.removeOnLayoutChangeListener(oldValue);\n        }\n        if (newValue != null) {\n            view.addOnLayoutChangeListener(newValue);\n        }\n    }\n}\n```\n当Listener有多个方法时，必须拆分成多个Listener。如：[View.OnAttachStateChangeListener](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html)有两个方法\n[onViewAttachedToWindow()](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View)) 和 [onViewDetachedFromWindow()](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View))。我们必须创建两个接口来区分属性和处理方法。\n```java\n@TargetApi(VERSION_CODES.HONEYCOMB_MR1)\npublic interface OnViewDetachedFromWindow {\n    void onViewDetachedFromWindow(View v);\n}\n\n@TargetApi(VERSION_CODES.HONEYCOMB_MR1)\npublic interface OnViewAttachedToWindow {\n    void onViewAttachedToWindow(View v);\n}\n```\n因为修改一个Listener可能会影响到其他的Listener，所以必须要创建三个不同的BindingAdapter\n```java\n@BindingAdapter(\"android:onViewAttachedToWindow\")\npublic static void setListener(View view, OnViewAttachedToWindow attached) {\n    setListener(view, null, attached);\n}\n\n@BindingAdapter(\"android:onViewDetachedFromWindow\")\npublic static void setListener(View view, OnViewDetachedFromWindow detached) {\n    setListener(view, detached, null);\n}\n\n@BindingAdapter({\"android:onViewDetachedFromWindow\", \"android:onViewAttachedToWindow\"})\npublic static void setListener(View view, final OnViewDetachedFromWindow detach,\n        final OnViewAttachedToWindow attach) {\n    if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1) {\n        final OnAttachStateChangeListener newListener;\n        if (detach == null && attach == null) {\n            newListener = null;\n        } else {\n            newListener = new OnAttachStateChangeListener() {\n                @Override\n                public void onViewAttachedToWindow(View v) {\n                    if (attach != null) {\n                        attach.onViewAttachedToWindow(v);\n                    }\n                }\n\n                @Override\n                public void onViewDetachedFromWindow(View v) {\n                    if (detach != null) {\n                        detach.onViewDetachedFromWindow(v);\n                    }\n                }\n            };\n        }\n        final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,\n                newListener, R.id.onAttachStateChangeListener);\n        if (oldListener != null) {\n            view.removeOnAttachStateChangeListener(oldListener);\n        }\n        if (newListener != null) {\n            view.addOnAttachStateChangeListener(newListener);\n        }\n    }\n}\n```\n上面的例子稍微复杂一些，因为View使用添加和移除Listener方式，而不是为[View.OnAttachStateChangeListener](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html)设置\nsetter方法。android.databinding.adapters.ListenerUtil类帮助跟踪之前的Listener，这样他们可以在\nBinding适配器中移除旧的Listener。\n通过 @TargetApi(VERSION_CODES.HONEYCOMB_MR1)注解接口OnViewDetachedFromWindow和OnViewAttachedToWindow，DataBinding代码生成器就会知道只有运行 Honeycomb MR1版本及以上的新设备才生成Listener。\n## 八、转换器Converters\n### 1. 对象转换\n如果是表达式返回的对象，则会从自动的、重命名或自定义的setter方法中选择一个setter方法。对象会强转成适合setter方法中参数类型。这种方式适合用ObservableMaps来保存数据的布局，如：\n```xml\n<TextView\n   android:text='@{userMap[\"lastName\"]}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n`userMap`返回的对象自动强转为`setText(CharSequence)`中参数类型。当setter方法的参数类型存在二义性时，如存在两个setter方法，但是参数不一样时，需要使用手动强转。\n### 2. 自定义转换 \n有时需要让布局在指定类型之前自动转换，如设置背景时\n```xml\n<View\n   android:background=\"@{isError ? @color/red : @color/white}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n这里android:background的setter方法参数类型为`Drawable `，但是Color是整型。可以将整型的color转为Drawable类型的`ColorDrawable `，通过BindingConversion注解的静态方法来实现。\n```java\n@BindingConversion\npublic static ColorDrawable convertColorToDrawable(int color) {\n   return new ColorDrawable(color);\n}\n```\n>注：转换器只在setter层执行，禁止使用混合类型。如：\n```xml\n<View\n   android:background=\"@{isError ? @drawable/error : @color/white}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n## 九、Android Studio对Data Binding的支持\n Android Studio支持很多data binding代码的编辑特性。如\n - 语法高亮\n - 标记表达式语法错误。\n - XML代码补全\n - 引用包括导航和快速文档\n\n>注：Arrays和[生成类型](https://docs.oracle.com/javase/tutorial/java/generics/types.html)如[Observable](https://developer.android.com/reference/android/databinding/Observable.html)类，可能会出现显示错误（实际上没有错误）\n 预览窗口显示data binding的默认值。如：\n```xml\n <TextView android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:text=\"@{user.firstName, default=PLACEHOLDER}\"/>\n```\n 预览窗口会显示PLACEHOLDER作为TextView默认值。\n 如果需要在项目设计时显示默认值，可以使用tools属性替代默认的表达式。具体见[Designtime Layout Attributes](http://tools.android.com/tips/layout-designtime-attributes)\n\n## 参考\n[Data Binding Library](https://developer.android.com/topic/libraries/data-binding/index.html)\n\n[棉花糖给 Android 带来的 Data Bindings](https://realm.io/cn/news/data-binding-android-boyar-mount/)\n\n[2-way Data Binding on Android](https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/)\n","source":"_posts/Android：DataBinding-Guide.md","raw":"title: Android：DataBinding Guide\ndate: 2016-07-17 16:56:24\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/c_scale,w_500/v1468746215/android/android_data_binding.png\ntags: android-mvvm\ncategories: android-mvvm\n---\n## 一、编译环境配置\n### 1. build.gradle\n```java\nandroid{\n    ...\n    dataBinding{\n        enabled true\n    }\n}\n```\n如果在依赖module中需要支持databinding库，则在对应的依赖module的build.gradle配置文件添加dataBinding。\n### 2. DataBinding 布局文件\n使用DataBinding库的布局文件与普通布局文件不同的是：跟标签使用`<layout/>`：包含`<data></data>`标签和普通的视图布局。\n{% codeblock lang:xml activity_main.xml %}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"/>\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.lastName}\"/>\n   </LinearLayout>\n</layout>\n{% endcodeblock %}\n\n示例中的<data>中的user变量用<variable>标签来引用：用`@{}`语法表示绑定的参数\n```xml\n...\n<data>\n    ...\n    <variable name=\"user\" type=\"com.example.User\"/>\n    ...\n</data>\n...\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"/>\n\n```\n`@{user.firstName}`意味：User中的firstName对应的具体\nJava POJO 类有两种方式\n1. 老式；一旦数据初始化后，值无法再次修改\n\t```java\n\tpublic class User{\n\t\tpublic final String firstName;\n\t\tpublic final String lastName;\n\t\tpublic User(String firstName , String lastName){\n\t\t    this.firstName = firstName;\n\t\t    this.lastName = lastName;\n\t\t}\n\t}\n\t```\n2. 或使用私有private的java POJO类\n\t```java\n\tpublic class User {\n\t   private final String firstName;\n\t   private final String lastName;\n\t   public User(String firstName, String lastName) {\n\t       this.firstName = firstName;\n\t       this.lastName = lastName;\n\t   }\n\t   public String getFirstName() {\n\t       return this.firstName;\n\t   }\n\t   public String getLastName() {\n\t       return this.lastName;\n\t   }\n\t}\n\t```\n从DataBinding角度来看，两个Java POJO类的效果相同。使用第一种Java类，TextView的android:text中表达式`@{user.firstName}`直接访问User的firstName字段。如果使用第二种类型Java类，则通过调用`getFirstName()`来访问User的firstName字段。\n> 注：如果User类中存在firstName()方法，则首先调用firstName()方法。\n\n### 3. 绑定数据\n默认情况下，会根据布局文件的名称，在编译时自动生成首字母大写、驼峰式命名方式并以`Binding`结尾的Binding类。比如有名称为`main_activity.xml`的布局文件，则在编译时生成`MainActivityBinding.java`类。类中有布局绑定的data信息（如main_activity.xml中的user）并生成data的setter方法。最简单地创建binding方式就是在inflate布局时。\n\n{% codeblock lang:java MainActivity.java %}\n...\n@override\nprotected void onCreate(Bundle savedInstanceState){\n\tsuper.onCreate(savedInstanceState);\n\tMainActivityBinding binding = DataBindingUtil.setContentView(this , R.layout.main_activity);\n\tUser user = new User(\"Test\" , \"User\");\n\tbinding.setUser(user);\n}\n...\n{% endcodeblock %}\n\n或通过编译生成的MainActivityBinding类创建Binding\n\n```java\nMainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater);\n```\n如果绑定的是ListView或RecyclerView对应的Adapter，对应的binding类为ListItemBinding\n\n```java\nListItemBinding binding = ListItemBinding.inflater(layoutInflater , viewGroup , false);\n// or\nListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false);\n```\n\n## 二、事件处理\nDataBinding可以使用表达式来处理View的事件分发操作（如：onClick）。事件属性名由监听方法统一管理。如[View.onLongClickListener](https://developer.android.com/reference/android/view/View.OnLongClickListener.html)的方法[onLongClick()](https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View))，则对应属性名为`android:onLongClick`。处理View事件分发有两种方式\n1. 方法关联（[Method References](https://developer.android.com/topic/libraries/data-binding/index.html#method_references)）方式：在表达式中应用符合签名的监听方法。如果表达式签名与对应的方法引用一致，DataBinding将包裹引用的方法和对象到绑定的方法中。如果表达式为null，则不会创建监听。\n2. 监听绑定（[Listener Bindings](https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings)）方式：在触发监听事件时，则调用绑定的lambda表达式。使用这个方式，DataBinding总是会创建View的监听事件。触发View事件时，调用lambda表达式绑定的方法。\n\n### 1. 方法关联\n直接将View对应的事件绑定到对应的方法。类似`android:onClick`关联Activity中的同名方法。比View#onClick属性相比，最大的好处就是这种方式只在编译时生成。所以在方法不存在或签名不正确时，则在编译阶段直接出错。\n方法关联与监听绑定最大的不同就是：实际的Listener是在数据绑定时而不是在事件出发创建。如果希望只在View事件触发时执行表达式，则应该使用[监听绑定](https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings)的方式。\n使用与处理方法名相同的表达式来关联监听事件，假设定义了如下的事件处理的类和方法\n```java\npublic class MyHandlers{\n    public void onClickFriend(View view){...}\n}\n```\n则要在布局文件中通过<variable/> 来声明事件处理类\n\n```xml\n<?xml version=\"1.0\" encoding=\"urf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <!-- 声明View的事件处理类 -->\n       <variable name=\"handlers\" type=\"com.example.Handlers\"/>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"\n           <!-- 绑定声明的事件处理类的对应监听方；保证方法存在且命名相同 -->\n           android:onClick=\"@{handlers::onClickFriend}\"/>\n   </LinearLayout>\n</layout>\n```\n>注：要保证表达式中的方法名签名与事件处理类一致：方法存在且名称一致。\n\n### 2. 监听绑定\n与方法关联类似，但只在触发View响应事件时绑定表达式。表达式中允许存在多个参数（需要Gradle插件版本2.0以上）。\n在方法关联中，方法参数必须符合事件监听的参数。在监听绑定中，只要求返回值符合监听表达式返回的值（除非返回void）。通过触发View事件调用绑定事件处理类中的方法。使用方法如下：\n```java\npublic class Presenter{\n\tpublic void onSaveClick(Task task){}\n}\n```\n绑定点击事件\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <data>\n        <variable name=\"task\" type=\"com.android.example.Task\" />\n        <variable name=\"presenter\" type=\"com.android.example.Presenter\" />\n    </data>\n    <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\">\n        <Button \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\"\n            android:onClick=\"@{() -> presenter.onSaveClick(task)}\" />\n    </LinearLayout>\n</layout>\n\n```\n使用lambda表达式的Listener只允许作为表达式的根元素。当表达式调用事件的回调方法时，DataBinding自动创建和注册必要的监听事件。当View分发事件时，DataBinding则通过事件分发调用绑定的表达式事件。在常规绑定的表达式中，可以得到值为null且线程安全的DataBinding，在执行View事件分发操作时。\n在上面的例子中，我们并没有定义[onClick(android.view.View)](https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View))方法中用到的view参数。在监听绑定的方式中，为Listener的参数提供了两种方式。\n\n1. ）忽略监听中所有的方法或名称\n\n\t```java\n\tandroid:onClick=\"@{(view) -> presenter.onSaveClick(task)}\"\n\t```\n2. ）在自定义的方法中命名要使用的参数\n\n\t```java\n\tpublic class Presenter{\n\t\tpublic void onSaveClick(View view , Task task){};\n\t}\n    // Layout \n\t...\n\tandroid:onClick=\"@{(theView) -> presenter.onSaveClick(theView ,task)}\"\n\t...\n\t```\n\n可以使用有多个参数的lambda表达式\n```java\npublic class Presenter {\n    public void onCompletedChanged(Task task, boolean completed){}\n}\n// Layout\n\n<CheckBox android:layout_width=\"wrap_content\" \n    android:layout_height=\"wrap_content\"\n    android:onCheckedChanged=\"@{(cb, isChecked) -> presenter.completeChanged(task, isChecked)}\" />\n```\n\n如果监听的事件返回值不是`void`类型，则自定义的表达式也必须要返回相同类型的值。如监听`onLongClick`时，则自定义的表达式必须要返回boolean类型。\n```java\npublic class Presenter {\n    public boolean onLongClick(View view, Task task){}\n}\n// Layout\nandroid:onLongClick=\"@{(theView) -> presenter.onLongClick(theView, task)}\"\n```\n\n如果因为null对象无法执行表达式，则Data Binding 会返回默认同种类型的Java 值。如引用类型为null，int为0，boolean默认值false 等。\n如果使用断言类型的表达式（如：三目运算），则可以使用`void`作为标识符\n```xml\nandroid:onClick=\"@{(v) -> v.isVisible() ? doSomething() : void}\"\n```\n\n### 3. 避免使用复杂监听\n监听表达式可以让代码易读性更好。但是含有复杂表达式的监听只会让你的布局易读性变差，更难维护。这些表达式\n应该尽量简单，在回调方法中来实现业务逻辑。如果有特殊点击事件，需要指定除\"android:onClick\"之外的属性，\n来避免冲突。下面的属性用来避免重复\n\n|        |         |         |\n---- | ---- | ----- \n[SearchView](https://developer.android.com/reference/android/widget/SearchView.html)    | setOnSearchClickListener(View.OnClickListener)     | android:onSearchClick\n[ZoomControls](https://developer.android.com/reference/android/widget/ZoomControls.html) | setOnZoomInClickListener(View.OnClickListener)    | android:onZoomIn\n[ZoomControls](https://developer.android.com/reference/android/widget/ZoomControls.html) | setOnZoomOutClickListener(View.OnClickListener) | android:onZoomOut\n\n## 三、布局详解\n### 1. Imports\n在data中不用或引入多个import元素。类似Java的import\n```java\n<data>\n    <import type=\"android.view.View\"/>\n</data>\n```\n现在可以在表达式中使用View了\n```xml\n<TextView\n    android:text=\"@{user.lastName}\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\"/>\n```\n导入的类名冲突时，可以使用别名来避免\n```xml\n<import type=\"android.view.View\"/>\n<import type=\"com.example.real.estate.View\"\n        alias=\"Vista\"/>\n```\n导入类型可以用来作为变量和表达式的类型引用\n```xml\n<data>\n    <import type=\"com.example.User\"/>\n    <import type=\"java.util.List\"/>\n    <variable name=\"user\" type=\"User\"/>\n    <variable name=\"userList\" type=\"List<User>\"/>\n</data>\n```\n>注：Android Studio尚未支持import的处理，所以IDE可能无法处理导入的变量。但是应用仍可以正常运行。\n可以在变量中使用完全限定名解决IDE的问题\n\n```xml\n<TextView\n   android:text=\"@{((User)(user.connection)).lastName}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n表达式可以使用导入类型的静态字段和静态方法。\n\n```xml\n<data>\n    <import type=\"com.example.MyStringUtils\"/>\n    <variable name=\"user\" type=\"com.example.User\"/>\n</data>\n…\n<TextView\n   android:text=\"@{MyStringUtils.capitalize(user.lastName)}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n\n### 2. Variables 变量\ndata中可以使用任意数量的variable元素\n```java\n<data>\n    <import type=\"android.graphics.drawable.Drawable\"/>\n    <variable name=\"user\"  type=\"com.example.User\"/>\n    <variable name=\"image\" type=\"Drawable\"/>\n    <variable name=\"note\"  type=\"String\"/>\n</data>\n```\n变量的类型检查均在编译时完成，所以如果是实现 [Observable](https://developer.android.com/reference/android/databinding/Observable.html)或 [Observable Collections](https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections)类型的变量则对应声明时的类型。如果变量或基类没有实现Observable*系列接口，则无法被观察，即无法实现动态绑定。\n当有不同配置的布局文件（如水平、垂直），变量则会被组合到一起，可能会出现命名冲突，所以这些布局的文件中不允许出现重复定义。\n生成的绑定类会为每个变量生成getter和setter方法，在调用setter方法之前，变量为java默认值。在必要情况下，DataBinding会生成名为context的特殊变量，context的值为root view的[getContext](https://developer.android.com/reference/android/view/View.html#getContext())返回值。如果在布局中显示指定具有相同的名称的context, 默认值则被覆盖。\n## 四、自定义生成Binding的类名\n默认情况，Binding类根据布局文件名，以驼峰形式，以\"Binding\"为后缀的来命名，位于module中的databinding包下。如\"contact_item.xml\"会生成ContactItemBinding的Binding类。如果module包名为`com.example.my.app` ,则生成的Binding 类位于com.example.my.app.databinding包下。\nBinding 类可以在data元素中用class 来重命名\n```xml\n<data class=\"ContactItem\">\n    ...\n</data>\n```\n则生成ContactItem，位于module的databinding包中。\n如果类需要生成在module的根目录，则添加添加前缀\".\"\n```xml\n<data class=\".ContactItem\">\n    ...\n</data>\n```\n或者指定包中\n```xml\n<data class=\"com.example.ContactItem\">\n    ...\n</data>\n```\n\n### 3. Includes布局\n如果使用include方式添加布局文件时，可以用命名空间(namespace)和变量名传递\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <include layout=\"@layout/name\"\n           bind:user=\"@{user}\"/>\n       <include layout=\"@layout/contact\"\n           bind:user=\"@{user}\"/>\n   </LinearLayout>\n</layout>\n```\n>注：name.xml 和 contact中必须也有user变量\n对应的include的布局<data/>的变量名必须要与引用它的布局属性名一致\n\nData Binding不支持使用<merge>作为直接子元素的布局，例如不支持类似以下的使用方式\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <merge>\n       <include layout=\"@layout/name\"\n           bind:user=\"@{user}\"/>\n       <include layout=\"@layout/contact\"\n           bind:user=\"@{user}\"/>\n   </merge>\n</layout>\n```\n### 4. 支持的表达式运算符\n\n1）常用特性\n与Java表达式类似\n\n- 四则运算      + - / * %\n- 字符串连接   +\n- 逻辑运算符   && ||\n- 二元运算符   & | ^\n- 一元运算符   + - ! ~\n- 移位运算符   >> >>> <<\n- 比较             == > < >= <=\n- instanceof\n- 组合 ()\n- 迭代 - character, String, numeric, null\n- 强制转换\n- 方法调用\n- 字段访问\n- 数组调用\n- 三目运算符 ?:\n\n使用范例\n```xml\nandroid:text=\"@{String.valueOf(index + 1)}\"\nandroid:visibility=\"@{age &lt; 13 ? View.GONE : View.VISIBLE}\"\nandroid:transitionName='@{\"image_\" + id}'\n```\n2）不支持特性\n\n- `不支持`Java 中 的this, super，new 操作符\n\n3）空聚合操作符\n```xml\nandroid:text=\"@{user.displayName ?? user.lastName}\"\n```\n与三目运算符`?:`相同\n```xml\nandroid:text=\"@{user.displayName != null ? user.displayName : user.lastName}\"\n```\n4）属性引用\n```xml\nandroid:text=\"@{user.lastName}\"\n```\n5）可以避免空指针\nData Binding自动检查null对象，避免空指针。如：@{user.name}, 如果user为空，则user.name为\n默认值null。类似的user.age为0\n\n6）集合\n常用集合:arrays, lists, sparse lists, and maps。可以用[]操作符。\n```xml\n<data>\n    <import type=\"android.util.SparseArray\"/>\n    <import type=\"java.util.Map\"/>\n    <import type=\"java.util.List\"/>\n    <variable name=\"list\" type=\"List<String>\"/>\n    <variable name=\"sparse\" type=\"SparseArray<String>\"/>\n    <variable name=\"map\" type=\"Map&lt<String, String>\"/>\n    <variable name=\"index\" type=\"int\"/>\n    <variable name=\"key\" type=\"String\"/>\n</data>\n…\nandroid:text=\"@{list[index]}\"\n…\nandroid:text=\"@{sparse[index]}\"\n…\nandroid:text=\"@{map[key]}\"\n```\n7）引用String值\n如果属性使用单引号，则表达式使用双引号\n```xml\nandroid:text='@{map[\"firstName\"]}'\n```\n如果属性使用双引号，String值使用单引号 或 双引号\n```xml\nandroid:text=\"@{map[`firstName`}\"\nandroid:text=\"@{map[\"firstName\"]}\"\n```\n8）引用资源文件\n使用正常资源访问语法\n```xml\n<!-- 访问资源 -->\nandroid:padding=\"@{large? @dimen/largePadding : @dimen/smallPadding}\"\n```\n根据String资源格式化字符串和复数。\n```xml\nandroid:text=\"@{@string/nameFormat(firstName, lastName)}\"\nandroid:text=\"@{@plurals/banana(bananaCount)}\"\n```\n\n带有多个参数的复数，应该传递所有参数。\n```xml\n  Have an orange\n  Have %d oranges\n\nandroid:text=\"@{@plurals/orange(orangeCount, orangeCount)}\"\n```\n需要明确的一些资源类型\n\nType   |    Normal Reference | Expression Reference\n------- | ------- | ---\nString[]\t|@array\t|@stringArray\nint[]\t|@array\t|@intArray\nTypedArray\t|@array\t|@typedArray\nAnimator\t|@animator\t|@animator\nStateListAnimator\t|@animator\t|@stateListAnimator\ncolor int\t|@color\t|@color\nColorStateList\t|@color\t|@colorStateList\n\n## 五、Data对象\n旧式Java POJO可以用做数据绑定，但是修改数据时不能更新UI。而真正的Data Binding在数据变化时能够来修改。\n有三种不同的数据变化通机制。[Observable objects](https://developer.android.com/topic/libraries/data-binding/index.html#observable_objects)、[observable fields](https://developer.android.com/topic/libraries/data-binding/index.html#observablefields)、[observable collection](https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections)。当这些可观察的数据对象绑定UI后，在data对象属性值变化时，会自动更新UI。\n### 1. 可观察对象（Observable Object）\n实现[Observable](https://developer.android.com/reference/android/databinding/Observable.html)接口的类可以绑定一个单独的Listener来监听对象属性值的变化。[Observable](https://developer.android.com/reference/android/databinding/Observable.html)接口提供了添加和移除监听的机制。[BaseObservable](https://developer.android.com/reference/android/databinding/BaseObservable.html)就是实现了Observable的监听注册机制的基类。为了能够让data数据对象在属性值变化时发出通知，可以通过为属性值的getter方法设定[Bindable](https://developer.android.com/reference/android/databinding/Bindable.html)注解并在setter方法中添加通知。\n```java\nprivate static class User extends BaseObservable {\n   private String firstName;\n   private String lastName;\n   @Bindable\n   public String getFirstName() {\n       return this.firstName;\n   }\n   @Bindable\n   public String getLastName() {\n       return this.lastName;\n   }\n   public void setFirstName(String firstName) {\n       this.firstName = firstName;\n       notifyPropertyChanged(BR.firstName);\n   }\n   public void setLastName(String lastName) {\n       this.lastName = lastName;\n       notifyPropertyChanged(BR.lastName);\n   }\n}\n\n```\n在编译时[Bindable](https://developer.android.com/reference/android/databinding/Bindable.html)注解会在BR类中生成对应的访问入口。BR类会在编译时自动在module中生成。如果\n无法修改data类的基类，可以使用[PropertyChangeRegistry](https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html)实现[Observable](https://developer.android.com/reference/android/databinding/Observable.html)接口，更高效存储和通知监听。\n\n### 2. 可观察字段（ObservableFields）\n如果仅有少量属性值或为了节省时间可以使用[ObservableField](https://developer.android.com/reference/android/databinding/ObservableField.html)来创建[Observable](https://developer.android.com/reference/android/databinding/Observable.html)类。与ObservableField类似的还有[ObservableBoolean](https://developer.android.com/reference/android/databinding/ObservableBoolean.html), [ObservableByte](https://developer.android.com/reference/android/databinding/ObservableByte.html), [ObservableChar](https://developer.android.com/reference/android/databinding/ObservableChar.html), [ObservableShort](https://developer.android.com/reference/android/databinding/ObservableShort.html), [ObservableInt](https://developer.android.com/reference/android/databinding/ObservableInt.html), \n[ObservableLong](https://developer.android.com/reference/android/databinding/ObservableLong.html), [ObservableFloat](https://developer.android.com/reference/android/databinding/ObservableFloat.html), [ObservableDouble](https://developer.android.com/reference/android/databinding/ObservableDouble.html)和[ObservableParcelable](https://developer.android.com/reference/android/databinding/ObservableParcelable.html)。ObservableFields是独立的可观察对象。使用基本数据类型可以避免封箱和拆箱操作。使用时需要在数据类中创建`public final`属性的字段\n```java\nprivate static class User {\n   public final ObservableField<String> firstName =\n       new ObservableField<>();\n   public final ObservableField<String> lastName =\n       new ObservableField<>();\n   public final ObservableInt age = new ObservableInt();\n}\n```\n使用set和get方法来存取属性值。\n```java\nuser.firstName.set(\"Google\");\nint age = user.age.get();\n```\n### 3. 可观察集合（Observable Collections）\n一些应用需要使用动态接口（如Map）来保存数据。Observable Collections可以通过键（key）来存取集合中的对象。如在键值为引用类型时，可以使用[ObservableArrayMap](https://developer.android.com/reference/android/databinding/ObservableArrayMap.html)。\n```java\nObservableArrayMap<String, Object> user = new ObservableArrayMap<>();\nuser.put(\"firstName\", \"Google\");\nuser.put(\"lastName\", \"Inc.\");\nuser.put(\"age\", 17);\n```\n在布局文件中 可以通过key来访问map中对象。\n\n```xml\n<data>\n    <import type=\"android.databinding.ObservableMap\"/>\n    <variable name=\"user\" type=\"ObservableMap<String, Object>\"/>\n</data>\n…\n<TextView\n   android:text='@{user[\"lastName\"]}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n<TextView\n   android:text='@{String.valueOf(1 + (Integer)user[\"age\"])}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n如果使用整型作为键值时，可以考虑使用[ObservableArrayList](https://developer.android.com/reference/android/databinding/ObservableArrayList.html)\n```java\nObservableArrayList<Object> user = new ObservableArrayList<>();\nuser.add(\"Google\");\nuser.add(\"Inc.\");\nuser.add(17);\n```\n在布局中使用索引来访问list集合\n```xml\n<data>\n    <import type=\"android.databinding.ObservableList\"/>\n    <import type=\"com.example.my.app.Fields\"/>\n    <variable name=\"user\" type=\"ObservableList<Object>\"/>\n</data>\n…\n<TextView\n   android:text='@{user[Fields.LAST_NAME]}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n<TextView\n   android:text='@{String.valueOf(1 + (Integer)user[Fields.AGE])}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n\n## 六、生成的Binding类\n生成的Binding能够通过layout中的Views对象连接布局变量。如上所述，Binding类的命名和包名可以[自定义](https://developer.android.com/topic/libraries/data-binding/index.html#custom_binding_class_names)，生成的Binding类都继承自[ViewDataBinding](https://developer.android.com/reference/android/databinding/ViewDataBinding.html)。\n\n### 1. 创建Binding类对象\nBinding类对象应该在inflate视图之后尽快创建，保证在表达式绑定View时，View Hierarchy不会被干扰。绑定布局文件有不同方式，最常用是用Binding类的静态方法。\n```java\nMyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate);\n// 或者\nMyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate , viewGroup , false);\n```\n如果布局使用其他方式inflate，则需要分开来完成绑定。\n```java\nMyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);\n```\n有时不能预先知道binding。在这些情况可以使用[DataBindingUtil](https://developer.android.com/reference/android/databinding/DataBindingUtil.html)类\n```java\nViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId,\n    parent, attachToParent);\nViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);\n```\n### 2. 使用ID的View\n当为View指定一个ID时，则会在Binding类中为View生成一个`public final`属性的字段，直接获取View，比通过调用findViewById更加快速。如\n```xml\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"\n           android:id=\"@+id/firstName\"/>\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.lastName}\"\n  android:id=\"@+id/lastName\"/>\n   </LinearLayout>\n</layout>\n```\n则会在Binding类中生成如下的字段\n```java\npublic final TextView firstName;\npublic final TextView lastName;\n```\n对于data binding来说 ID几乎没有必要，但是在需要在代码中来获取view实例时仍有必要。\n### 3. Variables变量\n会为布局中每个声明的变量生成getter和setter方法的。\n```xml\n<data>\n    <import type=\"android.graphics.drawable.Drawable\"/>\n    <variable name=\"user\"  type=\"com.example.User\"/>\n    <variable name=\"image\" type=\"Drawable\"/>\n    <variable name=\"note\"  type=\"String\"/>\n</data>\n```\n会在Binding类中生成如下方法\n```java\npublic abstract com.example.User getUser();\npublic abstract void setUser(com.example.User user);\npublic abstract Drawable getImage();\npublic abstract void setImage(Drawable image);\npublic abstract String getNote();\npublic abstract void setNote(String note);\n```\n### 4. ViewStubs布局\n[ViewStub](https://developer.android.com/reference/android/view/ViewStub.html)与常用View有些不同：起始时不可见，\n```xml\n <ViewStub android:id=\"@+id/stub\"\n     android:inflatedId=\"@+id/subTree\"\n     android:layout=\"@layout/mySubTree\"\n     android:layout_width=\"120dip\"\n     android:layout_height=\"40dip\" />\n```\n用setVisiable变为可见或显式调用inflate时，则用android:layout中的定义布局替换自己与`include`类似。但与`include`不同的的是在初始时并不会inflate到布局文件中，所以Binding的view不会在初始化时完成绑定。因为Binding中的View为final属性，使用[ViewStubProxy](https://developer.android.com/reference/android/databinding/ViewStubProxy.html)代理对象来替代ViewStud，可以在ViewStud创建后来访问。同样在ViewStud被inflate时，能够访问inflated的View Hierarchy。当inflate ViewStud的布局时，必须为新布局建立Binding。因此ViewStubProxy必须监听[ViewStub.OnInflateListener](https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html)并在inflate时建立Binding。又因为只能有一个存在，ViewStubProxy在创建Binding类对象后调用OnInflateListener。\n\n## 七、高级Binding\n### 1. 动态变量\n有时不知道指定的Binding类。如： 操作不同布局的[RecyclerView.Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html)不知道指定的Binding类，但必须要在[onBindViewHolder(VH , int)](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#onBindViewHolder(VH, int))\n中关联Binding值。\n例子中所有RecyclerView绑定的布局都有一个item变量。BindingHolder有一个getBinding方法返回[ViewDataBinding](https://developer.android.com/reference/android/databinding/ViewDataBinding.html)基类。\n```java\npublic void onBindViewHolder(BindingHolder holder, int position) {\n   final T item = mItems.get(position);\n   holder.getBinding().setVariable(BR.item, item);\n   holder.getBinding().executePendingBindings();\n}\n```\n### 2. 立即绑定\n当变量或观察者变化时，Binding在下一帧前执行改变操作。有时Binding必须立即执行。强制执行使用 [executePendingBindings()](https://developer.android.com/reference/android/databinding/ViewDataBinding.html#executePendingBindings())方法\n### 3. 后台线程\nDataBinding可以在后台线程中修改非集合类型的data数据，在线程中执行时，DataBinding会本地化变量和字段，避免多线程引起的同步问题。\n\n## 七、属性Setter\n无论何时绑定值变化，生成的binding类都必须view中绑定的表达式setter方法。DataBinding框架能够自定义setter的方法。\n### 1. 自动setter\n对于属性attribute来说，DataBinding会尝试查找setAttribute方法。attribute的命名空间可以或略，只针对属性的名称。如：关联TextView的android:text属性表达式会查找setText方法。如果表达式返回int，DataBinding会搜索setText(int)的方法。注意要用返回正确类型的表达式，如果必要的话，使用强制类型转换。\n>注：即使不存在指定的属性名，DataBinding也会工作。\n\n你可以使用DataBinding为任意setter方法创建对应的属性名。如：依赖库DrawerLayout没有任何属性名，但是仍有很多setter，可以使用自动的属性名setter方法\n```xml\n<android.support.v4.widget.DrawerLayout\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:scrimColor=\"@{@color/scrim}\"\n    app:drawerListener=\"@{fragment.drawerListener}\"/>\n```\n### 2. setter重命名\n有点setter方法没有对应的属性名。对于这些方法，可以用[BindingMethods](https://developer.android.com/reference/android/databinding/BindingMethods.html)注解关联指定的属性名，使用这种方式时必须关联用[BindingMethods](https://developer.android.com/reference/android/databinding/BindingMethod.html)注解的类。如`android:tint`属性名实际关联的是[setImageTintList(ColorStateList)](https://developer.android.com/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList))方法而不是`setTint()`。\n```java\n@BindingMethods({\n       @BindingMethod(type = \"android.widget.ImageView\",\n                      attribute = \"android:tint\",\n                      method = \"setImageTintList\"),\n})\n```\n一般来说没有必要重命名setters，因为android框架属性已经实现。\n### 3. 自定义setter\n有时需要自定义属性的绑定逻辑。如：`android:paddingLeft`没有对应的setter实现方法，但是存在`setPadding(left, top, right, bottom) `方法。使用` BindingAdapter`注解的静态方法可以用来自定义属性名的setter逻辑。\nandroid属性已经有创建的[BindingAdapter](https://developer.android.com/reference/android/databinding/BindingAdapter.html)，如： paddingLeft\n```java\n@BindingAdapter(\"android:paddingLeft\")\npublic static void setPaddingLeft(View view, int padding) {\n   view.setPadding(padding,\n                   view.getPaddingTop(),\n                   view.getPaddingRight(),\n                   view.getPaddingBottom());\n}\n```\nBindingAdapter对自定义类型的属性很有用。如：创建图片加载方法。\n>注：当默认的Adapter与自定义的BindingAdapter冲突时，自定义的BindingAdapter覆盖默认值。\n\n```java\n// 1. 全部满足\n@BindingAdapter({\"bind:imageUrl\", \"bind:error\"})\npublic static void loadImage(ImageView view, String url, Drawable error) {\n   Picasso.with(view.getContext()).load(url).error(error).into(view);\n}\n// 2. 满足其中一个时\n@BindingAdapter(value = {\"bind:imageUrl\", \"bind:error\"} , requireAll = false)\npublic static void loadImage(ImageView view, String url, Drawable error) {\n   Picasso.with(view.getContext()).load(url).error(error).into(view);\n}\n\n// Layout\n<ImageView app:imageUrl=\"@{venue.imageUrl}\"\napp:error=\"@{@drawable/venueError}\"/>\n```\n使用第一种BindingAdapter时，必须要同时声明`bind:imageUrl`和`bind:error`两个属性时，才会调用。\n\n- 在属性名匹配BindingAdapter时，自动会忽略属性名之前的命名空间\n- 可以自定义以android为命名空间的属性值（此时自定义覆盖默认）。\n\nBindingAdapter可以用在处理方法中使用旧值。如：在新值与旧值不同时，使用新值。\n```java\n@BindingAdapter(\"android:paddingLeft\")\npublic static void setPaddingLeft(View view, int oldPadding, int newPadding) {\n   if (oldPadding != newPadding) {\n       view.setPadding(newPadding,\n                       view.getPaddingTop(),\n                       view.getPaddingRight(),\n                       view.getPaddingBottom());\n   }\n}\n```\n事件处理器可以使用接口类或带有一个抽象方法的抽象类作为参数。如\n```java\n@BindingAdapter(\"android:onLayoutChange\")\npublic static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,\n       View.OnLayoutChangeListener newValue) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        if (oldValue != null) {\n            view.removeOnLayoutChangeListener(oldValue);\n        }\n        if (newValue != null) {\n            view.addOnLayoutChangeListener(newValue);\n        }\n    }\n}\n```\n当Listener有多个方法时，必须拆分成多个Listener。如：[View.OnAttachStateChangeListener](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html)有两个方法\n[onViewAttachedToWindow()](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View)) 和 [onViewDetachedFromWindow()](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View))。我们必须创建两个接口来区分属性和处理方法。\n```java\n@TargetApi(VERSION_CODES.HONEYCOMB_MR1)\npublic interface OnViewDetachedFromWindow {\n    void onViewDetachedFromWindow(View v);\n}\n\n@TargetApi(VERSION_CODES.HONEYCOMB_MR1)\npublic interface OnViewAttachedToWindow {\n    void onViewAttachedToWindow(View v);\n}\n```\n因为修改一个Listener可能会影响到其他的Listener，所以必须要创建三个不同的BindingAdapter\n```java\n@BindingAdapter(\"android:onViewAttachedToWindow\")\npublic static void setListener(View view, OnViewAttachedToWindow attached) {\n    setListener(view, null, attached);\n}\n\n@BindingAdapter(\"android:onViewDetachedFromWindow\")\npublic static void setListener(View view, OnViewDetachedFromWindow detached) {\n    setListener(view, detached, null);\n}\n\n@BindingAdapter({\"android:onViewDetachedFromWindow\", \"android:onViewAttachedToWindow\"})\npublic static void setListener(View view, final OnViewDetachedFromWindow detach,\n        final OnViewAttachedToWindow attach) {\n    if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1) {\n        final OnAttachStateChangeListener newListener;\n        if (detach == null && attach == null) {\n            newListener = null;\n        } else {\n            newListener = new OnAttachStateChangeListener() {\n                @Override\n                public void onViewAttachedToWindow(View v) {\n                    if (attach != null) {\n                        attach.onViewAttachedToWindow(v);\n                    }\n                }\n\n                @Override\n                public void onViewDetachedFromWindow(View v) {\n                    if (detach != null) {\n                        detach.onViewDetachedFromWindow(v);\n                    }\n                }\n            };\n        }\n        final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,\n                newListener, R.id.onAttachStateChangeListener);\n        if (oldListener != null) {\n            view.removeOnAttachStateChangeListener(oldListener);\n        }\n        if (newListener != null) {\n            view.addOnAttachStateChangeListener(newListener);\n        }\n    }\n}\n```\n上面的例子稍微复杂一些，因为View使用添加和移除Listener方式，而不是为[View.OnAttachStateChangeListener](https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html)设置\nsetter方法。android.databinding.adapters.ListenerUtil类帮助跟踪之前的Listener，这样他们可以在\nBinding适配器中移除旧的Listener。\n通过 @TargetApi(VERSION_CODES.HONEYCOMB_MR1)注解接口OnViewDetachedFromWindow和OnViewAttachedToWindow，DataBinding代码生成器就会知道只有运行 Honeycomb MR1版本及以上的新设备才生成Listener。\n## 八、转换器Converters\n### 1. 对象转换\n如果是表达式返回的对象，则会从自动的、重命名或自定义的setter方法中选择一个setter方法。对象会强转成适合setter方法中参数类型。这种方式适合用ObservableMaps来保存数据的布局，如：\n```xml\n<TextView\n   android:text='@{userMap[\"lastName\"]}'\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n`userMap`返回的对象自动强转为`setText(CharSequence)`中参数类型。当setter方法的参数类型存在二义性时，如存在两个setter方法，但是参数不一样时，需要使用手动强转。\n### 2. 自定义转换 \n有时需要让布局在指定类型之前自动转换，如设置背景时\n```xml\n<View\n   android:background=\"@{isError ? @color/red : @color/white}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n这里android:background的setter方法参数类型为`Drawable `，但是Color是整型。可以将整型的color转为Drawable类型的`ColorDrawable `，通过BindingConversion注解的静态方法来实现。\n```java\n@BindingConversion\npublic static ColorDrawable convertColorToDrawable(int color) {\n   return new ColorDrawable(color);\n}\n```\n>注：转换器只在setter层执行，禁止使用混合类型。如：\n```xml\n<View\n   android:background=\"@{isError ? @drawable/error : @color/white}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n```\n## 九、Android Studio对Data Binding的支持\n Android Studio支持很多data binding代码的编辑特性。如\n - 语法高亮\n - 标记表达式语法错误。\n - XML代码补全\n - 引用包括导航和快速文档\n\n>注：Arrays和[生成类型](https://docs.oracle.com/javase/tutorial/java/generics/types.html)如[Observable](https://developer.android.com/reference/android/databinding/Observable.html)类，可能会出现显示错误（实际上没有错误）\n 预览窗口显示data binding的默认值。如：\n```xml\n <TextView android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:text=\"@{user.firstName, default=PLACEHOLDER}\"/>\n```\n 预览窗口会显示PLACEHOLDER作为TextView默认值。\n 如果需要在项目设计时显示默认值，可以使用tools属性替代默认的表达式。具体见[Designtime Layout Attributes](http://tools.android.com/tips/layout-designtime-attributes)\n\n## 参考\n[Data Binding Library](https://developer.android.com/topic/libraries/data-binding/index.html)\n\n[棉花糖给 Android 带来的 Data Bindings](https://realm.io/cn/news/data-binding-android-boyar-mount/)\n\n[2-way Data Binding on Android](https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/)\n","slug":"Android：DataBinding-Guide","published":1,"updated":"2016-07-18T14:46:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txt0009grm3a61f9abs","content":"<h2 id=\"一、编译环境配置\"><a href=\"#一、编译环境配置\" class=\"headerlink\" title=\"一、编译环境配置\"></a>一、编译环境配置</h2><h3 id=\"1-build-gradle\"><a href=\"#1-build-gradle\" class=\"headerlink\" title=\"1. build.gradle\"></a>1. build.gradle</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    dataBinding&#123;</div><div class=\"line\">        enabled <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在依赖module中需要支持databinding库，则在对应的依赖module的build.gradle配置文件添加dataBinding。</p>\n<h3 id=\"2-DataBinding-布局文件\"><a href=\"#2-DataBinding-布局文件\" class=\"headerlink\" title=\"2. DataBinding 布局文件\"></a>2. DataBinding 布局文件</h3><p>使用DataBinding库的布局文件与普通布局文件不同的是：跟标签使用<code>&lt;layout/&gt;</code>：包含<code>&lt;data&gt;&lt;/data&gt;</code>标签和普通的视图布局。<br><figure class=\"highlight xml\"><figcaption><span>activity_main.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例中的<data>中的user变量用<variable>标签来引用：用<code>@{}</code>语法表示绑定的参数<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></variable></data></p>\n<p><code>@{user.firstName}</code>意味：User中的firstName对应的具体<br>Java POJO 类有两种方式</p>\n<ol>\n<li><p>老式；一旦数据初始化后，值无法再次修改</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String firstName;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String lastName;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String firstName , String lastName)</span></span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">\t    <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或使用私有private的java POJO类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String firstName;</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String lastName;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String firstName, String lastName)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">       <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>从DataBinding角度来看，两个Java POJO类的效果相同。使用第一种Java类，TextView的android:text中表达式<code>@{user.firstName}</code>直接访问User的firstName字段。如果使用第二种类型Java类，则通过调用<code>getFirstName()</code>来访问User的firstName字段。</p>\n<blockquote>\n<p>注：如果User类中存在firstName()方法，则首先调用firstName()方法。</p>\n</blockquote>\n<h3 id=\"3-绑定数据\"><a href=\"#3-绑定数据\" class=\"headerlink\" title=\"3. 绑定数据\"></a>3. 绑定数据</h3><p>默认情况下，会根据布局文件的名称，在编译时自动生成首字母大写、驼峰式命名方式并以<code>Binding</code>结尾的Binding类。比如有名称为<code>main_activity.xml</code>的布局文件，则在编译时生成<code>MainActivityBinding.java</code>类。类中有布局绑定的data信息（如main_activity.xml中的user）并生成data的setter方法。最简单地创建binding方式就是在inflate布局时。</p>\n<figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\tMainActivityBinding binding = DataBindingUtil.setContentView(<span class=\"keyword\">this</span> , R.layout.main_activity);</div><div class=\"line\">\tUser user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"Test\"</span> , <span class=\"string\">\"User\"</span>);</div><div class=\"line\">\tbinding.setUser(user);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>或通过编译生成的MainActivityBinding类创建Binding</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater);</div></pre></td></tr></table></figure>\n<p>如果绑定的是ListView或RecyclerView对应的Adapter，对应的binding类为ListItemBinding</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListItemBinding binding = ListItemBinding.inflater(layoutInflater , viewGroup , <span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"二、事件处理\"><a href=\"#二、事件处理\" class=\"headerlink\" title=\"二、事件处理\"></a>二、事件处理</h2><p>DataBinding可以使用表达式来处理View的事件分发操作（如：onClick）。事件属性名由监听方法统一管理。如<a href=\"https://developer.android.com/reference/android/view/View.OnLongClickListener.html\" target=\"_blank\" rel=\"external\">View.onLongClickListener</a>的方法<a href=\"https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View\" target=\"_blank\" rel=\"external\">onLongClick()</a>)，则对应属性名为<code>android:onLongClick</code>。处理View事件分发有两种方式</p>\n<ol>\n<li>方法关联（<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#method_references\" target=\"_blank\" rel=\"external\">Method References</a>）方式：在表达式中应用符合签名的监听方法。如果表达式签名与对应的方法引用一致，DataBinding将包裹引用的方法和对象到绑定的方法中。如果表达式为null，则不会创建监听。</li>\n<li>监听绑定（<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings\" target=\"_blank\" rel=\"external\">Listener Bindings</a>）方式：在触发监听事件时，则调用绑定的lambda表达式。使用这个方式，DataBinding总是会创建View的监听事件。触发View事件时，调用lambda表达式绑定的方法。</li>\n</ol>\n<h3 id=\"1-方法关联\"><a href=\"#1-方法关联\" class=\"headerlink\" title=\"1. 方法关联\"></a>1. 方法关联</h3><p>直接将View对应的事件绑定到对应的方法。类似<code>android:onClick</code>关联Activity中的同名方法。比View#onClick属性相比，最大的好处就是这种方式只在编译时生成。所以在方法不存在或签名不正确时，则在编译阶段直接出错。<br>方法关联与监听绑定最大的不同就是：实际的Listener是在数据绑定时而不是在事件出发创建。如果希望只在View事件触发时执行表达式，则应该使用<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings\" target=\"_blank\" rel=\"external\">监听绑定</a>的方式。<br>使用与处理方法名相同的表达式来关联监听事件，假设定义了如下的事件处理的类和方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandlers</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickFriend</span><span class=\"params\">(View view)</span></span>&#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>则要在布局文件中通过<variable> 来声明事件处理类</variable></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"urf-8\"?&gt;</div><div class=\"line\">&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;!-- 声明View的事件处理类 --&gt;</div><div class=\"line\">       &lt;variable name=\"handlers\" type=\"com.example.Handlers\"/&gt;</div><div class=\"line\">       &lt;variable name=\"user\" type=\"com.example.User\"/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=\"vertical\"</div><div class=\"line\">       android:layout_width=\"match_parent\"</div><div class=\"line\">       android:layout_height=\"match_parent\"&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=\"wrap_content\"</div><div class=\"line\">           android:layout_height=\"wrap_content\"</div><div class=\"line\">           android:text=\"@&#123;user.firstName&#125;\"</div><div class=\"line\">           &lt;!-- 绑定声明的事件处理类的对应监听方；保证方法存在且命名相同 --&gt;</div><div class=\"line\">           android:onClick=\"@&#123;handlers::onClickFriend&#125;\"/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：要保证表达式中的方法名签名与事件处理类一致：方法存在且名称一致。</p>\n</blockquote>\n<h3 id=\"2-监听绑定\"><a href=\"#2-监听绑定\" class=\"headerlink\" title=\"2. 监听绑定\"></a>2. 监听绑定</h3><p>与方法关联类似，但只在触发View响应事件时绑定表达式。表达式中允许存在多个参数（需要Gradle插件版本2.0以上）。<br>在方法关联中，方法参数必须符合事件监听的参数。在监听绑定中，只要求返回值符合监听表达式返回的值（除非返回void）。通过触发View事件调用绑定事件处理类中的方法。使用方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveClick</span><span class=\"params\">(Task task)</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>绑定点击事件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"task\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.android.example.Task\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"presenter\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.android.example.Presenter\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> </span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;() -&gt; presenter.onSaveClick(task)&#125;\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>使用lambda表达式的Listener只允许作为表达式的根元素。当表达式调用事件的回调方法时，DataBinding自动创建和注册必要的监听事件。当View分发事件时，DataBinding则通过事件分发调用绑定的表达式事件。在常规绑定的表达式中，可以得到值为null且线程安全的DataBinding，在执行View事件分发操作时。<br>在上面的例子中，我们并没有定义<a href=\"https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View\" target=\"_blank\" rel=\"external\">onClick(android.view.View)</a>)方法中用到的view参数。在监听绑定的方式中，为Listener的参数提供了两种方式。</p>\n<ol>\n<li><p>）忽略监听中所有的方法或名称</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:onClick=<span class=\"string\">\"@&#123;(view) -&gt; presenter.onSaveClick(task)&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>）在自定义的方法中命名要使用的参数</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveClick</span><span class=\"params\">(View view , Task task)</span></span>&#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">   <span class=\"comment\">// Layout </span></div><div class=\"line\">...</div><div class=\"line\">android:onClick=<span class=\"string\">\"@&#123;(theView) -&gt; presenter.onSaveClick(theView ,task)&#125;\"</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以使用有多个参数的lambda表达式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompletedChanged</span><span class=\"params\">(Task task, <span class=\"keyword\">boolean</span> completed)</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Layout</span></div><div class=\"line\"></div><div class=\"line\">&lt;CheckBox android:layout_width=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    android:onCheckedChanged=<span class=\"string\">\"@&#123;(cb, isChecked) -&gt; presenter.completeChanged(task, isChecked)&#125;\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>如果监听的事件返回值不是<code>void</code>类型，则自定义的表达式也必须要返回相同类型的值。如监听<code>onLongClick</code>时，则自定义的表达式必须要返回boolean类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view, Task task)</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Layout</span></div><div class=\"line\">android:onLongClick=<span class=\"string\">\"@&#123;(theView) -&gt; presenter.onLongClick(theView, task)&#125;\"</span></div></pre></td></tr></table></figure></p>\n<p>如果因为null对象无法执行表达式，则Data Binding 会返回默认同种类型的Java 值。如引用类型为null，int为0，boolean默认值false 等。<br>如果使用断言类型的表达式（如：三目运算），则可以使用<code>void</code>作为标识符<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:onClick=\"@&#123;(v) -&gt; v.isVisible() ? doSomething() : void&#125;\"</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-避免使用复杂监听\"><a href=\"#3-避免使用复杂监听\" class=\"headerlink\" title=\"3. 避免使用复杂监听\"></a>3. 避免使用复杂监听</h3><p>监听表达式可以让代码易读性更好。但是含有复杂表达式的监听只会让你的布局易读性变差，更难维护。这些表达式<br>应该尽量简单，在回调方法中来实现业务逻辑。如果有特殊点击事件，需要指定除”android:onClick”之外的属性，<br>来避免冲突。下面的属性用来避免重复</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.android.com/reference/android/widget/SearchView.html\" target=\"_blank\" rel=\"external\">SearchView</a></td>\n<td>setOnSearchClickListener(View.OnClickListener)</td>\n<td>android:onSearchClick</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.android.com/reference/android/widget/ZoomControls.html\" target=\"_blank\" rel=\"external\">ZoomControls</a></td>\n<td>setOnZoomInClickListener(View.OnClickListener)</td>\n<td>android:onZoomIn</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.android.com/reference/android/widget/ZoomControls.html\" target=\"_blank\" rel=\"external\">ZoomControls</a></td>\n<td>setOnZoomOutClickListener(View.OnClickListener)</td>\n<td>android:onZoomOut</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三、布局详解\"><a href=\"#三、布局详解\" class=\"headerlink\" title=\"三、布局详解\"></a>三、布局详解</h2><h3 id=\"1-Imports\"><a href=\"#1-Imports\" class=\"headerlink\" title=\"1. Imports\"></a>1. Imports</h3><p>在data中不用或引入多个import元素。类似Java的import<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=\"android.view.View\"/&gt;</div><div class=\"line\">&lt;/data&gt;</div></pre></td></tr></table></figure></p>\n<p>现在可以在表达式中使用View了<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>导入的类名冲突时，可以使用别名来避免<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.view.View\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.real.estate.View\"</span></span></div><div class=\"line\">        <span class=\"attr\">alias</span>=<span class=\"string\">\"Vista\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>导入类型可以用来作为变量和表达式的类型引用<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.List\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"User\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userList\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"List&lt;User&gt;\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：Android Studio尚未支持import的处理，所以IDE可能无法处理导入的变量。但是应用仍可以正常运行。<br>可以在变量中使用完全限定名解决IDE的问题</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;((User)(user.connection)).lastName&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>表达式可以使用导入类型的静态字段和静态方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.MyStringUtils\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;MyStringUtils.capitalize(user.lastName)&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Variables-变量\"><a href=\"#2-Variables-变量\" class=\"headerlink\" title=\"2. Variables 变量\"></a>2. Variables 变量</h3><p>data中可以使用任意数量的variable元素<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=\"android.graphics.drawable.Drawable\"/&gt;</div><div class=\"line\">    &lt;variable name=\"user\"  type=\"com.example.User\"/&gt;</div><div class=\"line\">    &lt;variable name=\"image\" type=\"Drawable\"/&gt;</div><div class=\"line\">    &lt;variable name=\"note\"  type=\"String\"/&gt;</div><div class=\"line\">&lt;/data&gt;</div></pre></td></tr></table></figure></p>\n<p>变量的类型检查均在编译时完成，所以如果是实现 <a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>或 <a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections\" target=\"_blank\" rel=\"external\">Observable Collections</a>类型的变量则对应声明时的类型。如果变量或基类没有实现Observable*系列接口，则无法被观察，即无法实现动态绑定。<br>当有不同配置的布局文件（如水平、垂直），变量则会被组合到一起，可能会出现命名冲突，所以这些布局的文件中不允许出现重复定义。<br>生成的绑定类会为每个变量生成getter和setter方法，在调用setter方法之前，变量为java默认值。在必要情况下，DataBinding会生成名为context的特殊变量，context的值为root view的<a href=\"https://developer.android.com/reference/android/view/View.html#getContext(\" target=\"_blank\" rel=\"external\">getContext</a>)返回值。如果在布局中显示指定具有相同的名称的context, 默认值则被覆盖。</p>\n<h2 id=\"四、自定义生成Binding的类名\"><a href=\"#四、自定义生成Binding的类名\" class=\"headerlink\" title=\"四、自定义生成Binding的类名\"></a>四、自定义生成Binding的类名</h2><p>默认情况，Binding类根据布局文件名，以驼峰形式，以”Binding”为后缀的来命名，位于module中的databinding包下。如”contact_item.xml”会生成ContactItemBinding的Binding类。如果module包名为<code>com.example.my.app</code> ,则生成的Binding 类位于com.example.my.app.databinding包下。<br>Binding 类可以在data元素中用class 来重命名<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ContactItem\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>则生成ContactItem，位于module的databinding包中。<br>如果类需要生成在module的根目录，则添加添加前缀”.”<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">\".ContactItem\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>或者指定包中<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.example.ContactItem\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-Includes布局\"><a href=\"#3-Includes布局\" class=\"headerlink\" title=\"3. Includes布局\"></a>3. Includes布局</h3><p>如果使用include方式添加布局文件时，可以用命名空间(namespace)和变量名传递<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:bind</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/name\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/contact\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：name.xml 和 contact中必须也有user变量<br>对应的include的布局<data>的变量名必须要与引用它的布局属性名一致</data></p>\n</blockquote>\n<p>Data Binding不支持使用<merge>作为直接子元素的布局，例如不支持类似以下的使用方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:bind</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">merge</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/name\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/contact\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></merge></p>\n<h3 id=\"4-支持的表达式运算符\"><a href=\"#4-支持的表达式运算符\" class=\"headerlink\" title=\"4. 支持的表达式运算符\"></a>4. 支持的表达式运算符</h3><p>1）常用特性<br>与Java表达式类似</p>\n<ul>\n<li>四则运算      + - / * %</li>\n<li>字符串连接   +</li>\n<li>逻辑运算符   &amp;&amp; ||</li>\n<li>二元运算符   &amp; | ^</li>\n<li>一元运算符   + - ! ~</li>\n<li>移位运算符   &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>\n<li>比较             == &gt; &lt; &gt;= &lt;=</li>\n<li>instanceof</li>\n<li>组合 ()</li>\n<li>迭代 - character, String, numeric, null</li>\n<li>强制转换</li>\n<li>方法调用</li>\n<li>字段访问</li>\n<li>数组调用</li>\n<li>三目运算符 ?:</li>\n</ul>\n<p>使用范例<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;String.valueOf(index + 1)&#125;\"</div><div class=\"line\">android:visibility=\"@&#123;age &amp;lt; 13 ? View.GONE : View.VISIBLE&#125;\"</div><div class=\"line\">android:transitionName='@&#123;\"image_\" + id&#125;'</div></pre></td></tr></table></figure></p>\n<p>2）不支持特性</p>\n<ul>\n<li><code>不支持</code>Java 中 的this, super，new 操作符</li>\n</ul>\n<p>3）空聚合操作符<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;user.displayName ?? user.lastName&#125;\"</div></pre></td></tr></table></figure></p>\n<p>与三目运算符<code>?:</code>相同<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;user.displayName != null ? user.displayName : user.lastName&#125;\"</div></pre></td></tr></table></figure></p>\n<p>4）属性引用<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;user.lastName&#125;\"</div></pre></td></tr></table></figure></p>\n<p>5）可以避免空指针<br>Data Binding自动检查null对象，避免空指针。如：@{user.name}, 如果user为空，则user.name为<br>默认值null。类似的user.age为0</p>\n<p>6）集合<br>常用集合:arrays, lists, sparse lists, and maps。可以用[]操作符。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.util.SparseArray\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.Map\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.List\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"List&lt;String&gt;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sparse\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SparseArray&lt;String&gt;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Map&amp;lt&lt;String, String&gt;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"int\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"key\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\">android:text=\"@&#123;list[index]&#125;\"</div><div class=\"line\">…</div><div class=\"line\">android:text=\"@&#123;sparse[index]&#125;\"</div><div class=\"line\">…</div><div class=\"line\">android:text=\"@&#123;map[key]&#125;\"</div></pre></td></tr></table></figure></p>\n<p>7）引用String值<br>如果属性使用单引号，则表达式使用双引号<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text='@&#123;map[\"firstName\"]&#125;'</div></pre></td></tr></table></figure></p>\n<p>如果属性使用双引号，String值使用单引号 或 双引号<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;map[`firstName`&#125;\"</div><div class=\"line\">android:text=\"@&#123;map[\"firstName\"]&#125;\"</div></pre></td></tr></table></figure></p>\n<p>8）引用资源文件<br>使用正常资源访问语法<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 访问资源 --&gt;</span></div><div class=\"line\">android:padding=\"@&#123;large? @dimen/largePadding : @dimen/smallPadding&#125;\"</div></pre></td></tr></table></figure></p>\n<p>根据String资源格式化字符串和复数。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;@string/nameFormat(firstName, lastName)&#125;\"</div><div class=\"line\">android:text=\"@&#123;@plurals/banana(bananaCount)&#125;\"</div></pre></td></tr></table></figure></p>\n<p>带有多个参数的复数，应该传递所有参数。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Have an orange</div><div class=\"line\">  Have %d oranges</div><div class=\"line\"></div><div class=\"line\">android:text=\"@&#123;@plurals/orange(orangeCount, orangeCount)&#125;\"</div></pre></td></tr></table></figure></p>\n<p>需要明确的一些资源类型</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Normal Reference</th>\n<th>Expression Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String[]</td>\n<td>@array</td>\n<td>@stringArray</td>\n</tr>\n<tr>\n<td>int[]</td>\n<td>@array</td>\n<td>@intArray</td>\n</tr>\n<tr>\n<td>TypedArray</td>\n<td>@array</td>\n<td>@typedArray</td>\n</tr>\n<tr>\n<td>Animator</td>\n<td>@animator</td>\n<td>@animator</td>\n</tr>\n<tr>\n<td>StateListAnimator</td>\n<td>@animator</td>\n<td>@stateListAnimator</td>\n</tr>\n<tr>\n<td>color int</td>\n<td>@color</td>\n<td>@color</td>\n</tr>\n<tr>\n<td>ColorStateList</td>\n<td>@color</td>\n<td>@colorStateList</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"五、Data对象\"><a href=\"#五、Data对象\" class=\"headerlink\" title=\"五、Data对象\"></a>五、Data对象</h2><p>旧式Java POJO可以用做数据绑定，但是修改数据时不能更新UI。而真正的Data Binding在数据变化时能够来修改。<br>有三种不同的数据变化通机制。<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observable_objects\" target=\"_blank\" rel=\"external\">Observable objects</a>、<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observablefields\" target=\"_blank\" rel=\"external\">observable fields</a>、<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections\" target=\"_blank\" rel=\"external\">observable collection</a>。当这些可观察的数据对象绑定UI后，在data对象属性值变化时，会自动更新UI。</p>\n<h3 id=\"1-可观察对象（Observable-Object）\"><a href=\"#1-可观察对象（Observable-Object）\" class=\"headerlink\" title=\"1. 可观察对象（Observable Object）\"></a>1. 可观察对象（Observable Object）</h3><p>实现<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>接口的类可以绑定一个单独的Listener来监听对象属性值的变化。<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>接口提供了添加和移除监听的机制。<a href=\"https://developer.android.com/reference/android/databinding/BaseObservable.html\" target=\"_blank\" rel=\"external\">BaseObservable</a>就是实现了Observable的监听注册机制的基类。为了能够让data数据对象在属性值变化时发出通知，可以通过为属性值的getter方法设定<a href=\"https://developer.android.com/reference/android/databinding/Bindable.html\" target=\"_blank\" rel=\"external\">Bindable</a>注解并在setter方法中添加通知。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseObservable</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">private</span> String firstName;</div><div class=\"line\">   <span class=\"keyword\">private</span> String lastName;</div><div class=\"line\">   <span class=\"meta\">@Bindable</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"meta\">@Bindable</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">       notifyPropertyChanged(BR.firstName);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">       notifyPropertyChanged(BR.lastName);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在编译时<a href=\"https://developer.android.com/reference/android/databinding/Bindable.html\" target=\"_blank\" rel=\"external\">Bindable</a>注解会在BR类中生成对应的访问入口。BR类会在编译时自动在module中生成。如果<br>无法修改data类的基类，可以使用<a href=\"https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html\" target=\"_blank\" rel=\"external\">PropertyChangeRegistry</a>实现<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>接口，更高效存储和通知监听。</p>\n<h3 id=\"2-可观察字段（ObservableFields）\"><a href=\"#2-可观察字段（ObservableFields）\" class=\"headerlink\" title=\"2. 可观察字段（ObservableFields）\"></a>2. 可观察字段（ObservableFields）</h3><p>如果仅有少量属性值或为了节省时间可以使用<a href=\"https://developer.android.com/reference/android/databinding/ObservableField.html\" target=\"_blank\" rel=\"external\">ObservableField</a>来创建<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>类。与ObservableField类似的还有<a href=\"https://developer.android.com/reference/android/databinding/ObservableBoolean.html\" target=\"_blank\" rel=\"external\">ObservableBoolean</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableByte.html\" target=\"_blank\" rel=\"external\">ObservableByte</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableChar.html\" target=\"_blank\" rel=\"external\">ObservableChar</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableShort.html\" target=\"_blank\" rel=\"external\">ObservableShort</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableInt.html\" target=\"_blank\" rel=\"external\">ObservableInt</a>,<br><a href=\"https://developer.android.com/reference/android/databinding/ObservableLong.html\" target=\"_blank\" rel=\"external\">ObservableLong</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableFloat.html\" target=\"_blank\" rel=\"external\">ObservableFloat</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableDouble.html\" target=\"_blank\" rel=\"external\">ObservableDouble</a>和<a href=\"https://developer.android.com/reference/android/databinding/ObservableParcelable.html\" target=\"_blank\" rel=\"external\">ObservableParcelable</a>。ObservableFields是独立的可观察对象。使用基本数据类型可以避免封箱和拆箱操作。使用时需要在数据类中创建<code>public final</code>属性的字段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableField&lt;String&gt; firstName =</div><div class=\"line\">       <span class=\"keyword\">new</span> ObservableField&lt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableField&lt;String&gt; lastName =</div><div class=\"line\">       <span class=\"keyword\">new</span> ObservableField&lt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableInt age = <span class=\"keyword\">new</span> ObservableInt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用set和get方法来存取属性值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">user.firstName.set(<span class=\"string\">\"Google\"</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> age = user.age.get();</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-可观察集合（Observable-Collections）\"><a href=\"#3-可观察集合（Observable-Collections）\" class=\"headerlink\" title=\"3. 可观察集合（Observable Collections）\"></a>3. 可观察集合（Observable Collections）</h3><p>一些应用需要使用动态接口（如Map）来保存数据。Observable Collections可以通过键（key）来存取集合中的对象。如在键值为引用类型时，可以使用<a href=\"https://developer.android.com/reference/android/databinding/ObservableArrayMap.html\" target=\"_blank\" rel=\"external\">ObservableArrayMap</a>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObservableArrayMap&lt;String, Object&gt; user = <span class=\"keyword\">new</span> ObservableArrayMap&lt;&gt;();</div><div class=\"line\">user.put(<span class=\"string\">\"firstName\"</span>, <span class=\"string\">\"Google\"</span>);</div><div class=\"line\">user.put(<span class=\"string\">\"lastName\"</span>, <span class=\"string\">\"Inc.\"</span>);</div><div class=\"line\">user.put(<span class=\"string\">\"age\"</span>, <span class=\"number\">17</span>);</div></pre></td></tr></table></figure></p>\n<p>在布局文件中 可以通过key来访问map中对象。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.databinding.ObservableMap\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"ObservableMap&lt;String, Object&gt;\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;user[\"lastName\"]&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;String.valueOf(1 + (Integer)user[\"age\"])&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>如果使用整型作为键值时，可以考虑使用<a href=\"https://developer.android.com/reference/android/databinding/ObservableArrayList.html\" target=\"_blank\" rel=\"external\">ObservableArrayList</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObservableArrayList&lt;Object&gt; user = <span class=\"keyword\">new</span> ObservableArrayList&lt;&gt;();</div><div class=\"line\">user.add(<span class=\"string\">\"Google\"</span>);</div><div class=\"line\">user.add(<span class=\"string\">\"Inc.\"</span>);</div><div class=\"line\">user.add(<span class=\"number\">17</span>);</div></pre></td></tr></table></figure></p>\n<p>在布局中使用索引来访问list集合<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.databinding.ObservableList\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.my.app.Fields\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"ObservableList&lt;Object&gt;\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;user[Fields.LAST_NAME]&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;String.valueOf(1 + (Integer)user[Fields.AGE])&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"六、生成的Binding类\"><a href=\"#六、生成的Binding类\" class=\"headerlink\" title=\"六、生成的Binding类\"></a>六、生成的Binding类</h2><p>生成的Binding能够通过layout中的Views对象连接布局变量。如上所述，Binding类的命名和包名可以<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#custom_binding_class_names\" target=\"_blank\" rel=\"external\">自定义</a>，生成的Binding类都继承自<a href=\"https://developer.android.com/reference/android/databinding/ViewDataBinding.html\" target=\"_blank\" rel=\"external\">ViewDataBinding</a>。</p>\n<h3 id=\"1-创建Binding类对象\"><a href=\"#1-创建Binding类对象\" class=\"headerlink\" title=\"1. 创建Binding类对象\"></a>1. 创建Binding类对象</h3><p>Binding类对象应该在inflate视图之后尽快创建，保证在表达式绑定View时，View Hierarchy不会被干扰。绑定布局文件有不同方式，最常用是用Binding类的静态方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate);</div><div class=\"line\"><span class=\"comment\">// 或者</span></div><div class=\"line\">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate , viewGroup , <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure></p>\n<p>如果布局使用其他方式inflate，则需要分开来完成绑定。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);</div></pre></td></tr></table></figure></p>\n<p>有时不能预先知道binding。在这些情况可以使用<a href=\"https://developer.android.com/reference/android/databinding/DataBindingUtil.html\" target=\"_blank\" rel=\"external\">DataBindingUtil</a>类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId,</div><div class=\"line\">    parent, attachToParent);</div><div class=\"line\">ViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用ID的View\"><a href=\"#2-使用ID的View\" class=\"headerlink\" title=\"2. 使用ID的View\"></a>2. 使用ID的View</h3><p>当为View指定一个ID时，则会在Binding类中为View生成一个<code>public final</code>属性的字段，直接获取View，比通过调用findViewById更加快速。如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span></div><div class=\"line\">           <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/firstName\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/lastName\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>则会在Binding类中生成如下的字段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> TextView firstName;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> TextView lastName;</div></pre></td></tr></table></figure></p>\n<p>对于data binding来说 ID几乎没有必要，但是在需要在代码中来获取view实例时仍有必要。</p>\n<h3 id=\"3-Variables变量\"><a href=\"#3-Variables变量\" class=\"headerlink\" title=\"3. Variables变量\"></a>3. Variables变量</h3><p>会为布局中每个声明的变量生成getter和setter方法的。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.graphics.drawable.Drawable\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Drawable\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"note\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>会在Binding类中生成如下方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> com.example.<span class=\"function\">User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(com.example.User user)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Drawable <span class=\"title\">getImage</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setImage</span><span class=\"params\">(Drawable image)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getNote</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setNote</span><span class=\"params\">(String note)</span></span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-ViewStubs布局\"><a href=\"#4-ViewStubs布局\" class=\"headerlink\" title=\"4. ViewStubs布局\"></a>4. ViewStubs布局</h3><p><a href=\"https://developer.android.com/reference/android/view/ViewStub.html\" target=\"_blank\" rel=\"external\">ViewStub</a>与常用View有些不同：起始时不可见，<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ViewStub</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/stub\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:inflatedId</span>=<span class=\"string\">\"@+id/subTree\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout</span>=<span class=\"string\">\"@layout/mySubTree\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"120dip\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dip\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>用setVisiable变为可见或显式调用inflate时，则用android:layout中的定义布局替换自己与<code>include</code>类似。但与<code>include</code>不同的的是在初始时并不会inflate到布局文件中，所以Binding的view不会在初始化时完成绑定。因为Binding中的View为final属性，使用<a href=\"https://developer.android.com/reference/android/databinding/ViewStubProxy.html\" target=\"_blank\" rel=\"external\">ViewStubProxy</a>代理对象来替代ViewStud，可以在ViewStud创建后来访问。同样在ViewStud被inflate时，能够访问inflated的View Hierarchy。当inflate ViewStud的布局时，必须为新布局建立Binding。因此ViewStubProxy必须监听<a href=\"https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html\" target=\"_blank\" rel=\"external\">ViewStub.OnInflateListener</a>并在inflate时建立Binding。又因为只能有一个存在，ViewStubProxy在创建Binding类对象后调用OnInflateListener。</p>\n<h2 id=\"七、高级Binding\"><a href=\"#七、高级Binding\" class=\"headerlink\" title=\"七、高级Binding\"></a>七、高级Binding</h2><h3 id=\"1-动态变量\"><a href=\"#1-动态变量\" class=\"headerlink\" title=\"1. 动态变量\"></a>1. 动态变量</h3><p>有时不知道指定的Binding类。如： 操作不同布局的<a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html\" target=\"_blank\" rel=\"external\">RecyclerView.Adapter</a>不知道指定的Binding类，但必须要在<a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#onBindViewHolder(VH, int\" target=\"_blank\" rel=\"external\">onBindViewHolder(VH , int)</a>)<br>中关联Binding值。<br>例子中所有RecyclerView绑定的布局都有一个item变量。BindingHolder有一个getBinding方法返回<a href=\"https://developer.android.com/reference/android/databinding/ViewDataBinding.html\" target=\"_blank\" rel=\"external\">ViewDataBinding</a>基类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(BindingHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">final</span> T item = mItems.get(position);</div><div class=\"line\">   holder.getBinding().setVariable(BR.item, item);</div><div class=\"line\">   holder.getBinding().executePendingBindings();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-立即绑定\"><a href=\"#2-立即绑定\" class=\"headerlink\" title=\"2. 立即绑定\"></a>2. 立即绑定</h3><p>当变量或观察者变化时，Binding在下一帧前执行改变操作。有时Binding必须立即执行。强制执行使用 <a href=\"https://developer.android.com/reference/android/databinding/ViewDataBinding.html#executePendingBindings(\" target=\"_blank\" rel=\"external\">executePendingBindings()</a>)方法</p>\n<h3 id=\"3-后台线程\"><a href=\"#3-后台线程\" class=\"headerlink\" title=\"3. 后台线程\"></a>3. 后台线程</h3><p>DataBinding可以在后台线程中修改非集合类型的data数据，在线程中执行时，DataBinding会本地化变量和字段，避免多线程引起的同步问题。</p>\n<h2 id=\"七、属性Setter\"><a href=\"#七、属性Setter\" class=\"headerlink\" title=\"七、属性Setter\"></a>七、属性Setter</h2><p>无论何时绑定值变化，生成的binding类都必须view中绑定的表达式setter方法。DataBinding框架能够自定义setter的方法。</p>\n<h3 id=\"1-自动setter\"><a href=\"#1-自动setter\" class=\"headerlink\" title=\"1. 自动setter\"></a>1. 自动setter</h3><p>对于属性attribute来说，DataBinding会尝试查找setAttribute方法。attribute的命名空间可以或略，只针对属性的名称。如：关联TextView的android:text属性表达式会查找setText方法。如果表达式返回int，DataBinding会搜索setText(int)的方法。注意要用返回正确类型的表达式，如果必要的话，使用强制类型转换。</p>\n<blockquote>\n<p>注：即使不存在指定的属性名，DataBinding也会工作。</p>\n</blockquote>\n<p>你可以使用DataBinding为任意setter方法创建对应的属性名。如：依赖库DrawerLayout没有任何属性名，但是仍有很多setter，可以使用自动的属性名setter方法<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:scrimColor</span>=<span class=\"string\">\"@&#123;@color/scrim&#125;\"</span></div><div class=\"line\">    <span class=\"attr\">app:drawerListener</span>=<span class=\"string\">\"@&#123;fragment.drawerListener&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-setter重命名\"><a href=\"#2-setter重命名\" class=\"headerlink\" title=\"2. setter重命名\"></a>2. setter重命名</h3><p>有点setter方法没有对应的属性名。对于这些方法，可以用<a href=\"https://developer.android.com/reference/android/databinding/BindingMethods.html\" target=\"_blank\" rel=\"external\">BindingMethods</a>注解关联指定的属性名，使用这种方式时必须关联用<a href=\"https://developer.android.com/reference/android/databinding/BindingMethod.html\" target=\"_blank\" rel=\"external\">BindingMethods</a>注解的类。如<code>android:tint</code>属性名实际关联的是<a href=\"https://developer.android.com/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList\" target=\"_blank\" rel=\"external\">setImageTintList(ColorStateList)</a>)方法而不是<code>setTint()</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingMethods</span>(&#123;</div><div class=\"line\">       <span class=\"meta\">@BindingMethod</span>(type = <span class=\"string\">\"android.widget.ImageView\"</span>,</div><div class=\"line\">                      attribute = <span class=\"string\">\"android:tint\"</span>,</div><div class=\"line\">                      method = <span class=\"string\">\"setImageTintList\"</span>),</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>一般来说没有必要重命名setters，因为android框架属性已经实现。</p>\n<h3 id=\"3-自定义setter\"><a href=\"#3-自定义setter\" class=\"headerlink\" title=\"3. 自定义setter\"></a>3. 自定义setter</h3><p>有时需要自定义属性的绑定逻辑。如：<code>android:paddingLeft</code>没有对应的setter实现方法，但是存在<code>setPadding(left, top, right, bottom)</code>方法。使用<code>BindingAdapter</code>注解的静态方法可以用来自定义属性名的setter逻辑。<br>android属性已经有创建的<a href=\"https://developer.android.com/reference/android/databinding/BindingAdapter.html\" target=\"_blank\" rel=\"external\">BindingAdapter</a>，如： paddingLeft<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:paddingLeft\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setPaddingLeft</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> padding)</span> </span>&#123;</div><div class=\"line\">   view.setPadding(padding,</div><div class=\"line\">                   view.getPaddingTop(),</div><div class=\"line\">                   view.getPaddingRight(),</div><div class=\"line\">                   view.getPaddingBottom());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>BindingAdapter对自定义类型的属性很有用。如：创建图片加载方法。</p>\n<blockquote>\n<p>注：当默认的Adapter与自定义的BindingAdapter冲突时，自定义的BindingAdapter覆盖默认值。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 全部满足</span></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"bind:imageUrl\"</span>, <span class=\"string\">\"bind:error\"</span>&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(ImageView view, String url, Drawable error)</span> </span>&#123;</div><div class=\"line\">   Picasso.with(view.getContext()).load(url).error(error).into(view);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 2. 满足其中一个时</span></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(value = &#123;<span class=\"string\">\"bind:imageUrl\"</span>, <span class=\"string\">\"bind:error\"</span>&#125; , requireAll = <span class=\"keyword\">false</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(ImageView view, String url, Drawable error)</span> </span>&#123;</div><div class=\"line\">   Picasso.with(view.getContext()).load(url).error(error).into(view);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Layout</span></div><div class=\"line\">&lt;ImageView app:imageUrl=<span class=\"string\">\"@&#123;venue.imageUrl&#125;\"</span></div><div class=\"line\">app:error=<span class=\"string\">\"@&#123;@drawable/venueError&#125;\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>使用第一种BindingAdapter时，必须要同时声明<code>bind:imageUrl</code>和<code>bind:error</code>两个属性时，才会调用。</p>\n<ul>\n<li>在属性名匹配BindingAdapter时，自动会忽略属性名之前的命名空间</li>\n<li>可以自定义以android为命名空间的属性值（此时自定义覆盖默认）。</li>\n</ul>\n<p>BindingAdapter可以用在处理方法中使用旧值。如：在新值与旧值不同时，使用新值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:paddingLeft\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setPaddingLeft</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> oldPadding, <span class=\"keyword\">int</span> newPadding)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (oldPadding != newPadding) &#123;</div><div class=\"line\">       view.setPadding(newPadding,</div><div class=\"line\">                       view.getPaddingTop(),</div><div class=\"line\">                       view.getPaddingRight(),</div><div class=\"line\">                       view.getPaddingBottom());</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事件处理器可以使用接口类或带有一个抽象方法的抽象类作为参数。如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:onLayoutChange\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnLayoutChangeListener</span><span class=\"params\">(View view, View.OnLayoutChangeListener oldValue,</span></span></div><div class=\"line\">       View.OnLayoutChangeListener newValue) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (oldValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.removeOnLayoutChangeListener(oldValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.addOnLayoutChangeListener(newValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当Listener有多个方法时，必须拆分成多个Listener。如：<a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html\" target=\"_blank\" rel=\"external\">View.OnAttachStateChangeListener</a>有两个方法<br><a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View\" target=\"_blank\" rel=\"external\">onViewAttachedToWindow()</a>) 和 <a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View\" target=\"_blank\" rel=\"external\">onViewDetachedFromWindow()</a>)。我们必须创建两个接口来区分属性和处理方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnViewDetachedFromWindow</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(View v)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnViewAttachedToWindow</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(View v)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为修改一个Listener可能会影响到其他的Listener，所以必须要创建三个不同的BindingAdapter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:onViewAttachedToWindow\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</div><div class=\"line\">    setListener(view, <span class=\"keyword\">null</span>, attached);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:onViewDetachedFromWindow\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</div><div class=\"line\">    setListener(view, detached, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:onViewDetachedFromWindow\"</span>, <span class=\"string\">\"android:onViewAttachedToWindow\"</span>&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(View view, <span class=\"keyword\">final</span> OnViewDetachedFromWindow detach,</span></span></div><div class=\"line\">        <span class=\"keyword\">final</span> OnViewAttachedToWindow attach) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> OnAttachStateChangeListener newListener;</div><div class=\"line\">        <span class=\"keyword\">if</span> (detach == <span class=\"keyword\">null</span> &amp;&amp; attach == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            newListener = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            newListener = <span class=\"keyword\">new</span> OnAttachStateChangeListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (attach != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        attach.onViewAttachedToWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (detach != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        detach.onViewDetachedFromWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class=\"line\">                newListener, R.id.onAttachStateChangeListener);</div><div class=\"line\">        <span class=\"keyword\">if</span> (oldListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.removeOnAttachStateChangeListener(oldListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.addOnAttachStateChangeListener(newListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的例子稍微复杂一些，因为View使用添加和移除Listener方式，而不是为<a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html\" target=\"_blank\" rel=\"external\">View.OnAttachStateChangeListener</a>设置<br>setter方法。android.databinding.adapters.ListenerUtil类帮助跟踪之前的Listener，这样他们可以在<br>Binding适配器中移除旧的Listener。<br>通过 @TargetApi(VERSION_CODES.HONEYCOMB_MR1)注解接口OnViewDetachedFromWindow和OnViewAttachedToWindow，DataBinding代码生成器就会知道只有运行 Honeycomb MR1版本及以上的新设备才生成Listener。</p>\n<h2 id=\"八、转换器Converters\"><a href=\"#八、转换器Converters\" class=\"headerlink\" title=\"八、转换器Converters\"></a>八、转换器Converters</h2><h3 id=\"1-对象转换\"><a href=\"#1-对象转换\" class=\"headerlink\" title=\"1. 对象转换\"></a>1. 对象转换</h3><p>如果是表达式返回的对象，则会从自动的、重命名或自定义的setter方法中选择一个setter方法。对象会强转成适合setter方法中参数类型。这种方式适合用ObservableMaps来保存数据的布局，如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;userMap[\"lastName\"]&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p><code>userMap</code>返回的对象自动强转为<code>setText(CharSequence)</code>中参数类型。当setter方法的参数类型存在二义性时，如存在两个setter方法，但是参数不一样时，需要使用手动强转。</p>\n<h3 id=\"2-自定义转换\"><a href=\"#2-自定义转换\" class=\"headerlink\" title=\"2. 自定义转换\"></a>2. 自定义转换</h3><p>有时需要让布局在指定类型之前自动转换，如设置背景时<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span></span></div><div class=\"line\">   <span class=\"attr\">android:background</span>=<span class=\"string\">\"@&#123;isError ? @color/red : @color/white&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>这里android:background的setter方法参数类型为<code>Drawable</code>，但是Color是整型。可以将整型的color转为Drawable类型的<code>ColorDrawable</code>，通过BindingConversion注解的静态方法来实现。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingConversion</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ColorDrawable <span class=\"title\">convertColorToDrawable</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ColorDrawable(color);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：转换器只在setter层执行，禁止使用混合类型。如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span></span></div><div class=\"line\">   <span class=\"attr\">android:background</span>=<span class=\"string\">\"@&#123;isError ? @drawable/error : @color/white&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"九、Android-Studio对Data-Binding的支持\"><a href=\"#九、Android-Studio对Data-Binding的支持\" class=\"headerlink\" title=\"九、Android Studio对Data Binding的支持\"></a>九、Android Studio对Data Binding的支持</h2><p> Android Studio支持很多data binding代码的编辑特性。如</p>\n<ul>\n<li>语法高亮</li>\n<li>标记表达式语法错误。</li>\n<li>XML代码补全</li>\n<li>引用包括导航和快速文档</li>\n</ul>\n<blockquote>\n<p>注：Arrays和<a href=\"https://docs.oracle.com/javase/tutorial/java/generics/types.html\" target=\"_blank\" rel=\"external\">生成类型</a>如<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>类，可能会出现显示错误（实际上没有错误）<br> 预览窗口显示data binding的默认值。如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName, default=PLACEHOLDER&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p> 预览窗口会显示PLACEHOLDER作为TextView默认值。<br> 如果需要在项目设计时显示默认值，可以使用tools属性替代默认的表达式。具体见<a href=\"http://tools.android.com/tips/layout-designtime-attributes\" target=\"_blank\" rel=\"external\">Designtime Layout Attributes</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\" target=\"_blank\" rel=\"external\">Data Binding Library</a></p>\n<p><a href=\"https://realm.io/cn/news/data-binding-android-boyar-mount/\" target=\"_blank\" rel=\"external\">棉花糖给 Android 带来的 Data Bindings</a></p>\n<p><a href=\"https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/\" target=\"_blank\" rel=\"external\">2-way Data Binding on Android</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、编译环境配置\"><a href=\"#一、编译环境配置\" class=\"headerlink\" title=\"一、编译环境配置\"></a>一、编译环境配置</h2><h3 id=\"1-build-gradle\"><a href=\"#1-build-gradle\" class=\"headerlink\" title=\"1. build.gradle\"></a>1. build.gradle</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    dataBinding&#123;</div><div class=\"line\">        enabled <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在依赖module中需要支持databinding库，则在对应的依赖module的build.gradle配置文件添加dataBinding。</p>\n<h3 id=\"2-DataBinding-布局文件\"><a href=\"#2-DataBinding-布局文件\" class=\"headerlink\" title=\"2. DataBinding 布局文件\"></a>2. DataBinding 布局文件</h3><p>使用DataBinding库的布局文件与普通布局文件不同的是：跟标签使用<code>&lt;layout/&gt;</code>：包含<code>&lt;data&gt;&lt;/data&gt;</code>标签和普通的视图布局。<br><figure class=\"highlight xml\"><figcaption><span>activity_main.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例中的<data>中的user变量用<variable>标签来引用：用<code>@{}</code>语法表示绑定的参数<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></variable></data></p>\n<p><code>@{user.firstName}</code>意味：User中的firstName对应的具体<br>Java POJO 类有两种方式</p>\n<ol>\n<li><p>老式；一旦数据初始化后，值无法再次修改</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String firstName;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String lastName;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String firstName , String lastName)</span></span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">\t    <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或使用私有private的java POJO类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String firstName;</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String lastName;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String firstName, String lastName)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">       <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>从DataBinding角度来看，两个Java POJO类的效果相同。使用第一种Java类，TextView的android:text中表达式<code>@{user.firstName}</code>直接访问User的firstName字段。如果使用第二种类型Java类，则通过调用<code>getFirstName()</code>来访问User的firstName字段。</p>\n<blockquote>\n<p>注：如果User类中存在firstName()方法，则首先调用firstName()方法。</p>\n</blockquote>\n<h3 id=\"3-绑定数据\"><a href=\"#3-绑定数据\" class=\"headerlink\" title=\"3. 绑定数据\"></a>3. 绑定数据</h3><p>默认情况下，会根据布局文件的名称，在编译时自动生成首字母大写、驼峰式命名方式并以<code>Binding</code>结尾的Binding类。比如有名称为<code>main_activity.xml</code>的布局文件，则在编译时生成<code>MainActivityBinding.java</code>类。类中有布局绑定的data信息（如main_activity.xml中的user）并生成data的setter方法。最简单地创建binding方式就是在inflate布局时。</p>\n<figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\tMainActivityBinding binding = DataBindingUtil.setContentView(<span class=\"keyword\">this</span> , R.layout.main_activity);</div><div class=\"line\">\tUser user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"Test\"</span> , <span class=\"string\">\"User\"</span>);</div><div class=\"line\">\tbinding.setUser(user);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>或通过编译生成的MainActivityBinding类创建Binding</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater);</div></pre></td></tr></table></figure>\n<p>如果绑定的是ListView或RecyclerView对应的Adapter，对应的binding类为ListItemBinding</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListItemBinding binding = ListItemBinding.inflater(layoutInflater , viewGroup , <span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"二、事件处理\"><a href=\"#二、事件处理\" class=\"headerlink\" title=\"二、事件处理\"></a>二、事件处理</h2><p>DataBinding可以使用表达式来处理View的事件分发操作（如：onClick）。事件属性名由监听方法统一管理。如<a href=\"https://developer.android.com/reference/android/view/View.OnLongClickListener.html\" target=\"_blank\" rel=\"external\">View.onLongClickListener</a>的方法<a href=\"https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View\" target=\"_blank\" rel=\"external\">onLongClick()</a>)，则对应属性名为<code>android:onLongClick</code>。处理View事件分发有两种方式</p>\n<ol>\n<li>方法关联（<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#method_references\" target=\"_blank\" rel=\"external\">Method References</a>）方式：在表达式中应用符合签名的监听方法。如果表达式签名与对应的方法引用一致，DataBinding将包裹引用的方法和对象到绑定的方法中。如果表达式为null，则不会创建监听。</li>\n<li>监听绑定（<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings\" target=\"_blank\" rel=\"external\">Listener Bindings</a>）方式：在触发监听事件时，则调用绑定的lambda表达式。使用这个方式，DataBinding总是会创建View的监听事件。触发View事件时，调用lambda表达式绑定的方法。</li>\n</ol>\n<h3 id=\"1-方法关联\"><a href=\"#1-方法关联\" class=\"headerlink\" title=\"1. 方法关联\"></a>1. 方法关联</h3><p>直接将View对应的事件绑定到对应的方法。类似<code>android:onClick</code>关联Activity中的同名方法。比View#onClick属性相比，最大的好处就是这种方式只在编译时生成。所以在方法不存在或签名不正确时，则在编译阶段直接出错。<br>方法关联与监听绑定最大的不同就是：实际的Listener是在数据绑定时而不是在事件出发创建。如果希望只在View事件触发时执行表达式，则应该使用<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#listener_bindings\" target=\"_blank\" rel=\"external\">监听绑定</a>的方式。<br>使用与处理方法名相同的表达式来关联监听事件，假设定义了如下的事件处理的类和方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandlers</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickFriend</span><span class=\"params\">(View view)</span></span>&#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>则要在布局文件中通过<variable> 来声明事件处理类</variable></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"urf-8\"?&gt;</div><div class=\"line\">&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;!-- 声明View的事件处理类 --&gt;</div><div class=\"line\">       &lt;variable name=\"handlers\" type=\"com.example.Handlers\"/&gt;</div><div class=\"line\">       &lt;variable name=\"user\" type=\"com.example.User\"/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=\"vertical\"</div><div class=\"line\">       android:layout_width=\"match_parent\"</div><div class=\"line\">       android:layout_height=\"match_parent\"&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=\"wrap_content\"</div><div class=\"line\">           android:layout_height=\"wrap_content\"</div><div class=\"line\">           android:text=\"@&#123;user.firstName&#125;\"</div><div class=\"line\">           &lt;!-- 绑定声明的事件处理类的对应监听方；保证方法存在且命名相同 --&gt;</div><div class=\"line\">           android:onClick=\"@&#123;handlers::onClickFriend&#125;\"/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：要保证表达式中的方法名签名与事件处理类一致：方法存在且名称一致。</p>\n</blockquote>\n<h3 id=\"2-监听绑定\"><a href=\"#2-监听绑定\" class=\"headerlink\" title=\"2. 监听绑定\"></a>2. 监听绑定</h3><p>与方法关联类似，但只在触发View响应事件时绑定表达式。表达式中允许存在多个参数（需要Gradle插件版本2.0以上）。<br>在方法关联中，方法参数必须符合事件监听的参数。在监听绑定中，只要求返回值符合监听表达式返回的值（除非返回void）。通过触发View事件调用绑定事件处理类中的方法。使用方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveClick</span><span class=\"params\">(Task task)</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>绑定点击事件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"task\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.android.example.Task\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"presenter\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.android.example.Presenter\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> </span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;() -&gt; presenter.onSaveClick(task)&#125;\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>使用lambda表达式的Listener只允许作为表达式的根元素。当表达式调用事件的回调方法时，DataBinding自动创建和注册必要的监听事件。当View分发事件时，DataBinding则通过事件分发调用绑定的表达式事件。在常规绑定的表达式中，可以得到值为null且线程安全的DataBinding，在执行View事件分发操作时。<br>在上面的例子中，我们并没有定义<a href=\"https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View\" target=\"_blank\" rel=\"external\">onClick(android.view.View)</a>)方法中用到的view参数。在监听绑定的方式中，为Listener的参数提供了两种方式。</p>\n<ol>\n<li><p>）忽略监听中所有的方法或名称</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:onClick=<span class=\"string\">\"@&#123;(view) -&gt; presenter.onSaveClick(task)&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>）在自定义的方法中命名要使用的参数</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveClick</span><span class=\"params\">(View view , Task task)</span></span>&#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">   <span class=\"comment\">// Layout </span></div><div class=\"line\">...</div><div class=\"line\">android:onClick=<span class=\"string\">\"@&#123;(theView) -&gt; presenter.onSaveClick(theView ,task)&#125;\"</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以使用有多个参数的lambda表达式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompletedChanged</span><span class=\"params\">(Task task, <span class=\"keyword\">boolean</span> completed)</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Layout</span></div><div class=\"line\"></div><div class=\"line\">&lt;CheckBox android:layout_width=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    android:onCheckedChanged=<span class=\"string\">\"@&#123;(cb, isChecked) -&gt; presenter.completeChanged(task, isChecked)&#125;\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>如果监听的事件返回值不是<code>void</code>类型，则自定义的表达式也必须要返回相同类型的值。如监听<code>onLongClick</code>时，则自定义的表达式必须要返回boolean类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view, Task task)</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Layout</span></div><div class=\"line\">android:onLongClick=<span class=\"string\">\"@&#123;(theView) -&gt; presenter.onLongClick(theView, task)&#125;\"</span></div></pre></td></tr></table></figure></p>\n<p>如果因为null对象无法执行表达式，则Data Binding 会返回默认同种类型的Java 值。如引用类型为null，int为0，boolean默认值false 等。<br>如果使用断言类型的表达式（如：三目运算），则可以使用<code>void</code>作为标识符<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:onClick=\"@&#123;(v) -&gt; v.isVisible() ? doSomething() : void&#125;\"</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-避免使用复杂监听\"><a href=\"#3-避免使用复杂监听\" class=\"headerlink\" title=\"3. 避免使用复杂监听\"></a>3. 避免使用复杂监听</h3><p>监听表达式可以让代码易读性更好。但是含有复杂表达式的监听只会让你的布局易读性变差，更难维护。这些表达式<br>应该尽量简单，在回调方法中来实现业务逻辑。如果有特殊点击事件，需要指定除”android:onClick”之外的属性，<br>来避免冲突。下面的属性用来避免重复</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.android.com/reference/android/widget/SearchView.html\" target=\"_blank\" rel=\"external\">SearchView</a></td>\n<td>setOnSearchClickListener(View.OnClickListener)</td>\n<td>android:onSearchClick</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.android.com/reference/android/widget/ZoomControls.html\" target=\"_blank\" rel=\"external\">ZoomControls</a></td>\n<td>setOnZoomInClickListener(View.OnClickListener)</td>\n<td>android:onZoomIn</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.android.com/reference/android/widget/ZoomControls.html\" target=\"_blank\" rel=\"external\">ZoomControls</a></td>\n<td>setOnZoomOutClickListener(View.OnClickListener)</td>\n<td>android:onZoomOut</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三、布局详解\"><a href=\"#三、布局详解\" class=\"headerlink\" title=\"三、布局详解\"></a>三、布局详解</h2><h3 id=\"1-Imports\"><a href=\"#1-Imports\" class=\"headerlink\" title=\"1. Imports\"></a>1. Imports</h3><p>在data中不用或引入多个import元素。类似Java的import<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=\"android.view.View\"/&gt;</div><div class=\"line\">&lt;/data&gt;</div></pre></td></tr></table></figure></p>\n<p>现在可以在表达式中使用View了<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>导入的类名冲突时，可以使用别名来避免<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.view.View\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.real.estate.View\"</span></span></div><div class=\"line\">        <span class=\"attr\">alias</span>=<span class=\"string\">\"Vista\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>导入类型可以用来作为变量和表达式的类型引用<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.List\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"User\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userList\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"List&lt;User&gt;\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：Android Studio尚未支持import的处理，所以IDE可能无法处理导入的变量。但是应用仍可以正常运行。<br>可以在变量中使用完全限定名解决IDE的问题</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;((User)(user.connection)).lastName&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>表达式可以使用导入类型的静态字段和静态方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.MyStringUtils\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;MyStringUtils.capitalize(user.lastName)&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Variables-变量\"><a href=\"#2-Variables-变量\" class=\"headerlink\" title=\"2. Variables 变量\"></a>2. Variables 变量</h3><p>data中可以使用任意数量的variable元素<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=\"android.graphics.drawable.Drawable\"/&gt;</div><div class=\"line\">    &lt;variable name=\"user\"  type=\"com.example.User\"/&gt;</div><div class=\"line\">    &lt;variable name=\"image\" type=\"Drawable\"/&gt;</div><div class=\"line\">    &lt;variable name=\"note\"  type=\"String\"/&gt;</div><div class=\"line\">&lt;/data&gt;</div></pre></td></tr></table></figure></p>\n<p>变量的类型检查均在编译时完成，所以如果是实现 <a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>或 <a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections\" target=\"_blank\" rel=\"external\">Observable Collections</a>类型的变量则对应声明时的类型。如果变量或基类没有实现Observable*系列接口，则无法被观察，即无法实现动态绑定。<br>当有不同配置的布局文件（如水平、垂直），变量则会被组合到一起，可能会出现命名冲突，所以这些布局的文件中不允许出现重复定义。<br>生成的绑定类会为每个变量生成getter和setter方法，在调用setter方法之前，变量为java默认值。在必要情况下，DataBinding会生成名为context的特殊变量，context的值为root view的<a href=\"https://developer.android.com/reference/android/view/View.html#getContext(\" target=\"_blank\" rel=\"external\">getContext</a>)返回值。如果在布局中显示指定具有相同的名称的context, 默认值则被覆盖。</p>\n<h2 id=\"四、自定义生成Binding的类名\"><a href=\"#四、自定义生成Binding的类名\" class=\"headerlink\" title=\"四、自定义生成Binding的类名\"></a>四、自定义生成Binding的类名</h2><p>默认情况，Binding类根据布局文件名，以驼峰形式，以”Binding”为后缀的来命名，位于module中的databinding包下。如”contact_item.xml”会生成ContactItemBinding的Binding类。如果module包名为<code>com.example.my.app</code> ,则生成的Binding 类位于com.example.my.app.databinding包下。<br>Binding 类可以在data元素中用class 来重命名<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ContactItem\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>则生成ContactItem，位于module的databinding包中。<br>如果类需要生成在module的根目录，则添加添加前缀”.”<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">\".ContactItem\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>或者指定包中<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.example.ContactItem\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-Includes布局\"><a href=\"#3-Includes布局\" class=\"headerlink\" title=\"3. Includes布局\"></a>3. Includes布局</h3><p>如果使用include方式添加布局文件时，可以用命名空间(namespace)和变量名传递<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:bind</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/name\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/contact\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：name.xml 和 contact中必须也有user变量<br>对应的include的布局<data>的变量名必须要与引用它的布局属性名一致</data></p>\n</blockquote>\n<p>Data Binding不支持使用<merge>作为直接子元素的布局，例如不支持类似以下的使用方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:bind</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">merge</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/name\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/contact\"</span></span></div><div class=\"line\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></merge></p>\n<h3 id=\"4-支持的表达式运算符\"><a href=\"#4-支持的表达式运算符\" class=\"headerlink\" title=\"4. 支持的表达式运算符\"></a>4. 支持的表达式运算符</h3><p>1）常用特性<br>与Java表达式类似</p>\n<ul>\n<li>四则运算      + - / * %</li>\n<li>字符串连接   +</li>\n<li>逻辑运算符   &amp;&amp; ||</li>\n<li>二元运算符   &amp; | ^</li>\n<li>一元运算符   + - ! ~</li>\n<li>移位运算符   &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>\n<li>比较             == &gt; &lt; &gt;= &lt;=</li>\n<li>instanceof</li>\n<li>组合 ()</li>\n<li>迭代 - character, String, numeric, null</li>\n<li>强制转换</li>\n<li>方法调用</li>\n<li>字段访问</li>\n<li>数组调用</li>\n<li>三目运算符 ?:</li>\n</ul>\n<p>使用范例<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;String.valueOf(index + 1)&#125;\"</div><div class=\"line\">android:visibility=\"@&#123;age &amp;lt; 13 ? View.GONE : View.VISIBLE&#125;\"</div><div class=\"line\">android:transitionName='@&#123;\"image_\" + id&#125;'</div></pre></td></tr></table></figure></p>\n<p>2）不支持特性</p>\n<ul>\n<li><code>不支持</code>Java 中 的this, super，new 操作符</li>\n</ul>\n<p>3）空聚合操作符<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;user.displayName ?? user.lastName&#125;\"</div></pre></td></tr></table></figure></p>\n<p>与三目运算符<code>?:</code>相同<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;user.displayName != null ? user.displayName : user.lastName&#125;\"</div></pre></td></tr></table></figure></p>\n<p>4）属性引用<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;user.lastName&#125;\"</div></pre></td></tr></table></figure></p>\n<p>5）可以避免空指针<br>Data Binding自动检查null对象，避免空指针。如：@{user.name}, 如果user为空，则user.name为<br>默认值null。类似的user.age为0</p>\n<p>6）集合<br>常用集合:arrays, lists, sparse lists, and maps。可以用[]操作符。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.util.SparseArray\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.Map\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.List\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"List&lt;String&gt;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sparse\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SparseArray&lt;String&gt;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Map&amp;lt&lt;String, String&gt;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"int\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"key\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\">android:text=\"@&#123;list[index]&#125;\"</div><div class=\"line\">…</div><div class=\"line\">android:text=\"@&#123;sparse[index]&#125;\"</div><div class=\"line\">…</div><div class=\"line\">android:text=\"@&#123;map[key]&#125;\"</div></pre></td></tr></table></figure></p>\n<p>7）引用String值<br>如果属性使用单引号，则表达式使用双引号<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text='@&#123;map[\"firstName\"]&#125;'</div></pre></td></tr></table></figure></p>\n<p>如果属性使用双引号，String值使用单引号 或 双引号<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;map[`firstName`&#125;\"</div><div class=\"line\">android:text=\"@&#123;map[\"firstName\"]&#125;\"</div></pre></td></tr></table></figure></p>\n<p>8）引用资源文件<br>使用正常资源访问语法<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 访问资源 --&gt;</span></div><div class=\"line\">android:padding=\"@&#123;large? @dimen/largePadding : @dimen/smallPadding&#125;\"</div></pre></td></tr></table></figure></p>\n<p>根据String资源格式化字符串和复数。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=\"@&#123;@string/nameFormat(firstName, lastName)&#125;\"</div><div class=\"line\">android:text=\"@&#123;@plurals/banana(bananaCount)&#125;\"</div></pre></td></tr></table></figure></p>\n<p>带有多个参数的复数，应该传递所有参数。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Have an orange</div><div class=\"line\">  Have %d oranges</div><div class=\"line\"></div><div class=\"line\">android:text=\"@&#123;@plurals/orange(orangeCount, orangeCount)&#125;\"</div></pre></td></tr></table></figure></p>\n<p>需要明确的一些资源类型</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Normal Reference</th>\n<th>Expression Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String[]</td>\n<td>@array</td>\n<td>@stringArray</td>\n</tr>\n<tr>\n<td>int[]</td>\n<td>@array</td>\n<td>@intArray</td>\n</tr>\n<tr>\n<td>TypedArray</td>\n<td>@array</td>\n<td>@typedArray</td>\n</tr>\n<tr>\n<td>Animator</td>\n<td>@animator</td>\n<td>@animator</td>\n</tr>\n<tr>\n<td>StateListAnimator</td>\n<td>@animator</td>\n<td>@stateListAnimator</td>\n</tr>\n<tr>\n<td>color int</td>\n<td>@color</td>\n<td>@color</td>\n</tr>\n<tr>\n<td>ColorStateList</td>\n<td>@color</td>\n<td>@colorStateList</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"五、Data对象\"><a href=\"#五、Data对象\" class=\"headerlink\" title=\"五、Data对象\"></a>五、Data对象</h2><p>旧式Java POJO可以用做数据绑定，但是修改数据时不能更新UI。而真正的Data Binding在数据变化时能够来修改。<br>有三种不同的数据变化通机制。<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observable_objects\" target=\"_blank\" rel=\"external\">Observable objects</a>、<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observablefields\" target=\"_blank\" rel=\"external\">observable fields</a>、<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections\" target=\"_blank\" rel=\"external\">observable collection</a>。当这些可观察的数据对象绑定UI后，在data对象属性值变化时，会自动更新UI。</p>\n<h3 id=\"1-可观察对象（Observable-Object）\"><a href=\"#1-可观察对象（Observable-Object）\" class=\"headerlink\" title=\"1. 可观察对象（Observable Object）\"></a>1. 可观察对象（Observable Object）</h3><p>实现<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>接口的类可以绑定一个单独的Listener来监听对象属性值的变化。<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>接口提供了添加和移除监听的机制。<a href=\"https://developer.android.com/reference/android/databinding/BaseObservable.html\" target=\"_blank\" rel=\"external\">BaseObservable</a>就是实现了Observable的监听注册机制的基类。为了能够让data数据对象在属性值变化时发出通知，可以通过为属性值的getter方法设定<a href=\"https://developer.android.com/reference/android/databinding/Bindable.html\" target=\"_blank\" rel=\"external\">Bindable</a>注解并在setter方法中添加通知。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseObservable</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">private</span> String firstName;</div><div class=\"line\">   <span class=\"keyword\">private</span> String lastName;</div><div class=\"line\">   <span class=\"meta\">@Bindable</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"meta\">@Bindable</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">       notifyPropertyChanged(BR.firstName);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">       notifyPropertyChanged(BR.lastName);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在编译时<a href=\"https://developer.android.com/reference/android/databinding/Bindable.html\" target=\"_blank\" rel=\"external\">Bindable</a>注解会在BR类中生成对应的访问入口。BR类会在编译时自动在module中生成。如果<br>无法修改data类的基类，可以使用<a href=\"https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html\" target=\"_blank\" rel=\"external\">PropertyChangeRegistry</a>实现<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>接口，更高效存储和通知监听。</p>\n<h3 id=\"2-可观察字段（ObservableFields）\"><a href=\"#2-可观察字段（ObservableFields）\" class=\"headerlink\" title=\"2. 可观察字段（ObservableFields）\"></a>2. 可观察字段（ObservableFields）</h3><p>如果仅有少量属性值或为了节省时间可以使用<a href=\"https://developer.android.com/reference/android/databinding/ObservableField.html\" target=\"_blank\" rel=\"external\">ObservableField</a>来创建<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>类。与ObservableField类似的还有<a href=\"https://developer.android.com/reference/android/databinding/ObservableBoolean.html\" target=\"_blank\" rel=\"external\">ObservableBoolean</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableByte.html\" target=\"_blank\" rel=\"external\">ObservableByte</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableChar.html\" target=\"_blank\" rel=\"external\">ObservableChar</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableShort.html\" target=\"_blank\" rel=\"external\">ObservableShort</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableInt.html\" target=\"_blank\" rel=\"external\">ObservableInt</a>,<br><a href=\"https://developer.android.com/reference/android/databinding/ObservableLong.html\" target=\"_blank\" rel=\"external\">ObservableLong</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableFloat.html\" target=\"_blank\" rel=\"external\">ObservableFloat</a>, <a href=\"https://developer.android.com/reference/android/databinding/ObservableDouble.html\" target=\"_blank\" rel=\"external\">ObservableDouble</a>和<a href=\"https://developer.android.com/reference/android/databinding/ObservableParcelable.html\" target=\"_blank\" rel=\"external\">ObservableParcelable</a>。ObservableFields是独立的可观察对象。使用基本数据类型可以避免封箱和拆箱操作。使用时需要在数据类中创建<code>public final</code>属性的字段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableField&lt;String&gt; firstName =</div><div class=\"line\">       <span class=\"keyword\">new</span> ObservableField&lt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableField&lt;String&gt; lastName =</div><div class=\"line\">       <span class=\"keyword\">new</span> ObservableField&lt;&gt;();</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableInt age = <span class=\"keyword\">new</span> ObservableInt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用set和get方法来存取属性值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">user.firstName.set(<span class=\"string\">\"Google\"</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> age = user.age.get();</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-可观察集合（Observable-Collections）\"><a href=\"#3-可观察集合（Observable-Collections）\" class=\"headerlink\" title=\"3. 可观察集合（Observable Collections）\"></a>3. 可观察集合（Observable Collections）</h3><p>一些应用需要使用动态接口（如Map）来保存数据。Observable Collections可以通过键（key）来存取集合中的对象。如在键值为引用类型时，可以使用<a href=\"https://developer.android.com/reference/android/databinding/ObservableArrayMap.html\" target=\"_blank\" rel=\"external\">ObservableArrayMap</a>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObservableArrayMap&lt;String, Object&gt; user = <span class=\"keyword\">new</span> ObservableArrayMap&lt;&gt;();</div><div class=\"line\">user.put(<span class=\"string\">\"firstName\"</span>, <span class=\"string\">\"Google\"</span>);</div><div class=\"line\">user.put(<span class=\"string\">\"lastName\"</span>, <span class=\"string\">\"Inc.\"</span>);</div><div class=\"line\">user.put(<span class=\"string\">\"age\"</span>, <span class=\"number\">17</span>);</div></pre></td></tr></table></figure></p>\n<p>在布局文件中 可以通过key来访问map中对象。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.databinding.ObservableMap\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"ObservableMap&lt;String, Object&gt;\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;user[\"lastName\"]&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;String.valueOf(1 + (Integer)user[\"age\"])&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>如果使用整型作为键值时，可以考虑使用<a href=\"https://developer.android.com/reference/android/databinding/ObservableArrayList.html\" target=\"_blank\" rel=\"external\">ObservableArrayList</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObservableArrayList&lt;Object&gt; user = <span class=\"keyword\">new</span> ObservableArrayList&lt;&gt;();</div><div class=\"line\">user.add(<span class=\"string\">\"Google\"</span>);</div><div class=\"line\">user.add(<span class=\"string\">\"Inc.\"</span>);</div><div class=\"line\">user.add(<span class=\"number\">17</span>);</div></pre></td></tr></table></figure></p>\n<p>在布局中使用索引来访问list集合<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.databinding.ObservableList\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.my.app.Fields\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"ObservableList&lt;Object&gt;\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;user[Fields.LAST_NAME]&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;String.valueOf(1 + (Integer)user[Fields.AGE])&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"六、生成的Binding类\"><a href=\"#六、生成的Binding类\" class=\"headerlink\" title=\"六、生成的Binding类\"></a>六、生成的Binding类</h2><p>生成的Binding能够通过layout中的Views对象连接布局变量。如上所述，Binding类的命名和包名可以<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html#custom_binding_class_names\" target=\"_blank\" rel=\"external\">自定义</a>，生成的Binding类都继承自<a href=\"https://developer.android.com/reference/android/databinding/ViewDataBinding.html\" target=\"_blank\" rel=\"external\">ViewDataBinding</a>。</p>\n<h3 id=\"1-创建Binding类对象\"><a href=\"#1-创建Binding类对象\" class=\"headerlink\" title=\"1. 创建Binding类对象\"></a>1. 创建Binding类对象</h3><p>Binding类对象应该在inflate视图之后尽快创建，保证在表达式绑定View时，View Hierarchy不会被干扰。绑定布局文件有不同方式，最常用是用Binding类的静态方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate);</div><div class=\"line\"><span class=\"comment\">// 或者</span></div><div class=\"line\">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflate , viewGroup , <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure></p>\n<p>如果布局使用其他方式inflate，则需要分开来完成绑定。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);</div></pre></td></tr></table></figure></p>\n<p>有时不能预先知道binding。在这些情况可以使用<a href=\"https://developer.android.com/reference/android/databinding/DataBindingUtil.html\" target=\"_blank\" rel=\"external\">DataBindingUtil</a>类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId,</div><div class=\"line\">    parent, attachToParent);</div><div class=\"line\">ViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用ID的View\"><a href=\"#2-使用ID的View\" class=\"headerlink\" title=\"2. 使用ID的View\"></a>2. 使用ID的View</h3><p>当为View指定一个ID时，则会在Binding类中为View生成一个<code>public final</code>属性的字段，直接获取View，比通过调用findViewById更加快速。如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span></div><div class=\"line\">           <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/firstName\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/lastName\"</span>/&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>则会在Binding类中生成如下的字段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> TextView firstName;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> TextView lastName;</div></pre></td></tr></table></figure></p>\n<p>对于data binding来说 ID几乎没有必要，但是在需要在代码中来获取view实例时仍有必要。</p>\n<h3 id=\"3-Variables变量\"><a href=\"#3-Variables变量\" class=\"headerlink\" title=\"3. Variables变量\"></a>3. Variables变量</h3><p>会为布局中每个声明的变量生成getter和setter方法的。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.graphics.drawable.Drawable\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Drawable\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"note\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>会在Binding类中生成如下方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> com.example.<span class=\"function\">User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(com.example.User user)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Drawable <span class=\"title\">getImage</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setImage</span><span class=\"params\">(Drawable image)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getNote</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setNote</span><span class=\"params\">(String note)</span></span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-ViewStubs布局\"><a href=\"#4-ViewStubs布局\" class=\"headerlink\" title=\"4. ViewStubs布局\"></a>4. ViewStubs布局</h3><p><a href=\"https://developer.android.com/reference/android/view/ViewStub.html\" target=\"_blank\" rel=\"external\">ViewStub</a>与常用View有些不同：起始时不可见，<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ViewStub</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/stub\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:inflatedId</span>=<span class=\"string\">\"@+id/subTree\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout</span>=<span class=\"string\">\"@layout/mySubTree\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"120dip\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dip\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>用setVisiable变为可见或显式调用inflate时，则用android:layout中的定义布局替换自己与<code>include</code>类似。但与<code>include</code>不同的的是在初始时并不会inflate到布局文件中，所以Binding的view不会在初始化时完成绑定。因为Binding中的View为final属性，使用<a href=\"https://developer.android.com/reference/android/databinding/ViewStubProxy.html\" target=\"_blank\" rel=\"external\">ViewStubProxy</a>代理对象来替代ViewStud，可以在ViewStud创建后来访问。同样在ViewStud被inflate时，能够访问inflated的View Hierarchy。当inflate ViewStud的布局时，必须为新布局建立Binding。因此ViewStubProxy必须监听<a href=\"https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html\" target=\"_blank\" rel=\"external\">ViewStub.OnInflateListener</a>并在inflate时建立Binding。又因为只能有一个存在，ViewStubProxy在创建Binding类对象后调用OnInflateListener。</p>\n<h2 id=\"七、高级Binding\"><a href=\"#七、高级Binding\" class=\"headerlink\" title=\"七、高级Binding\"></a>七、高级Binding</h2><h3 id=\"1-动态变量\"><a href=\"#1-动态变量\" class=\"headerlink\" title=\"1. 动态变量\"></a>1. 动态变量</h3><p>有时不知道指定的Binding类。如： 操作不同布局的<a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html\" target=\"_blank\" rel=\"external\">RecyclerView.Adapter</a>不知道指定的Binding类，但必须要在<a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#onBindViewHolder(VH, int\" target=\"_blank\" rel=\"external\">onBindViewHolder(VH , int)</a>)<br>中关联Binding值。<br>例子中所有RecyclerView绑定的布局都有一个item变量。BindingHolder有一个getBinding方法返回<a href=\"https://developer.android.com/reference/android/databinding/ViewDataBinding.html\" target=\"_blank\" rel=\"external\">ViewDataBinding</a>基类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(BindingHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">final</span> T item = mItems.get(position);</div><div class=\"line\">   holder.getBinding().setVariable(BR.item, item);</div><div class=\"line\">   holder.getBinding().executePendingBindings();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-立即绑定\"><a href=\"#2-立即绑定\" class=\"headerlink\" title=\"2. 立即绑定\"></a>2. 立即绑定</h3><p>当变量或观察者变化时，Binding在下一帧前执行改变操作。有时Binding必须立即执行。强制执行使用 <a href=\"https://developer.android.com/reference/android/databinding/ViewDataBinding.html#executePendingBindings(\" target=\"_blank\" rel=\"external\">executePendingBindings()</a>)方法</p>\n<h3 id=\"3-后台线程\"><a href=\"#3-后台线程\" class=\"headerlink\" title=\"3. 后台线程\"></a>3. 后台线程</h3><p>DataBinding可以在后台线程中修改非集合类型的data数据，在线程中执行时，DataBinding会本地化变量和字段，避免多线程引起的同步问题。</p>\n<h2 id=\"七、属性Setter\"><a href=\"#七、属性Setter\" class=\"headerlink\" title=\"七、属性Setter\"></a>七、属性Setter</h2><p>无论何时绑定值变化，生成的binding类都必须view中绑定的表达式setter方法。DataBinding框架能够自定义setter的方法。</p>\n<h3 id=\"1-自动setter\"><a href=\"#1-自动setter\" class=\"headerlink\" title=\"1. 自动setter\"></a>1. 自动setter</h3><p>对于属性attribute来说，DataBinding会尝试查找setAttribute方法。attribute的命名空间可以或略，只针对属性的名称。如：关联TextView的android:text属性表达式会查找setText方法。如果表达式返回int，DataBinding会搜索setText(int)的方法。注意要用返回正确类型的表达式，如果必要的话，使用强制类型转换。</p>\n<blockquote>\n<p>注：即使不存在指定的属性名，DataBinding也会工作。</p>\n</blockquote>\n<p>你可以使用DataBinding为任意setter方法创建对应的属性名。如：依赖库DrawerLayout没有任何属性名，但是仍有很多setter，可以使用自动的属性名setter方法<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:scrimColor</span>=<span class=\"string\">\"@&#123;@color/scrim&#125;\"</span></div><div class=\"line\">    <span class=\"attr\">app:drawerListener</span>=<span class=\"string\">\"@&#123;fragment.drawerListener&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-setter重命名\"><a href=\"#2-setter重命名\" class=\"headerlink\" title=\"2. setter重命名\"></a>2. setter重命名</h3><p>有点setter方法没有对应的属性名。对于这些方法，可以用<a href=\"https://developer.android.com/reference/android/databinding/BindingMethods.html\" target=\"_blank\" rel=\"external\">BindingMethods</a>注解关联指定的属性名，使用这种方式时必须关联用<a href=\"https://developer.android.com/reference/android/databinding/BindingMethod.html\" target=\"_blank\" rel=\"external\">BindingMethods</a>注解的类。如<code>android:tint</code>属性名实际关联的是<a href=\"https://developer.android.com/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList\" target=\"_blank\" rel=\"external\">setImageTintList(ColorStateList)</a>)方法而不是<code>setTint()</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingMethods</span>(&#123;</div><div class=\"line\">       <span class=\"meta\">@BindingMethod</span>(type = <span class=\"string\">\"android.widget.ImageView\"</span>,</div><div class=\"line\">                      attribute = <span class=\"string\">\"android:tint\"</span>,</div><div class=\"line\">                      method = <span class=\"string\">\"setImageTintList\"</span>),</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>一般来说没有必要重命名setters，因为android框架属性已经实现。</p>\n<h3 id=\"3-自定义setter\"><a href=\"#3-自定义setter\" class=\"headerlink\" title=\"3. 自定义setter\"></a>3. 自定义setter</h3><p>有时需要自定义属性的绑定逻辑。如：<code>android:paddingLeft</code>没有对应的setter实现方法，但是存在<code>setPadding(left, top, right, bottom)</code>方法。使用<code>BindingAdapter</code>注解的静态方法可以用来自定义属性名的setter逻辑。<br>android属性已经有创建的<a href=\"https://developer.android.com/reference/android/databinding/BindingAdapter.html\" target=\"_blank\" rel=\"external\">BindingAdapter</a>，如： paddingLeft<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:paddingLeft\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setPaddingLeft</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> padding)</span> </span>&#123;</div><div class=\"line\">   view.setPadding(padding,</div><div class=\"line\">                   view.getPaddingTop(),</div><div class=\"line\">                   view.getPaddingRight(),</div><div class=\"line\">                   view.getPaddingBottom());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>BindingAdapter对自定义类型的属性很有用。如：创建图片加载方法。</p>\n<blockquote>\n<p>注：当默认的Adapter与自定义的BindingAdapter冲突时，自定义的BindingAdapter覆盖默认值。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 全部满足</span></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"bind:imageUrl\"</span>, <span class=\"string\">\"bind:error\"</span>&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(ImageView view, String url, Drawable error)</span> </span>&#123;</div><div class=\"line\">   Picasso.with(view.getContext()).load(url).error(error).into(view);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 2. 满足其中一个时</span></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(value = &#123;<span class=\"string\">\"bind:imageUrl\"</span>, <span class=\"string\">\"bind:error\"</span>&#125; , requireAll = <span class=\"keyword\">false</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(ImageView view, String url, Drawable error)</span> </span>&#123;</div><div class=\"line\">   Picasso.with(view.getContext()).load(url).error(error).into(view);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Layout</span></div><div class=\"line\">&lt;ImageView app:imageUrl=<span class=\"string\">\"@&#123;venue.imageUrl&#125;\"</span></div><div class=\"line\">app:error=<span class=\"string\">\"@&#123;@drawable/venueError&#125;\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>使用第一种BindingAdapter时，必须要同时声明<code>bind:imageUrl</code>和<code>bind:error</code>两个属性时，才会调用。</p>\n<ul>\n<li>在属性名匹配BindingAdapter时，自动会忽略属性名之前的命名空间</li>\n<li>可以自定义以android为命名空间的属性值（此时自定义覆盖默认）。</li>\n</ul>\n<p>BindingAdapter可以用在处理方法中使用旧值。如：在新值与旧值不同时，使用新值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:paddingLeft\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setPaddingLeft</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> oldPadding, <span class=\"keyword\">int</span> newPadding)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (oldPadding != newPadding) &#123;</div><div class=\"line\">       view.setPadding(newPadding,</div><div class=\"line\">                       view.getPaddingTop(),</div><div class=\"line\">                       view.getPaddingRight(),</div><div class=\"line\">                       view.getPaddingBottom());</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事件处理器可以使用接口类或带有一个抽象方法的抽象类作为参数。如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:onLayoutChange\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnLayoutChangeListener</span><span class=\"params\">(View view, View.OnLayoutChangeListener oldValue,</span></span></div><div class=\"line\">       View.OnLayoutChangeListener newValue) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (oldValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.removeOnLayoutChangeListener(oldValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.addOnLayoutChangeListener(newValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当Listener有多个方法时，必须拆分成多个Listener。如：<a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html\" target=\"_blank\" rel=\"external\">View.OnAttachStateChangeListener</a>有两个方法<br><a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View\" target=\"_blank\" rel=\"external\">onViewAttachedToWindow()</a>) 和 <a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View\" target=\"_blank\" rel=\"external\">onViewDetachedFromWindow()</a>)。我们必须创建两个接口来区分属性和处理方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnViewDetachedFromWindow</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(View v)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnViewAttachedToWindow</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(View v)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为修改一个Listener可能会影响到其他的Listener，所以必须要创建三个不同的BindingAdapter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:onViewAttachedToWindow\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</div><div class=\"line\">    setListener(view, <span class=\"keyword\">null</span>, attached);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:onViewDetachedFromWindow\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</div><div class=\"line\">    setListener(view, detached, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:onViewDetachedFromWindow\"</span>, <span class=\"string\">\"android:onViewAttachedToWindow\"</span>&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(View view, <span class=\"keyword\">final</span> OnViewDetachedFromWindow detach,</span></span></div><div class=\"line\">        <span class=\"keyword\">final</span> OnViewAttachedToWindow attach) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> OnAttachStateChangeListener newListener;</div><div class=\"line\">        <span class=\"keyword\">if</span> (detach == <span class=\"keyword\">null</span> &amp;&amp; attach == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            newListener = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            newListener = <span class=\"keyword\">new</span> OnAttachStateChangeListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (attach != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        attach.onViewAttachedToWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (detach != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        detach.onViewDetachedFromWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class=\"line\">                newListener, R.id.onAttachStateChangeListener);</div><div class=\"line\">        <span class=\"keyword\">if</span> (oldListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.removeOnAttachStateChangeListener(oldListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.addOnAttachStateChangeListener(newListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的例子稍微复杂一些，因为View使用添加和移除Listener方式，而不是为<a href=\"https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html\" target=\"_blank\" rel=\"external\">View.OnAttachStateChangeListener</a>设置<br>setter方法。android.databinding.adapters.ListenerUtil类帮助跟踪之前的Listener，这样他们可以在<br>Binding适配器中移除旧的Listener。<br>通过 @TargetApi(VERSION_CODES.HONEYCOMB_MR1)注解接口OnViewDetachedFromWindow和OnViewAttachedToWindow，DataBinding代码生成器就会知道只有运行 Honeycomb MR1版本及以上的新设备才生成Listener。</p>\n<h2 id=\"八、转换器Converters\"><a href=\"#八、转换器Converters\" class=\"headerlink\" title=\"八、转换器Converters\"></a>八、转换器Converters</h2><h3 id=\"1-对象转换\"><a href=\"#1-对象转换\" class=\"headerlink\" title=\"1. 对象转换\"></a>1. 对象转换</h3><p>如果是表达式返回的对象，则会从自动的、重命名或自定义的setter方法中选择一个setter方法。对象会强转成适合setter方法中参数类型。这种方式适合用ObservableMaps来保存数据的布局，如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">   <span class=\"attr\">android:text</span>=<span class=\"string\">'@&#123;userMap[\"lastName\"]&#125;'</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p><code>userMap</code>返回的对象自动强转为<code>setText(CharSequence)</code>中参数类型。当setter方法的参数类型存在二义性时，如存在两个setter方法，但是参数不一样时，需要使用手动强转。</p>\n<h3 id=\"2-自定义转换\"><a href=\"#2-自定义转换\" class=\"headerlink\" title=\"2. 自定义转换\"></a>2. 自定义转换</h3><p>有时需要让布局在指定类型之前自动转换，如设置背景时<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span></span></div><div class=\"line\">   <span class=\"attr\">android:background</span>=<span class=\"string\">\"@&#123;isError ? @color/red : @color/white&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>这里android:background的setter方法参数类型为<code>Drawable</code>，但是Color是整型。可以将整型的color转为Drawable类型的<code>ColorDrawable</code>，通过BindingConversion注解的静态方法来实现。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingConversion</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ColorDrawable <span class=\"title\">convertColorToDrawable</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ColorDrawable(color);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：转换器只在setter层执行，禁止使用混合类型。如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span></span></div><div class=\"line\">   <span class=\"attr\">android:background</span>=<span class=\"string\">\"@&#123;isError ? @drawable/error : @color/white&#125;\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"九、Android-Studio对Data-Binding的支持\"><a href=\"#九、Android-Studio对Data-Binding的支持\" class=\"headerlink\" title=\"九、Android Studio对Data Binding的支持\"></a>九、Android Studio对Data Binding的支持</h2><p> Android Studio支持很多data binding代码的编辑特性。如</p>\n<ul>\n<li>语法高亮</li>\n<li>标记表达式语法错误。</li>\n<li>XML代码补全</li>\n<li>引用包括导航和快速文档</li>\n</ul>\n<blockquote>\n<p>注：Arrays和<a href=\"https://docs.oracle.com/javase/tutorial/java/generics/types.html\" target=\"_blank\" rel=\"external\">生成类型</a>如<a href=\"https://developer.android.com/reference/android/databinding/Observable.html\" target=\"_blank\" rel=\"external\">Observable</a>类，可能会出现显示错误（实际上没有错误）<br> 预览窗口显示data binding的默认值。如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName, default=PLACEHOLDER&#125;\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p> 预览窗口会显示PLACEHOLDER作为TextView默认值。<br> 如果需要在项目设计时显示默认值，可以使用tools属性替代默认的表达式。具体见<a href=\"http://tools.android.com/tips/layout-designtime-attributes\" target=\"_blank\" rel=\"external\">Designtime Layout Attributes</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\" target=\"_blank\" rel=\"external\">Data Binding Library</a></p>\n<p><a href=\"https://realm.io/cn/news/data-binding-android-boyar-mount/\" target=\"_blank\" rel=\"external\">棉花糖给 Android 带来的 Data Bindings</a></p>\n<p><a href=\"https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/\" target=\"_blank\" rel=\"external\">2-way Data Binding on Android</a></p>\n"},{"title":"Android：Material Design笔记（一）","date":"2016-01-30T17:30:44.000Z","_content":"[Codelab for Android Design Support Library used in I/O Rewind Bangkok session](http://inthecheesefactory.com/blog/android-design-support-library-codelab/en)\n\n[Material Design for Android](http://developer.android.com/design/material/index.html)\n\n[Material Design Introduction](http://www.google.com/design/spec/material-design/introduction.html#)\n\n\n### 一、准备\n#### 1. style.xml配置\n{% codeblock lang:xml res/style.xml %}\n<!--NoActionBar -->\n<resources>\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n</resources>\n\n{% endcodeblock %}\n#### 2.gradle 依赖\n在app的build.gradle中添加Design Support依赖\n```java\ncompile 'com.android.support:support-v4:23.0.1'\ncompile 'com.android.support:appcompat-v7:23.0.1'\ncompile 'com.android.support:design:23.0.1'\n```\n#### 3.布局文件\n{% codeblock lang:xml layout/activity_main.xml %}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\">\n</android.support.v4.widget.DrawerLayout>\n\n{% endcodeblock %}\n\n### 二、添加FAB\nFloating Action Button (FAB) 是带有阴影效果的圆形Button。在`activity_main.xml`中添加FloatingActionButton布局，FAB需要有个父布局来确定它在布局文件中的具体位置，所以把FAB放在FrameLayout中。如：`android:layout_gravity=\"bottom|end\"`表示FAB位于整个布局的右下角。\n\n{% codeblock lang:xml layout/activity_main.xml %}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <FrameLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <android.support.design.widget.FloatingActionButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:src=\"@drawable/ic_plus\"\n            app:fabSize=\"normal\"/>\n    </FrameLayout>\n</android.support.v4.widget.DrawerLayout>\n\n{% endcodeblock %}\n\n#### 1. android:src\n表示FAB中的图标。建议大小为40dp的透明png图片。\n#### 2. app:fabSize\n表示FAB的大小。有`normal`、`min`两个值。normal的大小为56dp，min的大小为40dp。\n\n5.0的效果\n\n<div>\n<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot21.jpg\" />\n</div>\n\n4.x的效果\n\n<div>\n<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" />\n</div>\n\n在同样的布局文件中，两个的margin并不一致。design library开发小组把这个问题已确认为bug。目前的解决方案是在api 21+的dimens资源中设置FAB的margin值设置为16dp，低于api 21的dimens资源中设置FAB的margin值为0dp\n\nres/values/dimens.xml\n\n{% codeblock lang:xml res/values/dimens.xml %}\n<dimen name=\"codelab_fab_margin_right\">0dp</dimen>\n<dimen name=\"codelab_fab_margin_bottom\">0dp</dimen>\n{% endcodeblock %}\n\nres/values-v21/dimens.xml\n\n{% codeblock lang:xml res/values-v21/dimens.xml %}\n<dimen name=\"codelab_fab_margin_right\">16dp</dimen>\n<dimen name=\"codelab_fab_margin_bottom\">16dp</dimen>\n\n{% endcodeblock %}\n\nres/layout/activity_code_lab.xml 中设定FAB的margin值\n{% codeblock lang:xml res/layout/activity_code_lab.xml %}\n<android.support.design.widget.FloatingActionButton\n    ...\n    android:layout_marginBottom=\"@dimen/codelab_fab_margin_bottom\"\n    android:layout_marginRight=\"@dimen/codelab_fab_margin_right\"\n    .../>\n\n{% endcodeblock %}\n#### 3. app:elevation\nFAB的阴影深度。默认为6dp\n#### 4. app:pressedTranslationZ\nFAB按住时的阴影深度。默认为12dp\n#### 5.app:backgroundTint\nFAB背景颜色。默认使用样式中的`colorAccent`的颜色。\n#### 6.FAB点击事件\n```java\nFloatingActionButton fabBtn;\n...\nfabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);\n    fabBtn.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n \n        }\n    });\n```\n### 三、使用Snackbar\nSnackbar，一个在屏幕底部显示的黑色条，可以设置显示的文本。类似Toast，与Toast不一样的是，Snackbar为UI的一部分，而Toast是浮动在屏幕上。\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\">\n</div>\n\n#### 1. 实例化 Snackbar\nSnackbar make(@NonNull View view, @NonNull CharSequence text, int duration)\n\n- view Snackbar 的显示位置\n- text 显示的文字\n- duration  Snackbar显示的时长 `LENGTH_SHORT`或`LENGTH_LONG`\n```java\nFrameLayout rootLayout;\n...\nrootLayout = (FrameLayout) findViewById(R.id.rootLayout);\n...\nfabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);\nfabBtn.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Snackbar.make(rootLayout, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)\n                .setAction(\"Undo\", new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n\n                    }\n                })\n                .show();\n    }\n});\n```\n效果：\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\">\n</div>\n\nSnackbar显示的有问题，是因为Snackbar需要Design Library的CoordinatorLayout布局配合来使用。\n### 四、CoordinatorLayout\nCoordinatorLayout是由Design Library的新添的布局，可以让包含的View和相协调。必须保证每个子View是为配合CoordinatorLayout的布局而设计和实现的。其中FAB和Snackbar就是其中两个。\n#### 替换`FrameLayout`。\n\n{% codeblock lang:xml res/activity/main_activity.xml %}\n<android.support.design.widget.CoordinatorLayout\n    android:id=\"@+id/rootLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <android.support.design.widget.FloatingActionButton\n        ... />\n</android.support.design.widget.CoordinatorLayout>\n\n{% endcodeblock %}\n\n同时修改Activity中rootLayout的类型为CoordinatorLayout。\n\n```java\n//FrameLayout rootLayout;\nCoordinatorLayout rootLayout;\n...\n//rootLayout = (FrameLayout) findViewById(R.id.rootLayout);\nrootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);\n```\n效果图：\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\">\n</div>\n\n在android api 4.x上会有显示的bug。FAB的margin变为0dp。调整dimens的值\n\n{% codeblock lang:xml res/values/dimens.xml %}\n<dimen name=\"codelab_fab_margin_right\">16dp</dimen>\n<dimen name=\"codelab_fab_margin_bottom\">16dp</dimen>\n\n{% endcodeblock %}\n\n修改完毕\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\">\n</div>\n\n`注` ：如果使用`Android Design Support `库的话，考虑使用`CoordinatorLayout`作为布局根view。\n\n### 五、Toolbar\n相比传统的ActionBar，Toolbar更加灵活。\n#### 1.隐藏ActionBar\n{% codeblock lang:xml res/values/styles.xml %}\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n    <item name=\"windowActionBar\">false</item>\n    <item name=\"windowNoTitle\">true</item>\n</style>\n\n{% endcodeblock %}\n\n#### 2.添加Toolbar\n（1）、在布局main_activity.xml添加Toolbar\n\n{% codeblock lang:xml res/layout/main_activity.xml %}\n<android.support.design.widget.CoordinatorLayout\n    ...>\n    <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"/>\n        </android.support.design.widget.AppBarLayout>\n    </android.support.design.widget.FloatingActionButton>\n</android.support.design.widget.CoordinatorLayout>\n\n{% endcodeblock %}\n\n（2）、在Activity中调用setSupportActionBar为Activity指定toolBar。\n\n{% codeblock lang:java MainActivity%}\npublic class MainActivity extends AppCompatActivity {\n    Toolbar toolBar;\n    DrawerLayout drawerLayout;\n    ActionBarDrawerToggle drawerToggle;\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ActionBar actionBar = getSupportActionBar();\n        if(actionBar != null){\n            // 是否显示icon\n            actionBar.setDisplayShowHomeEnabled(true);\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            // 是否显示标题\n            actionBar.setDisplayShowTitleEnabled(true);\n        }\n        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);\n        drawerToggle = new ActionBarDrawerToggle(this , drawerLayout , 0 , 0);\n        ...\n    }\n    ...\n    @Override\n    protected void onPostCreate(@Nullable Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // toolbar 导航图标样式为home\n        drawerToggle.syncState();\n    }\n    ...\n}\n\n{% endcodeblock %}\n\n### 六、内容布局\n我们介绍了FAB、Toolbar，现在为`main_activity.xml`布局主区域添加一些内容。如：添加带有两个button的LinearLayout。\n{% codeblock lang:xml res/layout/main_activity.xml%}\n<android.support.design.widget.AppBarLayout>\n...\n</android.support.design.widget.AppBarLayout>\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    >\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Yo Yo\"\n        />\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Yo Yo\"\n        />\n</LinearLayout>\n<android.support.design.widget.FloatingActionButton\n    ...>\n{% endcodeblock%}\n\n如下图\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\">\n</div>\n\n发现两个buttom并不是我们想要的样式：置于toolbar下面，而是被toolbar遮住。因为`LinearLayout`并不适配CoordinatorLayout，所以没有像toolbar那样直接自适应CoordinatorLayout的内容。解决这个问题也很简单，在`LinearLayout`中加上`app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"`这个属性即可完美适配CoordinatorLayout布局了。\n```java\n<LinearLayout\n    ...\n    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n    ...\n    >\n```\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\">\n</div>\n\n内容介绍结束。\n### 七、TabLayout\nMaterial Design提供新的tab布局TabLayout，在这之前实现这个功能一般选择第三方库`SlidingTabLayout`或`SlidingTabStrip `。引入TabLayout与toolbar类似需要在xml布局文件中添加TabLayout的布局，并在Java代码中设定TabLayout的Tab属性。\n\n#### 1.main_activity.xml\n\n{% codeblock lang:xml res/layout/main_activity.xml%}\n...\n<android.support.design.widget.AppBarLayout ...>\n \n    <android.support.v7.widget.Toolbar ... />\n \n    <android.support.design.widget.TabLayout\n        android:id=\"@+id/tabLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n \n</android.support.design.widget.AppBarLayout>\n...\n\n{% endcodeblock %}\n\n#### 2.在Java代码中添加Tab\n\n{% codeblock lang:java MainActivity.java%}\nTabLayout tabLayout;\n...\ntabLayout = (TabLayout) findViewById(R.id.tabLayout);\ntabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));\n\n{% endcodeblock %}\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\">\n</div>\n\n#### 3.修改Tab的字体颜色\nTab的字体颜色是默认为黑色，用`app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"`可以修改Tab的字体颜色为白色\n\n{% codeblock lang:xml res/layout/main_activity.xml %}\n...\n<android.support.design.widget.TabLayout\n    ...\n    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" />\n...\n\n{% endcodeblock %}\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\">\n</div>\n\n#### 4.适配ViewPager\n调用`setupWithViewPager()` 方法为TabLayout指定ViewPager容器。\n#### 5. app:tabMode 与 app:tabGravity属性\napp:tabMode \n设置为`fixed`时，显示所有的Tab。适应于少量的Tab。不确定Tab的数量或Tab的数量较多的情况时，使用`scrollable `属性值，可以像Google Play Store那样滚动Tab。\n\napp:tabGravity 设置为`fill `时，Tab显示的方式为填充，设置为`center `时，则居中显示Tab。\n>如果app:tabMode 的属性值为`scrollable`时，app:tabGravity的属性值则被忽略。\n\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" style=\"width:100%\">\n</div>\n\n### 八、让AppBarLayout随内容滚动退出屏幕\nAndroid UX中设计非常好的一点就是可以让AppBarLayout随内容滚动退出屏幕，可以增加内容区域更多的显示空间。\n#### 1.修改布局文件\n使用NestedScrollView替换LinearLayout。\n{% codeblock lang:xml res/layout/main_activity.xml %}\n<android.support.v4.widget.NestedScrollView ...>\n    <LinearLayout ...>\n        ...\n    </LinearLayout>\n</android.support.v4.widget.NestedScrollView>\n\n{% endcodeblock %}\n\n#### 2.设置Toolbar的Scroll Flags属性值\n{% codeblock lang:xml res/layout/main_activity.xml %}\n...\n<android.support.v7.widget.Toolbar\n    ...\n    app:layout_scrollFlags=\"scroll|enterAlways\" />\n...\n\n{% endcodeblock %}\n","source":"_posts/Android：Material-Design笔记（一）.md","raw":"---\ntitle: Android：Material Design笔记（一）\ndate: 2016-01-31 01:30:44\ntags:\n---\n[Codelab for Android Design Support Library used in I/O Rewind Bangkok session](http://inthecheesefactory.com/blog/android-design-support-library-codelab/en)\n\n[Material Design for Android](http://developer.android.com/design/material/index.html)\n\n[Material Design Introduction](http://www.google.com/design/spec/material-design/introduction.html#)\n\n\n### 一、准备\n#### 1. style.xml配置\n{% codeblock lang:xml res/style.xml %}\n<!--NoActionBar -->\n<resources>\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n</resources>\n\n{% endcodeblock %}\n#### 2.gradle 依赖\n在app的build.gradle中添加Design Support依赖\n```java\ncompile 'com.android.support:support-v4:23.0.1'\ncompile 'com.android.support:appcompat-v7:23.0.1'\ncompile 'com.android.support:design:23.0.1'\n```\n#### 3.布局文件\n{% codeblock lang:xml layout/activity_main.xml %}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\">\n</android.support.v4.widget.DrawerLayout>\n\n{% endcodeblock %}\n\n### 二、添加FAB\nFloating Action Button (FAB) 是带有阴影效果的圆形Button。在`activity_main.xml`中添加FloatingActionButton布局，FAB需要有个父布局来确定它在布局文件中的具体位置，所以把FAB放在FrameLayout中。如：`android:layout_gravity=\"bottom|end\"`表示FAB位于整个布局的右下角。\n\n{% codeblock lang:xml layout/activity_main.xml %}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <FrameLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <android.support.design.widget.FloatingActionButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:src=\"@drawable/ic_plus\"\n            app:fabSize=\"normal\"/>\n    </FrameLayout>\n</android.support.v4.widget.DrawerLayout>\n\n{% endcodeblock %}\n\n#### 1. android:src\n表示FAB中的图标。建议大小为40dp的透明png图片。\n#### 2. app:fabSize\n表示FAB的大小。有`normal`、`min`两个值。normal的大小为56dp，min的大小为40dp。\n\n5.0的效果\n\n<div>\n<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot21.jpg\" />\n</div>\n\n4.x的效果\n\n<div>\n<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" />\n</div>\n\n在同样的布局文件中，两个的margin并不一致。design library开发小组把这个问题已确认为bug。目前的解决方案是在api 21+的dimens资源中设置FAB的margin值设置为16dp，低于api 21的dimens资源中设置FAB的margin值为0dp\n\nres/values/dimens.xml\n\n{% codeblock lang:xml res/values/dimens.xml %}\n<dimen name=\"codelab_fab_margin_right\">0dp</dimen>\n<dimen name=\"codelab_fab_margin_bottom\">0dp</dimen>\n{% endcodeblock %}\n\nres/values-v21/dimens.xml\n\n{% codeblock lang:xml res/values-v21/dimens.xml %}\n<dimen name=\"codelab_fab_margin_right\">16dp</dimen>\n<dimen name=\"codelab_fab_margin_bottom\">16dp</dimen>\n\n{% endcodeblock %}\n\nres/layout/activity_code_lab.xml 中设定FAB的margin值\n{% codeblock lang:xml res/layout/activity_code_lab.xml %}\n<android.support.design.widget.FloatingActionButton\n    ...\n    android:layout_marginBottom=\"@dimen/codelab_fab_margin_bottom\"\n    android:layout_marginRight=\"@dimen/codelab_fab_margin_right\"\n    .../>\n\n{% endcodeblock %}\n#### 3. app:elevation\nFAB的阴影深度。默认为6dp\n#### 4. app:pressedTranslationZ\nFAB按住时的阴影深度。默认为12dp\n#### 5.app:backgroundTint\nFAB背景颜色。默认使用样式中的`colorAccent`的颜色。\n#### 6.FAB点击事件\n```java\nFloatingActionButton fabBtn;\n...\nfabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);\n    fabBtn.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n \n        }\n    });\n```\n### 三、使用Snackbar\nSnackbar，一个在屏幕底部显示的黑色条，可以设置显示的文本。类似Toast，与Toast不一样的是，Snackbar为UI的一部分，而Toast是浮动在屏幕上。\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\">\n</div>\n\n#### 1. 实例化 Snackbar\nSnackbar make(@NonNull View view, @NonNull CharSequence text, int duration)\n\n- view Snackbar 的显示位置\n- text 显示的文字\n- duration  Snackbar显示的时长 `LENGTH_SHORT`或`LENGTH_LONG`\n```java\nFrameLayout rootLayout;\n...\nrootLayout = (FrameLayout) findViewById(R.id.rootLayout);\n...\nfabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);\nfabBtn.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Snackbar.make(rootLayout, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)\n                .setAction(\"Undo\", new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n\n                    }\n                })\n                .show();\n    }\n});\n```\n效果：\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\">\n</div>\n\nSnackbar显示的有问题，是因为Snackbar需要Design Library的CoordinatorLayout布局配合来使用。\n### 四、CoordinatorLayout\nCoordinatorLayout是由Design Library的新添的布局，可以让包含的View和相协调。必须保证每个子View是为配合CoordinatorLayout的布局而设计和实现的。其中FAB和Snackbar就是其中两个。\n#### 替换`FrameLayout`。\n\n{% codeblock lang:xml res/activity/main_activity.xml %}\n<android.support.design.widget.CoordinatorLayout\n    android:id=\"@+id/rootLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <android.support.design.widget.FloatingActionButton\n        ... />\n</android.support.design.widget.CoordinatorLayout>\n\n{% endcodeblock %}\n\n同时修改Activity中rootLayout的类型为CoordinatorLayout。\n\n```java\n//FrameLayout rootLayout;\nCoordinatorLayout rootLayout;\n...\n//rootLayout = (FrameLayout) findViewById(R.id.rootLayout);\nrootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);\n```\n效果图：\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\">\n</div>\n\n在android api 4.x上会有显示的bug。FAB的margin变为0dp。调整dimens的值\n\n{% codeblock lang:xml res/values/dimens.xml %}\n<dimen name=\"codelab_fab_margin_right\">16dp</dimen>\n<dimen name=\"codelab_fab_margin_bottom\">16dp</dimen>\n\n{% endcodeblock %}\n\n修改完毕\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\">\n</div>\n\n`注` ：如果使用`Android Design Support `库的话，考虑使用`CoordinatorLayout`作为布局根view。\n\n### 五、Toolbar\n相比传统的ActionBar，Toolbar更加灵活。\n#### 1.隐藏ActionBar\n{% codeblock lang:xml res/values/styles.xml %}\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n    <item name=\"windowActionBar\">false</item>\n    <item name=\"windowNoTitle\">true</item>\n</style>\n\n{% endcodeblock %}\n\n#### 2.添加Toolbar\n（1）、在布局main_activity.xml添加Toolbar\n\n{% codeblock lang:xml res/layout/main_activity.xml %}\n<android.support.design.widget.CoordinatorLayout\n    ...>\n    <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"/>\n        </android.support.design.widget.AppBarLayout>\n    </android.support.design.widget.FloatingActionButton>\n</android.support.design.widget.CoordinatorLayout>\n\n{% endcodeblock %}\n\n（2）、在Activity中调用setSupportActionBar为Activity指定toolBar。\n\n{% codeblock lang:java MainActivity%}\npublic class MainActivity extends AppCompatActivity {\n    Toolbar toolBar;\n    DrawerLayout drawerLayout;\n    ActionBarDrawerToggle drawerToggle;\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ActionBar actionBar = getSupportActionBar();\n        if(actionBar != null){\n            // 是否显示icon\n            actionBar.setDisplayShowHomeEnabled(true);\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            // 是否显示标题\n            actionBar.setDisplayShowTitleEnabled(true);\n        }\n        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);\n        drawerToggle = new ActionBarDrawerToggle(this , drawerLayout , 0 , 0);\n        ...\n    }\n    ...\n    @Override\n    protected void onPostCreate(@Nullable Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // toolbar 导航图标样式为home\n        drawerToggle.syncState();\n    }\n    ...\n}\n\n{% endcodeblock %}\n\n### 六、内容布局\n我们介绍了FAB、Toolbar，现在为`main_activity.xml`布局主区域添加一些内容。如：添加带有两个button的LinearLayout。\n{% codeblock lang:xml res/layout/main_activity.xml%}\n<android.support.design.widget.AppBarLayout>\n...\n</android.support.design.widget.AppBarLayout>\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    >\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Yo Yo\"\n        />\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Yo Yo\"\n        />\n</LinearLayout>\n<android.support.design.widget.FloatingActionButton\n    ...>\n{% endcodeblock%}\n\n如下图\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\">\n</div>\n\n发现两个buttom并不是我们想要的样式：置于toolbar下面，而是被toolbar遮住。因为`LinearLayout`并不适配CoordinatorLayout，所以没有像toolbar那样直接自适应CoordinatorLayout的内容。解决这个问题也很简单，在`LinearLayout`中加上`app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"`这个属性即可完美适配CoordinatorLayout布局了。\n```java\n<LinearLayout\n    ...\n    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n    ...\n    >\n```\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\">\n</div>\n\n内容介绍结束。\n### 七、TabLayout\nMaterial Design提供新的tab布局TabLayout，在这之前实现这个功能一般选择第三方库`SlidingTabLayout`或`SlidingTabStrip `。引入TabLayout与toolbar类似需要在xml布局文件中添加TabLayout的布局，并在Java代码中设定TabLayout的Tab属性。\n\n#### 1.main_activity.xml\n\n{% codeblock lang:xml res/layout/main_activity.xml%}\n...\n<android.support.design.widget.AppBarLayout ...>\n \n    <android.support.v7.widget.Toolbar ... />\n \n    <android.support.design.widget.TabLayout\n        android:id=\"@+id/tabLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n \n</android.support.design.widget.AppBarLayout>\n...\n\n{% endcodeblock %}\n\n#### 2.在Java代码中添加Tab\n\n{% codeblock lang:java MainActivity.java%}\nTabLayout tabLayout;\n...\ntabLayout = (TabLayout) findViewById(R.id.tabLayout);\ntabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));\n\n{% endcodeblock %}\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\">\n</div>\n\n#### 3.修改Tab的字体颜色\nTab的字体颜色是默认为黑色，用`app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"`可以修改Tab的字体颜色为白色\n\n{% codeblock lang:xml res/layout/main_activity.xml %}\n...\n<android.support.design.widget.TabLayout\n    ...\n    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" />\n...\n\n{% endcodeblock %}\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\">\n</div>\n\n#### 4.适配ViewPager\n调用`setupWithViewPager()` 方法为TabLayout指定ViewPager容器。\n#### 5. app:tabMode 与 app:tabGravity属性\napp:tabMode \n设置为`fixed`时，显示所有的Tab。适应于少量的Tab。不确定Tab的数量或Tab的数量较多的情况时，使用`scrollable `属性值，可以像Google Play Store那样滚动Tab。\n\napp:tabGravity 设置为`fill `时，Tab显示的方式为填充，设置为`center `时，则居中显示Tab。\n>如果app:tabMode 的属性值为`scrollable`时，app:tabGravity的属性值则被忽略。\n\n\n<div>\n\t<image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" style=\"width:100%\">\n</div>\n\n### 八、让AppBarLayout随内容滚动退出屏幕\nAndroid UX中设计非常好的一点就是可以让AppBarLayout随内容滚动退出屏幕，可以增加内容区域更多的显示空间。\n#### 1.修改布局文件\n使用NestedScrollView替换LinearLayout。\n{% codeblock lang:xml res/layout/main_activity.xml %}\n<android.support.v4.widget.NestedScrollView ...>\n    <LinearLayout ...>\n        ...\n    </LinearLayout>\n</android.support.v4.widget.NestedScrollView>\n\n{% endcodeblock %}\n\n#### 2.设置Toolbar的Scroll Flags属性值\n{% codeblock lang:xml res/layout/main_activity.xml %}\n...\n<android.support.v7.widget.Toolbar\n    ...\n    app:layout_scrollFlags=\"scroll|enterAlways\" />\n...\n\n{% endcodeblock %}\n","slug":"Android：Material-Design笔记（一）","published":1,"updated":"2016-04-10T00:13:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txv000bgrm3q82q0bvk","content":"<p><a href=\"http://inthecheesefactory.com/blog/android-design-support-library-codelab/en\" target=\"_blank\" rel=\"external\">Codelab for Android Design Support Library used in I/O Rewind Bangkok session</a></p>\n<p><a href=\"http://developer.android.com/design/material/index.html\" target=\"_blank\" rel=\"external\">Material Design for Android</a></p>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html#\" target=\"_blank\" rel=\"external\">Material Design Introduction</a></p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><h4 id=\"1-style-xml配置\"><a href=\"#1-style-xml配置\" class=\"headerlink\" title=\"1. style.xml配置\"></a>1. style.xml配置</h4><figure class=\"highlight xml\"><figcaption><span>res/style.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--NoActionBar --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"2-gradle-依赖\"><a href=\"#2-gradle-依赖\" class=\"headerlink\" title=\"2.gradle 依赖\"></a>2.gradle 依赖</h4><p>在app的build.gradle中添加Design Support依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:support-v4:23.0.1'</span></div><div class=\"line\">compile <span class=\"string\">'com.android.support:appcompat-v7:23.0.1'</span></div><div class=\"line\">compile <span class=\"string\">'com.android.support:design:23.0.1'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-布局文件\"><a href=\"#3-布局文件\" class=\"headerlink\" title=\"3.布局文件\"></a>3.布局文件</h4><figure class=\"highlight xml\"><figcaption><span>layout/activity_main.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"二、添加FAB\"><a href=\"#二、添加FAB\" class=\"headerlink\" title=\"二、添加FAB\"></a>二、添加FAB</h3><p>Floating Action Button (FAB) 是带有阴影效果的圆形Button。在<code>activity_main.xml</code>中添加FloatingActionButton布局，FAB需要有个父布局来确定它在布局文件中的具体位置，所以把FAB放在FrameLayout中。如：<code>android:layout_gravity=&quot;bottom|end&quot;</code>表示FAB位于整个布局的右下角。</p>\n<figure class=\"highlight xml\"><figcaption><span>layout/activity_main.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"bottom|end\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_plus\"</span></div><div class=\"line\">            <span class=\"attr\">app:fabSize</span>=<span class=\"string\">\"normal\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"1-android-src\"><a href=\"#1-android-src\" class=\"headerlink\" title=\"1. android:src\"></a>1. android:src</h4><p>表示FAB中的图标。建议大小为40dp的透明png图片。</p>\n<h4 id=\"2-app-fabSize\"><a href=\"#2-app-fabSize\" class=\"headerlink\" title=\"2. app:fabSize\"></a>2. app:fabSize</h4><p>表示FAB的大小。有<code>normal</code>、<code>min</code>两个值。normal的大小为56dp，min的大小为40dp。</p>\n<p>5.0的效果</p>\n<div><br><image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot21.jpg\"><br></image></div>\n\n<p>4.x的效果</p>\n<div><br><image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\"><br></image></div>\n\n<p>在同样的布局文件中，两个的margin并不一致。design library开发小组把这个问题已确认为bug。目前的解决方案是在api 21+的dimens资源中设置FAB的margin值设置为16dp，低于api 21的dimens资源中设置FAB的margin值为0dp</p>\n<p>res/values/dimens.xml</p>\n<figure class=\"highlight xml\"><figcaption><span>res/values/dimens.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_right\"</span>&gt;</span>0dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_bottom\"</span>&gt;</span>0dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>res/values-v21/dimens.xml</p>\n<figure class=\"highlight xml\"><figcaption><span>res/values-v21/dimens.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_right\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_bottom\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>res/layout/activity_code_lab.xml 中设定FAB的margin值<br><figure class=\"highlight xml\"><figcaption><span>res/layout/activity_code_lab.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"@dimen/codelab_fab_margin_bottom\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"@dimen/codelab_fab_margin_right\"</span></div><div class=\"line\">    <span class=\"attr\">...</span>/&gt;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-app-elevation\"><a href=\"#3-app-elevation\" class=\"headerlink\" title=\"3. app:elevation\"></a>3. app:elevation</h4><p>FAB的阴影深度。默认为6dp</p>\n<h4 id=\"4-app-pressedTranslationZ\"><a href=\"#4-app-pressedTranslationZ\" class=\"headerlink\" title=\"4. app:pressedTranslationZ\"></a>4. app:pressedTranslationZ</h4><p>FAB按住时的阴影深度。默认为12dp</p>\n<h4 id=\"5-app-backgroundTint\"><a href=\"#5-app-backgroundTint\" class=\"headerlink\" title=\"5.app:backgroundTint\"></a>5.app:backgroundTint</h4><p>FAB背景颜色。默认使用样式中的<code>colorAccent</code>的颜色。</p>\n<h4 id=\"6-FAB点击事件\"><a href=\"#6-FAB点击事件\" class=\"headerlink\" title=\"6.FAB点击事件\"></a>6.FAB点击事件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">FloatingActionButton fabBtn;</div><div class=\"line\">...</div><div class=\"line\">fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);</div><div class=\"line\">    fabBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"三、使用Snackbar\"><a href=\"#三、使用Snackbar\" class=\"headerlink\" title=\"三、使用Snackbar\"></a>三、使用Snackbar</h3><p>Snackbar，一个在屏幕底部显示的黑色条，可以设置显示的文本。类似Toast，与Toast不一样的是，Snackbar为UI的一部分，而Toast是浮动在屏幕上。</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\"><br></image></div>\n\n<h4 id=\"1-实例化-Snackbar\"><a href=\"#1-实例化-Snackbar\" class=\"headerlink\" title=\"1. 实例化 Snackbar\"></a>1. 实例化 Snackbar</h4><p>Snackbar make(@NonNull View view, @NonNull CharSequence text, int duration)</p>\n<ul>\n<li>view Snackbar 的显示位置</li>\n<li>text 显示的文字</li>\n<li>duration  Snackbar显示的时长 <code>LENGTH_SHORT</code>或<code>LENGTH_LONG</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">FrameLayout rootLayout;</div><div class=\"line\">...</div><div class=\"line\">rootLayout = (FrameLayout) findViewById(R.id.rootLayout);</div><div class=\"line\">...</div><div class=\"line\">fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);</div><div class=\"line\">fabBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Snackbar.make(rootLayout, <span class=\"string\">\"Hello. I am Snackbar!\"</span>, Snackbar.LENGTH_SHORT)</div><div class=\"line\">                .setAction(<span class=\"string\">\"Undo\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果：</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\"><br></image></div>\n\n<p>Snackbar显示的有问题，是因为Snackbar需要Design Library的CoordinatorLayout布局配合来使用。</p>\n<h3 id=\"四、CoordinatorLayout\"><a href=\"#四、CoordinatorLayout\" class=\"headerlink\" title=\"四、CoordinatorLayout\"></a>四、CoordinatorLayout</h3><p>CoordinatorLayout是由Design Library的新添的布局，可以让包含的View和相协调。必须保证每个子View是为配合CoordinatorLayout的布局而设计和实现的。其中FAB和Snackbar就是其中两个。</p>\n<h4 id=\"替换FrameLayout。\"><a href=\"#替换FrameLayout。\" class=\"headerlink\" title=\"替换FrameLayout。\"></a>替换<code>FrameLayout</code>。</h4><figure class=\"highlight xml\"><figcaption><span>res/activity/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/rootLayout\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">        <span class=\"attr\">...</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>同时修改Activity中rootLayout的类型为CoordinatorLayout。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//FrameLayout rootLayout;</span></div><div class=\"line\">CoordinatorLayout rootLayout;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//rootLayout = (FrameLayout) findViewById(R.id.rootLayout);</span></div><div class=\"line\">rootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);</div></pre></td></tr></table></figure>\n<p>效果图：</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\"><br></image></div>\n\n<p>在android api 4.x上会有显示的bug。FAB的margin变为0dp。调整dimens的值</p>\n<figure class=\"highlight xml\"><figcaption><span>res/values/dimens.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_right\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_bottom\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>修改完毕</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\"><br></image></div>\n\n<p><code>注</code> ：如果使用<code>Android Design Support</code>库的话，考虑使用<code>CoordinatorLayout</code>作为布局根view。</p>\n<h3 id=\"五、Toolbar\"><a href=\"#五、Toolbar\" class=\"headerlink\" title=\"五、Toolbar\"></a>五、Toolbar</h3><p>相比传统的ActionBar，Toolbar更加灵活。</p>\n<h4 id=\"1-隐藏ActionBar\"><a href=\"#1-隐藏ActionBar\" class=\"headerlink\" title=\"1.隐藏ActionBar\"></a>1.隐藏ActionBar</h4><figure class=\"highlight xml\"><figcaption><span>res/values/styles.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"2-添加Toolbar\"><a href=\"#2-添加Toolbar\" class=\"headerlink\" title=\"2.添加Toolbar\"></a>2.添加Toolbar</h4><p>（1）、在布局main_activity.xml添加Toolbar</p>\n<figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">    <span class=\"attr\">...</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">                <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.FloatingActionButton</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>（2）、在Activity中调用setSupportActionBar为Activity指定toolBar。</p>\n<figure class=\"highlight java\"><figcaption><span>MainActivity</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    Toolbar toolBar;</div><div class=\"line\">    DrawerLayout drawerLayout;</div><div class=\"line\">    ActionBarDrawerToggle drawerToggle;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ActionBar actionBar = getSupportActionBar();</div><div class=\"line\">        <span class=\"keyword\">if</span>(actionBar != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">// 是否显示icon</span></div><div class=\"line\">            actionBar.setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"comment\">// 是否显示标题</span></div><div class=\"line\">            actionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class=\"line\">        drawerToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span> , drawerLayout , <span class=\"number\">0</span> , <span class=\"number\">0</span>);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPostCreate(savedInstanceState);</div><div class=\"line\">        <span class=\"comment\">// toolbar 导航图标样式为home</span></div><div class=\"line\">        drawerToggle.syncState();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"六、内容布局\"><a href=\"#六、内容布局\" class=\"headerlink\" title=\"六、内容布局\"></a>六、内容布局</h3><p>我们介绍了FAB、Toolbar，现在为<code>main_activity.xml</code>布局主区域添加一些内容。如：添加带有两个button的LinearLayout。<br><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Yo Yo\"</span></div><div class=\"line\">        /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Yo Yo\"</span></div><div class=\"line\">        /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">    <span class=\"attr\">...</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>如下图</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\"><br></image></div>\n\n<p>发现两个buttom并不是我们想要的样式：置于toolbar下面，而是被toolbar遮住。因为<code>LinearLayout</code>并不适配CoordinatorLayout，所以没有像toolbar那样直接自适应CoordinatorLayout的内容。解决这个问题也很简单，在<code>LinearLayout</code>中加上<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>这个属性即可完美适配CoordinatorLayout布局了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout</div><div class=\"line\">    ...</div><div class=\"line\">    app:layout_behavior=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span></div><div class=\"line\">    ...</div><div class=\"line\">    &gt;</div></pre></td></tr></table></figure></p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\"><br></image></div>\n\n<p>内容介绍结束。</p>\n<h3 id=\"七、TabLayout\"><a href=\"#七、TabLayout\" class=\"headerlink\" title=\"七、TabLayout\"></a>七、TabLayout</h3><p>Material Design提供新的tab布局TabLayout，在这之前实现这个功能一般选择第三方库<code>SlidingTabLayout</code>或<code>SlidingTabStrip</code>。引入TabLayout与toolbar类似需要在xml布局文件中添加TabLayout的布局，并在Java代码中设定TabLayout的Tab属性。</p>\n<h4 id=\"1-main-activity-xml\"><a href=\"#1-main-activity-xml\" class=\"headerlink\" title=\"1.main_activity.xml\"></a>1.main_activity.xml</h4><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabLayout\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"2-在Java代码中添加Tab\"><a href=\"#2-在Java代码中添加Tab\" class=\"headerlink\" title=\"2.在Java代码中添加Tab\"></a>2.在Java代码中添加Tab</h4><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabLayout tabLayout;</div><div class=\"line\">...</div><div class=\"line\">tabLayout = (TabLayout) findViewById(R.id.tabLayout);</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"Tab 1\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"Tab 2\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"Tab 3\"</span>));</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\"><br></image></div>\n\n<h4 id=\"3-修改Tab的字体颜色\"><a href=\"#3-修改Tab的字体颜色\" class=\"headerlink\" title=\"3.修改Tab的字体颜色\"></a>3.修改Tab的字体颜色</h4><p>Tab的字体颜色是默认为黑色，用<code>app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</code>可以修改Tab的字体颜色为白色</p>\n<figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span> /&gt;</div><div class=\"line\">...</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\"><br></image></div>\n\n<h4 id=\"4-适配ViewPager\"><a href=\"#4-适配ViewPager\" class=\"headerlink\" title=\"4.适配ViewPager\"></a>4.适配ViewPager</h4><p>调用<code>setupWithViewPager()</code> 方法为TabLayout指定ViewPager容器。</p>\n<h4 id=\"5-app-tabMode-与-app-tabGravity属性\"><a href=\"#5-app-tabMode-与-app-tabGravity属性\" class=\"headerlink\" title=\"5. app:tabMode 与 app:tabGravity属性\"></a>5. app:tabMode 与 app:tabGravity属性</h4><p>app:tabMode<br>设置为<code>fixed</code>时，显示所有的Tab。适应于少量的Tab。不确定Tab的数量或Tab的数量较多的情况时，使用<code>scrollable</code>属性值，可以像Google Play Store那样滚动Tab。</p>\n<p>app:tabGravity 设置为<code>fill</code>时，Tab显示的方式为填充，设置为<code>center</code>时，则居中显示Tab。</p>\n<blockquote>\n<p>如果app:tabMode 的属性值为<code>scrollable</code>时，app:tabGravity的属性值则被忽略。</p>\n</blockquote>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" style=\"width:100%\"><br></image></div>\n\n<h3 id=\"八、让AppBarLayout随内容滚动退出屏幕\"><a href=\"#八、让AppBarLayout随内容滚动退出屏幕\" class=\"headerlink\" title=\"八、让AppBarLayout随内容滚动退出屏幕\"></a>八、让AppBarLayout随内容滚动退出屏幕</h3><p>Android UX中设计非常好的一点就是可以让AppBarLayout随内容滚动退出屏幕，可以增加内容区域更多的显示空间。</p>\n<h4 id=\"1-修改布局文件\"><a href=\"#1-修改布局文件\" class=\"headerlink\" title=\"1.修改布局文件\"></a>1.修改布局文件</h4><p>使用NestedScrollView替换LinearLayout。<br><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-设置Toolbar的Scroll-Flags属性值\"><a href=\"#2-设置Toolbar的Scroll-Flags属性值\" class=\"headerlink\" title=\"2.设置Toolbar的Scroll Flags属性值\"></a>2.设置Toolbar的Scroll Flags属性值</h4><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span> /&gt;</div><div class=\"line\">...</div><div class=\"line\"></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://inthecheesefactory.com/blog/android-design-support-library-codelab/en\" target=\"_blank\" rel=\"external\">Codelab for Android Design Support Library used in I/O Rewind Bangkok session</a></p>\n<p><a href=\"http://developer.android.com/design/material/index.html\" target=\"_blank\" rel=\"external\">Material Design for Android</a></p>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html#\" target=\"_blank\" rel=\"external\">Material Design Introduction</a></p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><h4 id=\"1-style-xml配置\"><a href=\"#1-style-xml配置\" class=\"headerlink\" title=\"1. style.xml配置\"></a>1. style.xml配置</h4><figure class=\"highlight xml\"><figcaption><span>res/style.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--NoActionBar --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"2-gradle-依赖\"><a href=\"#2-gradle-依赖\" class=\"headerlink\" title=\"2.gradle 依赖\"></a>2.gradle 依赖</h4><p>在app的build.gradle中添加Design Support依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:support-v4:23.0.1'</span></div><div class=\"line\">compile <span class=\"string\">'com.android.support:appcompat-v7:23.0.1'</span></div><div class=\"line\">compile <span class=\"string\">'com.android.support:design:23.0.1'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-布局文件\"><a href=\"#3-布局文件\" class=\"headerlink\" title=\"3.布局文件\"></a>3.布局文件</h4><figure class=\"highlight xml\"><figcaption><span>layout/activity_main.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"二、添加FAB\"><a href=\"#二、添加FAB\" class=\"headerlink\" title=\"二、添加FAB\"></a>二、添加FAB</h3><p>Floating Action Button (FAB) 是带有阴影效果的圆形Button。在<code>activity_main.xml</code>中添加FloatingActionButton布局，FAB需要有个父布局来确定它在布局文件中的具体位置，所以把FAB放在FrameLayout中。如：<code>android:layout_gravity=&quot;bottom|end&quot;</code>表示FAB位于整个布局的右下角。</p>\n<figure class=\"highlight xml\"><figcaption><span>layout/activity_main.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"bottom|end\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_plus\"</span></div><div class=\"line\">            <span class=\"attr\">app:fabSize</span>=<span class=\"string\">\"normal\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"1-android-src\"><a href=\"#1-android-src\" class=\"headerlink\" title=\"1. android:src\"></a>1. android:src</h4><p>表示FAB中的图标。建议大小为40dp的透明png图片。</p>\n<h4 id=\"2-app-fabSize\"><a href=\"#2-app-fabSize\" class=\"headerlink\" title=\"2. app:fabSize\"></a>2. app:fabSize</h4><p>表示FAB的大小。有<code>normal</code>、<code>min</code>两个值。normal的大小为56dp，min的大小为40dp。</p>\n<p>5.0的效果</p>\n<div><br><image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot21.jpg\"><br></image></div>\n\n<p>4.x的效果</p>\n<div><br><image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\"><br></image></div>\n\n<p>在同样的布局文件中，两个的margin并不一致。design library开发小组把这个问题已确认为bug。目前的解决方案是在api 21+的dimens资源中设置FAB的margin值设置为16dp，低于api 21的dimens资源中设置FAB的margin值为0dp</p>\n<p>res/values/dimens.xml</p>\n<figure class=\"highlight xml\"><figcaption><span>res/values/dimens.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_right\"</span>&gt;</span>0dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_bottom\"</span>&gt;</span>0dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>res/values-v21/dimens.xml</p>\n<figure class=\"highlight xml\"><figcaption><span>res/values-v21/dimens.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_right\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_bottom\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>res/layout/activity_code_lab.xml 中设定FAB的margin值<br><figure class=\"highlight xml\"><figcaption><span>res/layout/activity_code_lab.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"@dimen/codelab_fab_margin_bottom\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"@dimen/codelab_fab_margin_right\"</span></div><div class=\"line\">    <span class=\"attr\">...</span>/&gt;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-app-elevation\"><a href=\"#3-app-elevation\" class=\"headerlink\" title=\"3. app:elevation\"></a>3. app:elevation</h4><p>FAB的阴影深度。默认为6dp</p>\n<h4 id=\"4-app-pressedTranslationZ\"><a href=\"#4-app-pressedTranslationZ\" class=\"headerlink\" title=\"4. app:pressedTranslationZ\"></a>4. app:pressedTranslationZ</h4><p>FAB按住时的阴影深度。默认为12dp</p>\n<h4 id=\"5-app-backgroundTint\"><a href=\"#5-app-backgroundTint\" class=\"headerlink\" title=\"5.app:backgroundTint\"></a>5.app:backgroundTint</h4><p>FAB背景颜色。默认使用样式中的<code>colorAccent</code>的颜色。</p>\n<h4 id=\"6-FAB点击事件\"><a href=\"#6-FAB点击事件\" class=\"headerlink\" title=\"6.FAB点击事件\"></a>6.FAB点击事件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">FloatingActionButton fabBtn;</div><div class=\"line\">...</div><div class=\"line\">fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);</div><div class=\"line\">    fabBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"三、使用Snackbar\"><a href=\"#三、使用Snackbar\" class=\"headerlink\" title=\"三、使用Snackbar\"></a>三、使用Snackbar</h3><p>Snackbar，一个在屏幕底部显示的黑色条，可以设置显示的文本。类似Toast，与Toast不一样的是，Snackbar为UI的一部分，而Toast是浮动在屏幕上。</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\"><br></image></div>\n\n<h4 id=\"1-实例化-Snackbar\"><a href=\"#1-实例化-Snackbar\" class=\"headerlink\" title=\"1. 实例化 Snackbar\"></a>1. 实例化 Snackbar</h4><p>Snackbar make(@NonNull View view, @NonNull CharSequence text, int duration)</p>\n<ul>\n<li>view Snackbar 的显示位置</li>\n<li>text 显示的文字</li>\n<li>duration  Snackbar显示的时长 <code>LENGTH_SHORT</code>或<code>LENGTH_LONG</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">FrameLayout rootLayout;</div><div class=\"line\">...</div><div class=\"line\">rootLayout = (FrameLayout) findViewById(R.id.rootLayout);</div><div class=\"line\">...</div><div class=\"line\">fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);</div><div class=\"line\">fabBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Snackbar.make(rootLayout, <span class=\"string\">\"Hello. I am Snackbar!\"</span>, Snackbar.LENGTH_SHORT)</div><div class=\"line\">                .setAction(<span class=\"string\">\"Undo\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果：</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\"><br></image></div>\n\n<p>Snackbar显示的有问题，是因为Snackbar需要Design Library的CoordinatorLayout布局配合来使用。</p>\n<h3 id=\"四、CoordinatorLayout\"><a href=\"#四、CoordinatorLayout\" class=\"headerlink\" title=\"四、CoordinatorLayout\"></a>四、CoordinatorLayout</h3><p>CoordinatorLayout是由Design Library的新添的布局，可以让包含的View和相协调。必须保证每个子View是为配合CoordinatorLayout的布局而设计和实现的。其中FAB和Snackbar就是其中两个。</p>\n<h4 id=\"替换FrameLayout。\"><a href=\"#替换FrameLayout。\" class=\"headerlink\" title=\"替换FrameLayout。\"></a>替换<code>FrameLayout</code>。</h4><figure class=\"highlight xml\"><figcaption><span>res/activity/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/rootLayout\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">        <span class=\"attr\">...</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>同时修改Activity中rootLayout的类型为CoordinatorLayout。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//FrameLayout rootLayout;</span></div><div class=\"line\">CoordinatorLayout rootLayout;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//rootLayout = (FrameLayout) findViewById(R.id.rootLayout);</span></div><div class=\"line\">rootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);</div></pre></td></tr></table></figure>\n<p>效果图：</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\"><br></image></div>\n\n<p>在android api 4.x上会有显示的bug。FAB的margin变为0dp。调整dimens的值</p>\n<figure class=\"highlight xml\"><figcaption><span>res/values/dimens.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_right\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"codelab_fab_margin_bottom\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>修改完毕</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\"><br></image></div>\n\n<p><code>注</code> ：如果使用<code>Android Design Support</code>库的话，考虑使用<code>CoordinatorLayout</code>作为布局根view。</p>\n<h3 id=\"五、Toolbar\"><a href=\"#五、Toolbar\" class=\"headerlink\" title=\"五、Toolbar\"></a>五、Toolbar</h3><p>相比传统的ActionBar，Toolbar更加灵活。</p>\n<h4 id=\"1-隐藏ActionBar\"><a href=\"#1-隐藏ActionBar\" class=\"headerlink\" title=\"1.隐藏ActionBar\"></a>1.隐藏ActionBar</h4><figure class=\"highlight xml\"><figcaption><span>res/values/styles.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"2-添加Toolbar\"><a href=\"#2-添加Toolbar\" class=\"headerlink\" title=\"2.添加Toolbar\"></a>2.添加Toolbar</h4><p>（1）、在布局main_activity.xml添加Toolbar</p>\n<figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">    <span class=\"attr\">...</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">                <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.FloatingActionButton</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>（2）、在Activity中调用setSupportActionBar为Activity指定toolBar。</p>\n<figure class=\"highlight java\"><figcaption><span>MainActivity</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    Toolbar toolBar;</div><div class=\"line\">    DrawerLayout drawerLayout;</div><div class=\"line\">    ActionBarDrawerToggle drawerToggle;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ActionBar actionBar = getSupportActionBar();</div><div class=\"line\">        <span class=\"keyword\">if</span>(actionBar != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">// 是否显示icon</span></div><div class=\"line\">            actionBar.setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"comment\">// 是否显示标题</span></div><div class=\"line\">            actionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class=\"line\">        drawerToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span> , drawerLayout , <span class=\"number\">0</span> , <span class=\"number\">0</span>);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPostCreate(savedInstanceState);</div><div class=\"line\">        <span class=\"comment\">// toolbar 导航图标样式为home</span></div><div class=\"line\">        drawerToggle.syncState();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"六、内容布局\"><a href=\"#六、内容布局\" class=\"headerlink\" title=\"六、内容布局\"></a>六、内容布局</h3><p>我们介绍了FAB、Toolbar，现在为<code>main_activity.xml</code>布局主区域添加一些内容。如：添加带有两个button的LinearLayout。<br><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Yo Yo\"</span></div><div class=\"line\">        /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Yo Yo\"</span></div><div class=\"line\">        /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">    <span class=\"attr\">...</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>如下图</p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\"><br></image></div>\n\n<p>发现两个buttom并不是我们想要的样式：置于toolbar下面，而是被toolbar遮住。因为<code>LinearLayout</code>并不适配CoordinatorLayout，所以没有像toolbar那样直接自适应CoordinatorLayout的内容。解决这个问题也很简单，在<code>LinearLayout</code>中加上<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>这个属性即可完美适配CoordinatorLayout布局了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout</div><div class=\"line\">    ...</div><div class=\"line\">    app:layout_behavior=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span></div><div class=\"line\">    ...</div><div class=\"line\">    &gt;</div></pre></td></tr></table></figure></p>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\"><br></image></div>\n\n<p>内容介绍结束。</p>\n<h3 id=\"七、TabLayout\"><a href=\"#七、TabLayout\" class=\"headerlink\" title=\"七、TabLayout\"></a>七、TabLayout</h3><p>Material Design提供新的tab布局TabLayout，在这之前实现这个功能一般选择第三方库<code>SlidingTabLayout</code>或<code>SlidingTabStrip</code>。引入TabLayout与toolbar类似需要在xml布局文件中添加TabLayout的布局，并在Java代码中设定TabLayout的Tab属性。</p>\n<h4 id=\"1-main-activity-xml\"><a href=\"#1-main-activity-xml\" class=\"headerlink\" title=\"1.main_activity.xml\"></a>1.main_activity.xml</h4><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabLayout\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h4 id=\"2-在Java代码中添加Tab\"><a href=\"#2-在Java代码中添加Tab\" class=\"headerlink\" title=\"2.在Java代码中添加Tab\"></a>2.在Java代码中添加Tab</h4><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabLayout tabLayout;</div><div class=\"line\">...</div><div class=\"line\">tabLayout = (TabLayout) findViewById(R.id.tabLayout);</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"Tab 1\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"Tab 2\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"Tab 3\"</span>));</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\"><br></image></div>\n\n<h4 id=\"3-修改Tab的字体颜色\"><a href=\"#3-修改Tab的字体颜色\" class=\"headerlink\" title=\"3.修改Tab的字体颜色\"></a>3.修改Tab的字体颜色</h4><p>Tab的字体颜色是默认为黑色，用<code>app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</code>可以修改Tab的字体颜色为白色</p>\n<figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span> /&gt;</div><div class=\"line\">...</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\"><br></image></div>\n\n<h4 id=\"4-适配ViewPager\"><a href=\"#4-适配ViewPager\" class=\"headerlink\" title=\"4.适配ViewPager\"></a>4.适配ViewPager</h4><p>调用<code>setupWithViewPager()</code> 方法为TabLayout指定ViewPager容器。</p>\n<h4 id=\"5-app-tabMode-与-app-tabGravity属性\"><a href=\"#5-app-tabMode-与-app-tabGravity属性\" class=\"headerlink\" title=\"5. app:tabMode 与 app:tabGravity属性\"></a>5. app:tabMode 与 app:tabGravity属性</h4><p>app:tabMode<br>设置为<code>fixed</code>时，显示所有的Tab。适应于少量的Tab。不确定Tab的数量或Tab的数量较多的情况时，使用<code>scrollable</code>属性值，可以像Google Play Store那样滚动Tab。</p>\n<p>app:tabGravity 设置为<code>fill</code>时，Tab显示的方式为填充，设置为<code>center</code>时，则居中显示Tab。</p>\n<blockquote>\n<p>如果app:tabMode 的属性值为<code>scrollable</code>时，app:tabGravity的属性值则被忽略。</p>\n</blockquote>\n<div><br>    <image src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" style=\"width:100%\"><br></image></div>\n\n<h3 id=\"八、让AppBarLayout随内容滚动退出屏幕\"><a href=\"#八、让AppBarLayout随内容滚动退出屏幕\" class=\"headerlink\" title=\"八、让AppBarLayout随内容滚动退出屏幕\"></a>八、让AppBarLayout随内容滚动退出屏幕</h3><p>Android UX中设计非常好的一点就是可以让AppBarLayout随内容滚动退出屏幕，可以增加内容区域更多的显示空间。</p>\n<h4 id=\"1-修改布局文件\"><a href=\"#1-修改布局文件\" class=\"headerlink\" title=\"1.修改布局文件\"></a>1.修改布局文件</h4><p>使用NestedScrollView替换LinearLayout。<br><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-设置Toolbar的Scroll-Flags属性值\"><a href=\"#2-设置Toolbar的Scroll-Flags属性值\" class=\"headerlink\" title=\"2.设置Toolbar的Scroll Flags属性值\"></a>2.设置Toolbar的Scroll Flags属性值</h4><figure class=\"highlight xml\"><figcaption><span>res/layout/main_activity.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span> /&gt;</div><div class=\"line\">...</div><div class=\"line\"></div></pre></td></tr></table></figure>\n"},{"title":"Android NDK开发（二）：使用Android Studio开发进行NDK开发","date":"2016-04-18T03:32:17.000Z","_content":"[Android NDK Preview](http://tools.android.com/tech-docs/android-ndk-preview)\n\n[Experimental Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/gradle-experimental)\n\n[NDK-JNI实战教程（四）再谈新工具及NDK开发调试](http://blog.csdn.net/yanbober/article/details/51027520)\n\n[使用AndroidStudio进行NDK开发（一）](https://dailyios.com/article/Using_Android_Studio_for_NDK_development.html)\n\n### 一、Android Studio环境配置\n#### 1、介绍\nAndroid Studio的插件是基于Gradle的新组件模型机制，减少了NDK环境配置时间。同时含有编译JNI应用所需的NDK集成环境。本篇用户指导详细介绍如何使用Android Studio的新插件、标出新的插件和传统插件的区别。\n> 注意：新的插件还是预览版，对应的Gradle api不是最终的版本，也意味着不同插件需要配合对应版本的Gradle来使用，DSL也可能变动。\n\n#### 2、最新版本\nCheck [https://bintray.com/android/android-tools/com.android.tools.build.gradle-experimental/view](bintray repository) 查看最新版本；\n#### 3、配置\n- Gradle（根据下面的表格选择对应的插件版本）\n- Android NDK r10e（如需使用NDK）\n- SDK的Build Tools 至少需要19.0.0 ，意图在未来的版本变动最小化迁移过流程中带来的变动。一些特性需要更新的版本。\n-  每个不同版本的插件需要配置对应的Gradle版本\n\n\t{% codeblock lang:java %}\n\t┌───────────┬────────────┐\n\t    Plugin Version  \t    Gradle Version          \t\n\t├───────────┼────────────┤\n\t    0.1.0                   2.5                            \t\n\t├───────────┼────────────┤\n\t    0.2.0                   2.6 \t                          \t\n\t├───────────┼────────────┤\n\t    0.3.0-alpha3            2.8                           \t\n\t├───────────┼────────────┤\n\t    0.6.0-alpha1            2.8                            \t\n\t├───────────┼────────────┤\n\t    0.6.0-alpha5            2.10                           \t\n\t├───────────┼────────────┤\n\t    0.7.0-alpha1            2.10                           \t\n\t└───────────┴────────────┘\n\t{% endcodeblock %}\n#### 4、从传统Android Gradle 插件迁移\n经典的Android Studio项目类似下面的目录结构，迁移新的ndk插件需要修改标出的文件内容。传统插件和新插件的有几个重要的DSL内容变化。\n{% codeblock lang:java %}\n.\n├── app/\n│   ├── app.iml\n│   ├── build.gradle  ◀\n│   └── src/\n├── build.gradle ◀\n├── gradle/\n│   └── wrapper/\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties ◀\n├── gradle.properties\n├── gradlew*\n├── gradlew.bat\n├── local.properties\n├── MyApplication.iml\n└── settings.gradle\n{% endcodeblock %}\n\n##### （1）./gradle/wrapper/gradle-wrapper.properties \n- 新插件每个版本支持指定的gradle版本。参考[Gradle Requirements](http://tools.android.com/tech-docs/new-build-system/gradle-experimental?pli=1#TOC-Gradle-Requirements) 选择Gradle。\n\n```java\n#Wed Apr 10 15:27:10 PDT 2013\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-2.10-all.zip\n```\n\n##### （2）./build.gradle\n- 插件路径 `com.android.tools.build:gradle-experimental` 替换 `com.android.tools.build:gradle`.\n\n```java\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath \"com.android.tools.build:gradle-experimental:0.7.0-alpha4\"\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n  }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n```\n##### （3）./app/build.gradle\nDSL有意义的变化，我们知道很多变化看起来没有必要的，而我们的目的是移除一些这些变化，来减少在未来处理迁移的处理。\n> 注意：从版本`0.6.0-alpha5`开始，DSL有部分重要的提升。例子中的代码不适应之前版本，如果你使用旧版本插件，请参考[旧版本用户指导](https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/gradle-experimental/0-4-0)\n\nDSL 变化：\n\n- 插件名称由`com.android.application`变为`com.android.model.application`，或者用`apply plugin: \"com.android.model.library\" ` 创建Android aar Library。\n- 用`model { } `来包裹配置。\n- 用add方法来为集合添加元素。\n\n当前DSL限制 \n\n- 属性列表只能设置它们的直系类型，无法接受其他类型。例如：\n\t- 你可以用String来设置File类型的属性，但List<File>只能接受文件类型\n- 创建编译类型或产品需要调用create方法，修改已经存在的发布或编译类型可以使用名字来完成。\n- 修改变量和任务的DSL很受限制。\n  {% codeblock lang:java %}\n  apply plugin: \"com.android.model.application\"\n  model {\n    android {\n      compileSdkVersion 23\n      buildToolsVersion \"23.0.2\"\n\n      defaultConfig {\n        applicationId \"com.example.user.myapplication\"\n        minSdkVersion.apiLevel 15\n        targetSdkVersion.apiLevel 22\n        versionCode 1\n        versionName \"1.0\"\n\n        buildConfigFields {\n          create() {\n            type \"int\"\n            name \"VALUE\"\n            value \"1\"\n          }\n        }\n      }\n      buildTypes {\n        release {\n          minifyEnabled false\n          proguardFiles.add(file(\"proguard-rules.pro\"))\n        }\n      }\n      productFlavors {\n        create(\"flavor1\") {\n          applicationId \"com.app\"\n        }\n      }\n\t    \n      // Configures source set directory.\n      sources {\n        main {\n          java {\n            source {\n              srcDir \"src\"\n            }\n          }\n        }\n      }\n    }\n  }\n\n  dependencies {\n    compile fileTree(dir: \"libs\", include: [\"*.jar\"])\n    compile \"com.android.support:appcompat-v7:22.2.0\"\n  }\n  {% endcodeblock %}\n##### （4）签名配置\n用`$()`语法指定其他的model元素。使用`$()`，需要为Gradle 2.10以下版本添加`\"-Dorg.gradle.model.dsl=true\" `Gradle命令行的参数。对指定签名配置文件很有用。\n> 注意：android.signingConfigs必须在`android {} `块之外。\n\n\t```java\n\tapply plugin: \"com.android.model.application\"\n\t\n\tmodel {\n\t  android {\n\t    compileSdkVersion 23\n\t    buildToolsVersion \"23.0.2\"\n\t    buildTypes {\n\t      release {\n\t        signingConfig = $(\"android.signingConfigs.myConfig\")\n\t      }\n\t    }\n\t  }\n\t  android.signingConfigs {\n\t    create(\"myConfig\") {\n\t      storeFile \"/path/to/debug.keystore\"\n\t      storePassword \"android\"\n\t      keyAlias \"androiddebugkey\"\n\t      keyPassword \"android\"\n\t      storeType \"jks\"\n\t    }\n\t  }\n\t}\n\t```\n#### 5、NDK集成环境\n\n新的插件集成了NDK开发环境，支持创建Native应用。如何使用NDK集成环境：\n- 用Studio内部SDK Manager 下载 NDK\n- 设定local.properties中的ndk.dir 或ANDROID_NDK_HOME环境变量的值，为NDK的路径\n- 在build.gradle 中添加`android.ndk`模块\n##### （1）简单NDK配置\n一个简单NDK应用的build.gradle如下：\n```java\napply plugin: 'com.android.model.application'\n\nmodel {\n  android {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ndk {\n      moduleName \"native\"\n    }\n  }\n}\n```\n> 注意：`moduleName`参数不能省略，决定native库的名称\n\n##### （2）Ndk Source 设置\n默认情况下，会查找` src/main/jni`中的 C/C++ 文件。配置android.sources 修改源码路径\n```java\nmodel {\n  android {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ndk {\n      moduleName \"native\"\n    }\n    sources {\n      main {\n        jni {\n          source {\n            srcDir \"src\"\n          }\n        }\n      }\n    }\n  }\n}\n```\nJNI源码包含C和C++ 文件，子目录中所有文件都包含。带有.c后缀的文件为 C 文件，而C++ 文件则有以下几种后缀：.C ，.CPP，.c++ .cp ，.cpp ，.cxx。可以使用`exculde`方法排除文件，用`include`忽略文件。\n```java\nmodel { \n  android.sources {\n    main {\n      jni {\n        source {\n          include \"someFile.txt\"\n          exclude \"**/excludeThisFile.c\"\n        }\n      }\t\t\n    }\n  }\n}\n```\n##### （3）其他编译参数\n可以使用`android.ndk{}`块来设置参数\n```java\nmodel {\n  android {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ndk {\n      // All Configurations that can be changed in android.ndk\n      moduleName \"native\"\n      toolchain \"clang\"\n      toolchainVersion \"3.5\"\n      // Note that CFlags has a capital C ,which is inconsistent with \n      // the naming convention of other properties. This is a \n      // technical limitation that will be resolved\n      CFlags.add(\"-DCUSTOM_DEFINE\")\n      cppFlags.add(\"-DCUSTOM_DEFINE\")\n      ldFlags.add(\"-L/custom/lib/path\")\n      ldLibs.add(\"log\")\n      stl \"stlport_static\"\n    }\n    buildTypes {\n      release {\n        ndk {\n          debuggable true\n        }\n      }\n    }\n    productFlavors {\n      create(\"arm\") {\n        ndk {\n          // You can customize the NDK configurations for each\n          // productFlavors and buildTypes.\n          abiFilters.add(\"armeabi-v7a\")\t  \n        }\n      }\n      create(\"fat\") {\n        // If ndk.abiFilters is not configured, the application\n        // compile and package all suppported ABI.\n      }\n    }\n  }\n  // You can modify the NDK configuration for each variant.\n  components.android {\n    binaries.afterEach { binary ->\n      binary.mergedNdkConfig.cppFlags.add( \"-DVARIANT=\\\"\" + binary.name + \"\\\"\")\n    }\n  }\n}\n```\n\n##### （4）已知限制\n1. 不支持类似cpu_feature的NDK 单元\n2. 不支持合并外部build系统 \n\n##### （5）示例\n访问Github的[Ndk Samples](https://github.com/googlesamples/android-ndk)\n\n##### （6）多重NDK Project\n0.4.0 Plugin 添加了NDK依赖的基础支持，可以创建一个native 库。如果使用0.4.0 Plugin可以用Gradle编译native项目，但在Android Studio中编辑和调试功能尚未实现。\n\n- 独立NDK Plugin\n\n\t在gradle-experimental:0.4.0中，一个新的Plugin可以只创建native library，无须创建android application 或 android \tlibrary。DSL与 application/library Plugin相近。下面的例子中`build.gradle`可以使用`src/main/jni`的C/C++源文件来生成`libhello.so`文件\n\t\n\t```java\n\tapply plugin: \"com.android.model.native\"\n\tmodel {\n\t  android{\n\t    compileSdkVersion 23\n\t    ndk {\n\t      moduleName \"hello\"\n\t    }\n\t  }\n\t}\n\t\n\t```\n- 已知问题\n\t- Android Studio 未支持编辑单独plugin\n\t- 编译application时修改library源文件后，不会自动重链接到新的library\n\n##### （6）Ndk依赖\n指定依赖的语法遵照Gradle未来依赖系统的方式，你可以设定依赖的Android Project或指定文件。\n比如，假设有个使用独立NDK Plugin的subproject\n\n{% codeblock lang:java lib/build.gradle %}\napply plugin: \"com.android.model.native\"\nmodel {\n  android{\n    compileSdkVersion 23\n    ndk {\n      moduleName \"hello\"\n    }\n    sources {\n      main {\n        jni {\n          exportedHeaders {\n            srcDir \"src/main/headers\"\n          }\n        }\n      }\n    }\n  }\n}\n{% endcodeblock %}\n\n任何带有JNI依赖的项目需要包含exportedHeaders指定的目录。你可以为项目的依赖项目添加JNI代码\n\n{% codeblock lang:java app/build.gradle %}\napply plugin: \"com.android.model.application\"\nmodel{\n  android{\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    source {\n      main {\n        jni {\n          dependencies {\n            project \":lib1\"\n          }\n        }\n      }\n    }\n  }\n}\n{% endcodeblock %}\n\n你可以指定target项目的buildType 和（或）productFlavor 。否则，plugin会查找相同的buildType和productFlavor作为你的application。你也可以指定linkageType，如果希望native library最为静态链接库的话。\n\n```java\nmodel{\n  android.sources {\n    main {\n      jni {\n        dependencies {\n          project \":lib1\"\n          buildType \"debug\"\n          productFlavor \"flavor1\"\n          linkage \"static\"\n        }\n      }\n    }\n  }\n}\n```\n声明依赖文件，创建预编译库，添加依赖库等\n\n{% codeblock lang:java %}\nmodel {\n  repositories {\n    libs (PrebuiltLibraries) {\n      prebuilt {\n        headers.srcDir \"path/to/headers\"\n        binaries.withType (SharedLibraryBinary) {\n          sharedLibraryFile = file(\"lib/${targetPlatform.getName() }/prebuilt.so\")\n        }\n      }\n    }\n  }\n  android.sources {\n    main {\n      jniLibs {\n        dependencies {\n          library \"prebuilt\"\n        }\n      }\n    }\n  }\n}\n\n{% endcodeblock %}\n\n可以添加native 依赖到\"jniLibs\"或\"jni\" source 集合中。当添加natice依赖库到\"jniLibs\"中，依赖会打包到` application/library`下，但不会用来编译JNI代码。\n```java\nmodel {\n  android.sources {\n    main {\n      jniLibs {\n      \tdependencies {\n          library \"prebuilt\"\n        }\n      }\n    }\n  }\n}\n\n```\n\n#### 6、DSL变化\nPlugin还在试验阶段，DSL会随着plugin开发版本变动。本节来说明不同版本的DSL变化，来帮助迁移。\n\n##### （1）、0.6.0-alpha1 -> 0.6.0-alpha5\n- Plugin需要gradle 2.10 ，带来DSL签名方面的改善\n- 配置信息可以被折叠\n\n\t```java\n\tandroid{\n\t  buildTypes {\n\t   ... \n\t  }\n\t}\n\t```\n\t替换\n\t\n\t```java\n\tandroid.buildTypes {\n\t  ...\n\t}\n\t\n\t```\n- 文件类型接受String，但String无法添加到List<File>中\n- -Dorg.gradle.model=true 现在为默认值。允许被其他model引用，但是引用的model必须为独立的block\n- 大多数参数不在需要'='来设值\n\n##### （2）、0.4.x -> 0.6.0-alpha1\n- 指定依赖指定库文件的DSL修改为遵守Gradle的native依赖DSL。[Sample](https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/native-binaries/prebuilt/build.gradle)\n\n\t{% codeblock lang:java %}\n\tmodel {\n\t  repositories {\n\t    prebuilt(PrebuildtLibraries) {\n\t      binaries.withType(SharedLibraryBinary){\n\t        sharedLibraryFile = file(\"lib/${targetPlatform.getName()}/prebuilt.so\")\n\t      }\n\t    }\n\t    android.sources {\n\t      main{\n\t        jniLibs {\n\t          dependencies {\n\t            library \"prebuilt\"\n\t          }\n\t        }\n\t      }\n\t    } \n\t  }\n\t}\n\t\n\t{% endcodeblock%}\n\n##### （3）、0.2.x -> 0.4.0\n- += 不在用于collections。列表添加Items可以使用'add'和'addAll'放。如 `CFlags += \"-DCUSTOM_DEFINE\"`用`CFlags.add(\"-DCUSTOM_DEFINE\")`替换。\n\n##### （4）、0.1.x -> 0.2.x\n- jniDebuggable 从buildType 移动到ndk模块中\n\t```java\n\trelease {\n\t  jniDebuggable = true\n\t}\n\t```\n\t变为\n\t```java\n\trelease {\n\t  ndk.with {\n\t    debuggable = true\n\t  }\n\t}\n\t```","source":"_posts/Android：NDK开发（二）.md","raw":"---\ntitle: Android NDK开发（二）：使用Android Studio开发进行NDK开发\ndate: 2016-04-18 11:32:17\ntags:\n---\n[Android NDK Preview](http://tools.android.com/tech-docs/android-ndk-preview)\n\n[Experimental Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/gradle-experimental)\n\n[NDK-JNI实战教程（四）再谈新工具及NDK开发调试](http://blog.csdn.net/yanbober/article/details/51027520)\n\n[使用AndroidStudio进行NDK开发（一）](https://dailyios.com/article/Using_Android_Studio_for_NDK_development.html)\n\n### 一、Android Studio环境配置\n#### 1、介绍\nAndroid Studio的插件是基于Gradle的新组件模型机制，减少了NDK环境配置时间。同时含有编译JNI应用所需的NDK集成环境。本篇用户指导详细介绍如何使用Android Studio的新插件、标出新的插件和传统插件的区别。\n> 注意：新的插件还是预览版，对应的Gradle api不是最终的版本，也意味着不同插件需要配合对应版本的Gradle来使用，DSL也可能变动。\n\n#### 2、最新版本\nCheck [https://bintray.com/android/android-tools/com.android.tools.build.gradle-experimental/view](bintray repository) 查看最新版本；\n#### 3、配置\n- Gradle（根据下面的表格选择对应的插件版本）\n- Android NDK r10e（如需使用NDK）\n- SDK的Build Tools 至少需要19.0.0 ，意图在未来的版本变动最小化迁移过流程中带来的变动。一些特性需要更新的版本。\n-  每个不同版本的插件需要配置对应的Gradle版本\n\n\t{% codeblock lang:java %}\n\t┌───────────┬────────────┐\n\t    Plugin Version  \t    Gradle Version          \t\n\t├───────────┼────────────┤\n\t    0.1.0                   2.5                            \t\n\t├───────────┼────────────┤\n\t    0.2.0                   2.6 \t                          \t\n\t├───────────┼────────────┤\n\t    0.3.0-alpha3            2.8                           \t\n\t├───────────┼────────────┤\n\t    0.6.0-alpha1            2.8                            \t\n\t├───────────┼────────────┤\n\t    0.6.0-alpha5            2.10                           \t\n\t├───────────┼────────────┤\n\t    0.7.0-alpha1            2.10                           \t\n\t└───────────┴────────────┘\n\t{% endcodeblock %}\n#### 4、从传统Android Gradle 插件迁移\n经典的Android Studio项目类似下面的目录结构，迁移新的ndk插件需要修改标出的文件内容。传统插件和新插件的有几个重要的DSL内容变化。\n{% codeblock lang:java %}\n.\n├── app/\n│   ├── app.iml\n│   ├── build.gradle  ◀\n│   └── src/\n├── build.gradle ◀\n├── gradle/\n│   └── wrapper/\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties ◀\n├── gradle.properties\n├── gradlew*\n├── gradlew.bat\n├── local.properties\n├── MyApplication.iml\n└── settings.gradle\n{% endcodeblock %}\n\n##### （1）./gradle/wrapper/gradle-wrapper.properties \n- 新插件每个版本支持指定的gradle版本。参考[Gradle Requirements](http://tools.android.com/tech-docs/new-build-system/gradle-experimental?pli=1#TOC-Gradle-Requirements) 选择Gradle。\n\n```java\n#Wed Apr 10 15:27:10 PDT 2013\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-2.10-all.zip\n```\n\n##### （2）./build.gradle\n- 插件路径 `com.android.tools.build:gradle-experimental` 替换 `com.android.tools.build:gradle`.\n\n```java\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath \"com.android.tools.build:gradle-experimental:0.7.0-alpha4\"\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n  }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n```\n##### （3）./app/build.gradle\nDSL有意义的变化，我们知道很多变化看起来没有必要的，而我们的目的是移除一些这些变化，来减少在未来处理迁移的处理。\n> 注意：从版本`0.6.0-alpha5`开始，DSL有部分重要的提升。例子中的代码不适应之前版本，如果你使用旧版本插件，请参考[旧版本用户指导](https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/gradle-experimental/0-4-0)\n\nDSL 变化：\n\n- 插件名称由`com.android.application`变为`com.android.model.application`，或者用`apply plugin: \"com.android.model.library\" ` 创建Android aar Library。\n- 用`model { } `来包裹配置。\n- 用add方法来为集合添加元素。\n\n当前DSL限制 \n\n- 属性列表只能设置它们的直系类型，无法接受其他类型。例如：\n\t- 你可以用String来设置File类型的属性，但List<File>只能接受文件类型\n- 创建编译类型或产品需要调用create方法，修改已经存在的发布或编译类型可以使用名字来完成。\n- 修改变量和任务的DSL很受限制。\n  {% codeblock lang:java %}\n  apply plugin: \"com.android.model.application\"\n  model {\n    android {\n      compileSdkVersion 23\n      buildToolsVersion \"23.0.2\"\n\n      defaultConfig {\n        applicationId \"com.example.user.myapplication\"\n        minSdkVersion.apiLevel 15\n        targetSdkVersion.apiLevel 22\n        versionCode 1\n        versionName \"1.0\"\n\n        buildConfigFields {\n          create() {\n            type \"int\"\n            name \"VALUE\"\n            value \"1\"\n          }\n        }\n      }\n      buildTypes {\n        release {\n          minifyEnabled false\n          proguardFiles.add(file(\"proguard-rules.pro\"))\n        }\n      }\n      productFlavors {\n        create(\"flavor1\") {\n          applicationId \"com.app\"\n        }\n      }\n\t    \n      // Configures source set directory.\n      sources {\n        main {\n          java {\n            source {\n              srcDir \"src\"\n            }\n          }\n        }\n      }\n    }\n  }\n\n  dependencies {\n    compile fileTree(dir: \"libs\", include: [\"*.jar\"])\n    compile \"com.android.support:appcompat-v7:22.2.0\"\n  }\n  {% endcodeblock %}\n##### （4）签名配置\n用`$()`语法指定其他的model元素。使用`$()`，需要为Gradle 2.10以下版本添加`\"-Dorg.gradle.model.dsl=true\" `Gradle命令行的参数。对指定签名配置文件很有用。\n> 注意：android.signingConfigs必须在`android {} `块之外。\n\n\t```java\n\tapply plugin: \"com.android.model.application\"\n\t\n\tmodel {\n\t  android {\n\t    compileSdkVersion 23\n\t    buildToolsVersion \"23.0.2\"\n\t    buildTypes {\n\t      release {\n\t        signingConfig = $(\"android.signingConfigs.myConfig\")\n\t      }\n\t    }\n\t  }\n\t  android.signingConfigs {\n\t    create(\"myConfig\") {\n\t      storeFile \"/path/to/debug.keystore\"\n\t      storePassword \"android\"\n\t      keyAlias \"androiddebugkey\"\n\t      keyPassword \"android\"\n\t      storeType \"jks\"\n\t    }\n\t  }\n\t}\n\t```\n#### 5、NDK集成环境\n\n新的插件集成了NDK开发环境，支持创建Native应用。如何使用NDK集成环境：\n- 用Studio内部SDK Manager 下载 NDK\n- 设定local.properties中的ndk.dir 或ANDROID_NDK_HOME环境变量的值，为NDK的路径\n- 在build.gradle 中添加`android.ndk`模块\n##### （1）简单NDK配置\n一个简单NDK应用的build.gradle如下：\n```java\napply plugin: 'com.android.model.application'\n\nmodel {\n  android {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ndk {\n      moduleName \"native\"\n    }\n  }\n}\n```\n> 注意：`moduleName`参数不能省略，决定native库的名称\n\n##### （2）Ndk Source 设置\n默认情况下，会查找` src/main/jni`中的 C/C++ 文件。配置android.sources 修改源码路径\n```java\nmodel {\n  android {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ndk {\n      moduleName \"native\"\n    }\n    sources {\n      main {\n        jni {\n          source {\n            srcDir \"src\"\n          }\n        }\n      }\n    }\n  }\n}\n```\nJNI源码包含C和C++ 文件，子目录中所有文件都包含。带有.c后缀的文件为 C 文件，而C++ 文件则有以下几种后缀：.C ，.CPP，.c++ .cp ，.cpp ，.cxx。可以使用`exculde`方法排除文件，用`include`忽略文件。\n```java\nmodel { \n  android.sources {\n    main {\n      jni {\n        source {\n          include \"someFile.txt\"\n          exclude \"**/excludeThisFile.c\"\n        }\n      }\t\t\n    }\n  }\n}\n```\n##### （3）其他编译参数\n可以使用`android.ndk{}`块来设置参数\n```java\nmodel {\n  android {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ndk {\n      // All Configurations that can be changed in android.ndk\n      moduleName \"native\"\n      toolchain \"clang\"\n      toolchainVersion \"3.5\"\n      // Note that CFlags has a capital C ,which is inconsistent with \n      // the naming convention of other properties. This is a \n      // technical limitation that will be resolved\n      CFlags.add(\"-DCUSTOM_DEFINE\")\n      cppFlags.add(\"-DCUSTOM_DEFINE\")\n      ldFlags.add(\"-L/custom/lib/path\")\n      ldLibs.add(\"log\")\n      stl \"stlport_static\"\n    }\n    buildTypes {\n      release {\n        ndk {\n          debuggable true\n        }\n      }\n    }\n    productFlavors {\n      create(\"arm\") {\n        ndk {\n          // You can customize the NDK configurations for each\n          // productFlavors and buildTypes.\n          abiFilters.add(\"armeabi-v7a\")\t  \n        }\n      }\n      create(\"fat\") {\n        // If ndk.abiFilters is not configured, the application\n        // compile and package all suppported ABI.\n      }\n    }\n  }\n  // You can modify the NDK configuration for each variant.\n  components.android {\n    binaries.afterEach { binary ->\n      binary.mergedNdkConfig.cppFlags.add( \"-DVARIANT=\\\"\" + binary.name + \"\\\"\")\n    }\n  }\n}\n```\n\n##### （4）已知限制\n1. 不支持类似cpu_feature的NDK 单元\n2. 不支持合并外部build系统 \n\n##### （5）示例\n访问Github的[Ndk Samples](https://github.com/googlesamples/android-ndk)\n\n##### （6）多重NDK Project\n0.4.0 Plugin 添加了NDK依赖的基础支持，可以创建一个native 库。如果使用0.4.0 Plugin可以用Gradle编译native项目，但在Android Studio中编辑和调试功能尚未实现。\n\n- 独立NDK Plugin\n\n\t在gradle-experimental:0.4.0中，一个新的Plugin可以只创建native library，无须创建android application 或 android \tlibrary。DSL与 application/library Plugin相近。下面的例子中`build.gradle`可以使用`src/main/jni`的C/C++源文件来生成`libhello.so`文件\n\t\n\t```java\n\tapply plugin: \"com.android.model.native\"\n\tmodel {\n\t  android{\n\t    compileSdkVersion 23\n\t    ndk {\n\t      moduleName \"hello\"\n\t    }\n\t  }\n\t}\n\t\n\t```\n- 已知问题\n\t- Android Studio 未支持编辑单独plugin\n\t- 编译application时修改library源文件后，不会自动重链接到新的library\n\n##### （6）Ndk依赖\n指定依赖的语法遵照Gradle未来依赖系统的方式，你可以设定依赖的Android Project或指定文件。\n比如，假设有个使用独立NDK Plugin的subproject\n\n{% codeblock lang:java lib/build.gradle %}\napply plugin: \"com.android.model.native\"\nmodel {\n  android{\n    compileSdkVersion 23\n    ndk {\n      moduleName \"hello\"\n    }\n    sources {\n      main {\n        jni {\n          exportedHeaders {\n            srcDir \"src/main/headers\"\n          }\n        }\n      }\n    }\n  }\n}\n{% endcodeblock %}\n\n任何带有JNI依赖的项目需要包含exportedHeaders指定的目录。你可以为项目的依赖项目添加JNI代码\n\n{% codeblock lang:java app/build.gradle %}\napply plugin: \"com.android.model.application\"\nmodel{\n  android{\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    source {\n      main {\n        jni {\n          dependencies {\n            project \":lib1\"\n          }\n        }\n      }\n    }\n  }\n}\n{% endcodeblock %}\n\n你可以指定target项目的buildType 和（或）productFlavor 。否则，plugin会查找相同的buildType和productFlavor作为你的application。你也可以指定linkageType，如果希望native library最为静态链接库的话。\n\n```java\nmodel{\n  android.sources {\n    main {\n      jni {\n        dependencies {\n          project \":lib1\"\n          buildType \"debug\"\n          productFlavor \"flavor1\"\n          linkage \"static\"\n        }\n      }\n    }\n  }\n}\n```\n声明依赖文件，创建预编译库，添加依赖库等\n\n{% codeblock lang:java %}\nmodel {\n  repositories {\n    libs (PrebuiltLibraries) {\n      prebuilt {\n        headers.srcDir \"path/to/headers\"\n        binaries.withType (SharedLibraryBinary) {\n          sharedLibraryFile = file(\"lib/${targetPlatform.getName() }/prebuilt.so\")\n        }\n      }\n    }\n  }\n  android.sources {\n    main {\n      jniLibs {\n        dependencies {\n          library \"prebuilt\"\n        }\n      }\n    }\n  }\n}\n\n{% endcodeblock %}\n\n可以添加native 依赖到\"jniLibs\"或\"jni\" source 集合中。当添加natice依赖库到\"jniLibs\"中，依赖会打包到` application/library`下，但不会用来编译JNI代码。\n```java\nmodel {\n  android.sources {\n    main {\n      jniLibs {\n      \tdependencies {\n          library \"prebuilt\"\n        }\n      }\n    }\n  }\n}\n\n```\n\n#### 6、DSL变化\nPlugin还在试验阶段，DSL会随着plugin开发版本变动。本节来说明不同版本的DSL变化，来帮助迁移。\n\n##### （1）、0.6.0-alpha1 -> 0.6.0-alpha5\n- Plugin需要gradle 2.10 ，带来DSL签名方面的改善\n- 配置信息可以被折叠\n\n\t```java\n\tandroid{\n\t  buildTypes {\n\t   ... \n\t  }\n\t}\n\t```\n\t替换\n\t\n\t```java\n\tandroid.buildTypes {\n\t  ...\n\t}\n\t\n\t```\n- 文件类型接受String，但String无法添加到List<File>中\n- -Dorg.gradle.model=true 现在为默认值。允许被其他model引用，但是引用的model必须为独立的block\n- 大多数参数不在需要'='来设值\n\n##### （2）、0.4.x -> 0.6.0-alpha1\n- 指定依赖指定库文件的DSL修改为遵守Gradle的native依赖DSL。[Sample](https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/native-binaries/prebuilt/build.gradle)\n\n\t{% codeblock lang:java %}\n\tmodel {\n\t  repositories {\n\t    prebuilt(PrebuildtLibraries) {\n\t      binaries.withType(SharedLibraryBinary){\n\t        sharedLibraryFile = file(\"lib/${targetPlatform.getName()}/prebuilt.so\")\n\t      }\n\t    }\n\t    android.sources {\n\t      main{\n\t        jniLibs {\n\t          dependencies {\n\t            library \"prebuilt\"\n\t          }\n\t        }\n\t      }\n\t    } \n\t  }\n\t}\n\t\n\t{% endcodeblock%}\n\n##### （3）、0.2.x -> 0.4.0\n- += 不在用于collections。列表添加Items可以使用'add'和'addAll'放。如 `CFlags += \"-DCUSTOM_DEFINE\"`用`CFlags.add(\"-DCUSTOM_DEFINE\")`替换。\n\n##### （4）、0.1.x -> 0.2.x\n- jniDebuggable 从buildType 移动到ndk模块中\n\t```java\n\trelease {\n\t  jniDebuggable = true\n\t}\n\t```\n\t变为\n\t```java\n\trelease {\n\t  ndk.with {\n\t    debuggable = true\n\t  }\n\t}\n\t```","slug":"Android：NDK开发（二）","published":1,"updated":"2016-05-12T02:13:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txw000dgrm30trgaqo4","content":"<p><a href=\"http://tools.android.com/tech-docs/android-ndk-preview\" target=\"_blank\" rel=\"external\">Android NDK Preview</a></p>\n<p><a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental\" target=\"_blank\" rel=\"external\">Experimental Plugin User Guide</a></p>\n<p><a href=\"http://blog.csdn.net/yanbober/article/details/51027520\" target=\"_blank\" rel=\"external\">NDK-JNI实战教程（四）再谈新工具及NDK开发调试</a></p>\n<p><a href=\"https://dailyios.com/article/Using_Android_Studio_for_NDK_development.html\" target=\"_blank\" rel=\"external\">使用AndroidStudio进行NDK开发（一）</a></p>\n<h3 id=\"一、Android-Studio环境配置\"><a href=\"#一、Android-Studio环境配置\" class=\"headerlink\" title=\"一、Android Studio环境配置\"></a>一、Android Studio环境配置</h3><h4 id=\"1、介绍\"><a href=\"#1、介绍\" class=\"headerlink\" title=\"1、介绍\"></a>1、介绍</h4><p>Android Studio的插件是基于Gradle的新组件模型机制，减少了NDK环境配置时间。同时含有编译JNI应用所需的NDK集成环境。本篇用户指导详细介绍如何使用Android Studio的新插件、标出新的插件和传统插件的区别。</p>\n<blockquote>\n<p>注意：新的插件还是预览版，对应的Gradle api不是最终的版本，也意味着不同插件需要配合对应版本的Gradle来使用，DSL也可能变动。</p>\n</blockquote>\n<h4 id=\"2、最新版本\"><a href=\"#2、最新版本\" class=\"headerlink\" title=\"2、最新版本\"></a>2、最新版本</h4><p>Check <a href=\"bintray repository\">https://bintray.com/android/android-tools/com.android.tools.build.gradle-experimental/view</a> 查看最新版本；</p>\n<h4 id=\"3、配置\"><a href=\"#3、配置\" class=\"headerlink\" title=\"3、配置\"></a>3、配置</h4><ul>\n<li>Gradle（根据下面的表格选择对应的插件版本）</li>\n<li>Android NDK r10e（如需使用NDK）</li>\n<li>SDK的Build Tools 至少需要19.0.0 ，意图在未来的版本变动最小化迁移过流程中带来的变动。一些特性需要更新的版本。</li>\n<li><p>每个不同版本的插件需要配置对应的Gradle版本</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">┌───────────┬────────────┐</div><div class=\"line\">    Plugin Version  \t    Gradle Version          \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.1</span>.0                   <span class=\"number\">2.5</span>                            \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.2</span>.0                   <span class=\"number\">2.6</span> \t                          \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.3</span>.0-alpha3            <span class=\"number\">2.8</span>                           \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.6</span>.0-alpha1            <span class=\"number\">2.8</span>                            \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.6</span>.0-alpha5            <span class=\"number\">2.10</span>                           \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.7</span>.0-alpha1            <span class=\"number\">2.10</span>                           \t</div><div class=\"line\">└───────────┴────────────┘</div></pre></td></tr></table></figure>\n<h4 id=\"4、从传统Android-Gradle-插件迁移\"><a href=\"#4、从传统Android-Gradle-插件迁移\" class=\"headerlink\" title=\"4、从传统Android Gradle 插件迁移\"></a>4、从传统Android Gradle 插件迁移</h4><p>经典的Android Studio项目类似下面的目录结构，迁移新的ndk插件需要修改标出的文件内容。传统插件和新插件的有几个重要的DSL内容变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── app/</div><div class=\"line\">│   ├── app.iml</div><div class=\"line\">│   ├── build.gradle  ◀</div><div class=\"line\">│   └── src/</div><div class=\"line\">├── build.gradle ◀</div><div class=\"line\">├── gradle/</div><div class=\"line\">│   └── wrapper/</div><div class=\"line\">│       ├── gradle-wrapper.jar</div><div class=\"line\">│       └── gradle-wrapper.properties ◀</div><div class=\"line\">├── gradle.properties</div><div class=\"line\">├── gradlew*</div><div class=\"line\">├── gradlew.bat</div><div class=\"line\">├── local.properties</div><div class=\"line\">├── MyApplication.iml</div><div class=\"line\">└── settings.gradle</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"（1）-gradle-wrapper-gradle-wrapper-properties\"><a href=\"#（1）-gradle-wrapper-gradle-wrapper-properties\" class=\"headerlink\" title=\"（1）./gradle/wrapper/gradle-wrapper.properties\"></a>（1）./gradle/wrapper/gradle-wrapper.properties</h5><ul>\n<li>新插件每个版本支持指定的gradle版本。参考<a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental?pli=1#TOC-Gradle-Requirements\" target=\"_blank\" rel=\"external\">Gradle Requirements</a> 选择Gradle。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Wed Apr 10 15:27:10 PDT 2013</div><div class=\"line\">distributionBase=GRADLE_USER_HOME</div><div class=\"line\">distributionPath=wrapper/dists</div><div class=\"line\">zipStoreBase=GRADLE_USER_HOME</div><div class=\"line\">zipStorePath=wrapper/dists</div><div class=\"line\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.10-all.zip</div></pre></td></tr></table></figure>\n<h5 id=\"（2）-build-gradle\"><a href=\"#（2）-build-gradle\" class=\"headerlink\" title=\"（2）./build.gradle\"></a>（2）./build.gradle</h5><ul>\n<li>插件路径 <code>com.android.tools.build:gradle-experimental</code> 替换 <code>com.android.tools.build:gradle</code>.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class=\"line\">buildscript &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    jcenter()</div><div class=\"line\">  &#125;</div><div class=\"line\">  dependencies &#123;</div><div class=\"line\">    classpath <span class=\"string\">\"com.android.tools.build:gradle-experimental:0.7.0-alpha4\"</span></div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class=\"line\">    <span class=\"comment\">// in the individual module build.gradle files</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"（3）-app-build-gradle\"><a href=\"#（3）-app-build-gradle\" class=\"headerlink\" title=\"（3）./app/build.gradle\"></a>（3）./app/build.gradle</h5><p>DSL有意义的变化，我们知道很多变化看起来没有必要的，而我们的目的是移除一些这些变化，来减少在未来处理迁移的处理。</p>\n<blockquote>\n<p>注意：从版本<code>0.6.0-alpha5</code>开始，DSL有部分重要的提升。例子中的代码不适应之前版本，如果你使用旧版本插件，请参考<a href=\"https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/gradle-experimental/0-4-0\" target=\"_blank\" rel=\"external\">旧版本用户指导</a></p>\n</blockquote>\n<p>DSL 变化：</p>\n<ul>\n<li>插件名称由<code>com.android.application</code>变为<code>com.android.model.application</code>，或者用<code>apply plugin: &quot;com.android.model.library&quot;</code> 创建Android aar Library。</li>\n<li>用<code>model { }</code>来包裹配置。</li>\n<li>用add方法来为集合添加元素。</li>\n</ul>\n<p>当前DSL限制 </p>\n<ul>\n<li>属性列表只能设置它们的直系类型，无法接受其他类型。例如：<ul>\n<li>你可以用String来设置File类型的属性，但List<file>只能接受文件类型</file></li>\n</ul>\n</li>\n<li>创建编译类型或产品需要调用create方法，修改已经存在的发布或编译类型可以使用名字来完成。</li>\n<li><p>修改变量和任务的DSL很受限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.application\"</span></div><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">      applicationId <span class=\"string\">\"com.example.user.myapplication\"</span></div><div class=\"line\">      minSdkVersion.apiLevel <span class=\"number\">15</span></div><div class=\"line\">      targetSdkVersion.apiLevel <span class=\"number\">22</span></div><div class=\"line\">      versionCode <span class=\"number\">1</span></div><div class=\"line\">      versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\"></div><div class=\"line\">      buildConfigFields &#123;</div><div class=\"line\">        create() &#123;</div><div class=\"line\">          type <span class=\"string\">\"int\"</span></div><div class=\"line\">          name <span class=\"string\">\"VALUE\"</span></div><div class=\"line\">          value <span class=\"string\">\"1\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">      release &#123;</div><div class=\"line\">        minifyEnabled <span class=\"keyword\">false</span></div><div class=\"line\">        proguardFiles.add(file(<span class=\"string\">\"proguard-rules.pro\"</span>))</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">      create(<span class=\"string\">\"flavor1\"</span>) &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"com.app\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// Configures source set directory.</span></div><div class=\"line\">    sources &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        java &#123;</div><div class=\"line\">          source &#123;</div><div class=\"line\">            srcDir <span class=\"string\">\"src\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">\"libs\"</span>, include: [<span class=\"string\">\"*.jar\"</span>])</span></span></div><div class=\"line\">  compile \"com.android.support:appcompat-v7:22.2.0\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"（4）签名配置\"><a href=\"#（4）签名配置\" class=\"headerlink\" title=\"（4）签名配置\"></a>（4）签名配置</h5><p>用<code>$()</code>语法指定其他的model元素。使用<code>$()</code>，需要为Gradle 2.10以下版本添加<code>&quot;-Dorg.gradle.model.dsl=true&quot;</code>Gradle命令行的参数。对指定签名配置文件很有用。</p>\n<blockquote>\n<p>注意：android.signingConfigs必须在<code>android {}</code>块之外。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.application\"</span></div><div class=\"line\"></div><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">      release &#123;</div><div class=\"line\">        signingConfig = $(<span class=\"string\">\"android.signingConfigs.myConfig\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  android.signingConfigs &#123;</div><div class=\"line\">    create(<span class=\"string\">\"myConfig\"</span>) &#123;</div><div class=\"line\">      storeFile <span class=\"string\">\"/path/to/debug.keystore\"</span></div><div class=\"line\">      storePassword <span class=\"string\">\"android\"</span></div><div class=\"line\">      keyAlias <span class=\"string\">\"androiddebugkey\"</span></div><div class=\"line\">      keyPassword <span class=\"string\">\"android\"</span></div><div class=\"line\">      storeType <span class=\"string\">\"jks\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、NDK集成环境\"><a href=\"#5、NDK集成环境\" class=\"headerlink\" title=\"5、NDK集成环境\"></a>5、NDK集成环境</h4><p>新的插件集成了NDK开发环境，支持创建Native应用。如何使用NDK集成环境：</p>\n<ul>\n<li>用Studio内部SDK Manager 下载 NDK</li>\n<li>设定local.properties中的ndk.dir 或ANDROID_NDK_HOME环境变量的值，为NDK的路径</li>\n<li>在build.gradle 中添加<code>android.ndk</code>模块<h5 id=\"（1）简单NDK配置\"><a href=\"#（1）简单NDK配置\" class=\"headerlink\" title=\"（1）简单NDK配置\"></a>（1）简单NDK配置</h5>一个简单NDK应用的build.gradle如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.android.model.application'</span></div><div class=\"line\"></div><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"native\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>注意：<code>moduleName</code>参数不能省略，决定native库的名称</p>\n</blockquote>\n<h5 id=\"（2）Ndk-Source-设置\"><a href=\"#（2）Ndk-Source-设置\" class=\"headerlink\" title=\"（2）Ndk Source 设置\"></a>（2）Ndk Source 设置</h5><p>默认情况下，会查找<code>src/main/jni</code>中的 C/C++ 文件。配置android.sources 修改源码路径<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"native\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    sources &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        jni &#123;</div><div class=\"line\">          source &#123;</div><div class=\"line\">            srcDir <span class=\"string\">\"src\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>JNI源码包含C和C++ 文件，子目录中所有文件都包含。带有.c后缀的文件为 C 文件，而C++ 文件则有以下几种后缀：.C ，.CPP，.c++ .cp ，.cpp ，.cxx。可以使用<code>exculde</code>方法排除文件，用<code>include</code>忽略文件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123; </div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jni &#123;</div><div class=\"line\">        source &#123;</div><div class=\"line\">          include <span class=\"string\">\"someFile.txt\"</span></div><div class=\"line\">          exclude <span class=\"string\">\"**/excludeThisFile.c\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;\t\t</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"（3）其他编译参数\"><a href=\"#（3）其他编译参数\" class=\"headerlink\" title=\"（3）其他编译参数\"></a>（3）其他编译参数</h5><p>可以使用<code>android.ndk{}</code>块来设置参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      <span class=\"comment\">// All Configurations that can be changed in android.ndk</span></div><div class=\"line\">      moduleName <span class=\"string\">\"native\"</span></div><div class=\"line\">      toolchain <span class=\"string\">\"clang\"</span></div><div class=\"line\">      toolchainVersion <span class=\"string\">\"3.5\"</span></div><div class=\"line\">      <span class=\"comment\">// Note that CFlags has a capital C ,which is inconsistent with </span></div><div class=\"line\">      <span class=\"comment\">// the naming convention of other properties. This is a </span></div><div class=\"line\">      <span class=\"comment\">// technical limitation that will be resolved</span></div><div class=\"line\">      CFlags.add(<span class=\"string\">\"-DCUSTOM_DEFINE\"</span>)</div><div class=\"line\">      cppFlags.add(<span class=\"string\">\"-DCUSTOM_DEFINE\"</span>)</div><div class=\"line\">      ldFlags.add(<span class=\"string\">\"-L/custom/lib/path\"</span>)</div><div class=\"line\">      ldLibs.add(<span class=\"string\">\"log\"</span>)</div><div class=\"line\">      stl <span class=\"string\">\"stlport_static\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">      release &#123;</div><div class=\"line\">        ndk &#123;</div><div class=\"line\">          debuggable <span class=\"keyword\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">      create(<span class=\"string\">\"arm\"</span>) &#123;</div><div class=\"line\">        ndk &#123;</div><div class=\"line\">          <span class=\"comment\">// You can customize the NDK configurations for each</span></div><div class=\"line\">          <span class=\"comment\">// productFlavors and buildTypes.</span></div><div class=\"line\">          abiFilters.add(<span class=\"string\">\"armeabi-v7a\"</span>)\t  </div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      create(<span class=\"string\">\"fat\"</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// If ndk.abiFilters is not configured, the application</span></div><div class=\"line\">        <span class=\"comment\">// compile and package all suppported ABI.</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// You can modify the NDK configuration for each variant.</span></div><div class=\"line\">  components.android &#123;</div><div class=\"line\">    binaries.afterEach &#123; binary -&gt;</div><div class=\"line\">      binary.mergedNdkConfig.cppFlags.add( <span class=\"string\">\"-DVARIANT=\\\"\"</span> + binary.name + <span class=\"string\">\"\\\"\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"（4）已知限制\"><a href=\"#（4）已知限制\" class=\"headerlink\" title=\"（4）已知限制\"></a>（4）已知限制</h5><ol>\n<li>不支持类似cpu_feature的NDK 单元</li>\n<li>不支持合并外部build系统 </li>\n</ol>\n<h5 id=\"（5）示例\"><a href=\"#（5）示例\" class=\"headerlink\" title=\"（5）示例\"></a>（5）示例</h5><p>访问Github的<a href=\"https://github.com/googlesamples/android-ndk\" target=\"_blank\" rel=\"external\">Ndk Samples</a></p>\n<h5 id=\"（6）多重NDK-Project\"><a href=\"#（6）多重NDK-Project\" class=\"headerlink\" title=\"（6）多重NDK Project\"></a>（6）多重NDK Project</h5><p>0.4.0 Plugin 添加了NDK依赖的基础支持，可以创建一个native 库。如果使用0.4.0 Plugin可以用Gradle编译native项目，但在Android Studio中编辑和调试功能尚未实现。</p>\n<ul>\n<li><p>独立NDK Plugin</p>\n<p>  在gradle-experimental:0.4.0中，一个新的Plugin可以只创建native library，无须创建android application 或 android     library。DSL与 application/library Plugin相近。下面的例子中<code>build.gradle</code>可以使用<code>src/main/jni</code>的C/C++源文件来生成<code>libhello.so</code>文件</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.native\"</span></div><div class=\"line\">model &#123;</div><div class=\"line\">  android&#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"hello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>已知问题</p>\n<ul>\n<li>Android Studio 未支持编辑单独plugin</li>\n<li>编译application时修改library源文件后，不会自动重链接到新的library</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（6）Ndk依赖\"><a href=\"#（6）Ndk依赖\" class=\"headerlink\" title=\"（6）Ndk依赖\"></a>（6）Ndk依赖</h5><p>指定依赖的语法遵照Gradle未来依赖系统的方式，你可以设定依赖的Android Project或指定文件。<br>比如，假设有个使用独立NDK Plugin的subproject</p>\n<figure class=\"highlight java\"><figcaption><span>lib/build.gradle</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.native\"</span></div><div class=\"line\">model &#123;</div><div class=\"line\">  android&#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"hello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    sources &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        jni &#123;</div><div class=\"line\">          exportedHeaders &#123;</div><div class=\"line\">            srcDir <span class=\"string\">\"src/main/headers\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>任何带有JNI依赖的项目需要包含exportedHeaders指定的目录。你可以为项目的依赖项目添加JNI代码</p>\n<figure class=\"highlight java\"><figcaption><span>app/build.gradle</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.application\"</span></div><div class=\"line\">model&#123;</div><div class=\"line\">  android&#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    source &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        jni &#123;</div><div class=\"line\">          dependencies &#123;</div><div class=\"line\">            project <span class=\"string\">\":lib1\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以指定target项目的buildType 和（或）productFlavor 。否则，plugin会查找相同的buildType和productFlavor作为你的application。你也可以指定linkageType，如果希望native library最为静态链接库的话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">model&#123;</div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jni &#123;</div><div class=\"line\">        dependencies &#123;</div><div class=\"line\">          project <span class=\"string\">\":lib1\"</span></div><div class=\"line\">          buildType <span class=\"string\">\"debug\"</span></div><div class=\"line\">          productFlavor <span class=\"string\">\"flavor1\"</span></div><div class=\"line\">          linkage <span class=\"string\">\"static\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>声明依赖文件，创建预编译库，添加依赖库等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    libs (PrebuiltLibraries) &#123;</div><div class=\"line\">      prebuilt &#123;</div><div class=\"line\">        headers.srcDir <span class=\"string\">\"path/to/headers\"</span></div><div class=\"line\">        binaries.withType (SharedLibraryBinary) &#123;</div><div class=\"line\">          sharedLibraryFile = file(<span class=\"string\">\"lib/$&#123;targetPlatform.getName() &#125;/prebuilt.so\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jniLibs &#123;</div><div class=\"line\">        dependencies &#123;</div><div class=\"line\">          library <span class=\"string\">\"prebuilt\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>可以添加native 依赖到”jniLibs”或”jni” source 集合中。当添加natice依赖库到”jniLibs”中，依赖会打包到<code>application/library</code>下，但不会用来编译JNI代码。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jniLibs &#123;</div><div class=\"line\">      \tdependencies &#123;</div><div class=\"line\">          library <span class=\"string\">\"prebuilt\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"6、DSL变化\"><a href=\"#6、DSL变化\" class=\"headerlink\" title=\"6、DSL变化\"></a>6、DSL变化</h4><p>Plugin还在试验阶段，DSL会随着plugin开发版本变动。本节来说明不同版本的DSL变化，来帮助迁移。</p>\n<h5 id=\"（1）、0-6-0-alpha1-gt-0-6-0-alpha5\"><a href=\"#（1）、0-6-0-alpha1-gt-0-6-0-alpha5\" class=\"headerlink\" title=\"（1）、0.6.0-alpha1 -&gt; 0.6.0-alpha5\"></a>（1）、0.6.0-alpha1 -&gt; 0.6.0-alpha5</h5><ul>\n<li>Plugin需要gradle 2.10 ，带来DSL签名方面的改善</li>\n<li><p>配置信息可以被折叠</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">  buildTypes &#123;</div><div class=\"line\">   ... </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  替换</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.buildTypes &#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件类型接受String，但String无法添加到List<file>中</file></p>\n</li>\n<li>-Dorg.gradle.model=true 现在为默认值。允许被其他model引用，但是引用的model必须为独立的block</li>\n<li>大多数参数不在需要’=’来设值</li>\n</ul>\n<h5 id=\"（2）、0-4-x-gt-0-6-0-alpha1\"><a href=\"#（2）、0-4-x-gt-0-6-0-alpha1\" class=\"headerlink\" title=\"（2）、0.4.x -&gt; 0.6.0-alpha1\"></a>（2）、0.4.x -&gt; 0.6.0-alpha1</h5><ul>\n<li><p>指定依赖指定库文件的DSL修改为遵守Gradle的native依赖DSL。<a href=\"https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/native-binaries/prebuilt/build.gradle\" target=\"_blank\" rel=\"external\">Sample</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    prebuilt(PrebuildtLibraries) &#123;</div><div class=\"line\">      binaries.withType(SharedLibraryBinary)&#123;</div><div class=\"line\">        sharedLibraryFile = file(<span class=\"string\">\"lib/$&#123;targetPlatform.getName()&#125;/prebuilt.so\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    android.sources &#123;</div><div class=\"line\">      main&#123;</div><div class=\"line\">        jniLibs &#123;</div><div class=\"line\">          dependencies &#123;</div><div class=\"line\">            library <span class=\"string\">\"prebuilt\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"（3）、0-2-x-gt-0-4-0\"><a href=\"#（3）、0-2-x-gt-0-4-0\" class=\"headerlink\" title=\"（3）、0.2.x -&gt; 0.4.0\"></a>（3）、0.2.x -&gt; 0.4.0</h5><ul>\n<li>+= 不在用于collections。列表添加Items可以使用’add’和’addAll’放。如 <code>CFlags += &quot;-DCUSTOM_DEFINE&quot;</code>用<code>CFlags.add(&quot;-DCUSTOM_DEFINE&quot;)</code>替换。</li>\n</ul>\n<h5 id=\"（4）、0-1-x-gt-0-2-x\"><a href=\"#（4）、0-1-x-gt-0-2-x\" class=\"headerlink\" title=\"（4）、0.1.x -&gt; 0.2.x\"></a>（4）、0.1.x -&gt; 0.2.x</h5><ul>\n<li><p>jniDebuggable 从buildType 移动到ndk模块中</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">release &#123;</div><div class=\"line\">  jniDebuggable = <span class=\"keyword\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  变为</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">release &#123;</div><div class=\"line\">  ndk.with &#123;</div><div class=\"line\">    debuggable = <span class=\"keyword\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://tools.android.com/tech-docs/android-ndk-preview\" target=\"_blank\" rel=\"external\">Android NDK Preview</a></p>\n<p><a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental\" target=\"_blank\" rel=\"external\">Experimental Plugin User Guide</a></p>\n<p><a href=\"http://blog.csdn.net/yanbober/article/details/51027520\" target=\"_blank\" rel=\"external\">NDK-JNI实战教程（四）再谈新工具及NDK开发调试</a></p>\n<p><a href=\"https://dailyios.com/article/Using_Android_Studio_for_NDK_development.html\" target=\"_blank\" rel=\"external\">使用AndroidStudio进行NDK开发（一）</a></p>\n<h3 id=\"一、Android-Studio环境配置\"><a href=\"#一、Android-Studio环境配置\" class=\"headerlink\" title=\"一、Android Studio环境配置\"></a>一、Android Studio环境配置</h3><h4 id=\"1、介绍\"><a href=\"#1、介绍\" class=\"headerlink\" title=\"1、介绍\"></a>1、介绍</h4><p>Android Studio的插件是基于Gradle的新组件模型机制，减少了NDK环境配置时间。同时含有编译JNI应用所需的NDK集成环境。本篇用户指导详细介绍如何使用Android Studio的新插件、标出新的插件和传统插件的区别。</p>\n<blockquote>\n<p>注意：新的插件还是预览版，对应的Gradle api不是最终的版本，也意味着不同插件需要配合对应版本的Gradle来使用，DSL也可能变动。</p>\n</blockquote>\n<h4 id=\"2、最新版本\"><a href=\"#2、最新版本\" class=\"headerlink\" title=\"2、最新版本\"></a>2、最新版本</h4><p>Check <a href=\"bintray repository\">https://bintray.com/android/android-tools/com.android.tools.build.gradle-experimental/view</a> 查看最新版本；</p>\n<h4 id=\"3、配置\"><a href=\"#3、配置\" class=\"headerlink\" title=\"3、配置\"></a>3、配置</h4><ul>\n<li>Gradle（根据下面的表格选择对应的插件版本）</li>\n<li>Android NDK r10e（如需使用NDK）</li>\n<li>SDK的Build Tools 至少需要19.0.0 ，意图在未来的版本变动最小化迁移过流程中带来的变动。一些特性需要更新的版本。</li>\n<li><p>每个不同版本的插件需要配置对应的Gradle版本</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">┌───────────┬────────────┐</div><div class=\"line\">    Plugin Version  \t    Gradle Version          \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.1</span>.0                   <span class=\"number\">2.5</span>                            \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.2</span>.0                   <span class=\"number\">2.6</span> \t                          \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.3</span>.0-alpha3            <span class=\"number\">2.8</span>                           \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.6</span>.0-alpha1            <span class=\"number\">2.8</span>                            \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.6</span>.0-alpha5            <span class=\"number\">2.10</span>                           \t</div><div class=\"line\">├───────────┼────────────┤</div><div class=\"line\">    <span class=\"number\">0.7</span>.0-alpha1            <span class=\"number\">2.10</span>                           \t</div><div class=\"line\">└───────────┴────────────┘</div></pre></td></tr></table></figure>\n<h4 id=\"4、从传统Android-Gradle-插件迁移\"><a href=\"#4、从传统Android-Gradle-插件迁移\" class=\"headerlink\" title=\"4、从传统Android Gradle 插件迁移\"></a>4、从传统Android Gradle 插件迁移</h4><p>经典的Android Studio项目类似下面的目录结构，迁移新的ndk插件需要修改标出的文件内容。传统插件和新插件的有几个重要的DSL内容变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── app/</div><div class=\"line\">│   ├── app.iml</div><div class=\"line\">│   ├── build.gradle  ◀</div><div class=\"line\">│   └── src/</div><div class=\"line\">├── build.gradle ◀</div><div class=\"line\">├── gradle/</div><div class=\"line\">│   └── wrapper/</div><div class=\"line\">│       ├── gradle-wrapper.jar</div><div class=\"line\">│       └── gradle-wrapper.properties ◀</div><div class=\"line\">├── gradle.properties</div><div class=\"line\">├── gradlew*</div><div class=\"line\">├── gradlew.bat</div><div class=\"line\">├── local.properties</div><div class=\"line\">├── MyApplication.iml</div><div class=\"line\">└── settings.gradle</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"（1）-gradle-wrapper-gradle-wrapper-properties\"><a href=\"#（1）-gradle-wrapper-gradle-wrapper-properties\" class=\"headerlink\" title=\"（1）./gradle/wrapper/gradle-wrapper.properties\"></a>（1）./gradle/wrapper/gradle-wrapper.properties</h5><ul>\n<li>新插件每个版本支持指定的gradle版本。参考<a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental?pli=1#TOC-Gradle-Requirements\" target=\"_blank\" rel=\"external\">Gradle Requirements</a> 选择Gradle。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Wed Apr 10 15:27:10 PDT 2013</div><div class=\"line\">distributionBase=GRADLE_USER_HOME</div><div class=\"line\">distributionPath=wrapper/dists</div><div class=\"line\">zipStoreBase=GRADLE_USER_HOME</div><div class=\"line\">zipStorePath=wrapper/dists</div><div class=\"line\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.10-all.zip</div></pre></td></tr></table></figure>\n<h5 id=\"（2）-build-gradle\"><a href=\"#（2）-build-gradle\" class=\"headerlink\" title=\"（2）./build.gradle\"></a>（2）./build.gradle</h5><ul>\n<li>插件路径 <code>com.android.tools.build:gradle-experimental</code> 替换 <code>com.android.tools.build:gradle</code>.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class=\"line\">buildscript &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    jcenter()</div><div class=\"line\">  &#125;</div><div class=\"line\">  dependencies &#123;</div><div class=\"line\">    classpath <span class=\"string\">\"com.android.tools.build:gradle-experimental:0.7.0-alpha4\"</span></div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class=\"line\">    <span class=\"comment\">// in the individual module build.gradle files</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"（3）-app-build-gradle\"><a href=\"#（3）-app-build-gradle\" class=\"headerlink\" title=\"（3）./app/build.gradle\"></a>（3）./app/build.gradle</h5><p>DSL有意义的变化，我们知道很多变化看起来没有必要的，而我们的目的是移除一些这些变化，来减少在未来处理迁移的处理。</p>\n<blockquote>\n<p>注意：从版本<code>0.6.0-alpha5</code>开始，DSL有部分重要的提升。例子中的代码不适应之前版本，如果你使用旧版本插件，请参考<a href=\"https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/gradle-experimental/0-4-0\" target=\"_blank\" rel=\"external\">旧版本用户指导</a></p>\n</blockquote>\n<p>DSL 变化：</p>\n<ul>\n<li>插件名称由<code>com.android.application</code>变为<code>com.android.model.application</code>，或者用<code>apply plugin: &quot;com.android.model.library&quot;</code> 创建Android aar Library。</li>\n<li>用<code>model { }</code>来包裹配置。</li>\n<li>用add方法来为集合添加元素。</li>\n</ul>\n<p>当前DSL限制 </p>\n<ul>\n<li>属性列表只能设置它们的直系类型，无法接受其他类型。例如：<ul>\n<li>你可以用String来设置File类型的属性，但List<file>只能接受文件类型</file></li>\n</ul>\n</li>\n<li>创建编译类型或产品需要调用create方法，修改已经存在的发布或编译类型可以使用名字来完成。</li>\n<li><p>修改变量和任务的DSL很受限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.application\"</span></div><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">      applicationId <span class=\"string\">\"com.example.user.myapplication\"</span></div><div class=\"line\">      minSdkVersion.apiLevel <span class=\"number\">15</span></div><div class=\"line\">      targetSdkVersion.apiLevel <span class=\"number\">22</span></div><div class=\"line\">      versionCode <span class=\"number\">1</span></div><div class=\"line\">      versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\"></div><div class=\"line\">      buildConfigFields &#123;</div><div class=\"line\">        create() &#123;</div><div class=\"line\">          type <span class=\"string\">\"int\"</span></div><div class=\"line\">          name <span class=\"string\">\"VALUE\"</span></div><div class=\"line\">          value <span class=\"string\">\"1\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">      release &#123;</div><div class=\"line\">        minifyEnabled <span class=\"keyword\">false</span></div><div class=\"line\">        proguardFiles.add(file(<span class=\"string\">\"proguard-rules.pro\"</span>))</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">      create(<span class=\"string\">\"flavor1\"</span>) &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"com.app\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// Configures source set directory.</span></div><div class=\"line\">    sources &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        java &#123;</div><div class=\"line\">          source &#123;</div><div class=\"line\">            srcDir <span class=\"string\">\"src\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">\"libs\"</span>, include: [<span class=\"string\">\"*.jar\"</span>])</span></span></div><div class=\"line\">  compile \"com.android.support:appcompat-v7:22.2.0\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"（4）签名配置\"><a href=\"#（4）签名配置\" class=\"headerlink\" title=\"（4）签名配置\"></a>（4）签名配置</h5><p>用<code>$()</code>语法指定其他的model元素。使用<code>$()</code>，需要为Gradle 2.10以下版本添加<code>&quot;-Dorg.gradle.model.dsl=true&quot;</code>Gradle命令行的参数。对指定签名配置文件很有用。</p>\n<blockquote>\n<p>注意：android.signingConfigs必须在<code>android {}</code>块之外。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.application\"</span></div><div class=\"line\"></div><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">      release &#123;</div><div class=\"line\">        signingConfig = $(<span class=\"string\">\"android.signingConfigs.myConfig\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  android.signingConfigs &#123;</div><div class=\"line\">    create(<span class=\"string\">\"myConfig\"</span>) &#123;</div><div class=\"line\">      storeFile <span class=\"string\">\"/path/to/debug.keystore\"</span></div><div class=\"line\">      storePassword <span class=\"string\">\"android\"</span></div><div class=\"line\">      keyAlias <span class=\"string\">\"androiddebugkey\"</span></div><div class=\"line\">      keyPassword <span class=\"string\">\"android\"</span></div><div class=\"line\">      storeType <span class=\"string\">\"jks\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、NDK集成环境\"><a href=\"#5、NDK集成环境\" class=\"headerlink\" title=\"5、NDK集成环境\"></a>5、NDK集成环境</h4><p>新的插件集成了NDK开发环境，支持创建Native应用。如何使用NDK集成环境：</p>\n<ul>\n<li>用Studio内部SDK Manager 下载 NDK</li>\n<li>设定local.properties中的ndk.dir 或ANDROID_NDK_HOME环境变量的值，为NDK的路径</li>\n<li>在build.gradle 中添加<code>android.ndk</code>模块<h5 id=\"（1）简单NDK配置\"><a href=\"#（1）简单NDK配置\" class=\"headerlink\" title=\"（1）简单NDK配置\"></a>（1）简单NDK配置</h5>一个简单NDK应用的build.gradle如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.android.model.application'</span></div><div class=\"line\"></div><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"native\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>注意：<code>moduleName</code>参数不能省略，决定native库的名称</p>\n</blockquote>\n<h5 id=\"（2）Ndk-Source-设置\"><a href=\"#（2）Ndk-Source-设置\" class=\"headerlink\" title=\"（2）Ndk Source 设置\"></a>（2）Ndk Source 设置</h5><p>默认情况下，会查找<code>src/main/jni</code>中的 C/C++ 文件。配置android.sources 修改源码路径<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"native\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    sources &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        jni &#123;</div><div class=\"line\">          source &#123;</div><div class=\"line\">            srcDir <span class=\"string\">\"src\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>JNI源码包含C和C++ 文件，子目录中所有文件都包含。带有.c后缀的文件为 C 文件，而C++ 文件则有以下几种后缀：.C ，.CPP，.c++ .cp ，.cpp ，.cxx。可以使用<code>exculde</code>方法排除文件，用<code>include</code>忽略文件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123; </div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jni &#123;</div><div class=\"line\">        source &#123;</div><div class=\"line\">          include <span class=\"string\">\"someFile.txt\"</span></div><div class=\"line\">          exclude <span class=\"string\">\"**/excludeThisFile.c\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;\t\t</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"（3）其他编译参数\"><a href=\"#（3）其他编译参数\" class=\"headerlink\" title=\"（3）其他编译参数\"></a>（3）其他编译参数</h5><p>可以使用<code>android.ndk{}</code>块来设置参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      <span class=\"comment\">// All Configurations that can be changed in android.ndk</span></div><div class=\"line\">      moduleName <span class=\"string\">\"native\"</span></div><div class=\"line\">      toolchain <span class=\"string\">\"clang\"</span></div><div class=\"line\">      toolchainVersion <span class=\"string\">\"3.5\"</span></div><div class=\"line\">      <span class=\"comment\">// Note that CFlags has a capital C ,which is inconsistent with </span></div><div class=\"line\">      <span class=\"comment\">// the naming convention of other properties. This is a </span></div><div class=\"line\">      <span class=\"comment\">// technical limitation that will be resolved</span></div><div class=\"line\">      CFlags.add(<span class=\"string\">\"-DCUSTOM_DEFINE\"</span>)</div><div class=\"line\">      cppFlags.add(<span class=\"string\">\"-DCUSTOM_DEFINE\"</span>)</div><div class=\"line\">      ldFlags.add(<span class=\"string\">\"-L/custom/lib/path\"</span>)</div><div class=\"line\">      ldLibs.add(<span class=\"string\">\"log\"</span>)</div><div class=\"line\">      stl <span class=\"string\">\"stlport_static\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">      release &#123;</div><div class=\"line\">        ndk &#123;</div><div class=\"line\">          debuggable <span class=\"keyword\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">      create(<span class=\"string\">\"arm\"</span>) &#123;</div><div class=\"line\">        ndk &#123;</div><div class=\"line\">          <span class=\"comment\">// You can customize the NDK configurations for each</span></div><div class=\"line\">          <span class=\"comment\">// productFlavors and buildTypes.</span></div><div class=\"line\">          abiFilters.add(<span class=\"string\">\"armeabi-v7a\"</span>)\t  </div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      create(<span class=\"string\">\"fat\"</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// If ndk.abiFilters is not configured, the application</span></div><div class=\"line\">        <span class=\"comment\">// compile and package all suppported ABI.</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// You can modify the NDK configuration for each variant.</span></div><div class=\"line\">  components.android &#123;</div><div class=\"line\">    binaries.afterEach &#123; binary -&gt;</div><div class=\"line\">      binary.mergedNdkConfig.cppFlags.add( <span class=\"string\">\"-DVARIANT=\\\"\"</span> + binary.name + <span class=\"string\">\"\\\"\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"（4）已知限制\"><a href=\"#（4）已知限制\" class=\"headerlink\" title=\"（4）已知限制\"></a>（4）已知限制</h5><ol>\n<li>不支持类似cpu_feature的NDK 单元</li>\n<li>不支持合并外部build系统 </li>\n</ol>\n<h5 id=\"（5）示例\"><a href=\"#（5）示例\" class=\"headerlink\" title=\"（5）示例\"></a>（5）示例</h5><p>访问Github的<a href=\"https://github.com/googlesamples/android-ndk\" target=\"_blank\" rel=\"external\">Ndk Samples</a></p>\n<h5 id=\"（6）多重NDK-Project\"><a href=\"#（6）多重NDK-Project\" class=\"headerlink\" title=\"（6）多重NDK Project\"></a>（6）多重NDK Project</h5><p>0.4.0 Plugin 添加了NDK依赖的基础支持，可以创建一个native 库。如果使用0.4.0 Plugin可以用Gradle编译native项目，但在Android Studio中编辑和调试功能尚未实现。</p>\n<ul>\n<li><p>独立NDK Plugin</p>\n<p>  在gradle-experimental:0.4.0中，一个新的Plugin可以只创建native library，无须创建android application 或 android     library。DSL与 application/library Plugin相近。下面的例子中<code>build.gradle</code>可以使用<code>src/main/jni</code>的C/C++源文件来生成<code>libhello.so</code>文件</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.native\"</span></div><div class=\"line\">model &#123;</div><div class=\"line\">  android&#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"hello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>已知问题</p>\n<ul>\n<li>Android Studio 未支持编辑单独plugin</li>\n<li>编译application时修改library源文件后，不会自动重链接到新的library</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（6）Ndk依赖\"><a href=\"#（6）Ndk依赖\" class=\"headerlink\" title=\"（6）Ndk依赖\"></a>（6）Ndk依赖</h5><p>指定依赖的语法遵照Gradle未来依赖系统的方式，你可以设定依赖的Android Project或指定文件。<br>比如，假设有个使用独立NDK Plugin的subproject</p>\n<figure class=\"highlight java\"><figcaption><span>lib/build.gradle</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.native\"</span></div><div class=\"line\">model &#123;</div><div class=\"line\">  android&#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    ndk &#123;</div><div class=\"line\">      moduleName <span class=\"string\">\"hello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    sources &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        jni &#123;</div><div class=\"line\">          exportedHeaders &#123;</div><div class=\"line\">            srcDir <span class=\"string\">\"src/main/headers\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>任何带有JNI依赖的项目需要包含exportedHeaders指定的目录。你可以为项目的依赖项目添加JNI代码</p>\n<figure class=\"highlight java\"><figcaption><span>app/build.gradle</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">\"com.android.model.application\"</span></div><div class=\"line\">model&#123;</div><div class=\"line\">  android&#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">23</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></div><div class=\"line\">    source &#123;</div><div class=\"line\">      main &#123;</div><div class=\"line\">        jni &#123;</div><div class=\"line\">          dependencies &#123;</div><div class=\"line\">            project <span class=\"string\">\":lib1\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以指定target项目的buildType 和（或）productFlavor 。否则，plugin会查找相同的buildType和productFlavor作为你的application。你也可以指定linkageType，如果希望native library最为静态链接库的话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">model&#123;</div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jni &#123;</div><div class=\"line\">        dependencies &#123;</div><div class=\"line\">          project <span class=\"string\">\":lib1\"</span></div><div class=\"line\">          buildType <span class=\"string\">\"debug\"</span></div><div class=\"line\">          productFlavor <span class=\"string\">\"flavor1\"</span></div><div class=\"line\">          linkage <span class=\"string\">\"static\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>声明依赖文件，创建预编译库，添加依赖库等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    libs (PrebuiltLibraries) &#123;</div><div class=\"line\">      prebuilt &#123;</div><div class=\"line\">        headers.srcDir <span class=\"string\">\"path/to/headers\"</span></div><div class=\"line\">        binaries.withType (SharedLibraryBinary) &#123;</div><div class=\"line\">          sharedLibraryFile = file(<span class=\"string\">\"lib/$&#123;targetPlatform.getName() &#125;/prebuilt.so\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jniLibs &#123;</div><div class=\"line\">        dependencies &#123;</div><div class=\"line\">          library <span class=\"string\">\"prebuilt\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>可以添加native 依赖到”jniLibs”或”jni” source 集合中。当添加natice依赖库到”jniLibs”中，依赖会打包到<code>application/library</code>下，但不会用来编译JNI代码。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  android.sources &#123;</div><div class=\"line\">    main &#123;</div><div class=\"line\">      jniLibs &#123;</div><div class=\"line\">      \tdependencies &#123;</div><div class=\"line\">          library <span class=\"string\">\"prebuilt\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"6、DSL变化\"><a href=\"#6、DSL变化\" class=\"headerlink\" title=\"6、DSL变化\"></a>6、DSL变化</h4><p>Plugin还在试验阶段，DSL会随着plugin开发版本变动。本节来说明不同版本的DSL变化，来帮助迁移。</p>\n<h5 id=\"（1）、0-6-0-alpha1-gt-0-6-0-alpha5\"><a href=\"#（1）、0-6-0-alpha1-gt-0-6-0-alpha5\" class=\"headerlink\" title=\"（1）、0.6.0-alpha1 -&gt; 0.6.0-alpha5\"></a>（1）、0.6.0-alpha1 -&gt; 0.6.0-alpha5</h5><ul>\n<li>Plugin需要gradle 2.10 ，带来DSL签名方面的改善</li>\n<li><p>配置信息可以被折叠</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">  buildTypes &#123;</div><div class=\"line\">   ... </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  替换</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.buildTypes &#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件类型接受String，但String无法添加到List<file>中</file></p>\n</li>\n<li>-Dorg.gradle.model=true 现在为默认值。允许被其他model引用，但是引用的model必须为独立的block</li>\n<li>大多数参数不在需要’=’来设值</li>\n</ul>\n<h5 id=\"（2）、0-4-x-gt-0-6-0-alpha1\"><a href=\"#（2）、0-4-x-gt-0-6-0-alpha1\" class=\"headerlink\" title=\"（2）、0.4.x -&gt; 0.6.0-alpha1\"></a>（2）、0.4.x -&gt; 0.6.0-alpha1</h5><ul>\n<li><p>指定依赖指定库文件的DSL修改为遵守Gradle的native依赖DSL。<a href=\"https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/native-binaries/prebuilt/build.gradle\" target=\"_blank\" rel=\"external\">Sample</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">model &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    prebuilt(PrebuildtLibraries) &#123;</div><div class=\"line\">      binaries.withType(SharedLibraryBinary)&#123;</div><div class=\"line\">        sharedLibraryFile = file(<span class=\"string\">\"lib/$&#123;targetPlatform.getName()&#125;/prebuilt.so\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    android.sources &#123;</div><div class=\"line\">      main&#123;</div><div class=\"line\">        jniLibs &#123;</div><div class=\"line\">          dependencies &#123;</div><div class=\"line\">            library <span class=\"string\">\"prebuilt\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"（3）、0-2-x-gt-0-4-0\"><a href=\"#（3）、0-2-x-gt-0-4-0\" class=\"headerlink\" title=\"（3）、0.2.x -&gt; 0.4.0\"></a>（3）、0.2.x -&gt; 0.4.0</h5><ul>\n<li>+= 不在用于collections。列表添加Items可以使用’add’和’addAll’放。如 <code>CFlags += &quot;-DCUSTOM_DEFINE&quot;</code>用<code>CFlags.add(&quot;-DCUSTOM_DEFINE&quot;)</code>替换。</li>\n</ul>\n<h5 id=\"（4）、0-1-x-gt-0-2-x\"><a href=\"#（4）、0-1-x-gt-0-2-x\" class=\"headerlink\" title=\"（4）、0.1.x -&gt; 0.2.x\"></a>（4）、0.1.x -&gt; 0.2.x</h5><ul>\n<li><p>jniDebuggable 从buildType 移动到ndk模块中</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">release &#123;</div><div class=\"line\">  jniDebuggable = <span class=\"keyword\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  变为</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">release &#123;</div><div class=\"line\">  ndk.with &#123;</div><div class=\"line\">    debuggable = <span class=\"keyword\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Android：RecyclerView","date":"2016-02-05T22:47:38.000Z","_content":"[RecyclerView basics](http://enoent.fr/blog/2015/01/18/recyclerview-basics/)\n### 一、RecylerView 介绍\n`RecyclerView`是Android5.0之后V7包中的新特性。与`ListView`相似，但是比`ListView`更灵活，支持Android 2.1版本以上。\n正如它的名字：当一个item隐藏的时候，隐藏的item会被再回收重用，绑定新的数据。而不是被销毁为新的item的创建新的布局。\nRecylerView分为6个主要组件\n\n1. `Adapter`：提供数据，类似`ListView`的\n2. `ItemAnimator`：item的添加、删除、修改、移动的动画效果\n3. `ItemDecoration`：添加图画或修改Item布局\n4. `LayoutManager`：指定Item如何布局（List、Grid...）\n5. `ViewHolder`：每个Item View的基础类\n6. `RecylerView`：将所有的组件绑定\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548610/android/recyclerview_uml.png\" style=\"width:80%;\">\n</div>\n\n### 二、RecyclerView展示\n#### 1.准备\nGradle添加 `RecyclerView `的supprt-v7包依赖\n```java\ncompile 'com.android.support:recyclerview-v7:21.0.3'\n```\n本篇文章也使用`CardViews`，因此建议添加对应的依赖\n```java\ncompile 'com.android.support:cardview-v7:21.0.3'\n```\n#### 2.BaseItem\n`BaseItem` 包含一个`title` 和一个`subtitle `属性。用来表示列表中每个`item`\n```java\npublic class Item{\n  private String title;\n  private String subtitle;\n  Item(String title , String subtitle){\n    this.title = title;\n    this.subtitle = subtitle;\n  }\n  public String getTitle() {\n    return title;\n  }\n\n  public String getSubtitle() {\n    return subtitle;\n  }\n}\n```\n#### 3.Item Layout\n使用`CardView`作为Item的展示Layout。`CardView`是具有装饰的`FrameLayout `。\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  android:layout_width=\"match_parent\n  android:layout_height=\"match_parent\"\n  app:contentPadding=\"8dp\"\n  app:cardUseCompatPadding=\"true\" >\n\n  <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:orientation=\"vertical\" >\n\n      <TextView\n          android:id=\"@+id/title\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:singleLine=\"true\"\n          style=\"@style/Base.TextAppearance.AppCompat.Headline\" />\n\n      <TextView\n          android:id=\"@+id/subtitle\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"0dp\"\n          android:layout_weight=\"1\"\n          style=\"@style/Base.TextAppearance.AppCompat.Subhead\" />\n\n  </LinearLayout>\n\n</android.support.v7.widget.CardView>\n```\n#### 4.adapter\n\n1. 定义`ViewHolder`类，必须继承`RecyclerView.ViewHolder`。同时需要存储绑定数据时需要使用到的View的对象。\n例子中我们需要两个TextView\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = Adapter.class.getSimpleName();\n\n  public static class ViewHolder extends RecyclerView.ViewHolder {\n    TextView title;\n    TextView subtitle;\n\n    public ViewHolder(View itemView) {\n        super(itemView);\n\n        title = (TextView) itemView.findViewById(R.id.title);\n        subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n    }\n  }\n}\n```\n2. 使用`Collection`存储对象的集合，简单起见，例子中使用`ArrayList`来存储列表数据。\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = Adapter.class.getSimpleName();\n  \n  private static final int ITEM_COUNT = 50;\n  private List<Item> items;\n\n  public Adapter() {\n    super();\n\n    // 创建item的列表\n    items = new ArrayList<>();\n    for (int i = 0; i < ITEM_COUNT; ++i) {\n        items.add(new Item(\"Item \" + i, \"This is the item number \" + i));\n    }\n  }\n  // 省略ViewHolder的定义\n}\n```\n3. 实现`RecyclerView.Adapter`的方法。\n- onCreateViewHolder(ViewGroup parent, int viewType) \n\n\t创建View，返回匹配的ViewHolder\n- onBindViewHolder(ViewHolder holder, int position) \n\t\n\t根据Item的position，给ViewHolder绑定数据\n- getItemCount()\n\n\t返回Adapter的item的数量\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // Attributes and constructor omitted\n\n  @Override\n  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item, parent, false);\n    return new ViewHolder(v);\n  }\n\n  @Override\n  public void onBindViewHolder(ViewHolder holder, int position) {\n    final Item item = items.get(position);\n\n    holder.title.setText(item.getTitle());\n    holder.subtitle.setText(item.getSubtitle());\n  }\n\n  @Override\n  public int getItemCount() {\n    return items.size();\n  }\n\n // 省略ViewHolder的定义\n}\n```\n#### 5. Bind everything together\n\n1. 在Activity的布局文件中添加`RecyclerView `\n```java\n<RelativeLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\".MainActivity\" >\n\n  <android.support.v7.widget.RecyclerView\n    android:id=\"@+id/recycler_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n\n</RelativeLayout>\n```\n2. 使用`LinearLayoutManager `，`DefaultItemAnimator `\n```java\npublic class MainActivity extends ActionBarActivity {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = MainActivity.class.getSimpleName();\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n    recyclerView.setAdapter(new Adapter());\n    recyclerView.setItemAnimator(new DefaultItemAnimator());\n    recyclerView.setLayoutManager(new LinearLayoutManager(this));\n  }\n}\n```\n\n3. 编译、运行\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-1.png\" style=\"width:35%;\">\n</div>\n\n### 三、相同RecyclerView显示不同类型的View\n假设现在要显示两种类型的Item。如一个远程音乐的列表和一些离线的专辑。可以为他们指定行为，显示指定的信息。\n1. 在Item中添加`active`属性\n```java\npublic class Item {\n  private String title;\n  private String subtitle;\n  private boolean active;\n\n  Item(String title, String subtitle, boolean active) {\n    this.title = title;\n    this.subtitle = subtitle;\n    this.active = active;\n  }\n\n  public String getTitle() {\n    return title;\n  }\n\n  public String getSubtitle() {\n    return subtitle;\n  }\n\n  public boolean isActive() {\n    return active;\n  }\n}\n```\n2. 修改创建Item的方法，随机设定Item的`active`值，根据`active`来改变subtitle状态\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n    // 忽略参数\n\n    public Adapter() {\n        super();\n\n        // 创建Item\n        Random random = new Random();\n        items = new ArrayList<>();\n        for (int i = 0; i < ITEM_COUNT; ++i) {\n            items.add(new Item(\"Item \" + i, \"This is the item number \" + i, random.nextBoolean()));\n        }\n    }\n\n    // 忽略onCreateViewHolder\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        final Item item = items.get(position);\n\n        holder.title.setText(item.getTitle());\n        holder.subtitle.setText(item.getSubtitle() + \", which is \" +\n                (item.isActive() ? \"active\" : \"inactive\"));\n    }\n\n    // …\n}\n```\n3. 学会显示不同String是个好的开始，但是我们不仅仅要满足于此。在Adapter中你可能会注意到`onCreateViewHolder(ViewGroup parent, int viewType)`中的viewType我们没有使用。这里的`viewType`可以用来实现这样的需求：修改ViewHolder的实例。我们必须告诉`Adapter`来确定Item的类型。通过复写`getItemViewType(int position)`方法实现。\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // …\n\n  private static final int TYPE_INACTIVE = 0;\n  private static final int TYPE_ACTIVE = 1;\n\n  // …\n\n  @Override\n  public int getItemViewType(int position) {\n    final Item item = items.get(position);\n\n    return item.isActive() ? TYPE_ACTIVE : TYPE_INACTIVE;\n  }\n\n  // …\n}\n```\n4. 现在根据你的需求有多种可能：为每种类型的View创建不同的`ViewHolder`或为相同的`ViewHolder` inflate 不同的Layout。简单起见，这里使用相同的`ViewHolder` inflate 不同的Layout。我们对`inactive `的Item继续使用现在的Layout，对`active`的Item创建一个新的Layout\n\n{% codeblock lang:xml  layout/item_active.xml %}\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:contentPadding=\"8dp\"\n    app:cardUseCompatPadding=\"true\" >\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\" >\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:singleLine=\"true\"\n            android:textColor=\"@color/material_deep_teal_500\"\n            style=\"@style/Base.TextAppearance.AppCompat.Headline\" />\n\n        <TextView\n            android:id=\"@+id/subtitle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:textColor=\"@color/material_blue_grey_900\"\n            style=\"@style/Base.TextAppearance.AppCompat.Subhead\" />\n\n    </LinearLayout>\n</android.support.v7.widget.CardView>\n\n{% endcodeblock %}\n\n5. 最后也是最重要：在`onCreateViewHolder`方法中根据`viewType`值Inflate不同的Layout\n\n{% codeblock lang:java %}\n\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // …\n\n  @Override\n  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    final int layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;\n\n    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, false);\n    return new ViewHolder(v);\n  }\n  // …\n}\n\n{% endcodeblock %}\n\n现在我们可以区分`active `和`inactive` Item了\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-active.png\" style=\"width:35%;\">\n</div>\n\n### 四、Layout managers\n#### 1.LinearLayoutManager\n这个也是上面我们用的Manager，复制了`ListView`的特性。`Layout managers`占用三个参数\n\n- `Context` 不能为空  \n- `int orientation ` vertical（默认值）、horizontal\n- `boolean reverseLayout` 是否反转Layout\n\n下面是`反转` `水平方向`的LinearLayoutManager\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-linear-horizontal-reversed.png\" style=\"width:35%;\">\n</div>\n\n设置反转Layout时显示最右边无需滑动\n\n#### 2.GridLayoutManager\n类似`GridView`。占用四个参数\n\n- `Context ` 非空\n- `int spanCount` 非空\n- `int orientation` vertical（默认值）、horizontal\n- `boolean reverseLayout` 是否反转Layout\n\n下面是`spanCount`为3，`vertical`方向，`非反转`的GridLayoutManager\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical.png\" style=\"width:35%;\">\n</div>\n\n`注意`：GridLayoutManager的`reverseLayout`属性只反转设定的反向。如设置orientation为`vertical`时，只垂直反转，水平方向不变。\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical-reversed.png\" style=\"width:35%;\">\n</div>\n\n#### 3.StaggeredGridLayoutManager\nStaggeredGridLayoutManager是`GridLayoutManager`的加强版。截止到`support-v7 21.0.0.3`版本的包中，StaggeredGridLayoutManager仍然还有很多[bug](https://code.google.com/p/android/issues/detail?id=93711)和[困扰的问题](https://code.google.com/p/android/issues/detail?id=93156)。和其他几种LayoutManager相比，`StaggeredGridLayoutManager`看上去像是匆忙完成的。同时需要注意的是它不需要`Context`，但是`orientation` 不能省略。同`GridLayoutManager`一样，需要指定`span`的数量。构造器中不提供`reverse` 参数，可以用代码来实现。\n下面是固定Span的Grid，我们可以让Item占用整行或整列。让我们看看如何实现。用之前例子中创建的 `active/inactive`属性的item list，让`active`属性的item占满整行。在`adapter` 绑定数据的时候，来实现。\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n    // …\n  @Override\n  public void onBindViewHolder(ViewHolder holder, int position) {\n    final Item item = items.get(position);\n\n    holder.title.setText(item.getTitle());\n    holder.subtitle.setText(item.getSubtitle() + \", which is \" + (item.isActive() ? \"active\" : \"inactive\"));\n\n    // Span the item if active\n    final ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();\n    if (lp instanceof StaggeredGridLayoutManager.LayoutParams) {\n        StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;\n        sglp.setFullSpan(item.isActive());\n        holder.itemView.setLayoutParams(sglp);\n    }\n  }\n\n  // …\n}\n```\n在代码判断如果LayoutManager是StaggeredGridLayoutManager的实例，来修改Layout参数。效果如图\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-staggered-grid.png\" style=\"width:35%;\">\n</div>\n\n### 五、Item点击响应\n与ListView 不同的是RecyclerView没有提供相关的点击响应事件的API，但是依然很容易来实现。现在我们需要监听每个Item的`click`和`long-click`事件.每个Item是由`ViewHolder`来显示的，每个`ViewHolder`是由根`View` 来初始化的。OK，用`View`来作为`click`和`long-click`事件的回调。最后只需要把`ViewHolder`和它的position对应起来即可，`RecyclerView.ViewHolder`已经提供对应的方法~~getPosition()~~ ( getPosition() 方法废弃, 根据你的情况用`getLayoutPosition()` 或 `getAdapterPosition()`来替代 )来获取当前绑定的Item的postion\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // …\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,\n        View.OnLongClickListener {\n    @SuppressWarnings(\"unused\")\n    private static final String TAG = ViewHolder.class.getSimpleName();\n\n    TextView title;\n    TextView subtitle;\n\n    public ViewHolder(View itemView) {\n      super(itemView);\n\n      title = (TextView) itemView.findViewById(R.id.title);\n      subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n\n      itemView.setOnClickListener(this);\n      itemView.setOnLongClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n      Log.d(TAG, \"Item clicked at position \" + getPosition());\n    }\n\n    @Override\n    public boolean onLongClick(View v) {\n      Log.d(TAG, \"Item long-clicked at position \" + getPosition());\n      return true;\n    }\n  }\n}\n```\n\n### 六、选择处理\n`long-click`事件一个常用的模式是触发选择模式。再一次，`RecyclerView`没有帮助我们实现，但是实现起来也很简单。\n分为三步\n- 维护一个选择状态\n- 更新选中的Item的View\n- 开启选择模式\n\n为了说明，我们添加一个选择Item的方式，然后移除选中的Item。\n#### 1.选择状态\n我们需要修改`Adapter`来维护一个选中的item list。`Adapter`需要提供一下列表参数\n\n- 选中的元素列表\n- 改变给定元素的选择状态\n\n我们加入额外的方法几个方法：\n\n- 检查指定的元素是否被选中\n- 清空选中\n- 提供选中元素的数量\n\n这里并不是随便选择这些方法，在下个部分我们需要它们。\n我们注意到这五个方法都不是特定的Item，我们可以用普通方式写这些方法并重用`Adapter`的行为。\n```java\npublic abstract class SelectableAdapter<VH extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<VH> {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = SelectableAdapter.class.getSimpleName();\n\n  private SparseBooleanArray selectedItems;\n\n  public SelectableAdapter() {\n    selectedItems = new SparseBooleanArray();\n  }\n\n  /**\n   * 指定对应位置的Item是否被选中\n   * @param Item的position\n   * @return 如果是选中返回true，否则返回false\n   */\n  public boolean isSelected(int position) {\n    return getSelectedItems().contains(position);\n  }\n\n  /**\n   * 给定postion的Item的选中状态触发器\n   * @param position item 的 postion\n   */\n  public void toggleSelection(int position) {\n    if (selectedItems.get(position, false)) {\n      selectedItems.delete(position);\n    } else {\n      selectedItems.put(position, true);\n    }\n    notifyItemChanged(position);\n  }\n\n  /**\n   * 清空所有Item的选中状态\n   */\n  public void clearSelection() {\n    List<Integer> selection = getSelectedItems();\n    selectedItems.clear();\n    for (Integer i : selection) {\n      notifyItemChanged(i);\n    }\n  }\n\n  /**\n   * 选中Item的数量\n   * @return 选中Item的数量\n   */\n  public int getSelectedItemCount() {\n    return selectedItems.size();\n  }\n\n  /**\n   * 被选中的Item的Id list\n   * @return 被选中的Item的Id list\n   */\n  public List<Integer> getSelectedItems() {\n    List<Integer> items = new ArrayList<>(selectedItems.size());\n    for (int i = 0; i < selectedItems.size(); ++i) {\n      items.add(selectedItems.keyAt(i));\n    }\n    return items;\n   }\n}\n\n```\n\n最后`Adapter`继承我们创建`SelectableAdapter`\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n  // …\n}\n```\n#### 2.更新Item的View\n通知用户选中了一个Item，我们经常看到选中的View被覆盖某个颜色。在`item.xml`和`item_active.xml`中，我们添加一个`invisible`并带有颜色的View。因为这个View应该填充整个`CardView`，我们应该改变Layout的一些属性（将CardView的padding属性移动到LinearLayout中），View的颜色应该为透明的。\n我们要用android Framework的`selectableItemBackground`为`CardView `的foreground设定属性值，来添加一个好看的触摸反馈。在Android 5.0以及以上，显示涟漪的效果，Android 5.0以下版本显示灰色。\n\n{% codeblock lang:xml item.xml（item_active.xml做对应的修改）%}\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:foreground=\"?android:attr/selectableItemBackground\"\n    app:cardUseCompatPadding=\"true\" >\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:padding=\"8dp\" >\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:singleLine=\"true\"\n            style=\"@style/Base.TextAppearance.AppCompat.Headline\" />\n\n        <TextView\n            android:id=\"@+id/subtitle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            style=\"@style/Base.TextAppearance.AppCompat.Subhead\" />\n\n    </LinearLayout>\n\n    <View\n        android:id=\"@+id/selected_overlay\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/selected_overlay\"\n        android:visibility=\"invisible\" />\n\n</android.support.v7.widget.CardView>\n\n{% endcodeblock %}\n\n下一步决定什么时候显示这个效果，很明显需要 `Adapters`的`onBindViewHolder()`方法中。在`ViewHolder`中添加overlay view的属性\n\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n  // …\n\n  @Override\n  public void onBindViewHolder(ViewHolder holder, int position) {\n    final Item item = items.get(position);\n\n    holder.title.setText(item.getTitle());\n    holder.subtitle.setText(item.getSubtitle() + \", which is \" + (item.isActive() ? \"active\" : \"inactive\"));\n\n    // Span the item if active\n    final ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();\n    if (lp instanceof StaggeredGridLayoutManager.LayoutParams) {\n      StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;\n      sglp.setFullSpan(item.isActive());\n      holder.itemView.setLayoutParams(sglp);\n    }\n\n    //  高亮选中的Item\n    holder.selectedOverlay.setVisibility(isSelected(position) ? View.VISIBLE : View.INVISIBLE);\n  }\n\n  // …\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,\n        View.OnLongClickListener {\n    @SuppressWarnings(\"unused\")\n    private static final String TAG = ViewHolder.class.getSimpleName();\n\n      TextView title;\n      TextView subtitle;\n      View selectedOverlay;\n\n      public ViewHolder(View itemView) {\n        super(itemView);\n\n        title = (TextView) itemView.findViewById(R.id.title);\n        subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n        selectedOverlay = itemView.findViewById(R.id.selected_overlay);\n\n        itemView.setOnClickListener(this);\n        itemView.setOnLongClickListener(this);\n      }\n      // …\n  }\n}\n```\n\n#### 3.开启选中模式\n最后一步可能有点复杂，但也不是很难。我们需要将`click`和`long-click`返回给`Activity`。用`ViewHolder`暴露一个`Listener`，通过`Adapter`传递它，实现需求。\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n    // …\n\n  private ViewHolder.ClickListener clickListener;\n\n  public Adapter(ViewHolder.ClickListener clickListener) {\n    super();\n\n    this.clickListener = clickListener;\n\n    // 创建Item\n    Random random = new Random();\n    items = new ArrayList<>();\n    for (int i = 0; i < ITEM_COUNT; ++i) {\n      items.add(new Item(\"Item \" + i, \"This is the item number \" + i, random.nextBoolean()));\n    }\n  }\n\n  @Override\n  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    final int layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;\n\n    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, false);\n    return new ViewHolder(v, clickListener);\n  }\n\n  // …\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,\n          View.OnLongClickListener {\n    @SuppressWarnings(\"unused\")\n    private static final String TAG = ViewHolder.class.getSimpleName();\n\n    TextView title;\n    TextView subtitle;\n    View selectedOverlay;\n\n    private ClickListener listener;\n\n    public ViewHolder(View itemView, ClickListener listener) {\n      super(itemView);\n\n      title = (TextView) itemView.findViewById(R.id.title);\n      subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n      selectedOverlay = itemView.findViewById(R.id.selected_overlay);\n\n      this.listener = listener;\n\n      itemView.setOnClickListener(this);\n      itemView.setOnLongClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n      if (listener != null) {\n        listener.onItemClicked(getPosition());\n      }\n    }\n\n    @Override\n    public boolean onLongClick(View v) {\n      if (listener != null) {\n        return listener.onItemLongClicked(getPosition());\n      }\n\n      return false;\n    }\n\n    public interface ClickListener {\n      public void onItemClicked(int position);\n      public boolean onItemLongClicked(int position);\n    }\n  }\n}\n```\n我们用`ActionMode`来区分选择模式和正常模式，当选择模式被激活时显示不同的`ActionBar`。实现`ActionMode.Callback`来激活选择模式。简单起见，`Activity`使用一个内部类来实现其接口，同时实现我们我们新创建的Click接口`Adapter.ViewHolder.ClickListener`。我们需要`Callback`来访问`Adapter `，所以把`Adapter`作为`Activity`的一个属性。\n我们的Activity看上去变得复杂了。\n```java\npublic class MainActivity extends ActionBarActivity implements Adapter.ViewHolder.ClickListener {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = MainActivity.class.getSimpleName();\n  private Adapter adapter;\n  private ActionModeCallback actionModeCallback = new ActionModeCallback();\n  private ActionMode actionMode;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    adapter = new Adapter(this);\n\n    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n    recyclerView.setAdapter(adapter);\n    recyclerView.setItemAnimator(new DefaultItemAnimator());\n    recyclerView.setLayoutManager(new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL));\n  }\n\n  @Override\n  public void onItemClicked(int position) {\n    if (actionMode != null) {\n      toggleSelection(position);\n    }\n  }\n\n  @Override\n  public boolean onItemLongClicked(int position) {\n    if (actionMode == null) {\n      actionMode = startSupportActionMode(actionModeCallback);\n    }\n    toggleSelection(position);\n    return true;\n  }\n\n  /**\n   * 触发Item的选中状态\n   *\n   * 如果选中的Item数量为0, 则关闭选中状态模式\n   * 注意：actionMode不能为空\n   *\n   * @param position 触发选中状态的Item位置\n   */\n  private void toggleSelection(int position) {\n    adapter.toggleSelection(position);\n    int count = adapter.getSelectedItemCount();\n\n    if (count == 0) {\n      actionMode.finish();\n    } else {\n      actionMode.setTitle(String.valueOf(count));\n      actionMode.invalidate();\n    }\n  }\n\n  private class ActionModeCallback implements ActionMode.Callback {\n    @SuppressWarnings(\"unused\")\n    private final String TAG = ActionModeCallback.class.getSimpleName();\n\n    @Override\n    public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n      mode.getMenuInflater().inflate (R.menu.selected_menu, menu);\n      return true;\n    }\n\n    @Override\n    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n      return false;\n    }\n\n    @Override\n    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n      switch (item.getItemId()) {\n        case R.id.menu_remove:\n          // TODO: 具体的移除Item操作\n          Log.d(TAG, \"menu_remove\");\n          mode.finish();\n          return true;\n\n        default:\n          return false;\n        }\n      }\n\n      @Override\n      public void onDestroyActionMode(ActionMode mode) {\n        adapter.clearSelection();\n        actionMode = null;\n      }\n  }\n}\n\n```\n下图显示`Item5`被选中时的截图\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-selection.png\" style=\"width:35%;\">\n</div>\n\n### 七、改变数据\n想要更新View，，`Adapter`必须来发出数据发生了变化的通知。在`ListView`上，adapter只有一个可以使用的方法`notifyDataSetChanged()`。然而这个方法还不很理想：需要刷新所有的View，因为我们不能够确切知道什么发生了变化。而`RecyclerView.Adapter`提供多种方法：\n\n- notifyItemChanged(int position)\n- notifyItemInserted(int position)\n- notifyItemRemoved(int position)\n- notifyItemMoved(int fromPosition, int toPosition)\n- notifyItemRangeChanged(int positionStart, int itemCount)\n- notifyItemRangeInserted(int positionStart, int itemCount)\n- notifyItemRangeRemoved(int positionStart, int itemCount)\n- notifyDataSetChanged()\n\n我们可以知道Item或Items的变化、添加、移除、移动。\n我们在`Adapter`中向外部类提供移除Item、Item List的两个`public`方法。如果直接移除一个Item，直接从列表移除即可。但是移除item list 并没有简单。举个例子，如果现在需要移除`[5 ,  8 , 9]` 三个位置的Item，当移除5位置的Item后，我们Item的list长度就会变短，因此list数据中原来的8变成了7。结果我们移除`[5 , 8 , 9]`三个位置的数据实际对应的是[5 , 7 , 7]。再考虑到一种情况如果是移除`[8 ， 9 ， 5]`三个位置的Item呢？\n因此我们需要将提供需要移除的Item List进行逆序排序。这样我们就能简单调用`notifyItemRangeRemoved()`方法来移除item list。\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n    // …\n\n  public void removeItem(int position) {\n    items.remove(position);\n    notifyItemRemoved(position);\n  }\n\n  public void removeItems(List<Integer> positions) {\n    // list逆序排序\n    Collections.sort(positions, new Comparator<Integer>() {\n      @Override\n      public int compare(Integer lhs, Integer rhs) {\n        return rhs - lhs;\n      }\n    });\n\n    // 拆分排列后的list\n    while (!positions.isEmpty()) {\n      if (positions.size() == 1) {\n        removeItem(positions.get(0));\n        positions.remove(0);\n      } else {\n        int count = 1;\n        while (positions.size() > count && positions.get(count).equals(positions.get(count - 1) - 1)) {\n          ++count;\n        }\n\n        if (count == 1) {\n          removeItem(positions.get(0));\n        } else {\n          removeRange(positions.get(count - 1), count);\n        }\n\n        for (int i = 0; i < count; ++i) {\n          positions.remove(0);\n        }\n      }\n    }\n  }\n\n  private void removeRange(int positionStart, int itemCount) {\n    for (int i = 0; i < itemCount; ++i) {\n      items.remove(positionStart);\n    }\n    notifyItemRangeRemoved(positionStart, itemCount);\n  }\n\n  // …\n}\n```\n最后在`Activity`中调用这两个方法，在`menu`菜单中创建`Remove`的操作。我们只需要在`Remove`菜单中调用`removeItems()`方法就可以了。我们可以在`click`中调用`removeItem()`方法来测试移除单个Item。\n\n```java\npublic class MainActivity extends ActionBarActivity implements Adapter.ViewHolder.ClickListener {\n  // …\n\n  @Override\n  public void onItemClicked(int position) {\n    if (actionMode != null) {\n      toggleSelection(position);\n    } else {\n      adapter.removeItem(position);\n    }\n  }\n\n  // …\n\n  private class ActionModeCallback implements ActionMode.Callback {\n    // …\n\n    @Override\n    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n      switch (item.getItemId()) {\n        case R.id.menu_remove:\n          adapter.removeItems(adapter.getSelectedItems());\n          mode.finish();\n          return true;\n\n        default:\n          return false;\n      }\n    }\n    // …\n  }\n}\n```\n这样我们就实现了移除Item功能了。与传统`notifyDataSetChanged()`的方法相比，我们还有额外的动画效果\n\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548665/android/recyclerview-remove.gif\" style=\"width:35%;\">\n</div>\n\n### 八、总结\n`RecyclerView`使用相对`ListView`和`GridView`有一点复杂，但是提供了 viewholders、数据源、list等之间拆分的简单实现，动画效果提升了用户体验。\n关于性能，对比`ListView`，两个都相似的实现了`ViewHolder`模式。然而用`RecyclerView`，你不得不选择`ViewHolder`模式。对于用户来说比没有使用`ViewHolder`有更好的体验，对于开发者来说，可以写出更好的代码。\n同时，`RecyclerView`仍然有一些明显的不足（如：StaggeredGridLayoutManager），除此以外可以完美在项目中使用。\n\n示例代码：[GitHub](https://github.com/Kernald/recyclerview-sample)","source":"_posts/Android：RecyclerView.md","raw":"---\ntitle: Android：RecyclerView\ndate: 2016-02-06 06:47:38\ntags:\n---\n[RecyclerView basics](http://enoent.fr/blog/2015/01/18/recyclerview-basics/)\n### 一、RecylerView 介绍\n`RecyclerView`是Android5.0之后V7包中的新特性。与`ListView`相似，但是比`ListView`更灵活，支持Android 2.1版本以上。\n正如它的名字：当一个item隐藏的时候，隐藏的item会被再回收重用，绑定新的数据。而不是被销毁为新的item的创建新的布局。\nRecylerView分为6个主要组件\n\n1. `Adapter`：提供数据，类似`ListView`的\n2. `ItemAnimator`：item的添加、删除、修改、移动的动画效果\n3. `ItemDecoration`：添加图画或修改Item布局\n4. `LayoutManager`：指定Item如何布局（List、Grid...）\n5. `ViewHolder`：每个Item View的基础类\n6. `RecylerView`：将所有的组件绑定\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548610/android/recyclerview_uml.png\" style=\"width:80%;\">\n</div>\n\n### 二、RecyclerView展示\n#### 1.准备\nGradle添加 `RecyclerView `的supprt-v7包依赖\n```java\ncompile 'com.android.support:recyclerview-v7:21.0.3'\n```\n本篇文章也使用`CardViews`，因此建议添加对应的依赖\n```java\ncompile 'com.android.support:cardview-v7:21.0.3'\n```\n#### 2.BaseItem\n`BaseItem` 包含一个`title` 和一个`subtitle `属性。用来表示列表中每个`item`\n```java\npublic class Item{\n  private String title;\n  private String subtitle;\n  Item(String title , String subtitle){\n    this.title = title;\n    this.subtitle = subtitle;\n  }\n  public String getTitle() {\n    return title;\n  }\n\n  public String getSubtitle() {\n    return subtitle;\n  }\n}\n```\n#### 3.Item Layout\n使用`CardView`作为Item的展示Layout。`CardView`是具有装饰的`FrameLayout `。\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  android:layout_width=\"match_parent\n  android:layout_height=\"match_parent\"\n  app:contentPadding=\"8dp\"\n  app:cardUseCompatPadding=\"true\" >\n\n  <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:orientation=\"vertical\" >\n\n      <TextView\n          android:id=\"@+id/title\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:singleLine=\"true\"\n          style=\"@style/Base.TextAppearance.AppCompat.Headline\" />\n\n      <TextView\n          android:id=\"@+id/subtitle\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"0dp\"\n          android:layout_weight=\"1\"\n          style=\"@style/Base.TextAppearance.AppCompat.Subhead\" />\n\n  </LinearLayout>\n\n</android.support.v7.widget.CardView>\n```\n#### 4.adapter\n\n1. 定义`ViewHolder`类，必须继承`RecyclerView.ViewHolder`。同时需要存储绑定数据时需要使用到的View的对象。\n例子中我们需要两个TextView\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = Adapter.class.getSimpleName();\n\n  public static class ViewHolder extends RecyclerView.ViewHolder {\n    TextView title;\n    TextView subtitle;\n\n    public ViewHolder(View itemView) {\n        super(itemView);\n\n        title = (TextView) itemView.findViewById(R.id.title);\n        subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n    }\n  }\n}\n```\n2. 使用`Collection`存储对象的集合，简单起见，例子中使用`ArrayList`来存储列表数据。\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = Adapter.class.getSimpleName();\n  \n  private static final int ITEM_COUNT = 50;\n  private List<Item> items;\n\n  public Adapter() {\n    super();\n\n    // 创建item的列表\n    items = new ArrayList<>();\n    for (int i = 0; i < ITEM_COUNT; ++i) {\n        items.add(new Item(\"Item \" + i, \"This is the item number \" + i));\n    }\n  }\n  // 省略ViewHolder的定义\n}\n```\n3. 实现`RecyclerView.Adapter`的方法。\n- onCreateViewHolder(ViewGroup parent, int viewType) \n\n\t创建View，返回匹配的ViewHolder\n- onBindViewHolder(ViewHolder holder, int position) \n\t\n\t根据Item的position，给ViewHolder绑定数据\n- getItemCount()\n\n\t返回Adapter的item的数量\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // Attributes and constructor omitted\n\n  @Override\n  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item, parent, false);\n    return new ViewHolder(v);\n  }\n\n  @Override\n  public void onBindViewHolder(ViewHolder holder, int position) {\n    final Item item = items.get(position);\n\n    holder.title.setText(item.getTitle());\n    holder.subtitle.setText(item.getSubtitle());\n  }\n\n  @Override\n  public int getItemCount() {\n    return items.size();\n  }\n\n // 省略ViewHolder的定义\n}\n```\n#### 5. Bind everything together\n\n1. 在Activity的布局文件中添加`RecyclerView `\n```java\n<RelativeLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\".MainActivity\" >\n\n  <android.support.v7.widget.RecyclerView\n    android:id=\"@+id/recycler_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n\n</RelativeLayout>\n```\n2. 使用`LinearLayoutManager `，`DefaultItemAnimator `\n```java\npublic class MainActivity extends ActionBarActivity {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = MainActivity.class.getSimpleName();\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n    recyclerView.setAdapter(new Adapter());\n    recyclerView.setItemAnimator(new DefaultItemAnimator());\n    recyclerView.setLayoutManager(new LinearLayoutManager(this));\n  }\n}\n```\n\n3. 编译、运行\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-1.png\" style=\"width:35%;\">\n</div>\n\n### 三、相同RecyclerView显示不同类型的View\n假设现在要显示两种类型的Item。如一个远程音乐的列表和一些离线的专辑。可以为他们指定行为，显示指定的信息。\n1. 在Item中添加`active`属性\n```java\npublic class Item {\n  private String title;\n  private String subtitle;\n  private boolean active;\n\n  Item(String title, String subtitle, boolean active) {\n    this.title = title;\n    this.subtitle = subtitle;\n    this.active = active;\n  }\n\n  public String getTitle() {\n    return title;\n  }\n\n  public String getSubtitle() {\n    return subtitle;\n  }\n\n  public boolean isActive() {\n    return active;\n  }\n}\n```\n2. 修改创建Item的方法，随机设定Item的`active`值，根据`active`来改变subtitle状态\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n    // 忽略参数\n\n    public Adapter() {\n        super();\n\n        // 创建Item\n        Random random = new Random();\n        items = new ArrayList<>();\n        for (int i = 0; i < ITEM_COUNT; ++i) {\n            items.add(new Item(\"Item \" + i, \"This is the item number \" + i, random.nextBoolean()));\n        }\n    }\n\n    // 忽略onCreateViewHolder\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        final Item item = items.get(position);\n\n        holder.title.setText(item.getTitle());\n        holder.subtitle.setText(item.getSubtitle() + \", which is \" +\n                (item.isActive() ? \"active\" : \"inactive\"));\n    }\n\n    // …\n}\n```\n3. 学会显示不同String是个好的开始，但是我们不仅仅要满足于此。在Adapter中你可能会注意到`onCreateViewHolder(ViewGroup parent, int viewType)`中的viewType我们没有使用。这里的`viewType`可以用来实现这样的需求：修改ViewHolder的实例。我们必须告诉`Adapter`来确定Item的类型。通过复写`getItemViewType(int position)`方法实现。\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // …\n\n  private static final int TYPE_INACTIVE = 0;\n  private static final int TYPE_ACTIVE = 1;\n\n  // …\n\n  @Override\n  public int getItemViewType(int position) {\n    final Item item = items.get(position);\n\n    return item.isActive() ? TYPE_ACTIVE : TYPE_INACTIVE;\n  }\n\n  // …\n}\n```\n4. 现在根据你的需求有多种可能：为每种类型的View创建不同的`ViewHolder`或为相同的`ViewHolder` inflate 不同的Layout。简单起见，这里使用相同的`ViewHolder` inflate 不同的Layout。我们对`inactive `的Item继续使用现在的Layout，对`active`的Item创建一个新的Layout\n\n{% codeblock lang:xml  layout/item_active.xml %}\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:contentPadding=\"8dp\"\n    app:cardUseCompatPadding=\"true\" >\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\" >\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:singleLine=\"true\"\n            android:textColor=\"@color/material_deep_teal_500\"\n            style=\"@style/Base.TextAppearance.AppCompat.Headline\" />\n\n        <TextView\n            android:id=\"@+id/subtitle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:textColor=\"@color/material_blue_grey_900\"\n            style=\"@style/Base.TextAppearance.AppCompat.Subhead\" />\n\n    </LinearLayout>\n</android.support.v7.widget.CardView>\n\n{% endcodeblock %}\n\n5. 最后也是最重要：在`onCreateViewHolder`方法中根据`viewType`值Inflate不同的Layout\n\n{% codeblock lang:java %}\n\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // …\n\n  @Override\n  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    final int layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;\n\n    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, false);\n    return new ViewHolder(v);\n  }\n  // …\n}\n\n{% endcodeblock %}\n\n现在我们可以区分`active `和`inactive` Item了\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-active.png\" style=\"width:35%;\">\n</div>\n\n### 四、Layout managers\n#### 1.LinearLayoutManager\n这个也是上面我们用的Manager，复制了`ListView`的特性。`Layout managers`占用三个参数\n\n- `Context` 不能为空  \n- `int orientation ` vertical（默认值）、horizontal\n- `boolean reverseLayout` 是否反转Layout\n\n下面是`反转` `水平方向`的LinearLayoutManager\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-linear-horizontal-reversed.png\" style=\"width:35%;\">\n</div>\n\n设置反转Layout时显示最右边无需滑动\n\n#### 2.GridLayoutManager\n类似`GridView`。占用四个参数\n\n- `Context ` 非空\n- `int spanCount` 非空\n- `int orientation` vertical（默认值）、horizontal\n- `boolean reverseLayout` 是否反转Layout\n\n下面是`spanCount`为3，`vertical`方向，`非反转`的GridLayoutManager\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical.png\" style=\"width:35%;\">\n</div>\n\n`注意`：GridLayoutManager的`reverseLayout`属性只反转设定的反向。如设置orientation为`vertical`时，只垂直反转，水平方向不变。\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical-reversed.png\" style=\"width:35%;\">\n</div>\n\n#### 3.StaggeredGridLayoutManager\nStaggeredGridLayoutManager是`GridLayoutManager`的加强版。截止到`support-v7 21.0.0.3`版本的包中，StaggeredGridLayoutManager仍然还有很多[bug](https://code.google.com/p/android/issues/detail?id=93711)和[困扰的问题](https://code.google.com/p/android/issues/detail?id=93156)。和其他几种LayoutManager相比，`StaggeredGridLayoutManager`看上去像是匆忙完成的。同时需要注意的是它不需要`Context`，但是`orientation` 不能省略。同`GridLayoutManager`一样，需要指定`span`的数量。构造器中不提供`reverse` 参数，可以用代码来实现。\n下面是固定Span的Grid，我们可以让Item占用整行或整列。让我们看看如何实现。用之前例子中创建的 `active/inactive`属性的item list，让`active`属性的item占满整行。在`adapter` 绑定数据的时候，来实现。\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n    // …\n  @Override\n  public void onBindViewHolder(ViewHolder holder, int position) {\n    final Item item = items.get(position);\n\n    holder.title.setText(item.getTitle());\n    holder.subtitle.setText(item.getSubtitle() + \", which is \" + (item.isActive() ? \"active\" : \"inactive\"));\n\n    // Span the item if active\n    final ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();\n    if (lp instanceof StaggeredGridLayoutManager.LayoutParams) {\n        StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;\n        sglp.setFullSpan(item.isActive());\n        holder.itemView.setLayoutParams(sglp);\n    }\n  }\n\n  // …\n}\n```\n在代码判断如果LayoutManager是StaggeredGridLayoutManager的实例，来修改Layout参数。效果如图\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-staggered-grid.png\" style=\"width:35%;\">\n</div>\n\n### 五、Item点击响应\n与ListView 不同的是RecyclerView没有提供相关的点击响应事件的API，但是依然很容易来实现。现在我们需要监听每个Item的`click`和`long-click`事件.每个Item是由`ViewHolder`来显示的，每个`ViewHolder`是由根`View` 来初始化的。OK，用`View`来作为`click`和`long-click`事件的回调。最后只需要把`ViewHolder`和它的position对应起来即可，`RecyclerView.ViewHolder`已经提供对应的方法~~getPosition()~~ ( getPosition() 方法废弃, 根据你的情况用`getLayoutPosition()` 或 `getAdapterPosition()`来替代 )来获取当前绑定的Item的postion\n```java\npublic class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {\n  // …\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,\n        View.OnLongClickListener {\n    @SuppressWarnings(\"unused\")\n    private static final String TAG = ViewHolder.class.getSimpleName();\n\n    TextView title;\n    TextView subtitle;\n\n    public ViewHolder(View itemView) {\n      super(itemView);\n\n      title = (TextView) itemView.findViewById(R.id.title);\n      subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n\n      itemView.setOnClickListener(this);\n      itemView.setOnLongClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n      Log.d(TAG, \"Item clicked at position \" + getPosition());\n    }\n\n    @Override\n    public boolean onLongClick(View v) {\n      Log.d(TAG, \"Item long-clicked at position \" + getPosition());\n      return true;\n    }\n  }\n}\n```\n\n### 六、选择处理\n`long-click`事件一个常用的模式是触发选择模式。再一次，`RecyclerView`没有帮助我们实现，但是实现起来也很简单。\n分为三步\n- 维护一个选择状态\n- 更新选中的Item的View\n- 开启选择模式\n\n为了说明，我们添加一个选择Item的方式，然后移除选中的Item。\n#### 1.选择状态\n我们需要修改`Adapter`来维护一个选中的item list。`Adapter`需要提供一下列表参数\n\n- 选中的元素列表\n- 改变给定元素的选择状态\n\n我们加入额外的方法几个方法：\n\n- 检查指定的元素是否被选中\n- 清空选中\n- 提供选中元素的数量\n\n这里并不是随便选择这些方法，在下个部分我们需要它们。\n我们注意到这五个方法都不是特定的Item，我们可以用普通方式写这些方法并重用`Adapter`的行为。\n```java\npublic abstract class SelectableAdapter<VH extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<VH> {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = SelectableAdapter.class.getSimpleName();\n\n  private SparseBooleanArray selectedItems;\n\n  public SelectableAdapter() {\n    selectedItems = new SparseBooleanArray();\n  }\n\n  /**\n   * 指定对应位置的Item是否被选中\n   * @param Item的position\n   * @return 如果是选中返回true，否则返回false\n   */\n  public boolean isSelected(int position) {\n    return getSelectedItems().contains(position);\n  }\n\n  /**\n   * 给定postion的Item的选中状态触发器\n   * @param position item 的 postion\n   */\n  public void toggleSelection(int position) {\n    if (selectedItems.get(position, false)) {\n      selectedItems.delete(position);\n    } else {\n      selectedItems.put(position, true);\n    }\n    notifyItemChanged(position);\n  }\n\n  /**\n   * 清空所有Item的选中状态\n   */\n  public void clearSelection() {\n    List<Integer> selection = getSelectedItems();\n    selectedItems.clear();\n    for (Integer i : selection) {\n      notifyItemChanged(i);\n    }\n  }\n\n  /**\n   * 选中Item的数量\n   * @return 选中Item的数量\n   */\n  public int getSelectedItemCount() {\n    return selectedItems.size();\n  }\n\n  /**\n   * 被选中的Item的Id list\n   * @return 被选中的Item的Id list\n   */\n  public List<Integer> getSelectedItems() {\n    List<Integer> items = new ArrayList<>(selectedItems.size());\n    for (int i = 0; i < selectedItems.size(); ++i) {\n      items.add(selectedItems.keyAt(i));\n    }\n    return items;\n   }\n}\n\n```\n\n最后`Adapter`继承我们创建`SelectableAdapter`\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n  // …\n}\n```\n#### 2.更新Item的View\n通知用户选中了一个Item，我们经常看到选中的View被覆盖某个颜色。在`item.xml`和`item_active.xml`中，我们添加一个`invisible`并带有颜色的View。因为这个View应该填充整个`CardView`，我们应该改变Layout的一些属性（将CardView的padding属性移动到LinearLayout中），View的颜色应该为透明的。\n我们要用android Framework的`selectableItemBackground`为`CardView `的foreground设定属性值，来添加一个好看的触摸反馈。在Android 5.0以及以上，显示涟漪的效果，Android 5.0以下版本显示灰色。\n\n{% codeblock lang:xml item.xml（item_active.xml做对应的修改）%}\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:foreground=\"?android:attr/selectableItemBackground\"\n    app:cardUseCompatPadding=\"true\" >\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:padding=\"8dp\" >\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:singleLine=\"true\"\n            style=\"@style/Base.TextAppearance.AppCompat.Headline\" />\n\n        <TextView\n            android:id=\"@+id/subtitle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            style=\"@style/Base.TextAppearance.AppCompat.Subhead\" />\n\n    </LinearLayout>\n\n    <View\n        android:id=\"@+id/selected_overlay\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/selected_overlay\"\n        android:visibility=\"invisible\" />\n\n</android.support.v7.widget.CardView>\n\n{% endcodeblock %}\n\n下一步决定什么时候显示这个效果，很明显需要 `Adapters`的`onBindViewHolder()`方法中。在`ViewHolder`中添加overlay view的属性\n\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n  // …\n\n  @Override\n  public void onBindViewHolder(ViewHolder holder, int position) {\n    final Item item = items.get(position);\n\n    holder.title.setText(item.getTitle());\n    holder.subtitle.setText(item.getSubtitle() + \", which is \" + (item.isActive() ? \"active\" : \"inactive\"));\n\n    // Span the item if active\n    final ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();\n    if (lp instanceof StaggeredGridLayoutManager.LayoutParams) {\n      StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;\n      sglp.setFullSpan(item.isActive());\n      holder.itemView.setLayoutParams(sglp);\n    }\n\n    //  高亮选中的Item\n    holder.selectedOverlay.setVisibility(isSelected(position) ? View.VISIBLE : View.INVISIBLE);\n  }\n\n  // …\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,\n        View.OnLongClickListener {\n    @SuppressWarnings(\"unused\")\n    private static final String TAG = ViewHolder.class.getSimpleName();\n\n      TextView title;\n      TextView subtitle;\n      View selectedOverlay;\n\n      public ViewHolder(View itemView) {\n        super(itemView);\n\n        title = (TextView) itemView.findViewById(R.id.title);\n        subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n        selectedOverlay = itemView.findViewById(R.id.selected_overlay);\n\n        itemView.setOnClickListener(this);\n        itemView.setOnLongClickListener(this);\n      }\n      // …\n  }\n}\n```\n\n#### 3.开启选中模式\n最后一步可能有点复杂，但也不是很难。我们需要将`click`和`long-click`返回给`Activity`。用`ViewHolder`暴露一个`Listener`，通过`Adapter`传递它，实现需求。\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n    // …\n\n  private ViewHolder.ClickListener clickListener;\n\n  public Adapter(ViewHolder.ClickListener clickListener) {\n    super();\n\n    this.clickListener = clickListener;\n\n    // 创建Item\n    Random random = new Random();\n    items = new ArrayList<>();\n    for (int i = 0; i < ITEM_COUNT; ++i) {\n      items.add(new Item(\"Item \" + i, \"This is the item number \" + i, random.nextBoolean()));\n    }\n  }\n\n  @Override\n  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    final int layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;\n\n    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, false);\n    return new ViewHolder(v, clickListener);\n  }\n\n  // …\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,\n          View.OnLongClickListener {\n    @SuppressWarnings(\"unused\")\n    private static final String TAG = ViewHolder.class.getSimpleName();\n\n    TextView title;\n    TextView subtitle;\n    View selectedOverlay;\n\n    private ClickListener listener;\n\n    public ViewHolder(View itemView, ClickListener listener) {\n      super(itemView);\n\n      title = (TextView) itemView.findViewById(R.id.title);\n      subtitle = (TextView) itemView.findViewById(R.id.subtitle);\n      selectedOverlay = itemView.findViewById(R.id.selected_overlay);\n\n      this.listener = listener;\n\n      itemView.setOnClickListener(this);\n      itemView.setOnLongClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n      if (listener != null) {\n        listener.onItemClicked(getPosition());\n      }\n    }\n\n    @Override\n    public boolean onLongClick(View v) {\n      if (listener != null) {\n        return listener.onItemLongClicked(getPosition());\n      }\n\n      return false;\n    }\n\n    public interface ClickListener {\n      public void onItemClicked(int position);\n      public boolean onItemLongClicked(int position);\n    }\n  }\n}\n```\n我们用`ActionMode`来区分选择模式和正常模式，当选择模式被激活时显示不同的`ActionBar`。实现`ActionMode.Callback`来激活选择模式。简单起见，`Activity`使用一个内部类来实现其接口，同时实现我们我们新创建的Click接口`Adapter.ViewHolder.ClickListener`。我们需要`Callback`来访问`Adapter `，所以把`Adapter`作为`Activity`的一个属性。\n我们的Activity看上去变得复杂了。\n```java\npublic class MainActivity extends ActionBarActivity implements Adapter.ViewHolder.ClickListener {\n  @SuppressWarnings(\"unused\")\n  private static final String TAG = MainActivity.class.getSimpleName();\n  private Adapter adapter;\n  private ActionModeCallback actionModeCallback = new ActionModeCallback();\n  private ActionMode actionMode;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    adapter = new Adapter(this);\n\n    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n    recyclerView.setAdapter(adapter);\n    recyclerView.setItemAnimator(new DefaultItemAnimator());\n    recyclerView.setLayoutManager(new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL));\n  }\n\n  @Override\n  public void onItemClicked(int position) {\n    if (actionMode != null) {\n      toggleSelection(position);\n    }\n  }\n\n  @Override\n  public boolean onItemLongClicked(int position) {\n    if (actionMode == null) {\n      actionMode = startSupportActionMode(actionModeCallback);\n    }\n    toggleSelection(position);\n    return true;\n  }\n\n  /**\n   * 触发Item的选中状态\n   *\n   * 如果选中的Item数量为0, 则关闭选中状态模式\n   * 注意：actionMode不能为空\n   *\n   * @param position 触发选中状态的Item位置\n   */\n  private void toggleSelection(int position) {\n    adapter.toggleSelection(position);\n    int count = adapter.getSelectedItemCount();\n\n    if (count == 0) {\n      actionMode.finish();\n    } else {\n      actionMode.setTitle(String.valueOf(count));\n      actionMode.invalidate();\n    }\n  }\n\n  private class ActionModeCallback implements ActionMode.Callback {\n    @SuppressWarnings(\"unused\")\n    private final String TAG = ActionModeCallback.class.getSimpleName();\n\n    @Override\n    public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n      mode.getMenuInflater().inflate (R.menu.selected_menu, menu);\n      return true;\n    }\n\n    @Override\n    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n      return false;\n    }\n\n    @Override\n    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n      switch (item.getItemId()) {\n        case R.id.menu_remove:\n          // TODO: 具体的移除Item操作\n          Log.d(TAG, \"menu_remove\");\n          mode.finish();\n          return true;\n\n        default:\n          return false;\n        }\n      }\n\n      @Override\n      public void onDestroyActionMode(ActionMode mode) {\n        adapter.clearSelection();\n        actionMode = null;\n      }\n  }\n}\n\n```\n下图显示`Item5`被选中时的截图\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-selection.png\" style=\"width:35%;\">\n</div>\n\n### 七、改变数据\n想要更新View，，`Adapter`必须来发出数据发生了变化的通知。在`ListView`上，adapter只有一个可以使用的方法`notifyDataSetChanged()`。然而这个方法还不很理想：需要刷新所有的View，因为我们不能够确切知道什么发生了变化。而`RecyclerView.Adapter`提供多种方法：\n\n- notifyItemChanged(int position)\n- notifyItemInserted(int position)\n- notifyItemRemoved(int position)\n- notifyItemMoved(int fromPosition, int toPosition)\n- notifyItemRangeChanged(int positionStart, int itemCount)\n- notifyItemRangeInserted(int positionStart, int itemCount)\n- notifyItemRangeRemoved(int positionStart, int itemCount)\n- notifyDataSetChanged()\n\n我们可以知道Item或Items的变化、添加、移除、移动。\n我们在`Adapter`中向外部类提供移除Item、Item List的两个`public`方法。如果直接移除一个Item，直接从列表移除即可。但是移除item list 并没有简单。举个例子，如果现在需要移除`[5 ,  8 , 9]` 三个位置的Item，当移除5位置的Item后，我们Item的list长度就会变短，因此list数据中原来的8变成了7。结果我们移除`[5 , 8 , 9]`三个位置的数据实际对应的是[5 , 7 , 7]。再考虑到一种情况如果是移除`[8 ， 9 ， 5]`三个位置的Item呢？\n因此我们需要将提供需要移除的Item List进行逆序排序。这样我们就能简单调用`notifyItemRangeRemoved()`方法来移除item list。\n```java\npublic class Adapter extends SelectableAdapter<Adapter.ViewHolder> {\n    // …\n\n  public void removeItem(int position) {\n    items.remove(position);\n    notifyItemRemoved(position);\n  }\n\n  public void removeItems(List<Integer> positions) {\n    // list逆序排序\n    Collections.sort(positions, new Comparator<Integer>() {\n      @Override\n      public int compare(Integer lhs, Integer rhs) {\n        return rhs - lhs;\n      }\n    });\n\n    // 拆分排列后的list\n    while (!positions.isEmpty()) {\n      if (positions.size() == 1) {\n        removeItem(positions.get(0));\n        positions.remove(0);\n      } else {\n        int count = 1;\n        while (positions.size() > count && positions.get(count).equals(positions.get(count - 1) - 1)) {\n          ++count;\n        }\n\n        if (count == 1) {\n          removeItem(positions.get(0));\n        } else {\n          removeRange(positions.get(count - 1), count);\n        }\n\n        for (int i = 0; i < count; ++i) {\n          positions.remove(0);\n        }\n      }\n    }\n  }\n\n  private void removeRange(int positionStart, int itemCount) {\n    for (int i = 0; i < itemCount; ++i) {\n      items.remove(positionStart);\n    }\n    notifyItemRangeRemoved(positionStart, itemCount);\n  }\n\n  // …\n}\n```\n最后在`Activity`中调用这两个方法，在`menu`菜单中创建`Remove`的操作。我们只需要在`Remove`菜单中调用`removeItems()`方法就可以了。我们可以在`click`中调用`removeItem()`方法来测试移除单个Item。\n\n```java\npublic class MainActivity extends ActionBarActivity implements Adapter.ViewHolder.ClickListener {\n  // …\n\n  @Override\n  public void onItemClicked(int position) {\n    if (actionMode != null) {\n      toggleSelection(position);\n    } else {\n      adapter.removeItem(position);\n    }\n  }\n\n  // …\n\n  private class ActionModeCallback implements ActionMode.Callback {\n    // …\n\n    @Override\n    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n      switch (item.getItemId()) {\n        case R.id.menu_remove:\n          adapter.removeItems(adapter.getSelectedItems());\n          mode.finish();\n          return true;\n\n        default:\n          return false;\n      }\n    }\n    // …\n  }\n}\n```\n这样我们就实现了移除Item功能了。与传统`notifyDataSetChanged()`的方法相比，我们还有额外的动画效果\n\n\n<div  style=\"text-align:center\">\n\t<img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548665/android/recyclerview-remove.gif\" style=\"width:35%;\">\n</div>\n\n### 八、总结\n`RecyclerView`使用相对`ListView`和`GridView`有一点复杂，但是提供了 viewholders、数据源、list等之间拆分的简单实现，动画效果提升了用户体验。\n关于性能，对比`ListView`，两个都相似的实现了`ViewHolder`模式。然而用`RecyclerView`，你不得不选择`ViewHolder`模式。对于用户来说比没有使用`ViewHolder`有更好的体验，对于开发者来说，可以写出更好的代码。\n同时，`RecyclerView`仍然有一些明显的不足（如：StaggeredGridLayoutManager），除此以外可以完美在项目中使用。\n\n示例代码：[GitHub](https://github.com/Kernald/recyclerview-sample)","slug":"Android：RecyclerView","published":1,"updated":"2016-02-27T05:00:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txx000fgrm3hq3x8beh","content":"<p><a href=\"http://enoent.fr/blog/2015/01/18/recyclerview-basics/\" target=\"_blank\" rel=\"external\">RecyclerView basics</a></p>\n<h3 id=\"一、RecylerView-介绍\"><a href=\"#一、RecylerView-介绍\" class=\"headerlink\" title=\"一、RecylerView 介绍\"></a>一、RecylerView 介绍</h3><p><code>RecyclerView</code>是Android5.0之后V7包中的新特性。与<code>ListView</code>相似，但是比<code>ListView</code>更灵活，支持Android 2.1版本以上。<br>正如它的名字：当一个item隐藏的时候，隐藏的item会被再回收重用，绑定新的数据。而不是被销毁为新的item的创建新的布局。<br>RecylerView分为6个主要组件</p>\n<ol>\n<li><code>Adapter</code>：提供数据，类似<code>ListView</code>的</li>\n<li><code>ItemAnimator</code>：item的添加、删除、修改、移动的动画效果</li>\n<li><code>ItemDecoration</code>：添加图画或修改Item布局</li>\n<li><code>LayoutManager</code>：指定Item如何布局（List、Grid…）</li>\n<li><code>ViewHolder</code>：每个Item View的基础类</li>\n<li><code>RecylerView</code>：将所有的组件绑定</li>\n</ol>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548610/android/recyclerview_uml.png\" style=\"width:80%;\"><br></div>\n\n<h3 id=\"二、RecyclerView展示\"><a href=\"#二、RecyclerView展示\" class=\"headerlink\" title=\"二、RecyclerView展示\"></a>二、RecyclerView展示</h3><h4 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1.准备\"></a>1.准备</h4><p>Gradle添加 <code>RecyclerView</code>的supprt-v7包依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:recyclerview-v7:21.0.3'</span></div></pre></td></tr></table></figure></p>\n<p>本篇文章也使用<code>CardViews</code>，因此建议添加对应的依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:cardview-v7:21.0.3'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-BaseItem\"><a href=\"#2-BaseItem\" class=\"headerlink\" title=\"2.BaseItem\"></a>2.BaseItem</h4><p><code>BaseItem</code> 包含一个<code>title</code> 和一个<code>subtitle</code>属性。用来表示列表中每个<code>item</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String title;</div><div class=\"line\">  <span class=\"keyword\">private</span> String subtitle;</div><div class=\"line\">  Item(String title , String subtitle)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subtitle = subtitle;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> title;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubtitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> subtitle;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-Item-Layout\"><a href=\"#3-Item-Layout\" class=\"headerlink\" title=\"3.Item Layout\"></a>3.Item Layout</h4><p>使用<code>CardView</code>作为Item的展示Layout。<code>CardView</code>是具有装饰的<code>FrameLayout</code>。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.CardView</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent</span></div><div class=\"line\">  android:layout_height=\"<span class=\"attr\">match_parent</span>\"</div><div class=\"line\">  <span class=\"attr\">app:contentPadding</span>=<span class=\"string\">\"8dp\"</span></div><div class=\"line\">  <span class=\"attr\">app:cardUseCompatPadding</span>=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">      <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">          <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">          <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Headline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">          <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Subhead\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.CardView</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-adapter\"><a href=\"#4-adapter\" class=\"headerlink\" title=\"4.adapter\"></a>4.adapter</h4><ol>\n<li><p>定义<code>ViewHolder</code>类，必须继承<code>RecyclerView.ViewHolder</code>。同时需要存储绑定数据时需要使用到的View的对象。<br>例子中我们需要两个TextView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = Adapter.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">    TextView title;</div><div class=\"line\">    TextView subtitle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">        title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">        subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>Collection</code>存储对象的集合，简单起见，例子中使用<code>ArrayList</code>来存储列表数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = Adapter.class.getSimpleName();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ITEM_COUNT = <span class=\"number\">50</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;Item&gt; items;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建item的列表</span></div><div class=\"line\">    items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ITEM_COUNT; ++i) &#123;</div><div class=\"line\">        items.add(<span class=\"keyword\">new</span> Item(<span class=\"string\">\"Item \"</span> + i, <span class=\"string\">\"This is the item number \"</span> + i));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 省略ViewHolder的定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现<code>RecyclerView.Adapter</code>的方法。</p>\n</li>\n</ol>\n<ul>\n<li><p>onCreateViewHolder(ViewGroup parent, int viewType) </p>\n<p>  创建View，返回匹配的ViewHolder</p>\n</li>\n<li><p>onBindViewHolder(ViewHolder holder, int position) </p>\n<p>  根据Item的position，给ViewHolder绑定数据</p>\n</li>\n<li><p>getItemCount()</p>\n<p>  返回Adapter的item的数量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Attributes and constructor omitted</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">    View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ViewHolder(v);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    holder.title.setText(item.getTitle());</div><div class=\"line\">    holder.subtitle.setText(item.getSubtitle());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> items.size();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 省略ViewHolder的定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-Bind-everything-together\"><a href=\"#5-Bind-everything-together\" class=\"headerlink\" title=\"5. Bind everything together\"></a>5. Bind everything together</h4><ol>\n<li><p>在Activity的布局文件中添加<code>RecyclerView</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RelativeLayout</div><div class=\"line\">  xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">  xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">  android:layout_width=\"match_parent\"</div><div class=\"line\">  android:layout_height=\"match_parent\"</div><div class=\"line\">  tools:context=\".MainActivity\" &gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">    android:id=\"@+id/recycler_view\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\" /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>LinearLayoutManager</code>，<code>DefaultItemAnimator</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class=\"line\">    recyclerView.setAdapter(<span class=\"keyword\">new</span> Adapter());</div><div class=\"line\">    recyclerView.setItemAnimator(<span class=\"keyword\">new</span> DefaultItemAnimator());</div><div class=\"line\">    recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译、运行</p>\n</li>\n</ol>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-1.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"三、相同RecyclerView显示不同类型的View\"><a href=\"#三、相同RecyclerView显示不同类型的View\" class=\"headerlink\" title=\"三、相同RecyclerView显示不同类型的View\"></a>三、相同RecyclerView显示不同类型的View</h3><p>假设现在要显示两种类型的Item。如一个远程音乐的列表和一些离线的专辑。可以为他们指定行为，显示指定的信息。</p>\n<ol>\n<li><p>在Item中添加<code>active</code>属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String title;</div><div class=\"line\">  <span class=\"keyword\">private</span> String subtitle;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> active;</div><div class=\"line\"></div><div class=\"line\">  Item(String title, String subtitle, <span class=\"keyword\">boolean</span> active) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subtitle = subtitle;</div><div class=\"line\">    <span class=\"keyword\">this</span>.active = active;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> title;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubtitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> subtitle;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isActive</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> active;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改创建Item的方法，随机设定Item的<code>active</code>值，根据<code>active</code>来改变subtitle状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 忽略参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 创建Item</span></div><div class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">        items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ITEM_COUNT; ++i) &#123;</div><div class=\"line\">            items.add(<span class=\"keyword\">new</span> Item(<span class=\"string\">\"Item \"</span> + i, <span class=\"string\">\"This is the item number \"</span> + i, random.nextBoolean()));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 忽略onCreateViewHolder</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">        holder.title.setText(item.getTitle());</div><div class=\"line\">        holder.subtitle.setText(item.getSubtitle() + <span class=\"string\">\", which is \"</span> +</div><div class=\"line\">                (item.isActive() ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"inactive\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>学会显示不同String是个好的开始，但是我们不仅仅要满足于此。在Adapter中你可能会注意到<code>onCreateViewHolder(ViewGroup parent, int viewType)</code>中的viewType我们没有使用。这里的<code>viewType</code>可以用来实现这样的需求：修改ViewHolder的实例。我们必须告诉<code>Adapter</code>来确定Item的类型。通过复写<code>getItemViewType(int position)</code>方法实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_INACTIVE = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_ACTIVE = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> item.isActive() ? TYPE_ACTIVE : TYPE_INACTIVE;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>现在根据你的需求有多种可能：为每种类型的View创建不同的<code>ViewHolder</code>或为相同的<code>ViewHolder</code> inflate 不同的Layout。简单起见，这里使用相同的<code>ViewHolder</code> inflate 不同的Layout。我们对<code>inactive</code>的Item继续使用现在的Layout，对<code>active</code>的Item创建一个新的Layout</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption><span>layout/item_active.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.CardView</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:contentPadding</span>=<span class=\"string\">\"8dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:cardUseCompatPadding</span>=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/material_deep_teal_500\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Headline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/material_blue_grey_900\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Subhead\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.CardView</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<ol>\n<li>最后也是最重要：在<code>onCreateViewHolder</code>方法中根据<code>viewType</code>值Inflate不同的Layout</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;</div><div class=\"line\"></div><div class=\"line\">    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ViewHolder(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>现在我们可以区分<code>active</code>和<code>inactive</code> Item了</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-active.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"四、Layout-managers\"><a href=\"#四、Layout-managers\" class=\"headerlink\" title=\"四、Layout managers\"></a>四、Layout managers</h3><h4 id=\"1-LinearLayoutManager\"><a href=\"#1-LinearLayoutManager\" class=\"headerlink\" title=\"1.LinearLayoutManager\"></a>1.LinearLayoutManager</h4><p>这个也是上面我们用的Manager，复制了<code>ListView</code>的特性。<code>Layout managers</code>占用三个参数</p>\n<ul>\n<li><code>Context</code> 不能为空  </li>\n<li><code>int orientation</code> vertical（默认值）、horizontal</li>\n<li><code>boolean reverseLayout</code> 是否反转Layout</li>\n</ul>\n<p>下面是<code>反转</code> <code>水平方向</code>的LinearLayoutManager</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-linear-horizontal-reversed.png\" style=\"width:35%;\"><br></div>\n\n<p>设置反转Layout时显示最右边无需滑动</p>\n<h4 id=\"2-GridLayoutManager\"><a href=\"#2-GridLayoutManager\" class=\"headerlink\" title=\"2.GridLayoutManager\"></a>2.GridLayoutManager</h4><p>类似<code>GridView</code>。占用四个参数</p>\n<ul>\n<li><code>Context</code> 非空</li>\n<li><code>int spanCount</code> 非空</li>\n<li><code>int orientation</code> vertical（默认值）、horizontal</li>\n<li><code>boolean reverseLayout</code> 是否反转Layout</li>\n</ul>\n<p>下面是<code>spanCount</code>为3，<code>vertical</code>方向，<code>非反转</code>的GridLayoutManager</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical.png\" style=\"width:35%;\"><br></div>\n\n<p><code>注意</code>：GridLayoutManager的<code>reverseLayout</code>属性只反转设定的反向。如设置orientation为<code>vertical</code>时，只垂直反转，水平方向不变。</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical-reversed.png\" style=\"width:35%;\"><br></div>\n\n<h4 id=\"3-StaggeredGridLayoutManager\"><a href=\"#3-StaggeredGridLayoutManager\" class=\"headerlink\" title=\"3.StaggeredGridLayoutManager\"></a>3.StaggeredGridLayoutManager</h4><p>StaggeredGridLayoutManager是<code>GridLayoutManager</code>的加强版。截止到<code>support-v7 21.0.0.3</code>版本的包中，StaggeredGridLayoutManager仍然还有很多<a href=\"https://code.google.com/p/android/issues/detail?id=93711\" target=\"_blank\" rel=\"external\">bug</a>和<a href=\"https://code.google.com/p/android/issues/detail?id=93156\" target=\"_blank\" rel=\"external\">困扰的问题</a>。和其他几种LayoutManager相比，<code>StaggeredGridLayoutManager</code>看上去像是匆忙完成的。同时需要注意的是它不需要<code>Context</code>，但是<code>orientation</code> 不能省略。同<code>GridLayoutManager</code>一样，需要指定<code>span</code>的数量。构造器中不提供<code>reverse</code> 参数，可以用代码来实现。<br>下面是固定Span的Grid，我们可以让Item占用整行或整列。让我们看看如何实现。用之前例子中创建的 <code>active/inactive</code>属性的item list，让<code>active</code>属性的item占满整行。在<code>adapter</code> 绑定数据的时候，来实现。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    holder.title.setText(item.getTitle());</div><div class=\"line\">    holder.subtitle.setText(item.getSubtitle() + <span class=\"string\">\", which is \"</span> + (item.isActive() ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"inactive\"</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Span the item if active</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp <span class=\"keyword\">instanceof</span> StaggeredGridLayoutManager.LayoutParams) &#123;</div><div class=\"line\">        StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;</div><div class=\"line\">        sglp.setFullSpan(item.isActive());</div><div class=\"line\">        holder.itemView.setLayoutParams(sglp);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在代码判断如果LayoutManager是StaggeredGridLayoutManager的实例，来修改Layout参数。效果如图</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-staggered-grid.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"五、Item点击响应\"><a href=\"#五、Item点击响应\" class=\"headerlink\" title=\"五、Item点击响应\"></a>五、Item点击响应</h3><p>与ListView 不同的是RecyclerView没有提供相关的点击响应事件的API，但是依然很容易来实现。现在我们需要监听每个Item的<code>click</code>和<code>long-click</code>事件.每个Item是由<code>ViewHolder</code>来显示的，每个<code>ViewHolder</code>是由根<code>View</code> 来初始化的。OK，用<code>View</code>来作为<code>click</code>和<code>long-click</code>事件的回调。最后只需要把<code>ViewHolder</code>和它的position对应起来即可，<code>RecyclerView.ViewHolder</code>已经提供对应的方法<del>getPosition()</del> ( getPosition() 方法废弃, 根据你的情况用<code>getLayoutPosition()</code> 或 <code>getAdapterPosition()</code>来替代 )来获取当前绑定的Item的postion<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span>,</span></div><div class=\"line\">        <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = ViewHolder.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    TextView title;</div><div class=\"line\">    TextView subtitle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">      title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">      subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\"></div><div class=\"line\">      itemView.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">      itemView.setOnLongClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      Log.d(TAG, <span class=\"string\">\"Item clicked at position \"</span> + getPosition());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      Log.d(TAG, <span class=\"string\">\"Item long-clicked at position \"</span> + getPosition());</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"六、选择处理\"><a href=\"#六、选择处理\" class=\"headerlink\" title=\"六、选择处理\"></a>六、选择处理</h3><p><code>long-click</code>事件一个常用的模式是触发选择模式。再一次，<code>RecyclerView</code>没有帮助我们实现，但是实现起来也很简单。<br>分为三步</p>\n<ul>\n<li>维护一个选择状态</li>\n<li>更新选中的Item的View</li>\n<li>开启选择模式</li>\n</ul>\n<p>为了说明，我们添加一个选择Item的方式，然后移除选中的Item。</p>\n<h4 id=\"1-选择状态\"><a href=\"#1-选择状态\" class=\"headerlink\" title=\"1.选择状态\"></a>1.选择状态</h4><p>我们需要修改<code>Adapter</code>来维护一个选中的item list。<code>Adapter</code>需要提供一下列表参数</p>\n<ul>\n<li>选中的元素列表</li>\n<li>改变给定元素的选择状态</li>\n</ul>\n<p>我们加入额外的方法几个方法：</p>\n<ul>\n<li>检查指定的元素是否被选中</li>\n<li>清空选中</li>\n<li>提供选中元素的数量</li>\n</ul>\n<p>这里并不是随便选择这些方法，在下个部分我们需要它们。<br>我们注意到这五个方法都不是特定的Item，我们可以用普通方式写这些方法并重用<code>Adapter</code>的行为。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">VH</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">VH</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = SelectableAdapter.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> SparseBooleanArray selectedItems;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SelectableAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    selectedItems = <span class=\"keyword\">new</span> SparseBooleanArray();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 指定对应位置的Item是否被选中</div><div class=\"line\">   * <span class=\"doctag\">@param</span> Item的position</div><div class=\"line\">   * <span class=\"doctag\">@return</span> 如果是选中返回true，否则返回false</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getSelectedItems().contains(position);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 给定postion的Item的选中状态触发器</div><div class=\"line\">   * <span class=\"doctag\">@param</span> position item 的 postion</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toggleSelection</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (selectedItems.get(position, <span class=\"keyword\">false</span>)) &#123;</div><div class=\"line\">      selectedItems.delete(position);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      selectedItems.put(position, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    notifyItemChanged(position);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 清空所有Item的选中状态</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearSelection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    List&lt;Integer&gt; selection = getSelectedItems();</div><div class=\"line\">    selectedItems.clear();</div><div class=\"line\">    <span class=\"keyword\">for</span> (Integer i : selection) &#123;</div><div class=\"line\">      notifyItemChanged(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 选中Item的数量</div><div class=\"line\">   * <span class=\"doctag\">@return</span> 选中Item的数量</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSelectedItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> selectedItems.size();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 被选中的Item的Id list</div><div class=\"line\">   * <span class=\"doctag\">@return</span> 被选中的Item的Id list</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getSelectedItems</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    List&lt;Integer&gt; items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(selectedItems.size());</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectedItems.size(); ++i) &#123;</div><div class=\"line\">      items.add(selectedItems.keyAt(i));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> items;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后<code>Adapter</code>继承我们创建<code>SelectableAdapter</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-更新Item的View\"><a href=\"#2-更新Item的View\" class=\"headerlink\" title=\"2.更新Item的View\"></a>2.更新Item的View</h4><p>通知用户选中了一个Item，我们经常看到选中的View被覆盖某个颜色。在<code>item.xml</code>和<code>item_active.xml</code>中，我们添加一个<code>invisible</code>并带有颜色的View。因为这个View应该填充整个<code>CardView</code>，我们应该改变Layout的一些属性（将CardView的padding属性移动到LinearLayout中），View的颜色应该为透明的。<br>我们要用android Framework的<code>selectableItemBackground</code>为<code>CardView</code>的foreground设定属性值，来添加一个好看的触摸反馈。在Android 5.0以及以上，显示涟漪的效果，Android 5.0以下版本显示灰色。</p>\n<figure class=\"highlight xml\"><figcaption><span>item.xml（item_active.xml做对应的修改）</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.CardView</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:attr/selectableItemBackground\"</span></div><div class=\"line\">    <span class=\"attr\">app:cardUseCompatPadding</span>=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"8dp\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Headline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Subhead\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/selected_overlay\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/selected_overlay\"</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"invisible\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.CardView</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>下一步决定什么时候显示这个效果，很明显需要 <code>Adapters</code>的<code>onBindViewHolder()</code>方法中。在<code>ViewHolder</code>中添加overlay view的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    holder.title.setText(item.getTitle());</div><div class=\"line\">    holder.subtitle.setText(item.getSubtitle() + <span class=\"string\">\", which is \"</span> + (item.isActive() ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"inactive\"</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Span the item if active</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp <span class=\"keyword\">instanceof</span> StaggeredGridLayoutManager.LayoutParams) &#123;</div><div class=\"line\">      StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;</div><div class=\"line\">      sglp.setFullSpan(item.isActive());</div><div class=\"line\">      holder.itemView.setLayoutParams(sglp);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  高亮选中的Item</span></div><div class=\"line\">    holder.selectedOverlay.setVisibility(isSelected(position) ? View.VISIBLE : View.INVISIBLE);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span>,</span></div><div class=\"line\">        <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = ViewHolder.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">      TextView title;</div><div class=\"line\">      TextView subtitle;</div><div class=\"line\">      View selectedOverlay;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">        title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">        subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\">        selectedOverlay = itemView.findViewById(R.id.selected_overlay);</div><div class=\"line\"></div><div class=\"line\">        itemView.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        itemView.setOnLongClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// …</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-开启选中模式\"><a href=\"#3-开启选中模式\" class=\"headerlink\" title=\"3.开启选中模式\"></a>3.开启选中模式</h4><p>最后一步可能有点复杂，但也不是很难。我们需要将<code>click</code>和<code>long-click</code>返回给<code>Activity</code>。用<code>ViewHolder</code>暴露一个<code>Listener</code>，通过<code>Adapter</code>传递它，实现需求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> ViewHolder.ClickListener clickListener;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">(ViewHolder.ClickListener clickListener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.clickListener = clickListener;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建Item</span></div><div class=\"line\">    Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">    items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ITEM_COUNT; ++i) &#123;</div><div class=\"line\">      items.add(<span class=\"keyword\">new</span> Item(<span class=\"string\">\"Item \"</span> + i, <span class=\"string\">\"This is the item number \"</span> + i, random.nextBoolean()));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;</div><div class=\"line\"></div><div class=\"line\">    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ViewHolder(v, clickListener);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span>,</span></div><div class=\"line\">          <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = ViewHolder.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    TextView title;</div><div class=\"line\">    TextView subtitle;</div><div class=\"line\">    View selectedOverlay;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ClickListener listener;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView, ClickListener listener)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">      title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">      subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\">      selectedOverlay = itemView.findViewById(R.id.selected_overlay);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">this</span>.listener = listener;</div><div class=\"line\"></div><div class=\"line\">      itemView.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">      itemView.setOnLongClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        listener.onItemClicked(getPosition());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> listener.onItemLongClicked(getPosition());</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onItemLongClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们用<code>ActionMode</code>来区分选择模式和正常模式，当选择模式被激活时显示不同的<code>ActionBar</code>。实现<code>ActionMode.Callback</code>来激活选择模式。简单起见，<code>Activity</code>使用一个内部类来实现其接口，同时实现我们我们新创建的Click接口<code>Adapter.ViewHolder.ClickListener</code>。我们需要<code>Callback</code>来访问<code>Adapter</code>，所以把<code>Adapter</code>作为<code>Activity</code>的一个属性。<br>我们的Activity看上去变得复杂了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>.<span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\">  <span class=\"keyword\">private</span> Adapter adapter;</div><div class=\"line\">  <span class=\"keyword\">private</span> ActionModeCallback actionModeCallback = <span class=\"keyword\">new</span> ActionModeCallback();</div><div class=\"line\">  <span class=\"keyword\">private</span> ActionMode actionMode;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">    adapter = <span class=\"keyword\">new</span> Adapter(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class=\"line\">    recyclerView.setAdapter(adapter);</div><div class=\"line\">    recyclerView.setItemAnimator(<span class=\"keyword\">new</span> DefaultItemAnimator());</div><div class=\"line\">    recyclerView.setLayoutManager(<span class=\"keyword\">new</span> StaggeredGridLayoutManager(<span class=\"number\">3</span>, StaggeredGridLayoutManager.VERTICAL));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      toggleSelection(position);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onItemLongClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMode == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      actionMode = startSupportActionMode(actionModeCallback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    toggleSelection(position);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 触发Item的选中状态</div><div class=\"line\">   *</div><div class=\"line\">   * 如果选中的Item数量为0, 则关闭选中状态模式</div><div class=\"line\">   * 注意：actionMode不能为空</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> position 触发选中状态的Item位置</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toggleSelection</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    adapter.toggleSelection(position);</div><div class=\"line\">    <span class=\"keyword\">int</span> count = adapter.getSelectedItemCount();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      actionMode.finish();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      actionMode.setTitle(String.valueOf(count));</div><div class=\"line\">      actionMode.invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActionModeCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActionMode</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = ActionModeCallback.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateActionMode</span><span class=\"params\">(ActionMode mode, Menu menu)</span> </span>&#123;</div><div class=\"line\">      mode.getMenuInflater().inflate (R.menu.selected_menu, menu);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onPrepareActionMode</span><span class=\"params\">(ActionMode mode, Menu menu)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onActionItemClicked</span><span class=\"params\">(ActionMode mode, MenuItem item)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_remove:</div><div class=\"line\">          <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 具体的移除Item操作</span></div><div class=\"line\">          Log.d(TAG, <span class=\"string\">\"menu_remove\"</span>);</div><div class=\"line\">          mode.finish();</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyActionMode</span><span class=\"params\">(ActionMode mode)</span> </span>&#123;</div><div class=\"line\">        adapter.clearSelection();</div><div class=\"line\">        actionMode = <span class=\"keyword\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下图显示<code>Item5</code>被选中时的截图</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-selection.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"七、改变数据\"><a href=\"#七、改变数据\" class=\"headerlink\" title=\"七、改变数据\"></a>七、改变数据</h3><p>想要更新View，，<code>Adapter</code>必须来发出数据发生了变化的通知。在<code>ListView</code>上，adapter只有一个可以使用的方法<code>notifyDataSetChanged()</code>。然而这个方法还不很理想：需要刷新所有的View，因为我们不能够确切知道什么发生了变化。而<code>RecyclerView.Adapter</code>提供多种方法：</p>\n<ul>\n<li>notifyItemChanged(int position)</li>\n<li>notifyItemInserted(int position)</li>\n<li>notifyItemRemoved(int position)</li>\n<li>notifyItemMoved(int fromPosition, int toPosition)</li>\n<li>notifyItemRangeChanged(int positionStart, int itemCount)</li>\n<li>notifyItemRangeInserted(int positionStart, int itemCount)</li>\n<li>notifyItemRangeRemoved(int positionStart, int itemCount)</li>\n<li>notifyDataSetChanged()</li>\n</ul>\n<p>我们可以知道Item或Items的变化、添加、移除、移动。<br>我们在<code>Adapter</code>中向外部类提供移除Item、Item List的两个<code>public</code>方法。如果直接移除一个Item，直接从列表移除即可。但是移除item list 并没有简单。举个例子，如果现在需要移除<code>[5 ,  8 , 9]</code> 三个位置的Item，当移除5位置的Item后，我们Item的list长度就会变短，因此list数据中原来的8变成了7。结果我们移除<code>[5 , 8 , 9]</code>三个位置的数据实际对应的是[5 , 7 , 7]。再考虑到一种情况如果是移除<code>[8 ， 9 ， 5]</code>三个位置的Item呢？<br>因此我们需要将提供需要移除的Item List进行逆序排序。这样我们就能简单调用<code>notifyItemRangeRemoved()</code>方法来移除item list。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    items.remove(position);</div><div class=\"line\">    notifyItemRemoved(position);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeItems</span><span class=\"params\">(List&lt;Integer&gt; positions)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// list逆序排序</span></div><div class=\"line\">    Collections.sort(positions, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer lhs, Integer rhs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rhs - lhs;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 拆分排列后的list</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (!positions.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (positions.size() == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        removeItem(positions.get(<span class=\"number\">0</span>));</div><div class=\"line\">        positions.remove(<span class=\"number\">0</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (positions.size() &gt; count &amp;&amp; positions.get(count).equals(positions.get(count - <span class=\"number\">1</span>) - <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">          ++count;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          removeItem(positions.get(<span class=\"number\">0</span>));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          removeRange(positions.get(count - <span class=\"number\">1</span>), count);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">          positions.remove(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRange</span><span class=\"params\">(<span class=\"keyword\">int</span> positionStart, <span class=\"keyword\">int</span> itemCount)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; itemCount; ++i) &#123;</div><div class=\"line\">      items.remove(positionStart);</div><div class=\"line\">    &#125;</div><div class=\"line\">    notifyItemRangeRemoved(positionStart, itemCount);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后在<code>Activity</code>中调用这两个方法，在<code>menu</code>菜单中创建<code>Remove</code>的操作。我们只需要在<code>Remove</code>菜单中调用<code>removeItems()</code>方法就可以了。我们可以在<code>click</code>中调用<code>removeItem()</code>方法来测试移除单个Item。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>.<span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      toggleSelection(position);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      adapter.removeItem(position);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActionModeCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActionMode</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onActionItemClicked</span><span class=\"params\">(ActionMode mode, MenuItem item)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_remove:</div><div class=\"line\">          adapter.removeItems(adapter.getSelectedItems());</div><div class=\"line\">          mode.finish();</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样我们就实现了移除Item功能了。与传统<code>notifyDataSetChanged()</code>的方法相比，我们还有额外的动画效果</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548665/android/recyclerview-remove.gif\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"八、总结\"><a href=\"#八、总结\" class=\"headerlink\" title=\"八、总结\"></a>八、总结</h3><p><code>RecyclerView</code>使用相对<code>ListView</code>和<code>GridView</code>有一点复杂，但是提供了 viewholders、数据源、list等之间拆分的简单实现，动画效果提升了用户体验。<br>关于性能，对比<code>ListView</code>，两个都相似的实现了<code>ViewHolder</code>模式。然而用<code>RecyclerView</code>，你不得不选择<code>ViewHolder</code>模式。对于用户来说比没有使用<code>ViewHolder</code>有更好的体验，对于开发者来说，可以写出更好的代码。<br>同时，<code>RecyclerView</code>仍然有一些明显的不足（如：StaggeredGridLayoutManager），除此以外可以完美在项目中使用。</p>\n<p>示例代码：<a href=\"https://github.com/Kernald/recyclerview-sample\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://enoent.fr/blog/2015/01/18/recyclerview-basics/\" target=\"_blank\" rel=\"external\">RecyclerView basics</a></p>\n<h3 id=\"一、RecylerView-介绍\"><a href=\"#一、RecylerView-介绍\" class=\"headerlink\" title=\"一、RecylerView 介绍\"></a>一、RecylerView 介绍</h3><p><code>RecyclerView</code>是Android5.0之后V7包中的新特性。与<code>ListView</code>相似，但是比<code>ListView</code>更灵活，支持Android 2.1版本以上。<br>正如它的名字：当一个item隐藏的时候，隐藏的item会被再回收重用，绑定新的数据。而不是被销毁为新的item的创建新的布局。<br>RecylerView分为6个主要组件</p>\n<ol>\n<li><code>Adapter</code>：提供数据，类似<code>ListView</code>的</li>\n<li><code>ItemAnimator</code>：item的添加、删除、修改、移动的动画效果</li>\n<li><code>ItemDecoration</code>：添加图画或修改Item布局</li>\n<li><code>LayoutManager</code>：指定Item如何布局（List、Grid…）</li>\n<li><code>ViewHolder</code>：每个Item View的基础类</li>\n<li><code>RecylerView</code>：将所有的组件绑定</li>\n</ol>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548610/android/recyclerview_uml.png\" style=\"width:80%;\"><br></div>\n\n<h3 id=\"二、RecyclerView展示\"><a href=\"#二、RecyclerView展示\" class=\"headerlink\" title=\"二、RecyclerView展示\"></a>二、RecyclerView展示</h3><h4 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1.准备\"></a>1.准备</h4><p>Gradle添加 <code>RecyclerView</code>的supprt-v7包依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:recyclerview-v7:21.0.3'</span></div></pre></td></tr></table></figure></p>\n<p>本篇文章也使用<code>CardViews</code>，因此建议添加对应的依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:cardview-v7:21.0.3'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-BaseItem\"><a href=\"#2-BaseItem\" class=\"headerlink\" title=\"2.BaseItem\"></a>2.BaseItem</h4><p><code>BaseItem</code> 包含一个<code>title</code> 和一个<code>subtitle</code>属性。用来表示列表中每个<code>item</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String title;</div><div class=\"line\">  <span class=\"keyword\">private</span> String subtitle;</div><div class=\"line\">  Item(String title , String subtitle)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subtitle = subtitle;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> title;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubtitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> subtitle;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-Item-Layout\"><a href=\"#3-Item-Layout\" class=\"headerlink\" title=\"3.Item Layout\"></a>3.Item Layout</h4><p>使用<code>CardView</code>作为Item的展示Layout。<code>CardView</code>是具有装饰的<code>FrameLayout</code>。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.CardView</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent</span></div><div class=\"line\">  android:layout_height=\"<span class=\"attr\">match_parent</span>\"</div><div class=\"line\">  <span class=\"attr\">app:contentPadding</span>=<span class=\"string\">\"8dp\"</span></div><div class=\"line\">  <span class=\"attr\">app:cardUseCompatPadding</span>=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">      <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">          <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">          <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Headline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">          <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Subhead\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.CardView</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-adapter\"><a href=\"#4-adapter\" class=\"headerlink\" title=\"4.adapter\"></a>4.adapter</h4><ol>\n<li><p>定义<code>ViewHolder</code>类，必须继承<code>RecyclerView.ViewHolder</code>。同时需要存储绑定数据时需要使用到的View的对象。<br>例子中我们需要两个TextView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = Adapter.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">    TextView title;</div><div class=\"line\">    TextView subtitle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">        title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">        subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>Collection</code>存储对象的集合，简单起见，例子中使用<code>ArrayList</code>来存储列表数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = Adapter.class.getSimpleName();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ITEM_COUNT = <span class=\"number\">50</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;Item&gt; items;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建item的列表</span></div><div class=\"line\">    items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ITEM_COUNT; ++i) &#123;</div><div class=\"line\">        items.add(<span class=\"keyword\">new</span> Item(<span class=\"string\">\"Item \"</span> + i, <span class=\"string\">\"This is the item number \"</span> + i));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 省略ViewHolder的定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现<code>RecyclerView.Adapter</code>的方法。</p>\n</li>\n</ol>\n<ul>\n<li><p>onCreateViewHolder(ViewGroup parent, int viewType) </p>\n<p>  创建View，返回匹配的ViewHolder</p>\n</li>\n<li><p>onBindViewHolder(ViewHolder holder, int position) </p>\n<p>  根据Item的position，给ViewHolder绑定数据</p>\n</li>\n<li><p>getItemCount()</p>\n<p>  返回Adapter的item的数量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Attributes and constructor omitted</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">    View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ViewHolder(v);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    holder.title.setText(item.getTitle());</div><div class=\"line\">    holder.subtitle.setText(item.getSubtitle());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> items.size();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 省略ViewHolder的定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-Bind-everything-together\"><a href=\"#5-Bind-everything-together\" class=\"headerlink\" title=\"5. Bind everything together\"></a>5. Bind everything together</h4><ol>\n<li><p>在Activity的布局文件中添加<code>RecyclerView</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RelativeLayout</div><div class=\"line\">  xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">  xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">  android:layout_width=\"match_parent\"</div><div class=\"line\">  android:layout_height=\"match_parent\"</div><div class=\"line\">  tools:context=\".MainActivity\" &gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">    android:id=\"@+id/recycler_view\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\" /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>LinearLayoutManager</code>，<code>DefaultItemAnimator</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class=\"line\">    recyclerView.setAdapter(<span class=\"keyword\">new</span> Adapter());</div><div class=\"line\">    recyclerView.setItemAnimator(<span class=\"keyword\">new</span> DefaultItemAnimator());</div><div class=\"line\">    recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译、运行</p>\n</li>\n</ol>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-1.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"三、相同RecyclerView显示不同类型的View\"><a href=\"#三、相同RecyclerView显示不同类型的View\" class=\"headerlink\" title=\"三、相同RecyclerView显示不同类型的View\"></a>三、相同RecyclerView显示不同类型的View</h3><p>假设现在要显示两种类型的Item。如一个远程音乐的列表和一些离线的专辑。可以为他们指定行为，显示指定的信息。</p>\n<ol>\n<li><p>在Item中添加<code>active</code>属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String title;</div><div class=\"line\">  <span class=\"keyword\">private</span> String subtitle;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> active;</div><div class=\"line\"></div><div class=\"line\">  Item(String title, String subtitle, <span class=\"keyword\">boolean</span> active) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subtitle = subtitle;</div><div class=\"line\">    <span class=\"keyword\">this</span>.active = active;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> title;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubtitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> subtitle;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isActive</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> active;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改创建Item的方法，随机设定Item的<code>active</code>值，根据<code>active</code>来改变subtitle状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 忽略参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 创建Item</span></div><div class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">        items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ITEM_COUNT; ++i) &#123;</div><div class=\"line\">            items.add(<span class=\"keyword\">new</span> Item(<span class=\"string\">\"Item \"</span> + i, <span class=\"string\">\"This is the item number \"</span> + i, random.nextBoolean()));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 忽略onCreateViewHolder</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">        holder.title.setText(item.getTitle());</div><div class=\"line\">        holder.subtitle.setText(item.getSubtitle() + <span class=\"string\">\", which is \"</span> +</div><div class=\"line\">                (item.isActive() ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"inactive\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>学会显示不同String是个好的开始，但是我们不仅仅要满足于此。在Adapter中你可能会注意到<code>onCreateViewHolder(ViewGroup parent, int viewType)</code>中的viewType我们没有使用。这里的<code>viewType</code>可以用来实现这样的需求：修改ViewHolder的实例。我们必须告诉<code>Adapter</code>来确定Item的类型。通过复写<code>getItemViewType(int position)</code>方法实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_INACTIVE = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_ACTIVE = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> item.isActive() ? TYPE_ACTIVE : TYPE_INACTIVE;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>现在根据你的需求有多种可能：为每种类型的View创建不同的<code>ViewHolder</code>或为相同的<code>ViewHolder</code> inflate 不同的Layout。简单起见，这里使用相同的<code>ViewHolder</code> inflate 不同的Layout。我们对<code>inactive</code>的Item继续使用现在的Layout，对<code>active</code>的Item创建一个新的Layout</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption><span>layout/item_active.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.CardView</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:contentPadding</span>=<span class=\"string\">\"8dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:cardUseCompatPadding</span>=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/material_deep_teal_500\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Headline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/material_blue_grey_900\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Subhead\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.CardView</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<ol>\n<li>最后也是最重要：在<code>onCreateViewHolder</code>方法中根据<code>viewType</code>值Inflate不同的Layout</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;</div><div class=\"line\"></div><div class=\"line\">    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ViewHolder(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>现在我们可以区分<code>active</code>和<code>inactive</code> Item了</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548620/android/recyclerview-active.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"四、Layout-managers\"><a href=\"#四、Layout-managers\" class=\"headerlink\" title=\"四、Layout managers\"></a>四、Layout managers</h3><h4 id=\"1-LinearLayoutManager\"><a href=\"#1-LinearLayoutManager\" class=\"headerlink\" title=\"1.LinearLayoutManager\"></a>1.LinearLayoutManager</h4><p>这个也是上面我们用的Manager，复制了<code>ListView</code>的特性。<code>Layout managers</code>占用三个参数</p>\n<ul>\n<li><code>Context</code> 不能为空  </li>\n<li><code>int orientation</code> vertical（默认值）、horizontal</li>\n<li><code>boolean reverseLayout</code> 是否反转Layout</li>\n</ul>\n<p>下面是<code>反转</code> <code>水平方向</code>的LinearLayoutManager</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-linear-horizontal-reversed.png\" style=\"width:35%;\"><br></div>\n\n<p>设置反转Layout时显示最右边无需滑动</p>\n<h4 id=\"2-GridLayoutManager\"><a href=\"#2-GridLayoutManager\" class=\"headerlink\" title=\"2.GridLayoutManager\"></a>2.GridLayoutManager</h4><p>类似<code>GridView</code>。占用四个参数</p>\n<ul>\n<li><code>Context</code> 非空</li>\n<li><code>int spanCount</code> 非空</li>\n<li><code>int orientation</code> vertical（默认值）、horizontal</li>\n<li><code>boolean reverseLayout</code> 是否反转Layout</li>\n</ul>\n<p>下面是<code>spanCount</code>为3，<code>vertical</code>方向，<code>非反转</code>的GridLayoutManager</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical.png\" style=\"width:35%;\"><br></div>\n\n<p><code>注意</code>：GridLayoutManager的<code>reverseLayout</code>属性只反转设定的反向。如设置orientation为<code>vertical</code>时，只垂直反转，水平方向不变。</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-grid-3-vertical-reversed.png\" style=\"width:35%;\"><br></div>\n\n<h4 id=\"3-StaggeredGridLayoutManager\"><a href=\"#3-StaggeredGridLayoutManager\" class=\"headerlink\" title=\"3.StaggeredGridLayoutManager\"></a>3.StaggeredGridLayoutManager</h4><p>StaggeredGridLayoutManager是<code>GridLayoutManager</code>的加强版。截止到<code>support-v7 21.0.0.3</code>版本的包中，StaggeredGridLayoutManager仍然还有很多<a href=\"https://code.google.com/p/android/issues/detail?id=93711\" target=\"_blank\" rel=\"external\">bug</a>和<a href=\"https://code.google.com/p/android/issues/detail?id=93156\" target=\"_blank\" rel=\"external\">困扰的问题</a>。和其他几种LayoutManager相比，<code>StaggeredGridLayoutManager</code>看上去像是匆忙完成的。同时需要注意的是它不需要<code>Context</code>，但是<code>orientation</code> 不能省略。同<code>GridLayoutManager</code>一样，需要指定<code>span</code>的数量。构造器中不提供<code>reverse</code> 参数，可以用代码来实现。<br>下面是固定Span的Grid，我们可以让Item占用整行或整列。让我们看看如何实现。用之前例子中创建的 <code>active/inactive</code>属性的item list，让<code>active</code>属性的item占满整行。在<code>adapter</code> 绑定数据的时候，来实现。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    holder.title.setText(item.getTitle());</div><div class=\"line\">    holder.subtitle.setText(item.getSubtitle() + <span class=\"string\">\", which is \"</span> + (item.isActive() ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"inactive\"</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Span the item if active</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp <span class=\"keyword\">instanceof</span> StaggeredGridLayoutManager.LayoutParams) &#123;</div><div class=\"line\">        StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;</div><div class=\"line\">        sglp.setFullSpan(item.isActive());</div><div class=\"line\">        holder.itemView.setLayoutParams(sglp);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在代码判断如果LayoutManager是StaggeredGridLayoutManager的实例，来修改Layout参数。效果如图</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548621/android/recyclerview-staggered-grid.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"五、Item点击响应\"><a href=\"#五、Item点击响应\" class=\"headerlink\" title=\"五、Item点击响应\"></a>五、Item点击响应</h3><p>与ListView 不同的是RecyclerView没有提供相关的点击响应事件的API，但是依然很容易来实现。现在我们需要监听每个Item的<code>click</code>和<code>long-click</code>事件.每个Item是由<code>ViewHolder</code>来显示的，每个<code>ViewHolder</code>是由根<code>View</code> 来初始化的。OK，用<code>View</code>来作为<code>click</code>和<code>long-click</code>事件的回调。最后只需要把<code>ViewHolder</code>和它的position对应起来即可，<code>RecyclerView.ViewHolder</code>已经提供对应的方法<del>getPosition()</del> ( getPosition() 方法废弃, 根据你的情况用<code>getLayoutPosition()</code> 或 <code>getAdapterPosition()</code>来替代 )来获取当前绑定的Item的postion<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span>,</span></div><div class=\"line\">        <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = ViewHolder.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    TextView title;</div><div class=\"line\">    TextView subtitle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">      title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">      subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\"></div><div class=\"line\">      itemView.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">      itemView.setOnLongClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      Log.d(TAG, <span class=\"string\">\"Item clicked at position \"</span> + getPosition());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      Log.d(TAG, <span class=\"string\">\"Item long-clicked at position \"</span> + getPosition());</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"六、选择处理\"><a href=\"#六、选择处理\" class=\"headerlink\" title=\"六、选择处理\"></a>六、选择处理</h3><p><code>long-click</code>事件一个常用的模式是触发选择模式。再一次，<code>RecyclerView</code>没有帮助我们实现，但是实现起来也很简单。<br>分为三步</p>\n<ul>\n<li>维护一个选择状态</li>\n<li>更新选中的Item的View</li>\n<li>开启选择模式</li>\n</ul>\n<p>为了说明，我们添加一个选择Item的方式，然后移除选中的Item。</p>\n<h4 id=\"1-选择状态\"><a href=\"#1-选择状态\" class=\"headerlink\" title=\"1.选择状态\"></a>1.选择状态</h4><p>我们需要修改<code>Adapter</code>来维护一个选中的item list。<code>Adapter</code>需要提供一下列表参数</p>\n<ul>\n<li>选中的元素列表</li>\n<li>改变给定元素的选择状态</li>\n</ul>\n<p>我们加入额外的方法几个方法：</p>\n<ul>\n<li>检查指定的元素是否被选中</li>\n<li>清空选中</li>\n<li>提供选中元素的数量</li>\n</ul>\n<p>这里并不是随便选择这些方法，在下个部分我们需要它们。<br>我们注意到这五个方法都不是特定的Item，我们可以用普通方式写这些方法并重用<code>Adapter</code>的行为。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">VH</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">VH</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = SelectableAdapter.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> SparseBooleanArray selectedItems;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SelectableAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    selectedItems = <span class=\"keyword\">new</span> SparseBooleanArray();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 指定对应位置的Item是否被选中</div><div class=\"line\">   * <span class=\"doctag\">@param</span> Item的position</div><div class=\"line\">   * <span class=\"doctag\">@return</span> 如果是选中返回true，否则返回false</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getSelectedItems().contains(position);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 给定postion的Item的选中状态触发器</div><div class=\"line\">   * <span class=\"doctag\">@param</span> position item 的 postion</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toggleSelection</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (selectedItems.get(position, <span class=\"keyword\">false</span>)) &#123;</div><div class=\"line\">      selectedItems.delete(position);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      selectedItems.put(position, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    notifyItemChanged(position);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 清空所有Item的选中状态</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearSelection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    List&lt;Integer&gt; selection = getSelectedItems();</div><div class=\"line\">    selectedItems.clear();</div><div class=\"line\">    <span class=\"keyword\">for</span> (Integer i : selection) &#123;</div><div class=\"line\">      notifyItemChanged(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 选中Item的数量</div><div class=\"line\">   * <span class=\"doctag\">@return</span> 选中Item的数量</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSelectedItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> selectedItems.size();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 被选中的Item的Id list</div><div class=\"line\">   * <span class=\"doctag\">@return</span> 被选中的Item的Id list</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getSelectedItems</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    List&lt;Integer&gt; items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(selectedItems.size());</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectedItems.size(); ++i) &#123;</div><div class=\"line\">      items.add(selectedItems.keyAt(i));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> items;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后<code>Adapter</code>继承我们创建<code>SelectableAdapter</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-更新Item的View\"><a href=\"#2-更新Item的View\" class=\"headerlink\" title=\"2.更新Item的View\"></a>2.更新Item的View</h4><p>通知用户选中了一个Item，我们经常看到选中的View被覆盖某个颜色。在<code>item.xml</code>和<code>item_active.xml</code>中，我们添加一个<code>invisible</code>并带有颜色的View。因为这个View应该填充整个<code>CardView</code>，我们应该改变Layout的一些属性（将CardView的padding属性移动到LinearLayout中），View的颜色应该为透明的。<br>我们要用android Framework的<code>selectableItemBackground</code>为<code>CardView</code>的foreground设定属性值，来添加一个好看的触摸反馈。在Android 5.0以及以上，显示涟漪的效果，Android 5.0以下版本显示灰色。</p>\n<figure class=\"highlight xml\"><figcaption><span>item.xml（item_active.xml做对应的修改）</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.CardView</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:attr/selectableItemBackground\"</span></div><div class=\"line\">    <span class=\"attr\">app:cardUseCompatPadding</span>=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"8dp\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Headline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Base.TextAppearance.AppCompat.Subhead\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/selected_overlay\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/selected_overlay\"</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"invisible\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.CardView</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>下一步决定什么时候显示这个效果，很明显需要 <code>Adapters</code>的<code>onBindViewHolder()</code>方法中。在<code>ViewHolder</code>中添加overlay view的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Item item = items.get(position);</div><div class=\"line\"></div><div class=\"line\">    holder.title.setText(item.getTitle());</div><div class=\"line\">    holder.subtitle.setText(item.getSubtitle() + <span class=\"string\">\", which is \"</span> + (item.isActive() ? <span class=\"string\">\"active\"</span> : <span class=\"string\">\"inactive\"</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Span the item if active</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class=\"line\">    <span class=\"keyword\">if</span> (lp <span class=\"keyword\">instanceof</span> StaggeredGridLayoutManager.LayoutParams) &#123;</div><div class=\"line\">      StaggeredGridLayoutManager.LayoutParams sglp = (StaggeredGridLayoutManager.LayoutParams) lp;</div><div class=\"line\">      sglp.setFullSpan(item.isActive());</div><div class=\"line\">      holder.itemView.setLayoutParams(sglp);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  高亮选中的Item</span></div><div class=\"line\">    holder.selectedOverlay.setVisibility(isSelected(position) ? View.VISIBLE : View.INVISIBLE);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span>,</span></div><div class=\"line\">        <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = ViewHolder.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">      TextView title;</div><div class=\"line\">      TextView subtitle;</div><div class=\"line\">      View selectedOverlay;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">        title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">        subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\">        selectedOverlay = itemView.findViewById(R.id.selected_overlay);</div><div class=\"line\"></div><div class=\"line\">        itemView.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        itemView.setOnLongClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// …</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-开启选中模式\"><a href=\"#3-开启选中模式\" class=\"headerlink\" title=\"3.开启选中模式\"></a>3.开启选中模式</h4><p>最后一步可能有点复杂，但也不是很难。我们需要将<code>click</code>和<code>long-click</code>返回给<code>Activity</code>。用<code>ViewHolder</code>暴露一个<code>Listener</code>，通过<code>Adapter</code>传递它，实现需求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> ViewHolder.ClickListener clickListener;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">(ViewHolder.ClickListener clickListener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.clickListener = clickListener;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建Item</span></div><div class=\"line\">    Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">    items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ITEM_COUNT; ++i) &#123;</div><div class=\"line\">      items.add(<span class=\"keyword\">new</span> Item(<span class=\"string\">\"Item \"</span> + i, <span class=\"string\">\"This is the item number \"</span> + i, random.nextBoolean()));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layout = viewType == TYPE_INACTIVE ? R.layout.item : R.layout.item_active;</div><div class=\"line\"></div><div class=\"line\">    View v = LayoutInflater.from(parent.getContext()).inflate(layout, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ViewHolder(v, clickListener);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span>,</span></div><div class=\"line\">          <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = ViewHolder.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    TextView title;</div><div class=\"line\">    TextView subtitle;</div><div class=\"line\">    View selectedOverlay;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ClickListener listener;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View itemView, ClickListener listener)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\"></div><div class=\"line\">      title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">      subtitle = (TextView) itemView.findViewById(R.id.subtitle);</div><div class=\"line\">      selectedOverlay = itemView.findViewById(R.id.selected_overlay);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">this</span>.listener = listener;</div><div class=\"line\"></div><div class=\"line\">      itemView.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">      itemView.setOnLongClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        listener.onItemClicked(getPosition());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> listener.onItemLongClicked(getPosition());</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onItemLongClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们用<code>ActionMode</code>来区分选择模式和正常模式，当选择模式被激活时显示不同的<code>ActionBar</code>。实现<code>ActionMode.Callback</code>来激活选择模式。简单起见，<code>Activity</code>使用一个内部类来实现其接口，同时实现我们我们新创建的Click接口<code>Adapter.ViewHolder.ClickListener</code>。我们需要<code>Callback</code>来访问<code>Adapter</code>，所以把<code>Adapter</code>作为<code>Activity</code>的一个属性。<br>我们的Activity看上去变得复杂了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>.<span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\">  <span class=\"keyword\">private</span> Adapter adapter;</div><div class=\"line\">  <span class=\"keyword\">private</span> ActionModeCallback actionModeCallback = <span class=\"keyword\">new</span> ActionModeCallback();</div><div class=\"line\">  <span class=\"keyword\">private</span> ActionMode actionMode;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">    adapter = <span class=\"keyword\">new</span> Adapter(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class=\"line\">    recyclerView.setAdapter(adapter);</div><div class=\"line\">    recyclerView.setItemAnimator(<span class=\"keyword\">new</span> DefaultItemAnimator());</div><div class=\"line\">    recyclerView.setLayoutManager(<span class=\"keyword\">new</span> StaggeredGridLayoutManager(<span class=\"number\">3</span>, StaggeredGridLayoutManager.VERTICAL));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      toggleSelection(position);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onItemLongClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMode == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      actionMode = startSupportActionMode(actionModeCallback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    toggleSelection(position);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 触发Item的选中状态</div><div class=\"line\">   *</div><div class=\"line\">   * 如果选中的Item数量为0, 则关闭选中状态模式</div><div class=\"line\">   * 注意：actionMode不能为空</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> position 触发选中状态的Item位置</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toggleSelection</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    adapter.toggleSelection(position);</div><div class=\"line\">    <span class=\"keyword\">int</span> count = adapter.getSelectedItemCount();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      actionMode.finish();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      actionMode.setTitle(String.valueOf(count));</div><div class=\"line\">      actionMode.invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActionModeCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActionMode</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = ActionModeCallback.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateActionMode</span><span class=\"params\">(ActionMode mode, Menu menu)</span> </span>&#123;</div><div class=\"line\">      mode.getMenuInflater().inflate (R.menu.selected_menu, menu);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onPrepareActionMode</span><span class=\"params\">(ActionMode mode, Menu menu)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onActionItemClicked</span><span class=\"params\">(ActionMode mode, MenuItem item)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_remove:</div><div class=\"line\">          <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 具体的移除Item操作</span></div><div class=\"line\">          Log.d(TAG, <span class=\"string\">\"menu_remove\"</span>);</div><div class=\"line\">          mode.finish();</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyActionMode</span><span class=\"params\">(ActionMode mode)</span> </span>&#123;</div><div class=\"line\">        adapter.clearSelection();</div><div class=\"line\">        actionMode = <span class=\"keyword\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下图显示<code>Item5</code>被选中时的截图</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548622/android/recyclerview-selection.png\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"七、改变数据\"><a href=\"#七、改变数据\" class=\"headerlink\" title=\"七、改变数据\"></a>七、改变数据</h3><p>想要更新View，，<code>Adapter</code>必须来发出数据发生了变化的通知。在<code>ListView</code>上，adapter只有一个可以使用的方法<code>notifyDataSetChanged()</code>。然而这个方法还不很理想：需要刷新所有的View，因为我们不能够确切知道什么发生了变化。而<code>RecyclerView.Adapter</code>提供多种方法：</p>\n<ul>\n<li>notifyItemChanged(int position)</li>\n<li>notifyItemInserted(int position)</li>\n<li>notifyItemRemoved(int position)</li>\n<li>notifyItemMoved(int fromPosition, int toPosition)</li>\n<li>notifyItemRangeChanged(int positionStart, int itemCount)</li>\n<li>notifyItemRangeInserted(int positionStart, int itemCount)</li>\n<li>notifyItemRangeRemoved(int positionStart, int itemCount)</li>\n<li>notifyDataSetChanged()</li>\n</ul>\n<p>我们可以知道Item或Items的变化、添加、移除、移动。<br>我们在<code>Adapter</code>中向外部类提供移除Item、Item List的两个<code>public</code>方法。如果直接移除一个Item，直接从列表移除即可。但是移除item list 并没有简单。举个例子，如果现在需要移除<code>[5 ,  8 , 9]</code> 三个位置的Item，当移除5位置的Item后，我们Item的list长度就会变短，因此list数据中原来的8变成了7。结果我们移除<code>[5 , 8 , 9]</code>三个位置的数据实际对应的是[5 , 7 , 7]。再考虑到一种情况如果是移除<code>[8 ， 9 ， 5]</code>三个位置的Item呢？<br>因此我们需要将提供需要移除的Item List进行逆序排序。这样我们就能简单调用<code>notifyItemRangeRemoved()</code>方法来移除item list。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">SelectableAdapter</span>&lt;<span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    items.remove(position);</div><div class=\"line\">    notifyItemRemoved(position);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeItems</span><span class=\"params\">(List&lt;Integer&gt; positions)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// list逆序排序</span></div><div class=\"line\">    Collections.sort(positions, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer lhs, Integer rhs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rhs - lhs;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 拆分排列后的list</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (!positions.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (positions.size() == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        removeItem(positions.get(<span class=\"number\">0</span>));</div><div class=\"line\">        positions.remove(<span class=\"number\">0</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (positions.size() &gt; count &amp;&amp; positions.get(count).equals(positions.get(count - <span class=\"number\">1</span>) - <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">          ++count;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          removeItem(positions.get(<span class=\"number\">0</span>));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          removeRange(positions.get(count - <span class=\"number\">1</span>), count);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</div><div class=\"line\">          positions.remove(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRange</span><span class=\"params\">(<span class=\"keyword\">int</span> positionStart, <span class=\"keyword\">int</span> itemCount)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; itemCount; ++i) &#123;</div><div class=\"line\">      items.remove(positionStart);</div><div class=\"line\">    &#125;</div><div class=\"line\">    notifyItemRangeRemoved(positionStart, itemCount);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后在<code>Activity</code>中调用这两个方法，在<code>menu</code>菜单中创建<code>Remove</code>的操作。我们只需要在<code>Remove</code>菜单中调用<code>removeItems()</code>方法就可以了。我们可以在<code>click</code>中调用<code>removeItem()</code>方法来测试移除单个Item。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Adapter</span>.<span class=\"title\">ViewHolder</span>.<span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClicked</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (actionMode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      toggleSelection(position);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      adapter.removeItem(position);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActionModeCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActionMode</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onActionItemClicked</span><span class=\"params\">(ActionMode mode, MenuItem item)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.menu_remove:</div><div class=\"line\">          adapter.removeItems(adapter.getSelectedItems());</div><div class=\"line\">          mode.finish();</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// …</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样我们就实现了移除Item功能了。与传统<code>notifyDataSetChanged()</code>的方法相比，我们还有额外的动画效果</p>\n<div style=\"text-align:center\"><br>    <img src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1456548665/android/recyclerview-remove.gif\" style=\"width:35%;\"><br></div>\n\n<h3 id=\"八、总结\"><a href=\"#八、总结\" class=\"headerlink\" title=\"八、总结\"></a>八、总结</h3><p><code>RecyclerView</code>使用相对<code>ListView</code>和<code>GridView</code>有一点复杂，但是提供了 viewholders、数据源、list等之间拆分的简单实现，动画效果提升了用户体验。<br>关于性能，对比<code>ListView</code>，两个都相似的实现了<code>ViewHolder</code>模式。然而用<code>RecyclerView</code>，你不得不选择<code>ViewHolder</code>模式。对于用户来说比没有使用<code>ViewHolder</code>有更好的体验，对于开发者来说，可以写出更好的代码。<br>同时，<code>RecyclerView</code>仍然有一些明显的不足（如：StaggeredGridLayoutManager），除此以外可以完美在项目中使用。</p>\n<p>示例代码：<a href=\"https://github.com/Kernald/recyclerview-sample\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n"},{"title":"Android：Notification基础","date":"2016-07-22T06:48:43.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529028/android/8ff23095a2a4e04af26ca63642bfdea3_b.png","_content":"## Notification 通知\n所谓通知就是在通知栏或状态显示的消息UI。在app中通知一般用在即时通讯、音乐播放、闹钟等功能上。因此了解如何创建通知并且在多种不同配置的设备上进行适配，还有很有必要的。\n## 一、创建通知\n从Android 3.0版本开始，Android 添加了Notification.Builder相关API来帮助实现通知功能，但是对版本3.0以下的Android通知，需要通过v4包中的[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)类来创建通知，也是本文主要的创建通知的方式。调用[NotificationCompat.Builder.build()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#build()创建[Notification](https://developer.android.com/reference/android/app/Notification.html)对象，然后通过[NotificationManager.notify()](https://developer.android.com/reference/android/app/NotificationManager.html#notify(int, android.app.Notification)来发送通知\n\n### 1. 通知的必要元素\n通知对象必须要指定至少以下几个元素\n- 小图标，通过调用[setSmallIcon()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setSmallIcon(int)\n- 标题，通过调用[setContentTitle()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentTitle(java.lang.CharSequence)\n- 通知文本，通过调用[setContentText()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentText(java.lang.CharSequence)\n\n### 2. 其他可选的通知设置\n通知除了三个必要的元素，其他的内容设置都是可选项，可参考[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)查看相关API\n1. ）通知行为\n尽管这个是可选的，但在实际开发的过程中至少要为通知添加一个指定的行为。比如：点击通知时跳转到应用中指定的Activity等。\n通知可以提供多个Action，用来触发用户点击通知时的行为，常用方式就是跳转到应用指定页面。或者推迟闹钟、快速回复短信（需要Android 4.1及以上版本）等。在添加这些功能时，要保证应用已经实现了相应的功能。\n在创建通知时，通过[PendingIntent](https://developer.android.com/reference/android/app/PendingIntent.html)为通知指定点击时的要启动的Activity、Service或BroadcastReceiver。如下面的示例代码中，调用[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)的[setContentIntent()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent))方法设置启动Activity的PendingIntent对象，来实现点击通知跳转到指定Activity的功能\n\t```java\n\t...\n\tNotificationCompat.Builder mBuilder = \n\t    new NotificationCompat.Builder(this)\n\t        .setSmallIcon(R.drawable.notification_icon)\n\t        .setContentTitle(\"My Notification\")\n\t        .setContexttext(\"Hello World\");\n\t...\n\t// 创建启动的Activity的Intent\n\tIntent notifyIntent = new Intent(this , ResultActivity.class);\n\t// 设置Acitivity的新的空栈\n\tnotifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n\t// 创建PendingIntent\n\tPendingIntent notifyPendingIntent = \n\t    PendingIntent.getActivity(this , 0 , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);\n\t// 设置通知的ContentIntent\n\tbuilder.setContentIntent(notifyPendingIntent);\n\t// 发送通知\n\t...\n\t```\n2. ）通知优先级\n根据定义的优先级可以决定通知在通知栏中的显示位置。设置通知优先级，调用[NotificationCompat.Builder.setPriority()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int))方法，参数为NotificationCompat中[PRIORITY_MIN（-2）](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MIN)到[PRIORITY_MAX（2）](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MAX)之前的值。默认为PRIORITY_DEFAULT（0）；查看[Correctly set and manage notification priority](https://developer.android.com/design/patterns/notifications.html)，为通知设置合适的优先级。\n\n3. ）创建简单的通知\n点击通知时打开指定Actviity。\n\t```java\n\tNotificationCompat.Builder mBuilder =\n\t        new NotificationCompat.Builder(this)\n\t        .setSmallIcon(R.drawable.notification_icon)\n\t        .setContentTitle(\"My notification\")\n\t        .setContentText(\"Hello World!\");\n\t// Creates an explicit intent for an Activity in your app\n\tIntent resultIntent = new Intent(this, ResultActivity.class);\n\t\n\t// The stack builder object will contain an artificial back stack for the\n\t// started Activity.\n\t// TaskStackBuilder 为启动的Activity创建一个伪造的返回栈\n\t// 能够回到桌面\n\tTaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n\t// 为Intent添加伪造返回栈\n\tstackBuilder.addParentStack(ResultActivity.class);\n\t// Adds the Intent that starts the Activity to the top of the stack\n\tstackBuilder.addNextIntent(resultIntent);\n\tPendingIntent resultPendingIntent =\n\t        stackBuilder.getPendingIntent(\n\t            0,\n\t            PendingIntent.FLAG_UPDATE_CURRENT\n\t        );\n\tmBuilder.setContentIntent(resultPendingIntent);\n\tNotificationManager mNotificationManager =\n\t    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\t// id可以更新Notification\n\tmNotificationManager.notify(mId, mBuilder.build());\n\t```\n### 2. 应用扩展布局\n先创建带有普通视图的NotificationCompat.Builder，调用Builder.setStyle()，参数为以扩展布局为对象，需要Android版本 4.1及以上，4.1之前需要做兼容性处理，参考[Handling compatibility](https://developer.android.com/guide/topics/ui/notifiers/notifications.html#Compatibility)小节。\n```java\nNotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this)\n    .setSmallIcon(R.drawable.notification_icon)\n    .setContentTitle(\"Event tracker\")\n    .setContentText(\"Events received\")\nNotificationCompat.InboxStyle inboxStyle =\n        new NotificationCompat.InboxStyle();\nString[] events = new String[6];\n// 为扩展布局设置标题\ninboxStyle.setBigContentTitle(\"Event tracker details:\");\n...\n//  添加事件到扩展布局中\nfor (int i=0; i < events.length; i++) {\n\n    inboxStyle.addLine(events[i]);\n}\n// 添加扩展布局到通知中\nmBuilder.setStyle(inBoxStyle);\n...\n// 发送通知\n...\n```\n### 3. 兼容性处理\n为了保证兼容性，使用NotificationCompat或子类来创建通知。在实现通知时，要保证以下几点\n- 保证任何版本Android系统的提供功能一致\n如：若用addAction() 提供媒体播放的停止和启动播放的控件，要先在应用的Activity中实现此控件。\n- 保证通知点击启动Activity来获取Activity中的功能，需要为跳转的Activity创建PendingIntent。\n- 如果需要扩展通知功能，保证所有的功能在点击通知时启动的Activity中可用。\n\n## 二、管理通知\n在多次发出同一类型的通知时，应该避免创建新的通知。可以更改之前的通知的值或添加值来更新通知。\n如：Gmail通过增加未读消息计数并将没封电子邮件的摘要添加到通知，来通知用户新的电子邮件。（这个本成为\"堆叠\"通知。）\n\n### 1. 更新通知\n为了保证通知设置能够更新，通过调用NotificationManager.notify()发出带有ID的通知。为了能够让之前发送通知更新，需要更新或创建一个`NotificationCompat.Builder`，构建`Notification`对象，在调用notify方法时保证ID与之前一致。如果之前发送的通知仍可见，则系统根据新的Notificaiton对象来更新之前通知，否则在界面上创建一个新的通知。\n下面展示如何更新通知\n```java\nmNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n// 设置ID\nint notifyID = 1;\nmNotifyBuilder = new NotificationCompat.Builder(this)\n        .setSmallIcon(R.drawable.ic_notify_status)\n        .setContentTitle(\"New Message\")\n        .setContentText(\"You've received new messages\");\n// 未读消息数量\nnumMessages = 0;\n// 开启数据处理和通知用户的循环\n...\n// 用相同ID进行通知更新操作\nmNotifyBuilder.setContentText(currentText)\n        .setNumer(++numMessages);\n// 发出通知\nmNotificationManager.notify(notifyID , mNotifyBuilder.build());\n...\n```\n### 2. 删除通知\n在一下几种情况下，通知会被删除\n- 用户通过`全部清除`清除通知（如果通知可以清除时）。当调用Builder的setOnGoing(true)时，可以让通知不会被`全部清除`操作清除掉。\n- 用户点击了通知并且在创建通知时调用了[setAutoCancel()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setAutoCancel(boolean);\n- 针对特定的通知ID调用了[cancel()](https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int)，cancel()还会删除当前通知。\n- 调用了[cancelAll()](https://developer.android.com/reference/android/app/NotificationManager.html#cancelAll()方法，将删除之前发出的所有通知。\n\n## 三、启动Activity时保存导航顺序\n从通知启动Activity时，要保证用户的导航顺序。从通知启动的Activity返回时，用户应该回到应用的正常工作流程界面。因此应该要在全新的任务中来启动Activity并根据启动的Activity要求来设置PendingIntent。\n-  常规Activity。\n常规的Activity作为应用中正常的工作流的一部分。则需要PendingIntent应该启动新的任务创建新的任务栈。\n如：Gmail在点击新的电子邮件的通知时，跳转到消息详情界面。点击返回时，则回到之前的界面。\n-  特定Activity\n仅在从通知启动时，才会显示的Activity。对于这种情况，PendingIntent需要设置启动的任务为新的任务栈，因为启动的Activity不是应用Activity的流程的一部分，所以不需要创建返回栈。\n\n### 1. 设置常规Activity的PendingIntent\n1）. 在AndroidManifest 文件中定义Activity的层次结构\n- 支持Android 4.0.3及更低版本。为Activity添加<meta-data>元素为Activity指定Parent，\n```xml\n     <meta-data\n        android:name=\"android.support.PARENT_ACTIVITY\"\n        android:value=\".MainActivity\"/>\n```\n- 支持Android4.1及更高版本。为Activity的activity标签添加android:parentActivityName属性。\n最终的xml文件应该是这样的：\n```xml\n<activity\n    android:name=\".MainActivity\"\n    android:label=\"@string/app_name\" >\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n<activity\n    android:name=\".ResultActivity\"\n    android:parentActivityName=\".MainActivity\">\n    <meta-data\n        android:name=\"android.support.PARENT_ACTIVITY\"\n        android:value=\".MainActivity\"/>\n</activity>\n```\n2）. 为Activity的Intent创建返回栈\n\na. 创建启动Activity的Intent对象\nb. 调用[TaskStackBuilder.create()](https://developer.android.com/reference/android/app/TaskStackBuilder.html#create(android.content.Context)创建栈构造器\nc. 调用[addParentStack()](https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addParentStack(android.app.Activity)将返回栈添加到栈构造中。对于在Manifest中定义的每个Activity，返回栈含有启动Activity的Intent对象。这个方法还会在新任务中启动栈的标志。\n\n>注：尽管addParentStack()的参数是启动Activity的引用，但是方法不会添加启动Activity的Intent对象，而是在接下来的步骤中\n\nd. 为通知添加启动Activity的Intent，通过调用[addNextIntent()](https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addNextIntent(android.content.Intent)方法。使用第一步创建的Intent对象来作为参数\ne. 必要情况时调用[TaskStackBuilder.editIntentAt()](https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#editIntentAt(int)为Intent设置参数。有时对于需要保证目标Activity显示有意义的数据。\nf. 调用getPendingIntent()获得一个PendingIntent对象，使用这个PengdingIntent对象作为方法setContentIntent()的参数。\n```java\n// a. 创建启动Activity的Intent对象\nIntent resultIntent = new Intent(this , ResultActivity.class);\n// b. 创建栈构造器\nTaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n// c. 添加到栈构造器中\nstackBuilder.addParentStack(ResultActivity.class);\n// d. 添加Intent到栈顶\nstackBuilder.addNextIntent(resultIntent);\n// f. 获取含有整个返回栈的PendingIntent\nPendingIntent resultPendingIntent = stackBuilder.getPengdingIntent(0 , PengdingIntent.FLAG_UPDATE_CURRENT);\n...\nNotificationCompat.Builder builder = new NotificationCompat.Buidler(this);\nbuilder.setContentIntent(resultPendingIntent);\nNotificationManager mNotificationManager = \n    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n// 发送通知\nmNotificationManager.notify(id , builder.build());\n```\n### 2. 设置特定的Activity PendingIntent\n特定的Activity不需要返回栈，所以不需要在Manifest文件中定义Activity的属性同时也不需要调用`addParentStack()`来创建返回栈。但是要为Activity设定Activity的任务栈信息。调用getActivity()方法创建PengdingIntent。\n1） 在Manifest中，为Activity的activity元素添加以下属性\n- `android:name=\"activityclass\"`\n\tactivity的类名全称\n- `android:taskAffinity=\"\"` 任务相关性\n\t与FLAG_ACTIVITY_NEW_TASK标志位联合使用，保证Activity不会进入应用的默认任务栈。\n- `android:excludeFromRecents=\"true\"`\n\t排除最近的新任务栈，用户无法意外返回到栈中。\n```xml\n<activity\n    android:name=\".ResultActivity\"\n    ...\n    android:launchMode=\"singleTask\"         // singleTask启动模式\n    android:taskAffinity=\"\"                            // 任务相关性\n    android:excludeFromRecents=\"true\"      \n</activity>\n...\n```\n2）构建和发送通知\n- 创建启动Activity的Intent对象\n- 设置Activity的标志位：在一个新的、空的任务栈中启动。调用[setFlags()](https://developer.android.com/reference/android/content/Intent.html#setFlags(int))方法来设置标志位：[FLAG_ACTIVITY_NEW_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK) 和 [FLAG_ACTIVITY_CLEAR_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TASK)\n- 设置Intent的可选参数，如需要传递的参数等。\n- 调用`PendingIntent`的[getActivity()](https://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int))方法创建PendingIntent，使用Builder [setContentIntent](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent))调用创建的PendingIntent对象。\n```java\n// 初始化Builder对象\nNotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n// 创建启动的Activity的Intent\nIntent notifyIntent = new Intent(this , ResultActivity.class);\n// 设置Acitivity的新的空栈\nnotifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n// 创建PendingIntent\nPendingIntent notifyPendingIntent = \n    PendingIntent.getActivity(this , 0 , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);\n// 设置通知的ContentIntent\nbuilder.setContentIntent(notifyPendingIntent);\n// 获取到NotificationManager来发送通知\nNotificationManager mNotificationManager = \n    (NotificationManager) getSystemService(Context.NOTIFICAITON_SERVICE);\n// 发送通知\nmNotificationManager.notify(id , builder.build());\n```\n## 四、通知显示进度条\n通知栏可以用进度条来展示进行中的操作进度。如果可以知道操作的总耗时和花费的时间，使用`determinate`的状态来作为指示器。如果不能确切知道操作总长，使用`indeterminate`的状态来作为指示。\nProgress指示器一般通过`ProgressBar`来实现。Android 4.0以上调用[setProgress](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean))来显示当前的进度，之前版本则必须创建`自定义`的含有`ProgressBar`的布局\n\n### 1. 创建固定的进度指示\n显示确定的进度条，可以通过[setProgress(max , progress , `false`)](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean))来为通知添加进度。在处理进度时，来通知进度变化，更新通知栏。操作结束时，进度应该到最大值，常用的方式是调用setProgress()，设定值为`100`。\n在操作结束时保留进度条或移除进度条根据业务需求。或者更新进度条的文字来表示操作完成。移除进度条通过调用[setProgress(0, 0, `false`)](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean)的方式\n```java\n...\nmNotificationManager = (NotificationManager)getSystemSerivce(Context.NOTIFICATION_SERVICE);\nmBuilder =  new NotificationCompat.Builder(this);\nmBuilder.setContentTitle(\"Picture DownLoad\")\n    .setContentText(\"Download in progress\");\n    .setSmallIcon(R.drawable.ic_notification);\n// 在后台线程开启图片下载操作\nnew Thread( new Runnable(){\n    @Override\n    public void run(){\n        int incr;\n        for(incr = 0 ; incr <= 100 ; incr += 5){\n            // 设定进度，显示当前进度。\n            mBuilder.setProgress(100 , incr , false);\n            // 第一次显示进度\n            mNotiifcationManager.notifiy(0 , mBuilder.build());\n            // 设置线程sleep时间，模拟耗时操作\n            try{\n                Thread.sleep(5 * 1000);\n            } catch (InterruptedException e) {\n                Log.d(TAG , \"sleep failure\");\n            }\n        }\n\t\t// 循环结束后，更新通知\n        mBuilder.setContentText(\"Download complete\");\n            .setProgress(0 , 0, false);                    // 移除进度\n        mNotificationManager.notify(ID , mBuilder.build());\n        }\n}).start();\n```\n### 2. 显示加载中的指示器\n通过[setProgress( 0 , 0 , `true`)](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean)方法来为通知栏添加进行中的操作（前两个参数忽略）。指示样式与进度条类似，但是没有进度指示。\n在操作开始时发送通知来显示动画，直到修改通知停止动画。调用setProgress(0 , 0 , `false`)来移除状态指示，通知记住要修改通知栏的文本表示操作结束。\n```java\n// 明确进度时\nmBuilder.setProgress(100 , incr , false);\nmNotifyManager.notify(0 , mBuilder.build());\n// OR 非明确的进度指示\nmBuilder.setProgress(0 , 0 , true);\n// 发送通知\nmNotifyManager.notify(0 , mBuilder.build());\n```\n## 五、通知的Metadata 属性\n通知可以通过matadata属性来进行排序。可以通过[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)方法来关联metadata属性\n- [setCategory](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setCategory(java.lang.String)\n\t在设备设置了优先级时，如何显示处理通知（如：app会有未接来电、即时消息和闹钟三种通知）。\n- [setPriority](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int)\n\t设置了在`PRIORITY_MAX`和`PRIORITY_HIGH`之间值并且设置了声效或震动时的通知时则会在以浮动通知出现\n- [addPerson](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addPerson(java.lang.String)\n\t允许添加要通知的人的列表。app可以通过这个方法来告诉系统是否把指定的人的消息通知进行聚合处理或按照重要程度来对通知进行等级排序。\n\n## 六、悬浮的通知。\n从Android 5.0（API LEVEL 21）开始，通知可以通过一个小的浮动窗口显示（也被成为悬浮通知）在设备处于活动状态时（也就是设备为锁定并屏幕处于点亮状态）。这些通知显示效果与你的通知形式相似，但是会带有行为按钮。用户可以打开、关闭通知而无需离开当前app。\n使用到悬浮通知的情景：\n- 用户处于全屏模式\n- 或通知处于高优先级且使用了铃声或震动。\n\n## 七、锁屏通知\n在Android 5.0及以上版本，可以在锁屏页面来显示通知。使用这个特性来提供媒体播放控制和其他常用的操作。用户可以选择是否在锁屏页来显示通知。\n### 1. 设置可见\napp可以控制安全锁屏页面通知的显示的细节。调用setVisibility()指定下面的值\n- [VISIBILITY_PUBLIC](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_PUBLIC) 显示通知的全部内容\n- [VISIBILITY_SECRET](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET) 不在锁屏页显示通知任何内容\n- [VISIBILITY_PROVATE](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET) 只显示基本信息，如通知图标、标题。隐藏通知全部内容。\n当使用`VISIBILITY_PRIVATE`，可以提供一个通知内容可选的版本来隐藏一些细节。比如：SMS app 可能需要展示通知来显示`你有三个新消息`，但是隐藏消息的具体内容和发件人。提供这样的可选择内容的通知，首先需要用NotificationCompat.Builder创建通知，当创建私有通知对象时，调用·setPublicVersion()`方法添加通知的替代部分。\n\n### 2. 控制媒体的播放\n在Android 5.0 显示媒体媒体控制不再基于[RemoteControlClient](https://developer.android.com/reference/android/media/RemoteControlClient.html)。作为替代使用[Notification.MediaStyle](https://developer.android.com/reference/android/app/Notification.MediaStyle.html)的模板，调用[addAction](https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action))方法来转换操作为可点击的图标。\n\n>注：这个模板和addAction方法不包含在support库中，所以只适应于Android 5.0及更高的版本。\n\n要在Android 5.0上在锁屏页显示媒体播放控制，设置visibility属性为如上描述的VISIBILITY_PUBLIC。然后添加actions并且设置Notification.MediaStyle模板。\n```java\nNotification notification = new Notification.Builder(context).setVisibility(Notification.VISIBILITY_PUBLIC)\n    .setSmallIcon(R.drawable.ic_stat_player)\n    .addAction(R.drawable.ic_prev , \"Previous\" , prevPendingIntent)\n    .addAction(R.drawable.ic_pause , \"Pause\" , pausePendingIntent)\n    .addAction(R.drawable.ic_next , \"Next\" , nextPendingIntent)\n    // 应用媒体播放模板\n    .setStyle(new Notification.MediaStyle())\n    .setShowActionsInCompactView(1)   // 暂停按钮\n    .setMediaSession(mMediaSession.getSessionToken())\n    .setContextTitle(\"Wonderfule music\")\n    .setContextText(\"My Awesome Band\")\n    .setLargeIcon(albumArtBitmap)\n    .build();\n```\n>注：RemoteControlClient已经废弃。查看[Media Playback Control](https://developer.android.com/about/versions/android-5.0.html#MediaPlaybackControl)更多关于管理Media和控制播放的新的API\n\n## 八、自定义通知布局\n可以用[RemoteView](https://developer.android.com/reference/android/widget/RemoteViews.html)对象来创建自定义通知。自定义通知布局类似于正常的通知，但是基于定义在xml布局文件的RemoteView对象。\n\n自定义通知布局的高度依赖于通知View的高度。常规view布局高度限制为`64dp`，可扩展的View布局限制为`256dp`。\n定义自定义通知布局通过inflate xml布局文件创建的RemoteView对象。然后不是通过调用类似setContentTitle()和setContent()方法而是在布局文件中设定内容详情，使用RemoteView中的方法设定View子布局的值。\n\n1. 为通知创建一个独立的XML文件。可以任意命名文件，但是必须是.xml格式文件。\n2. 在app中，使用RemoteView方法来定义通知的图标和文字。将RemoteView对象添加到NotificationCompat.Builder对象，通过调用setContent()的方法。避免在RemoteView对象设置背景图片，因为文本颜色可能会与背景颜色相互冲突。\n\n`RemoteView`类同样可以很很容易在自定义的通知布局中添加`Chronometer`和ProgressBar。更多关于创建自定义通知布局的文章，查看[RemoteView](https://developer.android.com/reference/android/widget/RemoteViews.html)参考文档。\n\n>注：当你使用自定义通知布局时，需要考虑到自定义布局在不同设备展示的问题，因为通知栏的空间有很多限制，尽量保证自定义布局简单化并在多种配置设备进行测试。\n\n## 九、自定义通知文本使用样式资源。\n保证自定义通知布局使用style资源。通知栏的背景颜色可能会因为不同设备或不同版本，显示效果不一致。所以使用样式资源来帮助你统一管理。从Android 2.3开始，系统为标准通知定义布局文本样式。如果在Android 2.3及以上版本使用相同样式，能够保证在在不同的背景下文本都是可见的。\n\n## 参考\n[Notifications](https://developer.android.com/guide/topics/ui/notifiers/notifications.html)\n\n[你应该掌握的Notification](http://blog.csdn.net/xy_nyle/article/details/19853591)\n","source":"_posts/Android：Service与Notification.md","raw":"title: Android：Notification基础\ndate: 2016-07-22 14:48:43\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529028/android/8ff23095a2a4e04af26ca63642bfdea3_b.png\ncategories: android-aosp\ntags: android-aosp\n---\n## Notification 通知\n所谓通知就是在通知栏或状态显示的消息UI。在app中通知一般用在即时通讯、音乐播放、闹钟等功能上。因此了解如何创建通知并且在多种不同配置的设备上进行适配，还有很有必要的。\n## 一、创建通知\n从Android 3.0版本开始，Android 添加了Notification.Builder相关API来帮助实现通知功能，但是对版本3.0以下的Android通知，需要通过v4包中的[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)类来创建通知，也是本文主要的创建通知的方式。调用[NotificationCompat.Builder.build()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#build()创建[Notification](https://developer.android.com/reference/android/app/Notification.html)对象，然后通过[NotificationManager.notify()](https://developer.android.com/reference/android/app/NotificationManager.html#notify(int, android.app.Notification)来发送通知\n\n### 1. 通知的必要元素\n通知对象必须要指定至少以下几个元素\n- 小图标，通过调用[setSmallIcon()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setSmallIcon(int)\n- 标题，通过调用[setContentTitle()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentTitle(java.lang.CharSequence)\n- 通知文本，通过调用[setContentText()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentText(java.lang.CharSequence)\n\n### 2. 其他可选的通知设置\n通知除了三个必要的元素，其他的内容设置都是可选项，可参考[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)查看相关API\n1. ）通知行为\n尽管这个是可选的，但在实际开发的过程中至少要为通知添加一个指定的行为。比如：点击通知时跳转到应用中指定的Activity等。\n通知可以提供多个Action，用来触发用户点击通知时的行为，常用方式就是跳转到应用指定页面。或者推迟闹钟、快速回复短信（需要Android 4.1及以上版本）等。在添加这些功能时，要保证应用已经实现了相应的功能。\n在创建通知时，通过[PendingIntent](https://developer.android.com/reference/android/app/PendingIntent.html)为通知指定点击时的要启动的Activity、Service或BroadcastReceiver。如下面的示例代码中，调用[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)的[setContentIntent()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent))方法设置启动Activity的PendingIntent对象，来实现点击通知跳转到指定Activity的功能\n\t```java\n\t...\n\tNotificationCompat.Builder mBuilder = \n\t    new NotificationCompat.Builder(this)\n\t        .setSmallIcon(R.drawable.notification_icon)\n\t        .setContentTitle(\"My Notification\")\n\t        .setContexttext(\"Hello World\");\n\t...\n\t// 创建启动的Activity的Intent\n\tIntent notifyIntent = new Intent(this , ResultActivity.class);\n\t// 设置Acitivity的新的空栈\n\tnotifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n\t// 创建PendingIntent\n\tPendingIntent notifyPendingIntent = \n\t    PendingIntent.getActivity(this , 0 , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);\n\t// 设置通知的ContentIntent\n\tbuilder.setContentIntent(notifyPendingIntent);\n\t// 发送通知\n\t...\n\t```\n2. ）通知优先级\n根据定义的优先级可以决定通知在通知栏中的显示位置。设置通知优先级，调用[NotificationCompat.Builder.setPriority()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int))方法，参数为NotificationCompat中[PRIORITY_MIN（-2）](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MIN)到[PRIORITY_MAX（2）](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MAX)之前的值。默认为PRIORITY_DEFAULT（0）；查看[Correctly set and manage notification priority](https://developer.android.com/design/patterns/notifications.html)，为通知设置合适的优先级。\n\n3. ）创建简单的通知\n点击通知时打开指定Actviity。\n\t```java\n\tNotificationCompat.Builder mBuilder =\n\t        new NotificationCompat.Builder(this)\n\t        .setSmallIcon(R.drawable.notification_icon)\n\t        .setContentTitle(\"My notification\")\n\t        .setContentText(\"Hello World!\");\n\t// Creates an explicit intent for an Activity in your app\n\tIntent resultIntent = new Intent(this, ResultActivity.class);\n\t\n\t// The stack builder object will contain an artificial back stack for the\n\t// started Activity.\n\t// TaskStackBuilder 为启动的Activity创建一个伪造的返回栈\n\t// 能够回到桌面\n\tTaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n\t// 为Intent添加伪造返回栈\n\tstackBuilder.addParentStack(ResultActivity.class);\n\t// Adds the Intent that starts the Activity to the top of the stack\n\tstackBuilder.addNextIntent(resultIntent);\n\tPendingIntent resultPendingIntent =\n\t        stackBuilder.getPendingIntent(\n\t            0,\n\t            PendingIntent.FLAG_UPDATE_CURRENT\n\t        );\n\tmBuilder.setContentIntent(resultPendingIntent);\n\tNotificationManager mNotificationManager =\n\t    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\t// id可以更新Notification\n\tmNotificationManager.notify(mId, mBuilder.build());\n\t```\n### 2. 应用扩展布局\n先创建带有普通视图的NotificationCompat.Builder，调用Builder.setStyle()，参数为以扩展布局为对象，需要Android版本 4.1及以上，4.1之前需要做兼容性处理，参考[Handling compatibility](https://developer.android.com/guide/topics/ui/notifiers/notifications.html#Compatibility)小节。\n```java\nNotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this)\n    .setSmallIcon(R.drawable.notification_icon)\n    .setContentTitle(\"Event tracker\")\n    .setContentText(\"Events received\")\nNotificationCompat.InboxStyle inboxStyle =\n        new NotificationCompat.InboxStyle();\nString[] events = new String[6];\n// 为扩展布局设置标题\ninboxStyle.setBigContentTitle(\"Event tracker details:\");\n...\n//  添加事件到扩展布局中\nfor (int i=0; i < events.length; i++) {\n\n    inboxStyle.addLine(events[i]);\n}\n// 添加扩展布局到通知中\nmBuilder.setStyle(inBoxStyle);\n...\n// 发送通知\n...\n```\n### 3. 兼容性处理\n为了保证兼容性，使用NotificationCompat或子类来创建通知。在实现通知时，要保证以下几点\n- 保证任何版本Android系统的提供功能一致\n如：若用addAction() 提供媒体播放的停止和启动播放的控件，要先在应用的Activity中实现此控件。\n- 保证通知点击启动Activity来获取Activity中的功能，需要为跳转的Activity创建PendingIntent。\n- 如果需要扩展通知功能，保证所有的功能在点击通知时启动的Activity中可用。\n\n## 二、管理通知\n在多次发出同一类型的通知时，应该避免创建新的通知。可以更改之前的通知的值或添加值来更新通知。\n如：Gmail通过增加未读消息计数并将没封电子邮件的摘要添加到通知，来通知用户新的电子邮件。（这个本成为\"堆叠\"通知。）\n\n### 1. 更新通知\n为了保证通知设置能够更新，通过调用NotificationManager.notify()发出带有ID的通知。为了能够让之前发送通知更新，需要更新或创建一个`NotificationCompat.Builder`，构建`Notification`对象，在调用notify方法时保证ID与之前一致。如果之前发送的通知仍可见，则系统根据新的Notificaiton对象来更新之前通知，否则在界面上创建一个新的通知。\n下面展示如何更新通知\n```java\nmNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n// 设置ID\nint notifyID = 1;\nmNotifyBuilder = new NotificationCompat.Builder(this)\n        .setSmallIcon(R.drawable.ic_notify_status)\n        .setContentTitle(\"New Message\")\n        .setContentText(\"You've received new messages\");\n// 未读消息数量\nnumMessages = 0;\n// 开启数据处理和通知用户的循环\n...\n// 用相同ID进行通知更新操作\nmNotifyBuilder.setContentText(currentText)\n        .setNumer(++numMessages);\n// 发出通知\nmNotificationManager.notify(notifyID , mNotifyBuilder.build());\n...\n```\n### 2. 删除通知\n在一下几种情况下，通知会被删除\n- 用户通过`全部清除`清除通知（如果通知可以清除时）。当调用Builder的setOnGoing(true)时，可以让通知不会被`全部清除`操作清除掉。\n- 用户点击了通知并且在创建通知时调用了[setAutoCancel()](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setAutoCancel(boolean);\n- 针对特定的通知ID调用了[cancel()](https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int)，cancel()还会删除当前通知。\n- 调用了[cancelAll()](https://developer.android.com/reference/android/app/NotificationManager.html#cancelAll()方法，将删除之前发出的所有通知。\n\n## 三、启动Activity时保存导航顺序\n从通知启动Activity时，要保证用户的导航顺序。从通知启动的Activity返回时，用户应该回到应用的正常工作流程界面。因此应该要在全新的任务中来启动Activity并根据启动的Activity要求来设置PendingIntent。\n-  常规Activity。\n常规的Activity作为应用中正常的工作流的一部分。则需要PendingIntent应该启动新的任务创建新的任务栈。\n如：Gmail在点击新的电子邮件的通知时，跳转到消息详情界面。点击返回时，则回到之前的界面。\n-  特定Activity\n仅在从通知启动时，才会显示的Activity。对于这种情况，PendingIntent需要设置启动的任务为新的任务栈，因为启动的Activity不是应用Activity的流程的一部分，所以不需要创建返回栈。\n\n### 1. 设置常规Activity的PendingIntent\n1）. 在AndroidManifest 文件中定义Activity的层次结构\n- 支持Android 4.0.3及更低版本。为Activity添加<meta-data>元素为Activity指定Parent，\n```xml\n     <meta-data\n        android:name=\"android.support.PARENT_ACTIVITY\"\n        android:value=\".MainActivity\"/>\n```\n- 支持Android4.1及更高版本。为Activity的activity标签添加android:parentActivityName属性。\n最终的xml文件应该是这样的：\n```xml\n<activity\n    android:name=\".MainActivity\"\n    android:label=\"@string/app_name\" >\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n<activity\n    android:name=\".ResultActivity\"\n    android:parentActivityName=\".MainActivity\">\n    <meta-data\n        android:name=\"android.support.PARENT_ACTIVITY\"\n        android:value=\".MainActivity\"/>\n</activity>\n```\n2）. 为Activity的Intent创建返回栈\n\na. 创建启动Activity的Intent对象\nb. 调用[TaskStackBuilder.create()](https://developer.android.com/reference/android/app/TaskStackBuilder.html#create(android.content.Context)创建栈构造器\nc. 调用[addParentStack()](https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addParentStack(android.app.Activity)将返回栈添加到栈构造中。对于在Manifest中定义的每个Activity，返回栈含有启动Activity的Intent对象。这个方法还会在新任务中启动栈的标志。\n\n>注：尽管addParentStack()的参数是启动Activity的引用，但是方法不会添加启动Activity的Intent对象，而是在接下来的步骤中\n\nd. 为通知添加启动Activity的Intent，通过调用[addNextIntent()](https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addNextIntent(android.content.Intent)方法。使用第一步创建的Intent对象来作为参数\ne. 必要情况时调用[TaskStackBuilder.editIntentAt()](https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#editIntentAt(int)为Intent设置参数。有时对于需要保证目标Activity显示有意义的数据。\nf. 调用getPendingIntent()获得一个PendingIntent对象，使用这个PengdingIntent对象作为方法setContentIntent()的参数。\n```java\n// a. 创建启动Activity的Intent对象\nIntent resultIntent = new Intent(this , ResultActivity.class);\n// b. 创建栈构造器\nTaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n// c. 添加到栈构造器中\nstackBuilder.addParentStack(ResultActivity.class);\n// d. 添加Intent到栈顶\nstackBuilder.addNextIntent(resultIntent);\n// f. 获取含有整个返回栈的PendingIntent\nPendingIntent resultPendingIntent = stackBuilder.getPengdingIntent(0 , PengdingIntent.FLAG_UPDATE_CURRENT);\n...\nNotificationCompat.Builder builder = new NotificationCompat.Buidler(this);\nbuilder.setContentIntent(resultPendingIntent);\nNotificationManager mNotificationManager = \n    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n// 发送通知\nmNotificationManager.notify(id , builder.build());\n```\n### 2. 设置特定的Activity PendingIntent\n特定的Activity不需要返回栈，所以不需要在Manifest文件中定义Activity的属性同时也不需要调用`addParentStack()`来创建返回栈。但是要为Activity设定Activity的任务栈信息。调用getActivity()方法创建PengdingIntent。\n1） 在Manifest中，为Activity的activity元素添加以下属性\n- `android:name=\"activityclass\"`\n\tactivity的类名全称\n- `android:taskAffinity=\"\"` 任务相关性\n\t与FLAG_ACTIVITY_NEW_TASK标志位联合使用，保证Activity不会进入应用的默认任务栈。\n- `android:excludeFromRecents=\"true\"`\n\t排除最近的新任务栈，用户无法意外返回到栈中。\n```xml\n<activity\n    android:name=\".ResultActivity\"\n    ...\n    android:launchMode=\"singleTask\"         // singleTask启动模式\n    android:taskAffinity=\"\"                            // 任务相关性\n    android:excludeFromRecents=\"true\"      \n</activity>\n...\n```\n2）构建和发送通知\n- 创建启动Activity的Intent对象\n- 设置Activity的标志位：在一个新的、空的任务栈中启动。调用[setFlags()](https://developer.android.com/reference/android/content/Intent.html#setFlags(int))方法来设置标志位：[FLAG_ACTIVITY_NEW_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK) 和 [FLAG_ACTIVITY_CLEAR_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TASK)\n- 设置Intent的可选参数，如需要传递的参数等。\n- 调用`PendingIntent`的[getActivity()](https://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int))方法创建PendingIntent，使用Builder [setContentIntent](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent))调用创建的PendingIntent对象。\n```java\n// 初始化Builder对象\nNotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n// 创建启动的Activity的Intent\nIntent notifyIntent = new Intent(this , ResultActivity.class);\n// 设置Acitivity的新的空栈\nnotifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n// 创建PendingIntent\nPendingIntent notifyPendingIntent = \n    PendingIntent.getActivity(this , 0 , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);\n// 设置通知的ContentIntent\nbuilder.setContentIntent(notifyPendingIntent);\n// 获取到NotificationManager来发送通知\nNotificationManager mNotificationManager = \n    (NotificationManager) getSystemService(Context.NOTIFICAITON_SERVICE);\n// 发送通知\nmNotificationManager.notify(id , builder.build());\n```\n## 四、通知显示进度条\n通知栏可以用进度条来展示进行中的操作进度。如果可以知道操作的总耗时和花费的时间，使用`determinate`的状态来作为指示器。如果不能确切知道操作总长，使用`indeterminate`的状态来作为指示。\nProgress指示器一般通过`ProgressBar`来实现。Android 4.0以上调用[setProgress](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean))来显示当前的进度，之前版本则必须创建`自定义`的含有`ProgressBar`的布局\n\n### 1. 创建固定的进度指示\n显示确定的进度条，可以通过[setProgress(max , progress , `false`)](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean))来为通知添加进度。在处理进度时，来通知进度变化，更新通知栏。操作结束时，进度应该到最大值，常用的方式是调用setProgress()，设定值为`100`。\n在操作结束时保留进度条或移除进度条根据业务需求。或者更新进度条的文字来表示操作完成。移除进度条通过调用[setProgress(0, 0, `false`)](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean)的方式\n```java\n...\nmNotificationManager = (NotificationManager)getSystemSerivce(Context.NOTIFICATION_SERVICE);\nmBuilder =  new NotificationCompat.Builder(this);\nmBuilder.setContentTitle(\"Picture DownLoad\")\n    .setContentText(\"Download in progress\");\n    .setSmallIcon(R.drawable.ic_notification);\n// 在后台线程开启图片下载操作\nnew Thread( new Runnable(){\n    @Override\n    public void run(){\n        int incr;\n        for(incr = 0 ; incr <= 100 ; incr += 5){\n            // 设定进度，显示当前进度。\n            mBuilder.setProgress(100 , incr , false);\n            // 第一次显示进度\n            mNotiifcationManager.notifiy(0 , mBuilder.build());\n            // 设置线程sleep时间，模拟耗时操作\n            try{\n                Thread.sleep(5 * 1000);\n            } catch (InterruptedException e) {\n                Log.d(TAG , \"sleep failure\");\n            }\n        }\n\t\t// 循环结束后，更新通知\n        mBuilder.setContentText(\"Download complete\");\n            .setProgress(0 , 0, false);                    // 移除进度\n        mNotificationManager.notify(ID , mBuilder.build());\n        }\n}).start();\n```\n### 2. 显示加载中的指示器\n通过[setProgress( 0 , 0 , `true`)](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean)方法来为通知栏添加进行中的操作（前两个参数忽略）。指示样式与进度条类似，但是没有进度指示。\n在操作开始时发送通知来显示动画，直到修改通知停止动画。调用setProgress(0 , 0 , `false`)来移除状态指示，通知记住要修改通知栏的文本表示操作结束。\n```java\n// 明确进度时\nmBuilder.setProgress(100 , incr , false);\nmNotifyManager.notify(0 , mBuilder.build());\n// OR 非明确的进度指示\nmBuilder.setProgress(0 , 0 , true);\n// 发送通知\nmNotifyManager.notify(0 , mBuilder.build());\n```\n## 五、通知的Metadata 属性\n通知可以通过matadata属性来进行排序。可以通过[NotificationCompat.Builder](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html)方法来关联metadata属性\n- [setCategory](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setCategory(java.lang.String)\n\t在设备设置了优先级时，如何显示处理通知（如：app会有未接来电、即时消息和闹钟三种通知）。\n- [setPriority](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int)\n\t设置了在`PRIORITY_MAX`和`PRIORITY_HIGH`之间值并且设置了声效或震动时的通知时则会在以浮动通知出现\n- [addPerson](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addPerson(java.lang.String)\n\t允许添加要通知的人的列表。app可以通过这个方法来告诉系统是否把指定的人的消息通知进行聚合处理或按照重要程度来对通知进行等级排序。\n\n## 六、悬浮的通知。\n从Android 5.0（API LEVEL 21）开始，通知可以通过一个小的浮动窗口显示（也被成为悬浮通知）在设备处于活动状态时（也就是设备为锁定并屏幕处于点亮状态）。这些通知显示效果与你的通知形式相似，但是会带有行为按钮。用户可以打开、关闭通知而无需离开当前app。\n使用到悬浮通知的情景：\n- 用户处于全屏模式\n- 或通知处于高优先级且使用了铃声或震动。\n\n## 七、锁屏通知\n在Android 5.0及以上版本，可以在锁屏页面来显示通知。使用这个特性来提供媒体播放控制和其他常用的操作。用户可以选择是否在锁屏页来显示通知。\n### 1. 设置可见\napp可以控制安全锁屏页面通知的显示的细节。调用setVisibility()指定下面的值\n- [VISIBILITY_PUBLIC](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_PUBLIC) 显示通知的全部内容\n- [VISIBILITY_SECRET](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET) 不在锁屏页显示通知任何内容\n- [VISIBILITY_PROVATE](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET) 只显示基本信息，如通知图标、标题。隐藏通知全部内容。\n当使用`VISIBILITY_PRIVATE`，可以提供一个通知内容可选的版本来隐藏一些细节。比如：SMS app 可能需要展示通知来显示`你有三个新消息`，但是隐藏消息的具体内容和发件人。提供这样的可选择内容的通知，首先需要用NotificationCompat.Builder创建通知，当创建私有通知对象时，调用·setPublicVersion()`方法添加通知的替代部分。\n\n### 2. 控制媒体的播放\n在Android 5.0 显示媒体媒体控制不再基于[RemoteControlClient](https://developer.android.com/reference/android/media/RemoteControlClient.html)。作为替代使用[Notification.MediaStyle](https://developer.android.com/reference/android/app/Notification.MediaStyle.html)的模板，调用[addAction](https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action))方法来转换操作为可点击的图标。\n\n>注：这个模板和addAction方法不包含在support库中，所以只适应于Android 5.0及更高的版本。\n\n要在Android 5.0上在锁屏页显示媒体播放控制，设置visibility属性为如上描述的VISIBILITY_PUBLIC。然后添加actions并且设置Notification.MediaStyle模板。\n```java\nNotification notification = new Notification.Builder(context).setVisibility(Notification.VISIBILITY_PUBLIC)\n    .setSmallIcon(R.drawable.ic_stat_player)\n    .addAction(R.drawable.ic_prev , \"Previous\" , prevPendingIntent)\n    .addAction(R.drawable.ic_pause , \"Pause\" , pausePendingIntent)\n    .addAction(R.drawable.ic_next , \"Next\" , nextPendingIntent)\n    // 应用媒体播放模板\n    .setStyle(new Notification.MediaStyle())\n    .setShowActionsInCompactView(1)   // 暂停按钮\n    .setMediaSession(mMediaSession.getSessionToken())\n    .setContextTitle(\"Wonderfule music\")\n    .setContextText(\"My Awesome Band\")\n    .setLargeIcon(albumArtBitmap)\n    .build();\n```\n>注：RemoteControlClient已经废弃。查看[Media Playback Control](https://developer.android.com/about/versions/android-5.0.html#MediaPlaybackControl)更多关于管理Media和控制播放的新的API\n\n## 八、自定义通知布局\n可以用[RemoteView](https://developer.android.com/reference/android/widget/RemoteViews.html)对象来创建自定义通知。自定义通知布局类似于正常的通知，但是基于定义在xml布局文件的RemoteView对象。\n\n自定义通知布局的高度依赖于通知View的高度。常规view布局高度限制为`64dp`，可扩展的View布局限制为`256dp`。\n定义自定义通知布局通过inflate xml布局文件创建的RemoteView对象。然后不是通过调用类似setContentTitle()和setContent()方法而是在布局文件中设定内容详情，使用RemoteView中的方法设定View子布局的值。\n\n1. 为通知创建一个独立的XML文件。可以任意命名文件，但是必须是.xml格式文件。\n2. 在app中，使用RemoteView方法来定义通知的图标和文字。将RemoteView对象添加到NotificationCompat.Builder对象，通过调用setContent()的方法。避免在RemoteView对象设置背景图片，因为文本颜色可能会与背景颜色相互冲突。\n\n`RemoteView`类同样可以很很容易在自定义的通知布局中添加`Chronometer`和ProgressBar。更多关于创建自定义通知布局的文章，查看[RemoteView](https://developer.android.com/reference/android/widget/RemoteViews.html)参考文档。\n\n>注：当你使用自定义通知布局时，需要考虑到自定义布局在不同设备展示的问题，因为通知栏的空间有很多限制，尽量保证自定义布局简单化并在多种配置设备进行测试。\n\n## 九、自定义通知文本使用样式资源。\n保证自定义通知布局使用style资源。通知栏的背景颜色可能会因为不同设备或不同版本，显示效果不一致。所以使用样式资源来帮助你统一管理。从Android 2.3开始，系统为标准通知定义布局文本样式。如果在Android 2.3及以上版本使用相同样式，能够保证在在不同的背景下文本都是可见的。\n\n## 参考\n[Notifications](https://developer.android.com/guide/topics/ui/notifiers/notifications.html)\n\n[你应该掌握的Notification](http://blog.csdn.net/xy_nyle/article/details/19853591)\n","slug":"Android：Service与Notification","published":1,"updated":"2016-07-30T09:51:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txz000ggrm3e2zv7m8n","content":"<h2 id=\"Notification-通知\"><a href=\"#Notification-通知\" class=\"headerlink\" title=\"Notification 通知\"></a>Notification 通知</h2><p>所谓通知就是在通知栏或状态显示的消息UI。在app中通知一般用在即时通讯、音乐播放、闹钟等功能上。因此了解如何创建通知并且在多种不同配置的设备上进行适配，还有很有必要的。</p>\n<h2 id=\"一、创建通知\"><a href=\"#一、创建通知\" class=\"headerlink\" title=\"一、创建通知\"></a>一、创建通知</h2><p>从Android 3.0版本开始，Android 添加了Notification.Builder相关API来帮助实现通知功能，但是对版本3.0以下的Android通知，需要通过v4包中的<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>类来创建通知，也是本文主要的创建通知的方式。调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#build(\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder.build()</a>创建<a href=\"https://developer.android.com/reference/android/app/Notification.html\" target=\"_blank\" rel=\"external\">Notification</a>对象，然后通过<a href=\"https://developer.android.com/reference/android/app/NotificationManager.html#notify(int, android.app.Notification\" target=\"_blank\" rel=\"external\">NotificationManager.notify()</a>来发送通知</p>\n<h3 id=\"1-通知的必要元素\"><a href=\"#1-通知的必要元素\" class=\"headerlink\" title=\"1. 通知的必要元素\"></a>1. 通知的必要元素</h3><p>通知对象必须要指定至少以下几个元素</p>\n<ul>\n<li>小图标，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setSmallIcon(int\" target=\"_blank\" rel=\"external\">setSmallIcon()</a></li>\n<li>标题，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentTitle(java.lang.CharSequence\" target=\"_blank\" rel=\"external\">setContentTitle()</a></li>\n<li>通知文本，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentText(java.lang.CharSequence\" target=\"_blank\" rel=\"external\">setContentText()</a></li>\n</ul>\n<h3 id=\"2-其他可选的通知设置\"><a href=\"#2-其他可选的通知设置\" class=\"headerlink\" title=\"2. 其他可选的通知设置\"></a>2. 其他可选的通知设置</h3><p>通知除了三个必要的元素，其他的内容设置都是可选项，可参考<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>查看相关API</p>\n<ol>\n<li><p>）通知行为<br>尽管这个是可选的，但在实际开发的过程中至少要为通知添加一个指定的行为。比如：点击通知时跳转到应用中指定的Activity等。<br>通知可以提供多个Action，用来触发用户点击通知时的行为，常用方式就是跳转到应用指定页面。或者推迟闹钟、快速回复短信（需要Android 4.1及以上版本）等。在添加这些功能时，要保证应用已经实现了相应的功能。<br>在创建通知时，通过<a href=\"https://developer.android.com/reference/android/app/PendingIntent.html\" target=\"_blank\" rel=\"external\">PendingIntent</a>为通知指定点击时的要启动的Activity、Service或BroadcastReceiver。如下面的示例代码中，调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>的<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent\" target=\"_blank\" rel=\"external\">setContentIntent()</a>)方法设置启动Activity的PendingIntent对象，来实现点击通知跳转到指定Activity的功能</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">NotificationCompat.Builder mBuilder = </div><div class=\"line\">    <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .setSmallIcon(R.drawable.notification_icon)</div><div class=\"line\">        .setContentTitle(<span class=\"string\">\"My Notification\"</span>)</div><div class=\"line\">        .setContexttext(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 创建启动的Activity的Intent</span></div><div class=\"line\">Intent notifyIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span> , ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// 设置Acitivity的新的空栈</span></div><div class=\"line\">notifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);</div><div class=\"line\"><span class=\"comment\">// 创建PendingIntent</span></div><div class=\"line\">PendingIntent notifyPendingIntent = </div><div class=\"line\">    PendingIntent.getActivity(<span class=\"keyword\">this</span> , <span class=\"number\">0</span> , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\"><span class=\"comment\">// 设置通知的ContentIntent</span></div><div class=\"line\">builder.setContentIntent(notifyPendingIntent);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>）通知优先级<br>根据定义的优先级可以决定通知在通知栏中的显示位置。设置通知优先级，调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder.setPriority()</a>)方法，参数为NotificationCompat中<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MIN\" target=\"_blank\" rel=\"external\">PRIORITY_MIN（-2）</a>到<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MAX\" target=\"_blank\" rel=\"external\">PRIORITY_MAX（2）</a>之前的值。默认为PRIORITY_DEFAULT（0）；查看<a href=\"https://developer.android.com/design/patterns/notifications.html\" target=\"_blank\" rel=\"external\">Correctly set and manage notification priority</a>，为通知设置合适的优先级。</p>\n</li>\n<li><p>）创建简单的通知<br>点击通知时打开指定Actviity。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationCompat.Builder mBuilder =</div><div class=\"line\">        <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .setSmallIcon(R.drawable.notification_icon)</div><div class=\"line\">        .setContentTitle(<span class=\"string\">\"My notification\"</span>)</div><div class=\"line\">        .setContentText(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\"><span class=\"comment\">// Creates an explicit intent for an Activity in your app</span></div><div class=\"line\">Intent resultIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ResultActivity.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The stack builder object will contain an artificial back stack for the</span></div><div class=\"line\"><span class=\"comment\">// started Activity.</span></div><div class=\"line\"><span class=\"comment\">// TaskStackBuilder 为启动的Activity创建一个伪造的返回栈</span></div><div class=\"line\"><span class=\"comment\">// 能够回到桌面</span></div><div class=\"line\">TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// 为Intent添加伪造返回栈</span></div><div class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack</span></div><div class=\"line\">stackBuilder.addNextIntent(resultIntent);</div><div class=\"line\">PendingIntent resultPendingIntent =</div><div class=\"line\">        stackBuilder.getPendingIntent(</div><div class=\"line\">            <span class=\"number\">0</span>,</div><div class=\"line\">            PendingIntent.FLAG_UPDATE_CURRENT</div><div class=\"line\">        );</div><div class=\"line\">mBuilder.setContentIntent(resultPendingIntent);</div><div class=\"line\">NotificationManager mNotificationManager =</div><div class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class=\"line\"><span class=\"comment\">// id可以更新Notification</span></div><div class=\"line\">mNotificationManager.notify(mId, mBuilder.build());</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-应用扩展布局\"><a href=\"#2-应用扩展布局\" class=\"headerlink\" title=\"2. 应用扩展布局\"></a>2. 应用扩展布局</h3><p>先创建带有普通视图的NotificationCompat.Builder，调用Builder.setStyle()，参数为以扩展布局为对象，需要Android版本 4.1及以上，4.1之前需要做兼容性处理，参考<a href=\"https://developer.android.com/guide/topics/ui/notifiers/notifications.html#Compatibility\" target=\"_blank\" rel=\"external\">Handling compatibility</a>小节。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationCompat.Builder mBuilder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">    .setSmallIcon(R.drawable.notification_icon)</div><div class=\"line\">    .setContentTitle(<span class=\"string\">\"Event tracker\"</span>)</div><div class=\"line\">    .setContentText(<span class=\"string\">\"Events received\"</span>)</div><div class=\"line\">NotificationCompat.InboxStyle inboxStyle =</div><div class=\"line\">        <span class=\"keyword\">new</span> NotificationCompat.InboxStyle();</div><div class=\"line\">String[] events = <span class=\"keyword\">new</span> String[<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"comment\">// 为扩展布局设置标题</span></div><div class=\"line\">inboxStyle.setBigContentTitle(<span class=\"string\">\"Event tracker details:\"</span>);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//  添加事件到扩展布局中</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; events.length; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">    inboxStyle.addLine(events[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 添加扩展布局到通知中</span></div><div class=\"line\">mBuilder.setStyle(inBoxStyle);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-兼容性处理\"><a href=\"#3-兼容性处理\" class=\"headerlink\" title=\"3. 兼容性处理\"></a>3. 兼容性处理</h3><p>为了保证兼容性，使用NotificationCompat或子类来创建通知。在实现通知时，要保证以下几点</p>\n<ul>\n<li>保证任何版本Android系统的提供功能一致<br>如：若用addAction() 提供媒体播放的停止和启动播放的控件，要先在应用的Activity中实现此控件。</li>\n<li>保证通知点击启动Activity来获取Activity中的功能，需要为跳转的Activity创建PendingIntent。</li>\n<li>如果需要扩展通知功能，保证所有的功能在点击通知时启动的Activity中可用。</li>\n</ul>\n<h2 id=\"二、管理通知\"><a href=\"#二、管理通知\" class=\"headerlink\" title=\"二、管理通知\"></a>二、管理通知</h2><p>在多次发出同一类型的通知时，应该避免创建新的通知。可以更改之前的通知的值或添加值来更新通知。<br>如：Gmail通过增加未读消息计数并将没封电子邮件的摘要添加到通知，来通知用户新的电子邮件。（这个本成为”堆叠”通知。）</p>\n<h3 id=\"1-更新通知\"><a href=\"#1-更新通知\" class=\"headerlink\" title=\"1. 更新通知\"></a>1. 更新通知</h3><p>为了保证通知设置能够更新，通过调用NotificationManager.notify()发出带有ID的通知。为了能够让之前发送通知更新，需要更新或创建一个<code>NotificationCompat.Builder</code>，构建<code>Notification</code>对象，在调用notify方法时保证ID与之前一致。如果之前发送的通知仍可见，则系统根据新的Notificaiton对象来更新之前通知，否则在界面上创建一个新的通知。<br>下面展示如何更新通知<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class=\"line\"><span class=\"comment\">// 设置ID</span></div><div class=\"line\"><span class=\"keyword\">int</span> notifyID = <span class=\"number\">1</span>;</div><div class=\"line\">mNotifyBuilder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .setSmallIcon(R.drawable.ic_notify_status)</div><div class=\"line\">        .setContentTitle(<span class=\"string\">\"New Message\"</span>)</div><div class=\"line\">        .setContentText(<span class=\"string\">\"You've received new messages\"</span>);</div><div class=\"line\"><span class=\"comment\">// 未读消息数量</span></div><div class=\"line\">numMessages = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">// 开启数据处理和通知用户的循环</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 用相同ID进行通知更新操作</span></div><div class=\"line\">mNotifyBuilder.setContentText(currentText)</div><div class=\"line\">        .setNumer(++numMessages);</div><div class=\"line\"><span class=\"comment\">// 发出通知</span></div><div class=\"line\">mNotificationManager.notify(notifyID , mNotifyBuilder.build());</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-删除通知\"><a href=\"#2-删除通知\" class=\"headerlink\" title=\"2. 删除通知\"></a>2. 删除通知</h3><p>在一下几种情况下，通知会被删除</p>\n<ul>\n<li>用户通过<code>全部清除</code>清除通知（如果通知可以清除时）。当调用Builder的setOnGoing(true)时，可以让通知不会被<code>全部清除</code>操作清除掉。</li>\n<li>用户点击了通知并且在创建通知时调用了<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setAutoCancel(boolean\" target=\"_blank\" rel=\"external\">setAutoCancel()</a>;</li>\n<li>针对特定的通知ID调用了<a href=\"https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int\" target=\"_blank\" rel=\"external\">cancel()</a>，cancel()还会删除当前通知。</li>\n<li>调用了<a href=\"https://developer.android.com/reference/android/app/NotificationManager.html#cancelAll(\" target=\"_blank\" rel=\"external\">cancelAll()</a>方法，将删除之前发出的所有通知。</li>\n</ul>\n<h2 id=\"三、启动Activity时保存导航顺序\"><a href=\"#三、启动Activity时保存导航顺序\" class=\"headerlink\" title=\"三、启动Activity时保存导航顺序\"></a>三、启动Activity时保存导航顺序</h2><p>从通知启动Activity时，要保证用户的导航顺序。从通知启动的Activity返回时，用户应该回到应用的正常工作流程界面。因此应该要在全新的任务中来启动Activity并根据启动的Activity要求来设置PendingIntent。</p>\n<ul>\n<li>常规Activity。<br>常规的Activity作为应用中正常的工作流的一部分。则需要PendingIntent应该启动新的任务创建新的任务栈。<br>如：Gmail在点击新的电子邮件的通知时，跳转到消息详情界面。点击返回时，则回到之前的界面。</li>\n<li>特定Activity<br>仅在从通知启动时，才会显示的Activity。对于这种情况，PendingIntent需要设置启动的任务为新的任务栈，因为启动的Activity不是应用Activity的流程的一部分，所以不需要创建返回栈。</li>\n</ul>\n<h3 id=\"1-设置常规Activity的PendingIntent\"><a href=\"#1-设置常规Activity的PendingIntent\" class=\"headerlink\" title=\"1. 设置常规Activity的PendingIntent\"></a>1. 设置常规Activity的PendingIntent</h3><p>1）. 在AndroidManifest 文件中定义Activity的层次结构</p>\n<ul>\n<li><p>支持Android 4.0.3及更低版本。为Activity添加<meta-data>元素为Activity指定Parent，</meta-data></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">   <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.PARENT_ACTIVITY\"</span></div><div class=\"line\">   <span class=\"attr\">android:value</span>=<span class=\"string\">\".MainActivity\"</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>支持Android4.1及更高版本。为Activity的activity标签添加android:parentActivityName属性。<br>最终的xml文件应该是这样的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".ResultActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:parentActivityName</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.PARENT_ACTIVITY\"</span></div><div class=\"line\">        <span class=\"attr\">android:value</span>=<span class=\"string\">\".MainActivity\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2）. 为Activity的Intent创建返回栈</p>\n<p>a. 创建启动Activity的Intent对象<br>b. 调用<a href=\"https://developer.android.com/reference/android/app/TaskStackBuilder.html#create(android.content.Context\" target=\"_blank\" rel=\"external\">TaskStackBuilder.create()</a>创建栈构造器<br>c. 调用<a href=\"https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addParentStack(android.app.Activity\" target=\"_blank\" rel=\"external\">addParentStack()</a>将返回栈添加到栈构造中。对于在Manifest中定义的每个Activity，返回栈含有启动Activity的Intent对象。这个方法还会在新任务中启动栈的标志。</p>\n<blockquote>\n<p>注：尽管addParentStack()的参数是启动Activity的引用，但是方法不会添加启动Activity的Intent对象，而是在接下来的步骤中</p>\n</blockquote>\n<p>d. 为通知添加启动Activity的Intent，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addNextIntent(android.content.Intent\" target=\"_blank\" rel=\"external\">addNextIntent()</a>方法。使用第一步创建的Intent对象来作为参数<br>e. 必要情况时调用<a href=\"https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#editIntentAt(int\" target=\"_blank\" rel=\"external\">TaskStackBuilder.editIntentAt()</a>为Intent设置参数。有时对于需要保证目标Activity显示有意义的数据。<br>f. 调用getPendingIntent()获得一个PendingIntent对象，使用这个PengdingIntent对象作为方法setContentIntent()的参数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// a. 创建启动Activity的Intent对象</span></div><div class=\"line\">Intent resultIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span> , ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// b. 创建栈构造器</span></div><div class=\"line\">TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// c. 添加到栈构造器中</span></div><div class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// d. 添加Intent到栈顶</span></div><div class=\"line\">stackBuilder.addNextIntent(resultIntent);</div><div class=\"line\"><span class=\"comment\">// f. 获取含有整个返回栈的PendingIntent</span></div><div class=\"line\">PendingIntent resultPendingIntent = stackBuilder.getPengdingIntent(<span class=\"number\">0</span> , PengdingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\">...</div><div class=\"line\">NotificationCompat.Builder builder = <span class=\"keyword\">new</span> NotificationCompat.Buidler(<span class=\"keyword\">this</span>);</div><div class=\"line\">builder.setContentIntent(resultPendingIntent);</div><div class=\"line\">NotificationManager mNotificationManager = </div><div class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">mNotificationManager.notify(id , builder.build());</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-设置特定的Activity-PendingIntent\"><a href=\"#2-设置特定的Activity-PendingIntent\" class=\"headerlink\" title=\"2. 设置特定的Activity PendingIntent\"></a>2. 设置特定的Activity PendingIntent</h3><p>特定的Activity不需要返回栈，所以不需要在Manifest文件中定义Activity的属性同时也不需要调用<code>addParentStack()</code>来创建返回栈。但是要为Activity设定Activity的任务栈信息。调用getActivity()方法创建PengdingIntent。<br>1） 在Manifest中，为Activity的activity元素添加以下属性</p>\n<ul>\n<li><code>android:name=&quot;activityclass&quot;</code><br>  activity的类名全称</li>\n<li><code>android:taskAffinity=&quot;&quot;</code> 任务相关性<br>  与FLAG_ACTIVITY_NEW_TASK标志位联合使用，保证Activity不会进入应用的默认任务栈。</li>\n<li><code>android:excludeFromRecents=&quot;true&quot;</code><br>  排除最近的新任务栈，用户无法意外返回到栈中。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=\".ResultActivity\"</div><div class=\"line\">    ...</div><div class=\"line\">    android:launchMode=\"singleTask\"         // singleTask启动模式</div><div class=\"line\">    android:taskAffinity=\"\"                            // 任务相关性</div><div class=\"line\">    android:excludeFromRecents=\"true\"      </div><div class=\"line\">&lt;/activity&gt;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2）构建和发送通知</p>\n<ul>\n<li>创建启动Activity的Intent对象</li>\n<li>设置Activity的标志位：在一个新的、空的任务栈中启动。调用<a href=\"https://developer.android.com/reference/android/content/Intent.html#setFlags(int\" target=\"_blank\" rel=\"external\">setFlags()</a>)方法来设置标志位：<a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_TASK</a> 和 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_CLEAR_TASK</a></li>\n<li>设置Intent的可选参数，如需要传递的参数等。</li>\n<li>调用<code>PendingIntent</code>的<a href=\"https://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int\" target=\"_blank\" rel=\"external\">getActivity()</a>)方法创建PendingIntent，使用Builder <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent\" target=\"_blank\" rel=\"external\">setContentIntent</a>)调用创建的PendingIntent对象。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化Builder对象</span></div><div class=\"line\">NotificationCompat.Builder builder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// 创建启动的Activity的Intent</span></div><div class=\"line\">Intent notifyIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span> , ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// 设置Acitivity的新的空栈</span></div><div class=\"line\">notifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);</div><div class=\"line\"><span class=\"comment\">// 创建PendingIntent</span></div><div class=\"line\">PendingIntent notifyPendingIntent = </div><div class=\"line\">    PendingIntent.getActivity(<span class=\"keyword\">this</span> , <span class=\"number\">0</span> , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\"><span class=\"comment\">// 设置通知的ContentIntent</span></div><div class=\"line\">builder.setContentIntent(notifyPendingIntent);</div><div class=\"line\"><span class=\"comment\">// 获取到NotificationManager来发送通知</span></div><div class=\"line\">NotificationManager mNotificationManager = </div><div class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICAITON_SERVICE);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">mNotificationManager.notify(id , builder.build());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"四、通知显示进度条\"><a href=\"#四、通知显示进度条\" class=\"headerlink\" title=\"四、通知显示进度条\"></a>四、通知显示进度条</h2><p>通知栏可以用进度条来展示进行中的操作进度。如果可以知道操作的总耗时和花费的时间，使用<code>determinate</code>的状态来作为指示器。如果不能确切知道操作总长，使用<code>indeterminate</code>的状态来作为指示。<br>Progress指示器一般通过<code>ProgressBar</code>来实现。Android 4.0以上调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress</a>)来显示当前的进度，之前版本则必须创建<code>自定义</code>的含有<code>ProgressBar</code>的布局</p>\n<h3 id=\"1-创建固定的进度指示\"><a href=\"#1-创建固定的进度指示\" class=\"headerlink\" title=\"1. 创建固定的进度指示\"></a>1. 创建固定的进度指示</h3><p>显示确定的进度条，可以通过<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress(max , progress , <code>false</code>)</a>)来为通知添加进度。在处理进度时，来通知进度变化，更新通知栏。操作结束时，进度应该到最大值，常用的方式是调用setProgress()，设定值为<code>100</code>。<br>在操作结束时保留进度条或移除进度条根据业务需求。或者更新进度条的文字来表示操作完成。移除进度条通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress(0, 0, <code>false</code>)</a>的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">mNotificationManager = (NotificationManager)getSystemSerivce(Context.NOTIFICATION_SERVICE);</div><div class=\"line\">mBuilder =  <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">mBuilder.setContentTitle(<span class=\"string\">\"Picture DownLoad\"</span>)</div><div class=\"line\">    .setContentText(<span class=\"string\">\"Download in progress\"</span>);</div><div class=\"line\">    .setSmallIcon(R.drawable.ic_notification);</div><div class=\"line\"><span class=\"comment\">// 在后台线程开启图片下载操作</span></div><div class=\"line\"><span class=\"keyword\">new</span> Thread( <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> incr;</div><div class=\"line\">        <span class=\"keyword\">for</span>(incr = <span class=\"number\">0</span> ; incr &lt;= <span class=\"number\">100</span> ; incr += <span class=\"number\">5</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">// 设定进度，显示当前进度。</span></div><div class=\"line\">            mBuilder.setProgress(<span class=\"number\">100</span> , incr , <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"comment\">// 第一次显示进度</span></div><div class=\"line\">            mNotiifcationManager.notifiy(<span class=\"number\">0</span> , mBuilder.build());</div><div class=\"line\">            <span class=\"comment\">// 设置线程sleep时间，模拟耗时操作</span></div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                Log.d(TAG , <span class=\"string\">\"sleep failure\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 循环结束后，更新通知</span></div><div class=\"line\">        mBuilder.setContentText(<span class=\"string\">\"Download complete\"</span>);</div><div class=\"line\">            .setProgress(<span class=\"number\">0</span> , <span class=\"number\">0</span>, <span class=\"keyword\">false</span>);                    <span class=\"comment\">// 移除进度</span></div><div class=\"line\">        mNotificationManager.notify(ID , mBuilder.build());</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;).start();</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-显示加载中的指示器\"><a href=\"#2-显示加载中的指示器\" class=\"headerlink\" title=\"2. 显示加载中的指示器\"></a>2. 显示加载中的指示器</h3><p>通过<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress( 0 , 0 , <code>true</code>)</a>方法来为通知栏添加进行中的操作（前两个参数忽略）。指示样式与进度条类似，但是没有进度指示。<br>在操作开始时发送通知来显示动画，直到修改通知停止动画。调用setProgress(0 , 0 , <code>false</code>)来移除状态指示，通知记住要修改通知栏的文本表示操作结束。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 明确进度时</span></div><div class=\"line\">mBuilder.setProgress(<span class=\"number\">100</span> , incr , <span class=\"keyword\">false</span>);</div><div class=\"line\">mNotifyManager.notify(<span class=\"number\">0</span> , mBuilder.build());</div><div class=\"line\"><span class=\"comment\">// OR 非明确的进度指示</span></div><div class=\"line\">mBuilder.setProgress(<span class=\"number\">0</span> , <span class=\"number\">0</span> , <span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">mNotifyManager.notify(<span class=\"number\">0</span> , mBuilder.build());</div></pre></td></tr></table></figure></p>\n<h2 id=\"五、通知的Metadata-属性\"><a href=\"#五、通知的Metadata-属性\" class=\"headerlink\" title=\"五、通知的Metadata 属性\"></a>五、通知的Metadata 属性</h2><p>通知可以通过matadata属性来进行排序。可以通过<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>方法来关联metadata属性</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setCategory(java.lang.String\" target=\"_blank\" rel=\"external\">setCategory</a><br>  在设备设置了优先级时，如何显示处理通知（如：app会有未接来电、即时消息和闹钟三种通知）。</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int\" target=\"_blank\" rel=\"external\">setPriority</a><br>  设置了在<code>PRIORITY_MAX</code>和<code>PRIORITY_HIGH</code>之间值并且设置了声效或震动时的通知时则会在以浮动通知出现</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addPerson(java.lang.String\" target=\"_blank\" rel=\"external\">addPerson</a><br>  允许添加要通知的人的列表。app可以通过这个方法来告诉系统是否把指定的人的消息通知进行聚合处理或按照重要程度来对通知进行等级排序。</li>\n</ul>\n<h2 id=\"六、悬浮的通知。\"><a href=\"#六、悬浮的通知。\" class=\"headerlink\" title=\"六、悬浮的通知。\"></a>六、悬浮的通知。</h2><p>从Android 5.0（API LEVEL 21）开始，通知可以通过一个小的浮动窗口显示（也被成为悬浮通知）在设备处于活动状态时（也就是设备为锁定并屏幕处于点亮状态）。这些通知显示效果与你的通知形式相似，但是会带有行为按钮。用户可以打开、关闭通知而无需离开当前app。<br>使用到悬浮通知的情景：</p>\n<ul>\n<li>用户处于全屏模式</li>\n<li>或通知处于高优先级且使用了铃声或震动。</li>\n</ul>\n<h2 id=\"七、锁屏通知\"><a href=\"#七、锁屏通知\" class=\"headerlink\" title=\"七、锁屏通知\"></a>七、锁屏通知</h2><p>在Android 5.0及以上版本，可以在锁屏页面来显示通知。使用这个特性来提供媒体播放控制和其他常用的操作。用户可以选择是否在锁屏页来显示通知。</p>\n<h3 id=\"1-设置可见\"><a href=\"#1-设置可见\" class=\"headerlink\" title=\"1. 设置可见\"></a>1. 设置可见</h3><p>app可以控制安全锁屏页面通知的显示的细节。调用setVisibility()指定下面的值</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_PUBLIC\" target=\"_blank\" rel=\"external\">VISIBILITY_PUBLIC</a> 显示通知的全部内容</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET\" target=\"_blank\" rel=\"external\">VISIBILITY_SECRET</a> 不在锁屏页显示通知任何内容</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET\" target=\"_blank\" rel=\"external\">VISIBILITY_PROVATE</a> 只显示基本信息，如通知图标、标题。隐藏通知全部内容。<br>当使用<code>VISIBILITY_PRIVATE</code>，可以提供一个通知内容可选的版本来隐藏一些细节。比如：SMS app 可能需要展示通知来显示<code>你有三个新消息</code>，但是隐藏消息的具体内容和发件人。提供这样的可选择内容的通知，首先需要用NotificationCompat.Builder创建通知，当创建私有通知对象时，调用·setPublicVersion()`方法添加通知的替代部分。</li>\n</ul>\n<h3 id=\"2-控制媒体的播放\"><a href=\"#2-控制媒体的播放\" class=\"headerlink\" title=\"2. 控制媒体的播放\"></a>2. 控制媒体的播放</h3><p>在Android 5.0 显示媒体媒体控制不再基于<a href=\"https://developer.android.com/reference/android/media/RemoteControlClient.html\" target=\"_blank\" rel=\"external\">RemoteControlClient</a>。作为替代使用<a href=\"https://developer.android.com/reference/android/app/Notification.MediaStyle.html\" target=\"_blank\" rel=\"external\">Notification.MediaStyle</a>的模板，调用<a href=\"https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action\" target=\"_blank\" rel=\"external\">addAction</a>)方法来转换操作为可点击的图标。</p>\n<blockquote>\n<p>注：这个模板和addAction方法不包含在support库中，所以只适应于Android 5.0及更高的版本。</p>\n</blockquote>\n<p>要在Android 5.0上在锁屏页显示媒体播放控制，设置visibility属性为如上描述的VISIBILITY_PUBLIC。然后添加actions并且设置Notification.MediaStyle模板。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Notification notification = <span class=\"keyword\">new</span> Notification.Builder(context).setVisibility(Notification.VISIBILITY_PUBLIC)</div><div class=\"line\">    .setSmallIcon(R.drawable.ic_stat_player)</div><div class=\"line\">    .addAction(R.drawable.ic_prev , <span class=\"string\">\"Previous\"</span> , prevPendingIntent)</div><div class=\"line\">    .addAction(R.drawable.ic_pause , <span class=\"string\">\"Pause\"</span> , pausePendingIntent)</div><div class=\"line\">    .addAction(R.drawable.ic_next , <span class=\"string\">\"Next\"</span> , nextPendingIntent)</div><div class=\"line\">    <span class=\"comment\">// 应用媒体播放模板</span></div><div class=\"line\">    .setStyle(<span class=\"keyword\">new</span> Notification.MediaStyle())</div><div class=\"line\">    .setShowActionsInCompactView(<span class=\"number\">1</span>)   <span class=\"comment\">// 暂停按钮</span></div><div class=\"line\">    .setMediaSession(mMediaSession.getSessionToken())</div><div class=\"line\">    .setContextTitle(<span class=\"string\">\"Wonderfule music\"</span>)</div><div class=\"line\">    .setContextText(<span class=\"string\">\"My Awesome Band\"</span>)</div><div class=\"line\">    .setLargeIcon(albumArtBitmap)</div><div class=\"line\">    .build();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：RemoteControlClient已经废弃。查看<a href=\"https://developer.android.com/about/versions/android-5.0.html#MediaPlaybackControl\" target=\"_blank\" rel=\"external\">Media Playback Control</a>更多关于管理Media和控制播放的新的API</p>\n</blockquote>\n<h2 id=\"八、自定义通知布局\"><a href=\"#八、自定义通知布局\" class=\"headerlink\" title=\"八、自定义通知布局\"></a>八、自定义通知布局</h2><p>可以用<a href=\"https://developer.android.com/reference/android/widget/RemoteViews.html\" target=\"_blank\" rel=\"external\">RemoteView</a>对象来创建自定义通知。自定义通知布局类似于正常的通知，但是基于定义在xml布局文件的RemoteView对象。</p>\n<p>自定义通知布局的高度依赖于通知View的高度。常规view布局高度限制为<code>64dp</code>，可扩展的View布局限制为<code>256dp</code>。<br>定义自定义通知布局通过inflate xml布局文件创建的RemoteView对象。然后不是通过调用类似setContentTitle()和setContent()方法而是在布局文件中设定内容详情，使用RemoteView中的方法设定View子布局的值。</p>\n<ol>\n<li>为通知创建一个独立的XML文件。可以任意命名文件，但是必须是.xml格式文件。</li>\n<li>在app中，使用RemoteView方法来定义通知的图标和文字。将RemoteView对象添加到NotificationCompat.Builder对象，通过调用setContent()的方法。避免在RemoteView对象设置背景图片，因为文本颜色可能会与背景颜色相互冲突。</li>\n</ol>\n<p><code>RemoteView</code>类同样可以很很容易在自定义的通知布局中添加<code>Chronometer</code>和ProgressBar。更多关于创建自定义通知布局的文章，查看<a href=\"https://developer.android.com/reference/android/widget/RemoteViews.html\" target=\"_blank\" rel=\"external\">RemoteView</a>参考文档。</p>\n<blockquote>\n<p>注：当你使用自定义通知布局时，需要考虑到自定义布局在不同设备展示的问题，因为通知栏的空间有很多限制，尽量保证自定义布局简单化并在多种配置设备进行测试。</p>\n</blockquote>\n<h2 id=\"九、自定义通知文本使用样式资源。\"><a href=\"#九、自定义通知文本使用样式资源。\" class=\"headerlink\" title=\"九、自定义通知文本使用样式资源。\"></a>九、自定义通知文本使用样式资源。</h2><p>保证自定义通知布局使用style资源。通知栏的背景颜色可能会因为不同设备或不同版本，显示效果不一致。所以使用样式资源来帮助你统一管理。从Android 2.3开始，系统为标准通知定义布局文本样式。如果在Android 2.3及以上版本使用相同样式，能够保证在在不同的背景下文本都是可见的。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.android.com/guide/topics/ui/notifiers/notifications.html\" target=\"_blank\" rel=\"external\">Notifications</a></p>\n<p><a href=\"http://blog.csdn.net/xy_nyle/article/details/19853591\" target=\"_blank\" rel=\"external\">你应该掌握的Notification</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Notification-通知\"><a href=\"#Notification-通知\" class=\"headerlink\" title=\"Notification 通知\"></a>Notification 通知</h2><p>所谓通知就是在通知栏或状态显示的消息UI。在app中通知一般用在即时通讯、音乐播放、闹钟等功能上。因此了解如何创建通知并且在多种不同配置的设备上进行适配，还有很有必要的。</p>\n<h2 id=\"一、创建通知\"><a href=\"#一、创建通知\" class=\"headerlink\" title=\"一、创建通知\"></a>一、创建通知</h2><p>从Android 3.0版本开始，Android 添加了Notification.Builder相关API来帮助实现通知功能，但是对版本3.0以下的Android通知，需要通过v4包中的<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>类来创建通知，也是本文主要的创建通知的方式。调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#build(\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder.build()</a>创建<a href=\"https://developer.android.com/reference/android/app/Notification.html\" target=\"_blank\" rel=\"external\">Notification</a>对象，然后通过<a href=\"https://developer.android.com/reference/android/app/NotificationManager.html#notify(int, android.app.Notification\" target=\"_blank\" rel=\"external\">NotificationManager.notify()</a>来发送通知</p>\n<h3 id=\"1-通知的必要元素\"><a href=\"#1-通知的必要元素\" class=\"headerlink\" title=\"1. 通知的必要元素\"></a>1. 通知的必要元素</h3><p>通知对象必须要指定至少以下几个元素</p>\n<ul>\n<li>小图标，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setSmallIcon(int\" target=\"_blank\" rel=\"external\">setSmallIcon()</a></li>\n<li>标题，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentTitle(java.lang.CharSequence\" target=\"_blank\" rel=\"external\">setContentTitle()</a></li>\n<li>通知文本，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentText(java.lang.CharSequence\" target=\"_blank\" rel=\"external\">setContentText()</a></li>\n</ul>\n<h3 id=\"2-其他可选的通知设置\"><a href=\"#2-其他可选的通知设置\" class=\"headerlink\" title=\"2. 其他可选的通知设置\"></a>2. 其他可选的通知设置</h3><p>通知除了三个必要的元素，其他的内容设置都是可选项，可参考<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>查看相关API</p>\n<ol>\n<li><p>）通知行为<br>尽管这个是可选的，但在实际开发的过程中至少要为通知添加一个指定的行为。比如：点击通知时跳转到应用中指定的Activity等。<br>通知可以提供多个Action，用来触发用户点击通知时的行为，常用方式就是跳转到应用指定页面。或者推迟闹钟、快速回复短信（需要Android 4.1及以上版本）等。在添加这些功能时，要保证应用已经实现了相应的功能。<br>在创建通知时，通过<a href=\"https://developer.android.com/reference/android/app/PendingIntent.html\" target=\"_blank\" rel=\"external\">PendingIntent</a>为通知指定点击时的要启动的Activity、Service或BroadcastReceiver。如下面的示例代码中，调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>的<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent\" target=\"_blank\" rel=\"external\">setContentIntent()</a>)方法设置启动Activity的PendingIntent对象，来实现点击通知跳转到指定Activity的功能</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">NotificationCompat.Builder mBuilder = </div><div class=\"line\">    <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .setSmallIcon(R.drawable.notification_icon)</div><div class=\"line\">        .setContentTitle(<span class=\"string\">\"My Notification\"</span>)</div><div class=\"line\">        .setContexttext(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 创建启动的Activity的Intent</span></div><div class=\"line\">Intent notifyIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span> , ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// 设置Acitivity的新的空栈</span></div><div class=\"line\">notifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);</div><div class=\"line\"><span class=\"comment\">// 创建PendingIntent</span></div><div class=\"line\">PendingIntent notifyPendingIntent = </div><div class=\"line\">    PendingIntent.getActivity(<span class=\"keyword\">this</span> , <span class=\"number\">0</span> , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\"><span class=\"comment\">// 设置通知的ContentIntent</span></div><div class=\"line\">builder.setContentIntent(notifyPendingIntent);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>）通知优先级<br>根据定义的优先级可以决定通知在通知栏中的显示位置。设置通知优先级，调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder.setPriority()</a>)方法，参数为NotificationCompat中<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MIN\" target=\"_blank\" rel=\"external\">PRIORITY_MIN（-2）</a>到<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#PRIORITY_MAX\" target=\"_blank\" rel=\"external\">PRIORITY_MAX（2）</a>之前的值。默认为PRIORITY_DEFAULT（0）；查看<a href=\"https://developer.android.com/design/patterns/notifications.html\" target=\"_blank\" rel=\"external\">Correctly set and manage notification priority</a>，为通知设置合适的优先级。</p>\n</li>\n<li><p>）创建简单的通知<br>点击通知时打开指定Actviity。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationCompat.Builder mBuilder =</div><div class=\"line\">        <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .setSmallIcon(R.drawable.notification_icon)</div><div class=\"line\">        .setContentTitle(<span class=\"string\">\"My notification\"</span>)</div><div class=\"line\">        .setContentText(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\"><span class=\"comment\">// Creates an explicit intent for an Activity in your app</span></div><div class=\"line\">Intent resultIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ResultActivity.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The stack builder object will contain an artificial back stack for the</span></div><div class=\"line\"><span class=\"comment\">// started Activity.</span></div><div class=\"line\"><span class=\"comment\">// TaskStackBuilder 为启动的Activity创建一个伪造的返回栈</span></div><div class=\"line\"><span class=\"comment\">// 能够回到桌面</span></div><div class=\"line\">TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// 为Intent添加伪造返回栈</span></div><div class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack</span></div><div class=\"line\">stackBuilder.addNextIntent(resultIntent);</div><div class=\"line\">PendingIntent resultPendingIntent =</div><div class=\"line\">        stackBuilder.getPendingIntent(</div><div class=\"line\">            <span class=\"number\">0</span>,</div><div class=\"line\">            PendingIntent.FLAG_UPDATE_CURRENT</div><div class=\"line\">        );</div><div class=\"line\">mBuilder.setContentIntent(resultPendingIntent);</div><div class=\"line\">NotificationManager mNotificationManager =</div><div class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class=\"line\"><span class=\"comment\">// id可以更新Notification</span></div><div class=\"line\">mNotificationManager.notify(mId, mBuilder.build());</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-应用扩展布局\"><a href=\"#2-应用扩展布局\" class=\"headerlink\" title=\"2. 应用扩展布局\"></a>2. 应用扩展布局</h3><p>先创建带有普通视图的NotificationCompat.Builder，调用Builder.setStyle()，参数为以扩展布局为对象，需要Android版本 4.1及以上，4.1之前需要做兼容性处理，参考<a href=\"https://developer.android.com/guide/topics/ui/notifiers/notifications.html#Compatibility\" target=\"_blank\" rel=\"external\">Handling compatibility</a>小节。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationCompat.Builder mBuilder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">    .setSmallIcon(R.drawable.notification_icon)</div><div class=\"line\">    .setContentTitle(<span class=\"string\">\"Event tracker\"</span>)</div><div class=\"line\">    .setContentText(<span class=\"string\">\"Events received\"</span>)</div><div class=\"line\">NotificationCompat.InboxStyle inboxStyle =</div><div class=\"line\">        <span class=\"keyword\">new</span> NotificationCompat.InboxStyle();</div><div class=\"line\">String[] events = <span class=\"keyword\">new</span> String[<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"comment\">// 为扩展布局设置标题</span></div><div class=\"line\">inboxStyle.setBigContentTitle(<span class=\"string\">\"Event tracker details:\"</span>);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//  添加事件到扩展布局中</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; events.length; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">    inboxStyle.addLine(events[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 添加扩展布局到通知中</span></div><div class=\"line\">mBuilder.setStyle(inBoxStyle);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-兼容性处理\"><a href=\"#3-兼容性处理\" class=\"headerlink\" title=\"3. 兼容性处理\"></a>3. 兼容性处理</h3><p>为了保证兼容性，使用NotificationCompat或子类来创建通知。在实现通知时，要保证以下几点</p>\n<ul>\n<li>保证任何版本Android系统的提供功能一致<br>如：若用addAction() 提供媒体播放的停止和启动播放的控件，要先在应用的Activity中实现此控件。</li>\n<li>保证通知点击启动Activity来获取Activity中的功能，需要为跳转的Activity创建PendingIntent。</li>\n<li>如果需要扩展通知功能，保证所有的功能在点击通知时启动的Activity中可用。</li>\n</ul>\n<h2 id=\"二、管理通知\"><a href=\"#二、管理通知\" class=\"headerlink\" title=\"二、管理通知\"></a>二、管理通知</h2><p>在多次发出同一类型的通知时，应该避免创建新的通知。可以更改之前的通知的值或添加值来更新通知。<br>如：Gmail通过增加未读消息计数并将没封电子邮件的摘要添加到通知，来通知用户新的电子邮件。（这个本成为”堆叠”通知。）</p>\n<h3 id=\"1-更新通知\"><a href=\"#1-更新通知\" class=\"headerlink\" title=\"1. 更新通知\"></a>1. 更新通知</h3><p>为了保证通知设置能够更新，通过调用NotificationManager.notify()发出带有ID的通知。为了能够让之前发送通知更新，需要更新或创建一个<code>NotificationCompat.Builder</code>，构建<code>Notification</code>对象，在调用notify方法时保证ID与之前一致。如果之前发送的通知仍可见，则系统根据新的Notificaiton对象来更新之前通知，否则在界面上创建一个新的通知。<br>下面展示如何更新通知<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class=\"line\"><span class=\"comment\">// 设置ID</span></div><div class=\"line\"><span class=\"keyword\">int</span> notifyID = <span class=\"number\">1</span>;</div><div class=\"line\">mNotifyBuilder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .setSmallIcon(R.drawable.ic_notify_status)</div><div class=\"line\">        .setContentTitle(<span class=\"string\">\"New Message\"</span>)</div><div class=\"line\">        .setContentText(<span class=\"string\">\"You've received new messages\"</span>);</div><div class=\"line\"><span class=\"comment\">// 未读消息数量</span></div><div class=\"line\">numMessages = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">// 开启数据处理和通知用户的循环</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 用相同ID进行通知更新操作</span></div><div class=\"line\">mNotifyBuilder.setContentText(currentText)</div><div class=\"line\">        .setNumer(++numMessages);</div><div class=\"line\"><span class=\"comment\">// 发出通知</span></div><div class=\"line\">mNotificationManager.notify(notifyID , mNotifyBuilder.build());</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-删除通知\"><a href=\"#2-删除通知\" class=\"headerlink\" title=\"2. 删除通知\"></a>2. 删除通知</h3><p>在一下几种情况下，通知会被删除</p>\n<ul>\n<li>用户通过<code>全部清除</code>清除通知（如果通知可以清除时）。当调用Builder的setOnGoing(true)时，可以让通知不会被<code>全部清除</code>操作清除掉。</li>\n<li>用户点击了通知并且在创建通知时调用了<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setAutoCancel(boolean\" target=\"_blank\" rel=\"external\">setAutoCancel()</a>;</li>\n<li>针对特定的通知ID调用了<a href=\"https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int\" target=\"_blank\" rel=\"external\">cancel()</a>，cancel()还会删除当前通知。</li>\n<li>调用了<a href=\"https://developer.android.com/reference/android/app/NotificationManager.html#cancelAll(\" target=\"_blank\" rel=\"external\">cancelAll()</a>方法，将删除之前发出的所有通知。</li>\n</ul>\n<h2 id=\"三、启动Activity时保存导航顺序\"><a href=\"#三、启动Activity时保存导航顺序\" class=\"headerlink\" title=\"三、启动Activity时保存导航顺序\"></a>三、启动Activity时保存导航顺序</h2><p>从通知启动Activity时，要保证用户的导航顺序。从通知启动的Activity返回时，用户应该回到应用的正常工作流程界面。因此应该要在全新的任务中来启动Activity并根据启动的Activity要求来设置PendingIntent。</p>\n<ul>\n<li>常规Activity。<br>常规的Activity作为应用中正常的工作流的一部分。则需要PendingIntent应该启动新的任务创建新的任务栈。<br>如：Gmail在点击新的电子邮件的通知时，跳转到消息详情界面。点击返回时，则回到之前的界面。</li>\n<li>特定Activity<br>仅在从通知启动时，才会显示的Activity。对于这种情况，PendingIntent需要设置启动的任务为新的任务栈，因为启动的Activity不是应用Activity的流程的一部分，所以不需要创建返回栈。</li>\n</ul>\n<h3 id=\"1-设置常规Activity的PendingIntent\"><a href=\"#1-设置常规Activity的PendingIntent\" class=\"headerlink\" title=\"1. 设置常规Activity的PendingIntent\"></a>1. 设置常规Activity的PendingIntent</h3><p>1）. 在AndroidManifest 文件中定义Activity的层次结构</p>\n<ul>\n<li><p>支持Android 4.0.3及更低版本。为Activity添加<meta-data>元素为Activity指定Parent，</meta-data></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">   <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.PARENT_ACTIVITY\"</span></div><div class=\"line\">   <span class=\"attr\">android:value</span>=<span class=\"string\">\".MainActivity\"</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>支持Android4.1及更高版本。为Activity的activity标签添加android:parentActivityName属性。<br>最终的xml文件应该是这样的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".ResultActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:parentActivityName</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.PARENT_ACTIVITY\"</span></div><div class=\"line\">        <span class=\"attr\">android:value</span>=<span class=\"string\">\".MainActivity\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2）. 为Activity的Intent创建返回栈</p>\n<p>a. 创建启动Activity的Intent对象<br>b. 调用<a href=\"https://developer.android.com/reference/android/app/TaskStackBuilder.html#create(android.content.Context\" target=\"_blank\" rel=\"external\">TaskStackBuilder.create()</a>创建栈构造器<br>c. 调用<a href=\"https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addParentStack(android.app.Activity\" target=\"_blank\" rel=\"external\">addParentStack()</a>将返回栈添加到栈构造中。对于在Manifest中定义的每个Activity，返回栈含有启动Activity的Intent对象。这个方法还会在新任务中启动栈的标志。</p>\n<blockquote>\n<p>注：尽管addParentStack()的参数是启动Activity的引用，但是方法不会添加启动Activity的Intent对象，而是在接下来的步骤中</p>\n</blockquote>\n<p>d. 为通知添加启动Activity的Intent，通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#addNextIntent(android.content.Intent\" target=\"_blank\" rel=\"external\">addNextIntent()</a>方法。使用第一步创建的Intent对象来作为参数<br>e. 必要情况时调用<a href=\"https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html#editIntentAt(int\" target=\"_blank\" rel=\"external\">TaskStackBuilder.editIntentAt()</a>为Intent设置参数。有时对于需要保证目标Activity显示有意义的数据。<br>f. 调用getPendingIntent()获得一个PendingIntent对象，使用这个PengdingIntent对象作为方法setContentIntent()的参数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// a. 创建启动Activity的Intent对象</span></div><div class=\"line\">Intent resultIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span> , ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// b. 创建栈构造器</span></div><div class=\"line\">TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// c. 添加到栈构造器中</span></div><div class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// d. 添加Intent到栈顶</span></div><div class=\"line\">stackBuilder.addNextIntent(resultIntent);</div><div class=\"line\"><span class=\"comment\">// f. 获取含有整个返回栈的PendingIntent</span></div><div class=\"line\">PendingIntent resultPendingIntent = stackBuilder.getPengdingIntent(<span class=\"number\">0</span> , PengdingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\">...</div><div class=\"line\">NotificationCompat.Builder builder = <span class=\"keyword\">new</span> NotificationCompat.Buidler(<span class=\"keyword\">this</span>);</div><div class=\"line\">builder.setContentIntent(resultPendingIntent);</div><div class=\"line\">NotificationManager mNotificationManager = </div><div class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">mNotificationManager.notify(id , builder.build());</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-设置特定的Activity-PendingIntent\"><a href=\"#2-设置特定的Activity-PendingIntent\" class=\"headerlink\" title=\"2. 设置特定的Activity PendingIntent\"></a>2. 设置特定的Activity PendingIntent</h3><p>特定的Activity不需要返回栈，所以不需要在Manifest文件中定义Activity的属性同时也不需要调用<code>addParentStack()</code>来创建返回栈。但是要为Activity设定Activity的任务栈信息。调用getActivity()方法创建PengdingIntent。<br>1） 在Manifest中，为Activity的activity元素添加以下属性</p>\n<ul>\n<li><code>android:name=&quot;activityclass&quot;</code><br>  activity的类名全称</li>\n<li><code>android:taskAffinity=&quot;&quot;</code> 任务相关性<br>  与FLAG_ACTIVITY_NEW_TASK标志位联合使用，保证Activity不会进入应用的默认任务栈。</li>\n<li><code>android:excludeFromRecents=&quot;true&quot;</code><br>  排除最近的新任务栈，用户无法意外返回到栈中。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=\".ResultActivity\"</div><div class=\"line\">    ...</div><div class=\"line\">    android:launchMode=\"singleTask\"         // singleTask启动模式</div><div class=\"line\">    android:taskAffinity=\"\"                            // 任务相关性</div><div class=\"line\">    android:excludeFromRecents=\"true\"      </div><div class=\"line\">&lt;/activity&gt;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2）构建和发送通知</p>\n<ul>\n<li>创建启动Activity的Intent对象</li>\n<li>设置Activity的标志位：在一个新的、空的任务栈中启动。调用<a href=\"https://developer.android.com/reference/android/content/Intent.html#setFlags(int\" target=\"_blank\" rel=\"external\">setFlags()</a>)方法来设置标志位：<a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_TASK</a> 和 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_CLEAR_TASK</a></li>\n<li>设置Intent的可选参数，如需要传递的参数等。</li>\n<li>调用<code>PendingIntent</code>的<a href=\"https://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int\" target=\"_blank\" rel=\"external\">getActivity()</a>)方法创建PendingIntent，使用Builder <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setContentIntent(android.app.PendingIntent\" target=\"_blank\" rel=\"external\">setContentIntent</a>)调用创建的PendingIntent对象。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化Builder对象</span></div><div class=\"line\">NotificationCompat.Builder builder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// 创建启动的Activity的Intent</span></div><div class=\"line\">Intent notifyIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span> , ResultActivity.class);</div><div class=\"line\"><span class=\"comment\">// 设置Acitivity的新的空栈</span></div><div class=\"line\">notifyIntent.setFlag(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);</div><div class=\"line\"><span class=\"comment\">// 创建PendingIntent</span></div><div class=\"line\">PendingIntent notifyPendingIntent = </div><div class=\"line\">    PendingIntent.getActivity(<span class=\"keyword\">this</span> , <span class=\"number\">0</span> , notifyIntent , PendingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\"><span class=\"comment\">// 设置通知的ContentIntent</span></div><div class=\"line\">builder.setContentIntent(notifyPendingIntent);</div><div class=\"line\"><span class=\"comment\">// 获取到NotificationManager来发送通知</span></div><div class=\"line\">NotificationManager mNotificationManager = </div><div class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICAITON_SERVICE);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">mNotificationManager.notify(id , builder.build());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"四、通知显示进度条\"><a href=\"#四、通知显示进度条\" class=\"headerlink\" title=\"四、通知显示进度条\"></a>四、通知显示进度条</h2><p>通知栏可以用进度条来展示进行中的操作进度。如果可以知道操作的总耗时和花费的时间，使用<code>determinate</code>的状态来作为指示器。如果不能确切知道操作总长，使用<code>indeterminate</code>的状态来作为指示。<br>Progress指示器一般通过<code>ProgressBar</code>来实现。Android 4.0以上调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress</a>)来显示当前的进度，之前版本则必须创建<code>自定义</code>的含有<code>ProgressBar</code>的布局</p>\n<h3 id=\"1-创建固定的进度指示\"><a href=\"#1-创建固定的进度指示\" class=\"headerlink\" title=\"1. 创建固定的进度指示\"></a>1. 创建固定的进度指示</h3><p>显示确定的进度条，可以通过<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress(max , progress , <code>false</code>)</a>)来为通知添加进度。在处理进度时，来通知进度变化，更新通知栏。操作结束时，进度应该到最大值，常用的方式是调用setProgress()，设定值为<code>100</code>。<br>在操作结束时保留进度条或移除进度条根据业务需求。或者更新进度条的文字来表示操作完成。移除进度条通过调用<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress(0, 0, <code>false</code>)</a>的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">mNotificationManager = (NotificationManager)getSystemSerivce(Context.NOTIFICATION_SERVICE);</div><div class=\"line\">mBuilder =  <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">mBuilder.setContentTitle(<span class=\"string\">\"Picture DownLoad\"</span>)</div><div class=\"line\">    .setContentText(<span class=\"string\">\"Download in progress\"</span>);</div><div class=\"line\">    .setSmallIcon(R.drawable.ic_notification);</div><div class=\"line\"><span class=\"comment\">// 在后台线程开启图片下载操作</span></div><div class=\"line\"><span class=\"keyword\">new</span> Thread( <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> incr;</div><div class=\"line\">        <span class=\"keyword\">for</span>(incr = <span class=\"number\">0</span> ; incr &lt;= <span class=\"number\">100</span> ; incr += <span class=\"number\">5</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">// 设定进度，显示当前进度。</span></div><div class=\"line\">            mBuilder.setProgress(<span class=\"number\">100</span> , incr , <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"comment\">// 第一次显示进度</span></div><div class=\"line\">            mNotiifcationManager.notifiy(<span class=\"number\">0</span> , mBuilder.build());</div><div class=\"line\">            <span class=\"comment\">// 设置线程sleep时间，模拟耗时操作</span></div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                Log.d(TAG , <span class=\"string\">\"sleep failure\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 循环结束后，更新通知</span></div><div class=\"line\">        mBuilder.setContentText(<span class=\"string\">\"Download complete\"</span>);</div><div class=\"line\">            .setProgress(<span class=\"number\">0</span> , <span class=\"number\">0</span>, <span class=\"keyword\">false</span>);                    <span class=\"comment\">// 移除进度</span></div><div class=\"line\">        mNotificationManager.notify(ID , mBuilder.build());</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;).start();</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-显示加载中的指示器\"><a href=\"#2-显示加载中的指示器\" class=\"headerlink\" title=\"2. 显示加载中的指示器\"></a>2. 显示加载中的指示器</h3><p>通过<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setProgress(int, int, boolean\" target=\"_blank\" rel=\"external\">setProgress( 0 , 0 , <code>true</code>)</a>方法来为通知栏添加进行中的操作（前两个参数忽略）。指示样式与进度条类似，但是没有进度指示。<br>在操作开始时发送通知来显示动画，直到修改通知停止动画。调用setProgress(0 , 0 , <code>false</code>)来移除状态指示，通知记住要修改通知栏的文本表示操作结束。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 明确进度时</span></div><div class=\"line\">mBuilder.setProgress(<span class=\"number\">100</span> , incr , <span class=\"keyword\">false</span>);</div><div class=\"line\">mNotifyManager.notify(<span class=\"number\">0</span> , mBuilder.build());</div><div class=\"line\"><span class=\"comment\">// OR 非明确的进度指示</span></div><div class=\"line\">mBuilder.setProgress(<span class=\"number\">0</span> , <span class=\"number\">0</span> , <span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 发送通知</span></div><div class=\"line\">mNotifyManager.notify(<span class=\"number\">0</span> , mBuilder.build());</div></pre></td></tr></table></figure></p>\n<h2 id=\"五、通知的Metadata-属性\"><a href=\"#五、通知的Metadata-属性\" class=\"headerlink\" title=\"五、通知的Metadata 属性\"></a>五、通知的Metadata 属性</h2><p>通知可以通过matadata属性来进行排序。可以通过<a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html\" target=\"_blank\" rel=\"external\">NotificationCompat.Builder</a>方法来关联metadata属性</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setCategory(java.lang.String\" target=\"_blank\" rel=\"external\">setCategory</a><br>  在设备设置了优先级时，如何显示处理通知（如：app会有未接来电、即时消息和闹钟三种通知）。</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setPriority(int\" target=\"_blank\" rel=\"external\">setPriority</a><br>  设置了在<code>PRIORITY_MAX</code>和<code>PRIORITY_HIGH</code>之间值并且设置了声效或震动时的通知时则会在以浮动通知出现</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addPerson(java.lang.String\" target=\"_blank\" rel=\"external\">addPerson</a><br>  允许添加要通知的人的列表。app可以通过这个方法来告诉系统是否把指定的人的消息通知进行聚合处理或按照重要程度来对通知进行等级排序。</li>\n</ul>\n<h2 id=\"六、悬浮的通知。\"><a href=\"#六、悬浮的通知。\" class=\"headerlink\" title=\"六、悬浮的通知。\"></a>六、悬浮的通知。</h2><p>从Android 5.0（API LEVEL 21）开始，通知可以通过一个小的浮动窗口显示（也被成为悬浮通知）在设备处于活动状态时（也就是设备为锁定并屏幕处于点亮状态）。这些通知显示效果与你的通知形式相似，但是会带有行为按钮。用户可以打开、关闭通知而无需离开当前app。<br>使用到悬浮通知的情景：</p>\n<ul>\n<li>用户处于全屏模式</li>\n<li>或通知处于高优先级且使用了铃声或震动。</li>\n</ul>\n<h2 id=\"七、锁屏通知\"><a href=\"#七、锁屏通知\" class=\"headerlink\" title=\"七、锁屏通知\"></a>七、锁屏通知</h2><p>在Android 5.0及以上版本，可以在锁屏页面来显示通知。使用这个特性来提供媒体播放控制和其他常用的操作。用户可以选择是否在锁屏页来显示通知。</p>\n<h3 id=\"1-设置可见\"><a href=\"#1-设置可见\" class=\"headerlink\" title=\"1. 设置可见\"></a>1. 设置可见</h3><p>app可以控制安全锁屏页面通知的显示的细节。调用setVisibility()指定下面的值</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_PUBLIC\" target=\"_blank\" rel=\"external\">VISIBILITY_PUBLIC</a> 显示通知的全部内容</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET\" target=\"_blank\" rel=\"external\">VISIBILITY_SECRET</a> 不在锁屏页显示通知任何内容</li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html#VISIBILITY_SECRET\" target=\"_blank\" rel=\"external\">VISIBILITY_PROVATE</a> 只显示基本信息，如通知图标、标题。隐藏通知全部内容。<br>当使用<code>VISIBILITY_PRIVATE</code>，可以提供一个通知内容可选的版本来隐藏一些细节。比如：SMS app 可能需要展示通知来显示<code>你有三个新消息</code>，但是隐藏消息的具体内容和发件人。提供这样的可选择内容的通知，首先需要用NotificationCompat.Builder创建通知，当创建私有通知对象时，调用·setPublicVersion()`方法添加通知的替代部分。</li>\n</ul>\n<h3 id=\"2-控制媒体的播放\"><a href=\"#2-控制媒体的播放\" class=\"headerlink\" title=\"2. 控制媒体的播放\"></a>2. 控制媒体的播放</h3><p>在Android 5.0 显示媒体媒体控制不再基于<a href=\"https://developer.android.com/reference/android/media/RemoteControlClient.html\" target=\"_blank\" rel=\"external\">RemoteControlClient</a>。作为替代使用<a href=\"https://developer.android.com/reference/android/app/Notification.MediaStyle.html\" target=\"_blank\" rel=\"external\">Notification.MediaStyle</a>的模板，调用<a href=\"https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action\" target=\"_blank\" rel=\"external\">addAction</a>)方法来转换操作为可点击的图标。</p>\n<blockquote>\n<p>注：这个模板和addAction方法不包含在support库中，所以只适应于Android 5.0及更高的版本。</p>\n</blockquote>\n<p>要在Android 5.0上在锁屏页显示媒体播放控制，设置visibility属性为如上描述的VISIBILITY_PUBLIC。然后添加actions并且设置Notification.MediaStyle模板。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Notification notification = <span class=\"keyword\">new</span> Notification.Builder(context).setVisibility(Notification.VISIBILITY_PUBLIC)</div><div class=\"line\">    .setSmallIcon(R.drawable.ic_stat_player)</div><div class=\"line\">    .addAction(R.drawable.ic_prev , <span class=\"string\">\"Previous\"</span> , prevPendingIntent)</div><div class=\"line\">    .addAction(R.drawable.ic_pause , <span class=\"string\">\"Pause\"</span> , pausePendingIntent)</div><div class=\"line\">    .addAction(R.drawable.ic_next , <span class=\"string\">\"Next\"</span> , nextPendingIntent)</div><div class=\"line\">    <span class=\"comment\">// 应用媒体播放模板</span></div><div class=\"line\">    .setStyle(<span class=\"keyword\">new</span> Notification.MediaStyle())</div><div class=\"line\">    .setShowActionsInCompactView(<span class=\"number\">1</span>)   <span class=\"comment\">// 暂停按钮</span></div><div class=\"line\">    .setMediaSession(mMediaSession.getSessionToken())</div><div class=\"line\">    .setContextTitle(<span class=\"string\">\"Wonderfule music\"</span>)</div><div class=\"line\">    .setContextText(<span class=\"string\">\"My Awesome Band\"</span>)</div><div class=\"line\">    .setLargeIcon(albumArtBitmap)</div><div class=\"line\">    .build();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：RemoteControlClient已经废弃。查看<a href=\"https://developer.android.com/about/versions/android-5.0.html#MediaPlaybackControl\" target=\"_blank\" rel=\"external\">Media Playback Control</a>更多关于管理Media和控制播放的新的API</p>\n</blockquote>\n<h2 id=\"八、自定义通知布局\"><a href=\"#八、自定义通知布局\" class=\"headerlink\" title=\"八、自定义通知布局\"></a>八、自定义通知布局</h2><p>可以用<a href=\"https://developer.android.com/reference/android/widget/RemoteViews.html\" target=\"_blank\" rel=\"external\">RemoteView</a>对象来创建自定义通知。自定义通知布局类似于正常的通知，但是基于定义在xml布局文件的RemoteView对象。</p>\n<p>自定义通知布局的高度依赖于通知View的高度。常规view布局高度限制为<code>64dp</code>，可扩展的View布局限制为<code>256dp</code>。<br>定义自定义通知布局通过inflate xml布局文件创建的RemoteView对象。然后不是通过调用类似setContentTitle()和setContent()方法而是在布局文件中设定内容详情，使用RemoteView中的方法设定View子布局的值。</p>\n<ol>\n<li>为通知创建一个独立的XML文件。可以任意命名文件，但是必须是.xml格式文件。</li>\n<li>在app中，使用RemoteView方法来定义通知的图标和文字。将RemoteView对象添加到NotificationCompat.Builder对象，通过调用setContent()的方法。避免在RemoteView对象设置背景图片，因为文本颜色可能会与背景颜色相互冲突。</li>\n</ol>\n<p><code>RemoteView</code>类同样可以很很容易在自定义的通知布局中添加<code>Chronometer</code>和ProgressBar。更多关于创建自定义通知布局的文章，查看<a href=\"https://developer.android.com/reference/android/widget/RemoteViews.html\" target=\"_blank\" rel=\"external\">RemoteView</a>参考文档。</p>\n<blockquote>\n<p>注：当你使用自定义通知布局时，需要考虑到自定义布局在不同设备展示的问题，因为通知栏的空间有很多限制，尽量保证自定义布局简单化并在多种配置设备进行测试。</p>\n</blockquote>\n<h2 id=\"九、自定义通知文本使用样式资源。\"><a href=\"#九、自定义通知文本使用样式资源。\" class=\"headerlink\" title=\"九、自定义通知文本使用样式资源。\"></a>九、自定义通知文本使用样式资源。</h2><p>保证自定义通知布局使用style资源。通知栏的背景颜色可能会因为不同设备或不同版本，显示效果不一致。所以使用样式资源来帮助你统一管理。从Android 2.3开始，系统为标准通知定义布局文本样式。如果在Android 2.3及以上版本使用相同样式，能够保证在在不同的背景下文本都是可见的。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.android.com/guide/topics/ui/notifiers/notifications.html\" target=\"_blank\" rel=\"external\">Notifications</a></p>\n<p><a href=\"http://blog.csdn.net/xy_nyle/article/details/19853591\" target=\"_blank\" rel=\"external\">你应该掌握的Notification</a></p>\n"},{"title":"Android：SurfaceView基础与原理","date":"2016-09-06T02:47:41.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529028/android/8ff23095a2a4e04af26ca63642bfdea3_b.png","_content":"普通的View以及派生类都是共享同一个surface的，所有的绘制都必须在UI线程中执行。而SurfaceVAiew比较特殊，并不与其他普通View共享Surface，而是在内部持有了一个独立的surface。SurfaceView负责管理这个Surface的格式，尺寸以及显示位置。由于UI线程还要同事处理其他交互逻辑，因此对View的更新速度和帧率无法保证，而SurfaceView由于持有一个独立Surface，可以在独立线程中进行绘制，提供更高的帧率。自定义相机的预览图像由于\n","source":"_posts/Android：SurfaceView基础与原理.md","raw":"title: Android：SurfaceView基础与原理\ndate: 2016-09-06 10:47:41\ntags:\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529028/android/8ff23095a2a4e04af26ca63642bfdea3_b.png\n---\n普通的View以及派生类都是共享同一个surface的，所有的绘制都必须在UI线程中执行。而SurfaceVAiew比较特殊，并不与其他普通View共享Surface，而是在内部持有了一个独立的surface。SurfaceView负责管理这个Surface的格式，尺寸以及显示位置。由于UI线程还要同事处理其他交互逻辑，因此对View的更新速度和帧率无法保证，而SurfaceView由于持有一个独立Surface，可以在独立线程中进行绘制，提供更高的帧率。自定义相机的预览图像由于\n","slug":"Android：SurfaceView基础与原理","published":1,"updated":"2016-09-19T01:28:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3txz000hgrm352e0gass","content":"<p>普通的View以及派生类都是共享同一个surface的，所有的绘制都必须在UI线程中执行。而SurfaceVAiew比较特殊，并不与其他普通View共享Surface，而是在内部持有了一个独立的surface。SurfaceView负责管理这个Surface的格式，尺寸以及显示位置。由于UI线程还要同事处理其他交互逻辑，因此对View的更新速度和帧率无法保证，而SurfaceView由于持有一个独立Surface，可以在独立线程中进行绘制，提供更高的帧率。自定义相机的预览图像由于</p>\n","site":{"data":{}},"excerpt":"","more":"<p>普通的View以及派生类都是共享同一个surface的，所有的绘制都必须在UI线程中执行。而SurfaceVAiew比较特殊，并不与其他普通View共享Surface，而是在内部持有了一个独立的surface。SurfaceView负责管理这个Surface的格式，尺寸以及显示位置。由于UI线程还要同事处理其他交互逻辑，因此对View的更新速度和帧率无法保证，而SurfaceView由于持有一个独立Surface，可以在独立线程中进行绘制，提供更高的帧率。自定义相机的预览图像由于</p>\n"},{"title":"Android：WebView开发笔记（二）","date":"2016-01-21T07:07:47.000Z","_content":"[WebView小结](http://www.jianshu.com/p/897d9e3bc783?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq)\n\n[WebView相关API](http://developer.android.com/intl/ja/reference/android/webkit/WebView.html)\n### 一、WebView介绍\n1.权限\n```java\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n2.基本使用\n\n创建有两种方式1.在layout布局文件中使用`<WebView/>`标签或在代码中动态创建 WebView对象\n```java\nWebView webView = new WebView(this);\nsetContentView(webView);\n\n```\n在浏览器中加载\n```java\nUri uri = Uri.parse(\"http://www.example.com\"); \nIntent intent = new Intent(Intent.ACTION_VIEW, uri); \nstartActivity(intent);\n```\nwebview加载页面\n```java\n// 加载URL\nwebView.loadUrl(\"http://slashdot.org/\");\n\n//加载String形式的HTML,\nString summary = \"<html><body>You scored <b>192</b> points.</body></html>\";\n// 有时候会显示为乱码,可以把 string 的内容也变为 utf-8的编码，统一编码格式 \n// summary = new String(summary.getBytes() , \"UTF-8\");\nwebView.loadData(summary);\n\n// 加载本地文件\nwebView.loadUrl(\"file:///android_asset/XX.html\");\n```\n设置WebSetting\n```Java\nWebSettings webSetting = webView.getSettings()\n// 允许JS\nwebSetting.setJavaScriptEnabled(true);\n```\n设置WebViewClient\n```java\nwebView.setWebViewClient(new WebViewClient() {\n   public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n     Toast.makeText(activity, \"Oh no! \" + description, Toast.LENGTH_SHORT).show();\n   }\n });\n\n```\n设置WebChromeClient\n```java\nwebView.setWebChromeClient(new WebChromeClient() {\n   public void onProgressChanged(WebView view, int progress) {\n     // Activities and WebViews measure progress with different scales.\n     // The progress meter will automatically disappear when we reach 100%\n     activity.setProgress(progress * 1000);\n   }\n });\n```\nJs调用Native层代码\n\n- html代码\n```html\n<html>\n<script language=\"javascript\">\n  function wave() {\n    document.getElementById(\"droid\").src=\"android_waving.png\";\n  }\n</script>\n<body>\n  <!-- js调用java方法 window.js_callback.clickOnAndroid().index(this)); -->\n  <!-- 形式：window.指定string.函数名 -->\n  <a onClick=\"window.android.clickOnAndroid()\">\n  <img id=\"droid\" src=\"android_normal.png\" mce_src=\"android_normal.png\"/><br> Click me! </a>\n</body>\n</html>\n```\n- java对应的代码\n```java\n// 这里假设已经允许JS webSetting.setJavaScriptEnabled(true);\nwebView.addJavascriptInterface(new JavaScriptInterface() , \"android\")\n// JS调用的Native函数对象\npublic class JavaScriptInterface{\n    /*4.2以后才有@JavascriptInterface，因为安全隐患问题。\n    * 因为 JavaScript 可以通过反射访问注入 webview 的 java 对象的 public fields，\n    * 使用宿主程序的权限执行 java 代码。所以，4.2以后，任何为 JS 暴露接口的，都要加上@JavascriptInterface。\n    * 这样，这个 Java 对象的 fields 将不允许被 js 访问。*/\n    @JavascriptInterface\n    public void clickOnAndroid(){\n        //TODO\n    };\n}\n```\nNative调用Js\n\n```java\nwebView.loadUrl(\"javascript:alert()\");\n```\n### 二、WebSettings\n\nWebView配置管理类。当WebView第一次创建时包含默认配置。通过`getter`方法来获取配置信息。调用WebView.getSetting()方法将WebSettings与WebView的生命周期绑定。如果WebView被销毁，调用任何WebView的方法都会抛出`IllegalStateException`异常信息\n\n- setSupportZoom(boolean support) \n\n\t是否支持缩放，配合方法`setBuiltInZoomControls`使用，默认true\n- setMediaPlaybackRequiresUserGesture(boolean require) \n\n\t是否需要用户手势来播放Media，默认true\n- setBuiltInZoomControls(boolean enabled) \n\n\t是否使用WebView内置的缩放组件，由浮动在窗口上的缩放控制和手势缩放控制组成，默认false\n- setDisplayZoomControls(boolean enabled) \n\n\t是否显示窗口悬浮的缩放控制，默认true\n- setAllowFileAccess(boolean allow)\n\n\t是否允许访问WebView内部文件，默认true\n- setAllowContentAccess(boolean allow)\n\t\n\t是否允许获取WebView的内容URL ，可以让WebView访问ContentPrivider存储的内容。 默认true\n\n- setLoadWithOverviewMode(boolean overview)\n\t\n\t是否启动概述模式浏览界面，当页面宽度超过WebView显示宽度时，缩小页面适应WebView。默认false\n- setSaveFormData(boolean save)\n\t\n\t是否保存表单数据，默认false\n- setTextZoom(int textZoom)\n\t\n\t设置页面文字缩放百分比，默认100%\n- setUseWideViewPort(boolean use)\n\n\t是否支持ViewPort的meta tag属性，如果页面有ViewPort meta tag 指定的宽度，则使用meta tag指定的值，否则默认使用宽屏的视图窗口\n\n- setSupportMultipleWindows(boolean support)\n\n\t是否支持多窗口，如果设置为true ，`WebChromeClient#onCreateWindow`方法必须被主程序实现，默认false\n\n- setLayoutAlgorithm(LayoutAlgorithm l)\n\n\t指定WebView的页面布局显示形式，调用该方法会引起页面重绘。默认LayoutAlgorithm#NARROW_COLUMNS\n- setStandardFontFamily(String font)\n\t\n\t设置标准的字体族，默认\"sans-serif\"。font-family 规定元素的字体系列。font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。\n\n- setFixedFontFamily(String font)\n\t\n\t设置混合字体族。默认\"monospace\"\n\n- setSansSerifFontFamily(String font)\n\t\n\t设置SansSerif字体族。默认\"sans-serif\"\n- setSerifFontFamily(String font)\n\n\t设置SerifFont字体族，默认\"sans-serif\"\n- setCursiveFontFamily(String font)\n\n\t设置CursiveFont字体族，默认\"cursive\"\n- setFantasyFontFamily(String font)\n\t\n\t设置FantasyFont字体族，默认\"fantasy\"\n- setMinimumFontSize(int size)\n\n\t设置最小字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。\n- setMinimumLogicalFontSize(int size)\n\t\n\t设置最小逻辑字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。\n\t\n- setDefaultFontSize(int size)\n\t\n\t设置默认字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。\n- setDefaultFixedFontSize(int size)\n\t\n\t设置默认填充字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。\n- setLoadsImagesAutomatically(boolean flag)\n\n\t设置是否加载图片资源，`注意：`方法控制所有的资源图片显示，包括嵌入的本地图片资源。使用方法`setBlockNetworkImage`则只限制网络资源图片的显示。值设置为true后，webview会自动加载网络图片。默认true\n- setBlockNetworkImage(boolean flag)\n\n\t是否加载网络图片资源。`注意`如果`getLoadsImagesAutomatically`返回false，则该方法没有效果。如果使用`setBlockNetworkLoads`设置为false，该方法设置为false，也不会显示网络图片。当值从true改为false时。WebView会自动加载网络图片。\n- setBlockNetworkLoads(boolean flag)\n\t\n\t设置是否加载网络资源。`注意`如果值从true切换为false后，WebView不会自动加载，除非调用WebView#reload().如果没有`android.Manifest.permission#INTERNET`权限，值设为false，则会抛出`java.lang.SecurityException`异常。默认值：有`android.Manifest.permission#INTERNET`权限时为false，其他为true。\n- setJavaScriptEnabled(boolean flag)\n\n\t设置是否允许执行JS。\n- setAllowUniversalAccessFromFileURLs(boolean flag)\n\n\t是否允许Js访问任何来源的内容。包括访问file scheme的URLs。考虑到安全性，限制Js访问范围默认禁用。`注意：`该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。`ICE_CREAM_SANDWICH_MR1`版本以及以下默认为true，`JELLY_BEAN`版本以上默认为false\n\n- setAllowFileAccessFromFileURLs(boolean flag)\n\n\t是否允许Js访问其他file scheme的URLs。包括访问file scheme的资源。考虑到安全性，限制Js访问范围默认禁用。`注意：`该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。如果`getAllowUniversalAccessFromFileURLs`为true，则该方法被忽略。`ICE_CREAM_SANDWICH_MR1`版本以及以下默认为true，`JELLY_BEAN`版本以上默认为false\n\n- setGeolocationDatabasePath(String databasePath)\n\t\n\t设置存储定位数据库的位置，考虑到位置权限和持久化Cache缓存，Application需要拥有指定路径的write权限\n- setAppCacheEnabled(boolean flag)\n\t\n\t是否允许Cache，默认false。考虑需要存储缓存，应该为缓存指定存储路径`setAppCachePath`\n- setAppCachePath(String appCachePath)\n\t\n\t设置Cache API缓存路径。为了保证可以访问Cache，Application需要拥有指定路径的write权限。该方法应该只调用一次，多次调用自动忽略。\n- setDatabaseEnabled(boolean flag)\n\t\n\t是否允许数据库存储。默认false。查看`setDatabasePath` API 如何正确设置数据库存储。该设置拥有全局特性，同一进程所有WebView实例共用同一配置。`注意：`保证在同一进程的任一WebView加载页面之前修改该属性，因为在这之后设置WebView可能会忽略该配置\n- setDomStorageEnabled(boolean flag)\n\t\n\t是否存储页面DOM结构，默认false。\n- setGeolocationEnabled(boolean flag)\n\n\t是否允许定位，默认true。`注意：`为了保证定位可以使用，要保证以下几点：\n\t- Application 需要有`android.Manifest.permission#ACCESS_COARSE_LOCATION`的权限\n\t- Application 需要实现`WebChromeClient#onGeolocationPermissionsShowPrompt`的回调，接收Js定位请求访问地理位置的通知\n- setJavaScriptCanOpenWindowsAutomatically(boolean flag)\n\t\n\t是否允许JS自动打开窗口。默认false\n- setDefaultTextEncodingName(String encoding)\n\t\n\t设置页面的编码格式，默认UTF-8\n- setUserAgentString(String ua)\n\t\n\t设置WebView代理，默认使用默认值\n- setNeedInitialFocus(boolean flag)\n\t\n\t通知WebView是否需要设置一个节点获取焦点当`WebView#requestFocus(int, android.graphics.Rect)`被调用的时候，默认true\n- setCacheMode(int mode)\n\t\n\t基于WebView导航的类型使用缓存：正常页面加载会加载缓存并按需判断内容是否需要重新验证。如果是页面返回，页面内容不会重新加载，直接从缓存中恢复。`setCacheMode`允许客户端根据指定的模式来使用缓存。\n\t- LOAD_DEFAULT 默认加载方式\n\t- LOAD_CACHE_ELSE_NETWORK 按网络情况使用缓存\n\t- LOAD_NO_CACHE 不使用缓存\n\t- LOAD_CACHE_ONLY 只使用缓存\n- setMixedContentMode(int mode)\n\t\n\t设置加载不安全资源的WebView加载行为。`KITKAT`版本以及以下默认为`MIXED_CONTENT_ALWAYS_ALLOW`方式，`LOLLIPOP`默认`MIXED_CONTENT_NEVER_ALLOW`。强烈建议：使用`MIXED_CONTENT_NEVER_ALLOW`\n\n### 三、WebViewClient\n- shouldOverrideUrlLoading(WebView view, String url)\n\n\t当加载新的URL时是否由主程序控制显示。如果没有提供`WebViewClient`，则选择合适的url处理方式。如果指定`WebViewClient`，返回值为true意味主程序处理url，返回值为false意味当前`WebView`处理url。`注意：`如果使用`POST`方法该方法不会被调用。\n- onPageStarted(WebView view, String url, Bitmap favicon)。\n\n\t通知主程序页面开始加载。该方法只有在加载main frame时加载一次，如果一个页面有多个frame，`onPageStarted`只在加载main frame时调用一次。也意味着若内置frame发生变化，`onPageStarted`不会被调用，如：在iframe中打开url链接。\n- onPageFinished(WebView view, String url)\n\t\n\t通知主程序页面加载结束。方法只被main frame调用一次。\n- onLoadResource(WebView view, String url)\n\n\t通知主程序开始加载指定url的资源文件。\n- shouldInterceptRequest(WebView view,WebResourceRequest request)\n\t\n\t通知主程序资源请求，是否允许程序返回指定数据资源。如果返回值为`null`，表示继续正常加载资源文件，否则使用返回响应和值。`注意：`该方法在线程被调用而不是UI线程，所有客户端在调用私有数据或在与View交互的时候应该注意。\n- onReceivedError(WebView view, int errorCode, String description, String failingUrl)\n\n\t返回访问错误通知。\n- onFormResubmission(WebView view, Message dontResend, Message resend)\n\n\t是否重发POST请求数据，默认不重发。\n- doUpdateVisitedHistory(WebView view, String url, boolean isReload)\n\n\t更新访问历史\n- onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)\n\n\t通知主程序加载资源的SSL错误。必须调用`handler.cancel()`或`handler.proceed()`。该设置可能会为之后资源访问的SSL错误保留使用当前的设定。默认`cancel`\n- onReceivedClientCertRequest(WebView view, ClientCertRequest request)\n\n\t通知主程序处理SSL客户端认证请求。如果需要提供密钥，主程序负责显示UI界面。有三个响应方法：`proceed()`, `cancel()` 和 `ignore()`。如果调用`proceed()`和`cancel()`，webview将会记住response，对相同的host和port地址不再调用onReceivedClientCertRequest方法。如果调用`ignore()`方法，webview则不会记住response。该方法在UI线程中执行，在回调期间，连接被挂起。默认`cancel()`，即无客户端认证\n- onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)\n\n\t通知主程序：WebView接收HTTP认证请求，主程序可以使用`HttpAuthHandler`为请求设置WebView响应。默认取消请求。\n- shouldOverrideKeyEvent(WebView view, KeyEvent event)\n\n\t是否让主程序同步处理Key Event事件，如过滤菜单快捷键的Key Event事件。如果返回true，WebView不会处理Key Event，如果返回false，Key Event总是由WebView处理。默认：false\n- onUnhandledInputEvent(WebView view, InputEvent event)\n\t\n\t通知主程序输入事件不是由WebView调用。是否让主程序处理WebView未处理的Input Event。除了系统按键，WebView总是消耗掉输入事件或`shouldOverrideKeyEvent`返回true。该方法由event 分发异步调用。`注意：`如果事件为`MotionEvent`，则事件的生命周期只存在方法调用过程中，如果WebViewClient想要使用这个Event，则需要复制Event对象。\n- onScaleChanged(WebView view, float oldScale, float newScale)\n\n\t通知主程序WebView的大小发生变化。\n- onReceivedLoginRequest(WebView view, String realm, String account, String args)\n\t\n\t通知主程序执行了自动登录请求。\n\n### 四、WebChromeClient\n- onProgressChanged(WebView view, int newProgress)\n\t\n\t通知程序当前页面加载进度\n- onReceivedTitle(WebView view, String title) \n\t\n\t通知页面标题变化\n- onReceivedIcon(WebView view, Bitmap icon)\n\t\n\t通知当前页面网站新图标\n-  onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)\n\n\t通知主程序图标按钮URL\n- CustomViewCallback\n\t```java\n\tpublic interface CustomViewCallback {\n        // 通知当前页面自定义的View被关闭\n        public void onCustomViewHidden();\n    }\n\t```\n- onShowCustomView(View view, CustomViewCallback callback)\n\t\n\t通知主程序当前页面将要显示指定方向的View，该方法用来全屏播放视频。\n- onHideCustomView()\n\t\n\t与`onShowCustomView`对应，通知主程序当前页面将要关闭Custom View\n- onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)\n\n\t请求主程序创建一个新的Window，如果主程序接收请求，返回true并创建一个新的WebView来装载Window，然后添加到View中，发送带有创建的WebView作为参数的resultMsg的给Target。如果主程序拒绝接收请求，则方法返回false。默认不做任何处理，返回false\n- onRequestFocus(WebView view)\n\n\t显示当前WebView，为当前WebView获取焦点。\n- onCloseWindow(WebView window)\n\t\n\t通知主程序关闭WebView，并从View中移除，`WebCore`停止任何的进行中的加载和JS功能。\n- onJsAlert(WebView view, String url, String message, JsResult result)\n\n\t告诉客户端显示Js 提示框。如果客户端返回true，由客户端处理提示框。否则继续显示Js 提示框。\n- onJsConfirm(WebView view, String url, String message, JsResult result)\n\n\t告诉客户端显示确认提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值false给javascript。默认：false\n- onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)\n\t\n\t告诉客户端显示提示框。如果返回true，由客户端处理确认提示框，调用合适的JsPromptResult方法。如果返回false，则返回默认值false给javascript。默认：false\n- onJsBeforeUnload(WebView view, String url, String message, JsResult result)\n\n\t告诉客户端显示离开当前页面的导航提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值true给javascript接受离开当前页面的导航。默认：false。JsResult设置false，当前页面取消导航提示，否则离开当前页面。\n- onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)\n\n\t通知主程序web内容尝试使用定位API，但是没有相关的权限。主程序需要调用调用指定的定位权限申请的回调。更多说明查看`GeolocationPermissions`相关API。\n- onGeolocationPermissionsHidePrompt()\n\n\t通知程序有定位权限请求。如果`onGeolocationPermissionsShowPrompt`权限申请操作被取消，则隐藏相关的UI界面。\n- onPermissionRequest(PermissionRequest request)\n\n\t通知主程序web内容尝试申请指定资源的权限（权限没有授权或已拒绝），主程序必须调用`PermissionRequest#grant(String[])`或`PermissionRequest#deny()`。如果没有覆写该方法，默认拒绝。\n- onPermissionRequestCanceled(PermissionRequest request)\n\t\n\t通知主程序相关权限被取消。任何相关UI都应该隐藏掉。\n- onJsTimeout() \n\t\n\t通知主程序 执行的Js操作超时。客户端决定是否中断`JavaScript`继续执行。如果客户端返回true，JavaScript中断执行。如果客户端返回false，则执行继续。`注意：`如果继续执行，重置JavaScript超时计时器。如果Js下一次检查点仍没有结束，则再次提示。\n- onConsoleMessage(ConsoleMessage consoleMessage)\n\t\n\t通知主程序的Js控制台消息，`ChromeClient`应该覆写该方法在合适的时候来打印日志。\n- getDefaultVideoPoster()\n\t\n\t当停止播放，Video显示为一张图片。默认图片可以通过HTML的Video的poster属性标签来指定。如果poster属性不存在，则使用默认的poster。该方法允许`ChromeClient`提供默认图片。\n- getVideoLoadingProgressView()\n\n\t当用户重放视频，在渲染第一帧前需要花费时间去缓冲足够的数据。在缓冲期间，`ChromeClient`可以提供一个显示的View。如：可以显示一个加载动画。\n- getVisitedHistory(ValueCallback<String[]> callback)\n\n\t获取访问历史Item，用于链接颜色。\n- onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n            FileChooserParams fileChooserParams)\n\n\t通知客户端显示文件选择器。用来处理file类型的HTML标签，响应用户点击选择文件的按钮操作。调用`filePathCallback.onReceiveValue(null)`并返回true取消请求操作。\n- FileChooserParams \n\t\n\t`onShowFileChooser`方法使用的参数\n\t- MODE_OPEN 打开\n\t- MODE_OPEN_MULTIPLE 选中多个文件打开\n\t- MODE_OPEN_FOLDER 打开文件夹（暂不支持）\n\t- MODE_SAVE 保存\n\t- parseResult(int resultCode, Intent data)\n\t\t\n\t\t解析文件选择Activity返回的结果。需要和`createIntent`一起使用。\n\t- createIntent()\n\t\n\t\t创建Intent对象来启动文件选择器。Intent支持可访问的简单类型文件资源。不支持高级文件资源如`live media capture`媒体快照。如果需要访问这些资源或其他高级文件类型资源可以自己创建Intent对象。\n\t- getMode()\n\t\t\n\t\t返回文件选择模式\n\t- getAcceptTypes() \n\t\n\t\t返回可访问`MIME`类型数组，如`audio/*`，如果没有指定可访问类型，数组返回为null\n\t- isCaptureEnabled()\n\t\t\n\t\t返回优先的媒体快照类型值如`Camera`、`Microphone`。true：允许快照。false，禁止快照。使用`getAcceptTypes`方法确定合适的`capture`设备。\n\t- getTitle()\n\t\t\n\t\t返回文件选择器的标题。如果为null，使用默认名称。\n\t- getFilenameHint()\n\t\t\n\t\t指定默认选中的文件名或为null\n- setupAutoFill(Message msg) `暂不支持`\n\t\n\t告诉客户端当前页面以自动填充表单形式查看。\n\t\n\t\t\n\n\t","source":"_posts/Android：WebView开发笔记（二）.md","raw":"---\ntitle: Android：WebView开发笔记（二）\ndate: 2016-01-21 15:07:47\ntags:\n---\n[WebView小结](http://www.jianshu.com/p/897d9e3bc783?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq)\n\n[WebView相关API](http://developer.android.com/intl/ja/reference/android/webkit/WebView.html)\n### 一、WebView介绍\n1.权限\n```java\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n2.基本使用\n\n创建有两种方式1.在layout布局文件中使用`<WebView/>`标签或在代码中动态创建 WebView对象\n```java\nWebView webView = new WebView(this);\nsetContentView(webView);\n\n```\n在浏览器中加载\n```java\nUri uri = Uri.parse(\"http://www.example.com\"); \nIntent intent = new Intent(Intent.ACTION_VIEW, uri); \nstartActivity(intent);\n```\nwebview加载页面\n```java\n// 加载URL\nwebView.loadUrl(\"http://slashdot.org/\");\n\n//加载String形式的HTML,\nString summary = \"<html><body>You scored <b>192</b> points.</body></html>\";\n// 有时候会显示为乱码,可以把 string 的内容也变为 utf-8的编码，统一编码格式 \n// summary = new String(summary.getBytes() , \"UTF-8\");\nwebView.loadData(summary);\n\n// 加载本地文件\nwebView.loadUrl(\"file:///android_asset/XX.html\");\n```\n设置WebSetting\n```Java\nWebSettings webSetting = webView.getSettings()\n// 允许JS\nwebSetting.setJavaScriptEnabled(true);\n```\n设置WebViewClient\n```java\nwebView.setWebViewClient(new WebViewClient() {\n   public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n     Toast.makeText(activity, \"Oh no! \" + description, Toast.LENGTH_SHORT).show();\n   }\n });\n\n```\n设置WebChromeClient\n```java\nwebView.setWebChromeClient(new WebChromeClient() {\n   public void onProgressChanged(WebView view, int progress) {\n     // Activities and WebViews measure progress with different scales.\n     // The progress meter will automatically disappear when we reach 100%\n     activity.setProgress(progress * 1000);\n   }\n });\n```\nJs调用Native层代码\n\n- html代码\n```html\n<html>\n<script language=\"javascript\">\n  function wave() {\n    document.getElementById(\"droid\").src=\"android_waving.png\";\n  }\n</script>\n<body>\n  <!-- js调用java方法 window.js_callback.clickOnAndroid().index(this)); -->\n  <!-- 形式：window.指定string.函数名 -->\n  <a onClick=\"window.android.clickOnAndroid()\">\n  <img id=\"droid\" src=\"android_normal.png\" mce_src=\"android_normal.png\"/><br> Click me! </a>\n</body>\n</html>\n```\n- java对应的代码\n```java\n// 这里假设已经允许JS webSetting.setJavaScriptEnabled(true);\nwebView.addJavascriptInterface(new JavaScriptInterface() , \"android\")\n// JS调用的Native函数对象\npublic class JavaScriptInterface{\n    /*4.2以后才有@JavascriptInterface，因为安全隐患问题。\n    * 因为 JavaScript 可以通过反射访问注入 webview 的 java 对象的 public fields，\n    * 使用宿主程序的权限执行 java 代码。所以，4.2以后，任何为 JS 暴露接口的，都要加上@JavascriptInterface。\n    * 这样，这个 Java 对象的 fields 将不允许被 js 访问。*/\n    @JavascriptInterface\n    public void clickOnAndroid(){\n        //TODO\n    };\n}\n```\nNative调用Js\n\n```java\nwebView.loadUrl(\"javascript:alert()\");\n```\n### 二、WebSettings\n\nWebView配置管理类。当WebView第一次创建时包含默认配置。通过`getter`方法来获取配置信息。调用WebView.getSetting()方法将WebSettings与WebView的生命周期绑定。如果WebView被销毁，调用任何WebView的方法都会抛出`IllegalStateException`异常信息\n\n- setSupportZoom(boolean support) \n\n\t是否支持缩放，配合方法`setBuiltInZoomControls`使用，默认true\n- setMediaPlaybackRequiresUserGesture(boolean require) \n\n\t是否需要用户手势来播放Media，默认true\n- setBuiltInZoomControls(boolean enabled) \n\n\t是否使用WebView内置的缩放组件，由浮动在窗口上的缩放控制和手势缩放控制组成，默认false\n- setDisplayZoomControls(boolean enabled) \n\n\t是否显示窗口悬浮的缩放控制，默认true\n- setAllowFileAccess(boolean allow)\n\n\t是否允许访问WebView内部文件，默认true\n- setAllowContentAccess(boolean allow)\n\t\n\t是否允许获取WebView的内容URL ，可以让WebView访问ContentPrivider存储的内容。 默认true\n\n- setLoadWithOverviewMode(boolean overview)\n\t\n\t是否启动概述模式浏览界面，当页面宽度超过WebView显示宽度时，缩小页面适应WebView。默认false\n- setSaveFormData(boolean save)\n\t\n\t是否保存表单数据，默认false\n- setTextZoom(int textZoom)\n\t\n\t设置页面文字缩放百分比，默认100%\n- setUseWideViewPort(boolean use)\n\n\t是否支持ViewPort的meta tag属性，如果页面有ViewPort meta tag 指定的宽度，则使用meta tag指定的值，否则默认使用宽屏的视图窗口\n\n- setSupportMultipleWindows(boolean support)\n\n\t是否支持多窗口，如果设置为true ，`WebChromeClient#onCreateWindow`方法必须被主程序实现，默认false\n\n- setLayoutAlgorithm(LayoutAlgorithm l)\n\n\t指定WebView的页面布局显示形式，调用该方法会引起页面重绘。默认LayoutAlgorithm#NARROW_COLUMNS\n- setStandardFontFamily(String font)\n\t\n\t设置标准的字体族，默认\"sans-serif\"。font-family 规定元素的字体系列。font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。\n\n- setFixedFontFamily(String font)\n\t\n\t设置混合字体族。默认\"monospace\"\n\n- setSansSerifFontFamily(String font)\n\t\n\t设置SansSerif字体族。默认\"sans-serif\"\n- setSerifFontFamily(String font)\n\n\t设置SerifFont字体族，默认\"sans-serif\"\n- setCursiveFontFamily(String font)\n\n\t设置CursiveFont字体族，默认\"cursive\"\n- setFantasyFontFamily(String font)\n\t\n\t设置FantasyFont字体族，默认\"fantasy\"\n- setMinimumFontSize(int size)\n\n\t设置最小字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。\n- setMinimumLogicalFontSize(int size)\n\t\n\t设置最小逻辑字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。\n\t\n- setDefaultFontSize(int size)\n\t\n\t设置默认字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。\n- setDefaultFixedFontSize(int size)\n\t\n\t设置默认填充字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。\n- setLoadsImagesAutomatically(boolean flag)\n\n\t设置是否加载图片资源，`注意：`方法控制所有的资源图片显示，包括嵌入的本地图片资源。使用方法`setBlockNetworkImage`则只限制网络资源图片的显示。值设置为true后，webview会自动加载网络图片。默认true\n- setBlockNetworkImage(boolean flag)\n\n\t是否加载网络图片资源。`注意`如果`getLoadsImagesAutomatically`返回false，则该方法没有效果。如果使用`setBlockNetworkLoads`设置为false，该方法设置为false，也不会显示网络图片。当值从true改为false时。WebView会自动加载网络图片。\n- setBlockNetworkLoads(boolean flag)\n\t\n\t设置是否加载网络资源。`注意`如果值从true切换为false后，WebView不会自动加载，除非调用WebView#reload().如果没有`android.Manifest.permission#INTERNET`权限，值设为false，则会抛出`java.lang.SecurityException`异常。默认值：有`android.Manifest.permission#INTERNET`权限时为false，其他为true。\n- setJavaScriptEnabled(boolean flag)\n\n\t设置是否允许执行JS。\n- setAllowUniversalAccessFromFileURLs(boolean flag)\n\n\t是否允许Js访问任何来源的内容。包括访问file scheme的URLs。考虑到安全性，限制Js访问范围默认禁用。`注意：`该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。`ICE_CREAM_SANDWICH_MR1`版本以及以下默认为true，`JELLY_BEAN`版本以上默认为false\n\n- setAllowFileAccessFromFileURLs(boolean flag)\n\n\t是否允许Js访问其他file scheme的URLs。包括访问file scheme的资源。考虑到安全性，限制Js访问范围默认禁用。`注意：`该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。如果`getAllowUniversalAccessFromFileURLs`为true，则该方法被忽略。`ICE_CREAM_SANDWICH_MR1`版本以及以下默认为true，`JELLY_BEAN`版本以上默认为false\n\n- setGeolocationDatabasePath(String databasePath)\n\t\n\t设置存储定位数据库的位置，考虑到位置权限和持久化Cache缓存，Application需要拥有指定路径的write权限\n- setAppCacheEnabled(boolean flag)\n\t\n\t是否允许Cache，默认false。考虑需要存储缓存，应该为缓存指定存储路径`setAppCachePath`\n- setAppCachePath(String appCachePath)\n\t\n\t设置Cache API缓存路径。为了保证可以访问Cache，Application需要拥有指定路径的write权限。该方法应该只调用一次，多次调用自动忽略。\n- setDatabaseEnabled(boolean flag)\n\t\n\t是否允许数据库存储。默认false。查看`setDatabasePath` API 如何正确设置数据库存储。该设置拥有全局特性，同一进程所有WebView实例共用同一配置。`注意：`保证在同一进程的任一WebView加载页面之前修改该属性，因为在这之后设置WebView可能会忽略该配置\n- setDomStorageEnabled(boolean flag)\n\t\n\t是否存储页面DOM结构，默认false。\n- setGeolocationEnabled(boolean flag)\n\n\t是否允许定位，默认true。`注意：`为了保证定位可以使用，要保证以下几点：\n\t- Application 需要有`android.Manifest.permission#ACCESS_COARSE_LOCATION`的权限\n\t- Application 需要实现`WebChromeClient#onGeolocationPermissionsShowPrompt`的回调，接收Js定位请求访问地理位置的通知\n- setJavaScriptCanOpenWindowsAutomatically(boolean flag)\n\t\n\t是否允许JS自动打开窗口。默认false\n- setDefaultTextEncodingName(String encoding)\n\t\n\t设置页面的编码格式，默认UTF-8\n- setUserAgentString(String ua)\n\t\n\t设置WebView代理，默认使用默认值\n- setNeedInitialFocus(boolean flag)\n\t\n\t通知WebView是否需要设置一个节点获取焦点当`WebView#requestFocus(int, android.graphics.Rect)`被调用的时候，默认true\n- setCacheMode(int mode)\n\t\n\t基于WebView导航的类型使用缓存：正常页面加载会加载缓存并按需判断内容是否需要重新验证。如果是页面返回，页面内容不会重新加载，直接从缓存中恢复。`setCacheMode`允许客户端根据指定的模式来使用缓存。\n\t- LOAD_DEFAULT 默认加载方式\n\t- LOAD_CACHE_ELSE_NETWORK 按网络情况使用缓存\n\t- LOAD_NO_CACHE 不使用缓存\n\t- LOAD_CACHE_ONLY 只使用缓存\n- setMixedContentMode(int mode)\n\t\n\t设置加载不安全资源的WebView加载行为。`KITKAT`版本以及以下默认为`MIXED_CONTENT_ALWAYS_ALLOW`方式，`LOLLIPOP`默认`MIXED_CONTENT_NEVER_ALLOW`。强烈建议：使用`MIXED_CONTENT_NEVER_ALLOW`\n\n### 三、WebViewClient\n- shouldOverrideUrlLoading(WebView view, String url)\n\n\t当加载新的URL时是否由主程序控制显示。如果没有提供`WebViewClient`，则选择合适的url处理方式。如果指定`WebViewClient`，返回值为true意味主程序处理url，返回值为false意味当前`WebView`处理url。`注意：`如果使用`POST`方法该方法不会被调用。\n- onPageStarted(WebView view, String url, Bitmap favicon)。\n\n\t通知主程序页面开始加载。该方法只有在加载main frame时加载一次，如果一个页面有多个frame，`onPageStarted`只在加载main frame时调用一次。也意味着若内置frame发生变化，`onPageStarted`不会被调用，如：在iframe中打开url链接。\n- onPageFinished(WebView view, String url)\n\t\n\t通知主程序页面加载结束。方法只被main frame调用一次。\n- onLoadResource(WebView view, String url)\n\n\t通知主程序开始加载指定url的资源文件。\n- shouldInterceptRequest(WebView view,WebResourceRequest request)\n\t\n\t通知主程序资源请求，是否允许程序返回指定数据资源。如果返回值为`null`，表示继续正常加载资源文件，否则使用返回响应和值。`注意：`该方法在线程被调用而不是UI线程，所有客户端在调用私有数据或在与View交互的时候应该注意。\n- onReceivedError(WebView view, int errorCode, String description, String failingUrl)\n\n\t返回访问错误通知。\n- onFormResubmission(WebView view, Message dontResend, Message resend)\n\n\t是否重发POST请求数据，默认不重发。\n- doUpdateVisitedHistory(WebView view, String url, boolean isReload)\n\n\t更新访问历史\n- onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)\n\n\t通知主程序加载资源的SSL错误。必须调用`handler.cancel()`或`handler.proceed()`。该设置可能会为之后资源访问的SSL错误保留使用当前的设定。默认`cancel`\n- onReceivedClientCertRequest(WebView view, ClientCertRequest request)\n\n\t通知主程序处理SSL客户端认证请求。如果需要提供密钥，主程序负责显示UI界面。有三个响应方法：`proceed()`, `cancel()` 和 `ignore()`。如果调用`proceed()`和`cancel()`，webview将会记住response，对相同的host和port地址不再调用onReceivedClientCertRequest方法。如果调用`ignore()`方法，webview则不会记住response。该方法在UI线程中执行，在回调期间，连接被挂起。默认`cancel()`，即无客户端认证\n- onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)\n\n\t通知主程序：WebView接收HTTP认证请求，主程序可以使用`HttpAuthHandler`为请求设置WebView响应。默认取消请求。\n- shouldOverrideKeyEvent(WebView view, KeyEvent event)\n\n\t是否让主程序同步处理Key Event事件，如过滤菜单快捷键的Key Event事件。如果返回true，WebView不会处理Key Event，如果返回false，Key Event总是由WebView处理。默认：false\n- onUnhandledInputEvent(WebView view, InputEvent event)\n\t\n\t通知主程序输入事件不是由WebView调用。是否让主程序处理WebView未处理的Input Event。除了系统按键，WebView总是消耗掉输入事件或`shouldOverrideKeyEvent`返回true。该方法由event 分发异步调用。`注意：`如果事件为`MotionEvent`，则事件的生命周期只存在方法调用过程中，如果WebViewClient想要使用这个Event，则需要复制Event对象。\n- onScaleChanged(WebView view, float oldScale, float newScale)\n\n\t通知主程序WebView的大小发生变化。\n- onReceivedLoginRequest(WebView view, String realm, String account, String args)\n\t\n\t通知主程序执行了自动登录请求。\n\n### 四、WebChromeClient\n- onProgressChanged(WebView view, int newProgress)\n\t\n\t通知程序当前页面加载进度\n- onReceivedTitle(WebView view, String title) \n\t\n\t通知页面标题变化\n- onReceivedIcon(WebView view, Bitmap icon)\n\t\n\t通知当前页面网站新图标\n-  onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)\n\n\t通知主程序图标按钮URL\n- CustomViewCallback\n\t```java\n\tpublic interface CustomViewCallback {\n        // 通知当前页面自定义的View被关闭\n        public void onCustomViewHidden();\n    }\n\t```\n- onShowCustomView(View view, CustomViewCallback callback)\n\t\n\t通知主程序当前页面将要显示指定方向的View，该方法用来全屏播放视频。\n- onHideCustomView()\n\t\n\t与`onShowCustomView`对应，通知主程序当前页面将要关闭Custom View\n- onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)\n\n\t请求主程序创建一个新的Window，如果主程序接收请求，返回true并创建一个新的WebView来装载Window，然后添加到View中，发送带有创建的WebView作为参数的resultMsg的给Target。如果主程序拒绝接收请求，则方法返回false。默认不做任何处理，返回false\n- onRequestFocus(WebView view)\n\n\t显示当前WebView，为当前WebView获取焦点。\n- onCloseWindow(WebView window)\n\t\n\t通知主程序关闭WebView，并从View中移除，`WebCore`停止任何的进行中的加载和JS功能。\n- onJsAlert(WebView view, String url, String message, JsResult result)\n\n\t告诉客户端显示Js 提示框。如果客户端返回true，由客户端处理提示框。否则继续显示Js 提示框。\n- onJsConfirm(WebView view, String url, String message, JsResult result)\n\n\t告诉客户端显示确认提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值false给javascript。默认：false\n- onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)\n\t\n\t告诉客户端显示提示框。如果返回true，由客户端处理确认提示框，调用合适的JsPromptResult方法。如果返回false，则返回默认值false给javascript。默认：false\n- onJsBeforeUnload(WebView view, String url, String message, JsResult result)\n\n\t告诉客户端显示离开当前页面的导航提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值true给javascript接受离开当前页面的导航。默认：false。JsResult设置false，当前页面取消导航提示，否则离开当前页面。\n- onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)\n\n\t通知主程序web内容尝试使用定位API，但是没有相关的权限。主程序需要调用调用指定的定位权限申请的回调。更多说明查看`GeolocationPermissions`相关API。\n- onGeolocationPermissionsHidePrompt()\n\n\t通知程序有定位权限请求。如果`onGeolocationPermissionsShowPrompt`权限申请操作被取消，则隐藏相关的UI界面。\n- onPermissionRequest(PermissionRequest request)\n\n\t通知主程序web内容尝试申请指定资源的权限（权限没有授权或已拒绝），主程序必须调用`PermissionRequest#grant(String[])`或`PermissionRequest#deny()`。如果没有覆写该方法，默认拒绝。\n- onPermissionRequestCanceled(PermissionRequest request)\n\t\n\t通知主程序相关权限被取消。任何相关UI都应该隐藏掉。\n- onJsTimeout() \n\t\n\t通知主程序 执行的Js操作超时。客户端决定是否中断`JavaScript`继续执行。如果客户端返回true，JavaScript中断执行。如果客户端返回false，则执行继续。`注意：`如果继续执行，重置JavaScript超时计时器。如果Js下一次检查点仍没有结束，则再次提示。\n- onConsoleMessage(ConsoleMessage consoleMessage)\n\t\n\t通知主程序的Js控制台消息，`ChromeClient`应该覆写该方法在合适的时候来打印日志。\n- getDefaultVideoPoster()\n\t\n\t当停止播放，Video显示为一张图片。默认图片可以通过HTML的Video的poster属性标签来指定。如果poster属性不存在，则使用默认的poster。该方法允许`ChromeClient`提供默认图片。\n- getVideoLoadingProgressView()\n\n\t当用户重放视频，在渲染第一帧前需要花费时间去缓冲足够的数据。在缓冲期间，`ChromeClient`可以提供一个显示的View。如：可以显示一个加载动画。\n- getVisitedHistory(ValueCallback<String[]> callback)\n\n\t获取访问历史Item，用于链接颜色。\n- onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n            FileChooserParams fileChooserParams)\n\n\t通知客户端显示文件选择器。用来处理file类型的HTML标签，响应用户点击选择文件的按钮操作。调用`filePathCallback.onReceiveValue(null)`并返回true取消请求操作。\n- FileChooserParams \n\t\n\t`onShowFileChooser`方法使用的参数\n\t- MODE_OPEN 打开\n\t- MODE_OPEN_MULTIPLE 选中多个文件打开\n\t- MODE_OPEN_FOLDER 打开文件夹（暂不支持）\n\t- MODE_SAVE 保存\n\t- parseResult(int resultCode, Intent data)\n\t\t\n\t\t解析文件选择Activity返回的结果。需要和`createIntent`一起使用。\n\t- createIntent()\n\t\n\t\t创建Intent对象来启动文件选择器。Intent支持可访问的简单类型文件资源。不支持高级文件资源如`live media capture`媒体快照。如果需要访问这些资源或其他高级文件类型资源可以自己创建Intent对象。\n\t- getMode()\n\t\t\n\t\t返回文件选择模式\n\t- getAcceptTypes() \n\t\n\t\t返回可访问`MIME`类型数组，如`audio/*`，如果没有指定可访问类型，数组返回为null\n\t- isCaptureEnabled()\n\t\t\n\t\t返回优先的媒体快照类型值如`Camera`、`Microphone`。true：允许快照。false，禁止快照。使用`getAcceptTypes`方法确定合适的`capture`设备。\n\t- getTitle()\n\t\t\n\t\t返回文件选择器的标题。如果为null，使用默认名称。\n\t- getFilenameHint()\n\t\t\n\t\t指定默认选中的文件名或为null\n- setupAutoFill(Message msg) `暂不支持`\n\t\n\t告诉客户端当前页面以自动填充表单形式查看。\n\t\n\t\t\n\n\t","slug":"Android：WebView开发笔记（二）","published":1,"updated":"2016-01-27T03:19:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3ty2000jgrm311uibc96","content":"<p><a href=\"http://www.jianshu.com/p/897d9e3bc783?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq\" target=\"_blank\" rel=\"external\">WebView小结</a></p>\n<p><a href=\"http://developer.android.com/intl/ja/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"external\">WebView相关API</a></p>\n<h3 id=\"一、WebView介绍\"><a href=\"#一、WebView介绍\" class=\"headerlink\" title=\"一、WebView介绍\"></a>一、WebView介绍</h3><p>1.权限<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>2.基本使用</p>\n<p>创建有两种方式1.在layout布局文件中使用<code>&lt;WebView/&gt;</code>标签或在代码中动态创建 WebView对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = <span class=\"keyword\">new</span> WebView(<span class=\"keyword\">this</span>);</div><div class=\"line\">setContentView(webView);</div></pre></td></tr></table></figure></p>\n<p>在浏览器中加载<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"http://www.example.com\"</span>); </div><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri); </div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p>webview加载页面<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 加载URL</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"http://slashdot.org/\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载String形式的HTML,</span></div><div class=\"line\">String summary = <span class=\"string\">\"&lt;html&gt;&lt;body&gt;You scored &lt;b&gt;192&lt;/b&gt; points.&lt;/body&gt;&lt;/html&gt;\"</span>;</div><div class=\"line\"><span class=\"comment\">// 有时候会显示为乱码,可以把 string 的内容也变为 utf-8的编码，统一编码格式 </span></div><div class=\"line\"><span class=\"comment\">// summary = new String(summary.getBytes() , \"UTF-8\");</span></div><div class=\"line\">webView.loadData(summary);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加载本地文件</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"file:///android_asset/XX.html\"</span>);</div></pre></td></tr></table></figure></p>\n<p>设置WebSetting<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSetting = webView.getSettings()</div><div class=\"line\"><span class=\"comment\">// 允许JS</span></div><div class=\"line\">webSetting.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>设置WebViewClient<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class=\"line\">     Toast.makeText(activity, <span class=\"string\">\"Oh no! \"</span> + description, Toast.LENGTH_SHORT).show();</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>设置WebChromeClient<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> progress)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Activities and WebViews measure progress with different scales.</span></div><div class=\"line\">     <span class=\"comment\">// The progress meter will automatically disappear when we reach 100%</span></div><div class=\"line\">     activity.setProgress(progress * <span class=\"number\">1000</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>Js调用Native层代码</p>\n<ul>\n<li><p>html代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wave</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"droid\"</span>).src=<span class=\"string\">\"android_waving.png\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- js调用java方法 window.js_callback.clickOnAndroid().index(this)); --&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 形式：window.指定string.函数名 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"window.android.clickOnAndroid()\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"droid\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"android_normal.png\"</span> <span class=\"attr\">mce_src</span>=<span class=\"string\">\"android_normal.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> Click me! <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>java对应的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里假设已经允许JS webSetting.setJavaScriptEnabled(true);</span></div><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> JavaScriptInterface() , <span class=\"string\">\"android\"</span>)</div><div class=\"line\"><span class=\"comment\">// JS调用的Native函数对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaScriptInterface</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/*4.2以后才有@JavascriptInterface，因为安全隐患问题。</span></div><div class=\"line\">    * 因为 JavaScript 可以通过反射访问注入 webview 的 java 对象的 public fields，</div><div class=\"line\">    * 使用宿主程序的权限执行 java 代码。所以，4.2以后，任何为 JS 暴露接口的，都要加上@JavascriptInterface。</div><div class=\"line\">    * 这样，这个 Java 对象的 fields 将不允许被 js 访问。*/</div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clickOnAndroid</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//TODO</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Native调用Js</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.loadUrl(<span class=\"string\">\"javascript:alert()\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"二、WebSettings\"><a href=\"#二、WebSettings\" class=\"headerlink\" title=\"二、WebSettings\"></a>二、WebSettings</h3><p>WebView配置管理类。当WebView第一次创建时包含默认配置。通过<code>getter</code>方法来获取配置信息。调用WebView.getSetting()方法将WebSettings与WebView的生命周期绑定。如果WebView被销毁，调用任何WebView的方法都会抛出<code>IllegalStateException</code>异常信息</p>\n<ul>\n<li><p>setSupportZoom(boolean support) </p>\n<p>  是否支持缩放，配合方法<code>setBuiltInZoomControls</code>使用，默认true</p>\n</li>\n<li><p>setMediaPlaybackRequiresUserGesture(boolean require) </p>\n<p>  是否需要用户手势来播放Media，默认true</p>\n</li>\n<li><p>setBuiltInZoomControls(boolean enabled) </p>\n<p>  是否使用WebView内置的缩放组件，由浮动在窗口上的缩放控制和手势缩放控制组成，默认false</p>\n</li>\n<li><p>setDisplayZoomControls(boolean enabled) </p>\n<p>  是否显示窗口悬浮的缩放控制，默认true</p>\n</li>\n<li><p>setAllowFileAccess(boolean allow)</p>\n<p>  是否允许访问WebView内部文件，默认true</p>\n</li>\n<li><p>setAllowContentAccess(boolean allow)</p>\n<p>  是否允许获取WebView的内容URL ，可以让WebView访问ContentPrivider存储的内容。 默认true</p>\n</li>\n<li><p>setLoadWithOverviewMode(boolean overview)</p>\n<p>  是否启动概述模式浏览界面，当页面宽度超过WebView显示宽度时，缩小页面适应WebView。默认false</p>\n</li>\n<li><p>setSaveFormData(boolean save)</p>\n<p>  是否保存表单数据，默认false</p>\n</li>\n<li><p>setTextZoom(int textZoom)</p>\n<p>  设置页面文字缩放百分比，默认100%</p>\n</li>\n<li><p>setUseWideViewPort(boolean use)</p>\n<p>  是否支持ViewPort的meta tag属性，如果页面有ViewPort meta tag 指定的宽度，则使用meta tag指定的值，否则默认使用宽屏的视图窗口</p>\n</li>\n<li><p>setSupportMultipleWindows(boolean support)</p>\n<p>  是否支持多窗口，如果设置为true ，<code>WebChromeClient#onCreateWindow</code>方法必须被主程序实现，默认false</p>\n</li>\n<li><p>setLayoutAlgorithm(LayoutAlgorithm l)</p>\n<p>  指定WebView的页面布局显示形式，调用该方法会引起页面重绘。默认LayoutAlgorithm#NARROW_COLUMNS</p>\n</li>\n<li><p>setStandardFontFamily(String font)</p>\n<p>  设置标准的字体族，默认”sans-serif”。font-family 规定元素的字体系列。font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。</p>\n</li>\n<li><p>setFixedFontFamily(String font)</p>\n<p>  设置混合字体族。默认”monospace”</p>\n</li>\n<li><p>setSansSerifFontFamily(String font)</p>\n<p>  设置SansSerif字体族。默认”sans-serif”</p>\n</li>\n<li><p>setSerifFontFamily(String font)</p>\n<p>  设置SerifFont字体族，默认”sans-serif”</p>\n</li>\n<li><p>setCursiveFontFamily(String font)</p>\n<p>  设置CursiveFont字体族，默认”cursive”</p>\n</li>\n<li><p>setFantasyFontFamily(String font)</p>\n<p>  设置FantasyFont字体族，默认”fantasy”</p>\n</li>\n<li><p>setMinimumFontSize(int size)</p>\n<p>  设置最小字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setMinimumLogicalFontSize(int size)</p>\n<p>  设置最小逻辑字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setDefaultFontSize(int size)</p>\n<p>  设置默认字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setDefaultFixedFontSize(int size)</p>\n<p>  设置默认填充字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setLoadsImagesAutomatically(boolean flag)</p>\n<p>  设置是否加载图片资源，<code>注意：</code>方法控制所有的资源图片显示，包括嵌入的本地图片资源。使用方法<code>setBlockNetworkImage</code>则只限制网络资源图片的显示。值设置为true后，webview会自动加载网络图片。默认true</p>\n</li>\n<li><p>setBlockNetworkImage(boolean flag)</p>\n<p>  是否加载网络图片资源。<code>注意</code>如果<code>getLoadsImagesAutomatically</code>返回false，则该方法没有效果。如果使用<code>setBlockNetworkLoads</code>设置为false，该方法设置为false，也不会显示网络图片。当值从true改为false时。WebView会自动加载网络图片。</p>\n</li>\n<li><p>setBlockNetworkLoads(boolean flag)</p>\n<p>  设置是否加载网络资源。<code>注意</code>如果值从true切换为false后，WebView不会自动加载，除非调用WebView#reload().如果没有<code>android.Manifest.permission#INTERNET</code>权限，值设为false，则会抛出<code>java.lang.SecurityException</code>异常。默认值：有<code>android.Manifest.permission#INTERNET</code>权限时为false，其他为true。</p>\n</li>\n<li><p>setJavaScriptEnabled(boolean flag)</p>\n<p>  设置是否允许执行JS。</p>\n</li>\n<li><p>setAllowUniversalAccessFromFileURLs(boolean flag)</p>\n<p>  是否允许Js访问任何来源的内容。包括访问file scheme的URLs。考虑到安全性，限制Js访问范围默认禁用。<code>注意：</code>该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。<code>ICE_CREAM_SANDWICH_MR1</code>版本以及以下默认为true，<code>JELLY_BEAN</code>版本以上默认为false</p>\n</li>\n<li><p>setAllowFileAccessFromFileURLs(boolean flag)</p>\n<p>  是否允许Js访问其他file scheme的URLs。包括访问file scheme的资源。考虑到安全性，限制Js访问范围默认禁用。<code>注意：</code>该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。如果<code>getAllowUniversalAccessFromFileURLs</code>为true，则该方法被忽略。<code>ICE_CREAM_SANDWICH_MR1</code>版本以及以下默认为true，<code>JELLY_BEAN</code>版本以上默认为false</p>\n</li>\n<li><p>setGeolocationDatabasePath(String databasePath)</p>\n<p>  设置存储定位数据库的位置，考虑到位置权限和持久化Cache缓存，Application需要拥有指定路径的write权限</p>\n</li>\n<li><p>setAppCacheEnabled(boolean flag)</p>\n<p>  是否允许Cache，默认false。考虑需要存储缓存，应该为缓存指定存储路径<code>setAppCachePath</code></p>\n</li>\n<li><p>setAppCachePath(String appCachePath)</p>\n<p>  设置Cache API缓存路径。为了保证可以访问Cache，Application需要拥有指定路径的write权限。该方法应该只调用一次，多次调用自动忽略。</p>\n</li>\n<li><p>setDatabaseEnabled(boolean flag)</p>\n<p>  是否允许数据库存储。默认false。查看<code>setDatabasePath</code> API 如何正确设置数据库存储。该设置拥有全局特性，同一进程所有WebView实例共用同一配置。<code>注意：</code>保证在同一进程的任一WebView加载页面之前修改该属性，因为在这之后设置WebView可能会忽略该配置</p>\n</li>\n<li><p>setDomStorageEnabled(boolean flag)</p>\n<p>  是否存储页面DOM结构，默认false。</p>\n</li>\n<li><p>setGeolocationEnabled(boolean flag)</p>\n<p>  是否允许定位，默认true。<code>注意：</code>为了保证定位可以使用，要保证以下几点：</p>\n<ul>\n<li>Application 需要有<code>android.Manifest.permission#ACCESS_COARSE_LOCATION</code>的权限</li>\n<li>Application 需要实现<code>WebChromeClient#onGeolocationPermissionsShowPrompt</code>的回调，接收Js定位请求访问地理位置的通知</li>\n</ul>\n</li>\n<li><p>setJavaScriptCanOpenWindowsAutomatically(boolean flag)</p>\n<p>  是否允许JS自动打开窗口。默认false</p>\n</li>\n<li><p>setDefaultTextEncodingName(String encoding)</p>\n<p>  设置页面的编码格式，默认UTF-8</p>\n</li>\n<li><p>setUserAgentString(String ua)</p>\n<p>  设置WebView代理，默认使用默认值</p>\n</li>\n<li><p>setNeedInitialFocus(boolean flag)</p>\n<p>  通知WebView是否需要设置一个节点获取焦点当<code>WebView#requestFocus(int, android.graphics.Rect)</code>被调用的时候，默认true</p>\n</li>\n<li><p>setCacheMode(int mode)</p>\n<p>  基于WebView导航的类型使用缓存：正常页面加载会加载缓存并按需判断内容是否需要重新验证。如果是页面返回，页面内容不会重新加载，直接从缓存中恢复。<code>setCacheMode</code>允许客户端根据指定的模式来使用缓存。</p>\n<ul>\n<li>LOAD_DEFAULT 默认加载方式</li>\n<li>LOAD_CACHE_ELSE_NETWORK 按网络情况使用缓存</li>\n<li>LOAD_NO_CACHE 不使用缓存</li>\n<li>LOAD_CACHE_ONLY 只使用缓存</li>\n</ul>\n</li>\n<li><p>setMixedContentMode(int mode)</p>\n<p>  设置加载不安全资源的WebView加载行为。<code>KITKAT</code>版本以及以下默认为<code>MIXED_CONTENT_ALWAYS_ALLOW</code>方式，<code>LOLLIPOP</code>默认<code>MIXED_CONTENT_NEVER_ALLOW</code>。强烈建议：使用<code>MIXED_CONTENT_NEVER_ALLOW</code></p>\n</li>\n</ul>\n<h3 id=\"三、WebViewClient\"><a href=\"#三、WebViewClient\" class=\"headerlink\" title=\"三、WebViewClient\"></a>三、WebViewClient</h3><ul>\n<li><p>shouldOverrideUrlLoading(WebView view, String url)</p>\n<p>  当加载新的URL时是否由主程序控制显示。如果没有提供<code>WebViewClient</code>，则选择合适的url处理方式。如果指定<code>WebViewClient</code>，返回值为true意味主程序处理url，返回值为false意味当前<code>WebView</code>处理url。<code>注意：</code>如果使用<code>POST</code>方法该方法不会被调用。</p>\n</li>\n<li><p>onPageStarted(WebView view, String url, Bitmap favicon)。</p>\n<p>  通知主程序页面开始加载。该方法只有在加载main frame时加载一次，如果一个页面有多个frame，<code>onPageStarted</code>只在加载main frame时调用一次。也意味着若内置frame发生变化，<code>onPageStarted</code>不会被调用，如：在iframe中打开url链接。</p>\n</li>\n<li><p>onPageFinished(WebView view, String url)</p>\n<p>  通知主程序页面加载结束。方法只被main frame调用一次。</p>\n</li>\n<li><p>onLoadResource(WebView view, String url)</p>\n<p>  通知主程序开始加载指定url的资源文件。</p>\n</li>\n<li><p>shouldInterceptRequest(WebView view,WebResourceRequest request)</p>\n<p>  通知主程序资源请求，是否允许程序返回指定数据资源。如果返回值为<code>null</code>，表示继续正常加载资源文件，否则使用返回响应和值。<code>注意：</code>该方法在线程被调用而不是UI线程，所有客户端在调用私有数据或在与View交互的时候应该注意。</p>\n</li>\n<li><p>onReceivedError(WebView view, int errorCode, String description, String failingUrl)</p>\n<p>  返回访问错误通知。</p>\n</li>\n<li><p>onFormResubmission(WebView view, Message dontResend, Message resend)</p>\n<p>  是否重发POST请求数据，默认不重发。</p>\n</li>\n<li><p>doUpdateVisitedHistory(WebView view, String url, boolean isReload)</p>\n<p>  更新访问历史</p>\n</li>\n<li><p>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)</p>\n<p>  通知主程序加载资源的SSL错误。必须调用<code>handler.cancel()</code>或<code>handler.proceed()</code>。该设置可能会为之后资源访问的SSL错误保留使用当前的设定。默认<code>cancel</code></p>\n</li>\n<li><p>onReceivedClientCertRequest(WebView view, ClientCertRequest request)</p>\n<p>  通知主程序处理SSL客户端认证请求。如果需要提供密钥，主程序负责显示UI界面。有三个响应方法：<code>proceed()</code>, <code>cancel()</code> 和 <code>ignore()</code>。如果调用<code>proceed()</code>和<code>cancel()</code>，webview将会记住response，对相同的host和port地址不再调用onReceivedClientCertRequest方法。如果调用<code>ignore()</code>方法，webview则不会记住response。该方法在UI线程中执行，在回调期间，连接被挂起。默认<code>cancel()</code>，即无客户端认证</p>\n</li>\n<li><p>onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)</p>\n<p>  通知主程序：WebView接收HTTP认证请求，主程序可以使用<code>HttpAuthHandler</code>为请求设置WebView响应。默认取消请求。</p>\n</li>\n<li><p>shouldOverrideKeyEvent(WebView view, KeyEvent event)</p>\n<p>  是否让主程序同步处理Key Event事件，如过滤菜单快捷键的Key Event事件。如果返回true，WebView不会处理Key Event，如果返回false，Key Event总是由WebView处理。默认：false</p>\n</li>\n<li><p>onUnhandledInputEvent(WebView view, InputEvent event)</p>\n<p>  通知主程序输入事件不是由WebView调用。是否让主程序处理WebView未处理的Input Event。除了系统按键，WebView总是消耗掉输入事件或<code>shouldOverrideKeyEvent</code>返回true。该方法由event 分发异步调用。<code>注意：</code>如果事件为<code>MotionEvent</code>，则事件的生命周期只存在方法调用过程中，如果WebViewClient想要使用这个Event，则需要复制Event对象。</p>\n</li>\n<li><p>onScaleChanged(WebView view, float oldScale, float newScale)</p>\n<p>  通知主程序WebView的大小发生变化。</p>\n</li>\n<li><p>onReceivedLoginRequest(WebView view, String realm, String account, String args)</p>\n<p>  通知主程序执行了自动登录请求。</p>\n</li>\n</ul>\n<h3 id=\"四、WebChromeClient\"><a href=\"#四、WebChromeClient\" class=\"headerlink\" title=\"四、WebChromeClient\"></a>四、WebChromeClient</h3><ul>\n<li><p>onProgressChanged(WebView view, int newProgress)</p>\n<p>  通知程序当前页面加载进度</p>\n</li>\n<li><p>onReceivedTitle(WebView view, String title) </p>\n<p>  通知页面标题变化</p>\n</li>\n<li><p>onReceivedIcon(WebView view, Bitmap icon)</p>\n<p>  通知当前页面网站新图标</p>\n</li>\n<li><p>onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)</p>\n<p> 通知主程序图标按钮URL</p>\n</li>\n<li><p>CustomViewCallback</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomViewCallback</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// 通知当前页面自定义的View被关闭</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCustomViewHidden</span><span class=\"params\">()</span></span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>onShowCustomView(View view, CustomViewCallback callback)</p>\n<p>  通知主程序当前页面将要显示指定方向的View，该方法用来全屏播放视频。</p>\n</li>\n<li><p>onHideCustomView()</p>\n<p>  与<code>onShowCustomView</code>对应，通知主程序当前页面将要关闭Custom View</p>\n</li>\n<li><p>onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)</p>\n<p>  请求主程序创建一个新的Window，如果主程序接收请求，返回true并创建一个新的WebView来装载Window，然后添加到View中，发送带有创建的WebView作为参数的resultMsg的给Target。如果主程序拒绝接收请求，则方法返回false。默认不做任何处理，返回false</p>\n</li>\n<li><p>onRequestFocus(WebView view)</p>\n<p>  显示当前WebView，为当前WebView获取焦点。</p>\n</li>\n<li><p>onCloseWindow(WebView window)</p>\n<p>  通知主程序关闭WebView，并从View中移除，<code>WebCore</code>停止任何的进行中的加载和JS功能。</p>\n</li>\n<li><p>onJsAlert(WebView view, String url, String message, JsResult result)</p>\n<p>  告诉客户端显示Js 提示框。如果客户端返回true，由客户端处理提示框。否则继续显示Js 提示框。</p>\n</li>\n<li><p>onJsConfirm(WebView view, String url, String message, JsResult result)</p>\n<p>  告诉客户端显示确认提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值false给javascript。默认：false</p>\n</li>\n<li><p>onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)</p>\n<p>  告诉客户端显示提示框。如果返回true，由客户端处理确认提示框，调用合适的JsPromptResult方法。如果返回false，则返回默认值false给javascript。默认：false</p>\n</li>\n<li><p>onJsBeforeUnload(WebView view, String url, String message, JsResult result)</p>\n<p>  告诉客户端显示离开当前页面的导航提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值true给javascript接受离开当前页面的导航。默认：false。JsResult设置false，当前页面取消导航提示，否则离开当前页面。</p>\n</li>\n<li><p>onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)</p>\n<p>  通知主程序web内容尝试使用定位API，但是没有相关的权限。主程序需要调用调用指定的定位权限申请的回调。更多说明查看<code>GeolocationPermissions</code>相关API。</p>\n</li>\n<li><p>onGeolocationPermissionsHidePrompt()</p>\n<p>  通知程序有定位权限请求。如果<code>onGeolocationPermissionsShowPrompt</code>权限申请操作被取消，则隐藏相关的UI界面。</p>\n</li>\n<li><p>onPermissionRequest(PermissionRequest request)</p>\n<p>  通知主程序web内容尝试申请指定资源的权限（权限没有授权或已拒绝），主程序必须调用<code>PermissionRequest#grant(String[])</code>或<code>PermissionRequest#deny()</code>。如果没有覆写该方法，默认拒绝。</p>\n</li>\n<li><p>onPermissionRequestCanceled(PermissionRequest request)</p>\n<p>  通知主程序相关权限被取消。任何相关UI都应该隐藏掉。</p>\n</li>\n<li><p>onJsTimeout() </p>\n<p>  通知主程序 执行的Js操作超时。客户端决定是否中断<code>JavaScript</code>继续执行。如果客户端返回true，JavaScript中断执行。如果客户端返回false，则执行继续。<code>注意：</code>如果继续执行，重置JavaScript超时计时器。如果Js下一次检查点仍没有结束，则再次提示。</p>\n</li>\n<li><p>onConsoleMessage(ConsoleMessage consoleMessage)</p>\n<p>  通知主程序的Js控制台消息，<code>ChromeClient</code>应该覆写该方法在合适的时候来打印日志。</p>\n</li>\n<li><p>getDefaultVideoPoster()</p>\n<p>  当停止播放，Video显示为一张图片。默认图片可以通过HTML的Video的poster属性标签来指定。如果poster属性不存在，则使用默认的poster。该方法允许<code>ChromeClient</code>提供默认图片。</p>\n</li>\n<li><p>getVideoLoadingProgressView()</p>\n<p>  当用户重放视频，在渲染第一帧前需要花费时间去缓冲足够的数据。在缓冲期间，<code>ChromeClient</code>可以提供一个显示的View。如：可以显示一个加载动画。</p>\n</li>\n<li><p>getVisitedHistory(ValueCallback<string[]> callback)</string[]></p>\n<p>  获取访问历史Item，用于链接颜色。</p>\n</li>\n<li><p>onShowFileChooser(WebView webView, ValueCallback<uri[]> filePathCallback,</uri[]></p>\n<pre><code>FileChooserParams fileChooserParams)\n</code></pre><p>  通知客户端显示文件选择器。用来处理file类型的HTML标签，响应用户点击选择文件的按钮操作。调用<code>filePathCallback.onReceiveValue(null)</code>并返回true取消请求操作。</p>\n</li>\n<li><p>FileChooserParams </p>\n<p>  <code>onShowFileChooser</code>方法使用的参数</p>\n<ul>\n<li>MODE_OPEN 打开</li>\n<li>MODE_OPEN_MULTIPLE 选中多个文件打开</li>\n<li>MODE_OPEN_FOLDER 打开文件夹（暂不支持）</li>\n<li>MODE_SAVE 保存</li>\n<li><p>parseResult(int resultCode, Intent data)</p>\n<p>  解析文件选择Activity返回的结果。需要和<code>createIntent</code>一起使用。</p>\n</li>\n<li><p>createIntent()</p>\n<p>  创建Intent对象来启动文件选择器。Intent支持可访问的简单类型文件资源。不支持高级文件资源如<code>live media capture</code>媒体快照。如果需要访问这些资源或其他高级文件类型资源可以自己创建Intent对象。</p>\n</li>\n<li><p>getMode()</p>\n<p>  返回文件选择模式</p>\n</li>\n<li><p>getAcceptTypes() </p>\n<p>  返回可访问<code>MIME</code>类型数组，如<code>audio/*</code>，如果没有指定可访问类型，数组返回为null</p>\n</li>\n<li><p>isCaptureEnabled()</p>\n<p>  返回优先的媒体快照类型值如<code>Camera</code>、<code>Microphone</code>。true：允许快照。false，禁止快照。使用<code>getAcceptTypes</code>方法确定合适的<code>capture</code>设备。</p>\n</li>\n<li><p>getTitle()</p>\n<p>  返回文件选择器的标题。如果为null，使用默认名称。</p>\n</li>\n<li><p>getFilenameHint()</p>\n<p>  指定默认选中的文件名或为null</p>\n</li>\n</ul>\n</li>\n<li><p>setupAutoFill(Message msg) <code>暂不支持</code></p>\n<p>  告诉客户端当前页面以自动填充表单形式查看。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.jianshu.com/p/897d9e3bc783?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq\" target=\"_blank\" rel=\"external\">WebView小结</a></p>\n<p><a href=\"http://developer.android.com/intl/ja/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"external\">WebView相关API</a></p>\n<h3 id=\"一、WebView介绍\"><a href=\"#一、WebView介绍\" class=\"headerlink\" title=\"一、WebView介绍\"></a>一、WebView介绍</h3><p>1.权限<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>2.基本使用</p>\n<p>创建有两种方式1.在layout布局文件中使用<code>&lt;WebView/&gt;</code>标签或在代码中动态创建 WebView对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = <span class=\"keyword\">new</span> WebView(<span class=\"keyword\">this</span>);</div><div class=\"line\">setContentView(webView);</div></pre></td></tr></table></figure></p>\n<p>在浏览器中加载<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"http://www.example.com\"</span>); </div><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri); </div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p>webview加载页面<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 加载URL</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"http://slashdot.org/\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载String形式的HTML,</span></div><div class=\"line\">String summary = <span class=\"string\">\"&lt;html&gt;&lt;body&gt;You scored &lt;b&gt;192&lt;/b&gt; points.&lt;/body&gt;&lt;/html&gt;\"</span>;</div><div class=\"line\"><span class=\"comment\">// 有时候会显示为乱码,可以把 string 的内容也变为 utf-8的编码，统一编码格式 </span></div><div class=\"line\"><span class=\"comment\">// summary = new String(summary.getBytes() , \"UTF-8\");</span></div><div class=\"line\">webView.loadData(summary);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加载本地文件</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"file:///android_asset/XX.html\"</span>);</div></pre></td></tr></table></figure></p>\n<p>设置WebSetting<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSetting = webView.getSettings()</div><div class=\"line\"><span class=\"comment\">// 允许JS</span></div><div class=\"line\">webSetting.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>设置WebViewClient<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class=\"line\">     Toast.makeText(activity, <span class=\"string\">\"Oh no! \"</span> + description, Toast.LENGTH_SHORT).show();</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>设置WebChromeClient<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> progress)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Activities and WebViews measure progress with different scales.</span></div><div class=\"line\">     <span class=\"comment\">// The progress meter will automatically disappear when we reach 100%</span></div><div class=\"line\">     activity.setProgress(progress * <span class=\"number\">1000</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>Js调用Native层代码</p>\n<ul>\n<li><p>html代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wave</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"droid\"</span>).src=<span class=\"string\">\"android_waving.png\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- js调用java方法 window.js_callback.clickOnAndroid().index(this)); --&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 形式：window.指定string.函数名 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"window.android.clickOnAndroid()\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"droid\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"android_normal.png\"</span> <span class=\"attr\">mce_src</span>=<span class=\"string\">\"android_normal.png\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> Click me! <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>java对应的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里假设已经允许JS webSetting.setJavaScriptEnabled(true);</span></div><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> JavaScriptInterface() , <span class=\"string\">\"android\"</span>)</div><div class=\"line\"><span class=\"comment\">// JS调用的Native函数对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaScriptInterface</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/*4.2以后才有@JavascriptInterface，因为安全隐患问题。</span></div><div class=\"line\">    * 因为 JavaScript 可以通过反射访问注入 webview 的 java 对象的 public fields，</div><div class=\"line\">    * 使用宿主程序的权限执行 java 代码。所以，4.2以后，任何为 JS 暴露接口的，都要加上@JavascriptInterface。</div><div class=\"line\">    * 这样，这个 Java 对象的 fields 将不允许被 js 访问。*/</div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clickOnAndroid</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//TODO</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Native调用Js</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.loadUrl(<span class=\"string\">\"javascript:alert()\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"二、WebSettings\"><a href=\"#二、WebSettings\" class=\"headerlink\" title=\"二、WebSettings\"></a>二、WebSettings</h3><p>WebView配置管理类。当WebView第一次创建时包含默认配置。通过<code>getter</code>方法来获取配置信息。调用WebView.getSetting()方法将WebSettings与WebView的生命周期绑定。如果WebView被销毁，调用任何WebView的方法都会抛出<code>IllegalStateException</code>异常信息</p>\n<ul>\n<li><p>setSupportZoom(boolean support) </p>\n<p>  是否支持缩放，配合方法<code>setBuiltInZoomControls</code>使用，默认true</p>\n</li>\n<li><p>setMediaPlaybackRequiresUserGesture(boolean require) </p>\n<p>  是否需要用户手势来播放Media，默认true</p>\n</li>\n<li><p>setBuiltInZoomControls(boolean enabled) </p>\n<p>  是否使用WebView内置的缩放组件，由浮动在窗口上的缩放控制和手势缩放控制组成，默认false</p>\n</li>\n<li><p>setDisplayZoomControls(boolean enabled) </p>\n<p>  是否显示窗口悬浮的缩放控制，默认true</p>\n</li>\n<li><p>setAllowFileAccess(boolean allow)</p>\n<p>  是否允许访问WebView内部文件，默认true</p>\n</li>\n<li><p>setAllowContentAccess(boolean allow)</p>\n<p>  是否允许获取WebView的内容URL ，可以让WebView访问ContentPrivider存储的内容。 默认true</p>\n</li>\n<li><p>setLoadWithOverviewMode(boolean overview)</p>\n<p>  是否启动概述模式浏览界面，当页面宽度超过WebView显示宽度时，缩小页面适应WebView。默认false</p>\n</li>\n<li><p>setSaveFormData(boolean save)</p>\n<p>  是否保存表单数据，默认false</p>\n</li>\n<li><p>setTextZoom(int textZoom)</p>\n<p>  设置页面文字缩放百分比，默认100%</p>\n</li>\n<li><p>setUseWideViewPort(boolean use)</p>\n<p>  是否支持ViewPort的meta tag属性，如果页面有ViewPort meta tag 指定的宽度，则使用meta tag指定的值，否则默认使用宽屏的视图窗口</p>\n</li>\n<li><p>setSupportMultipleWindows(boolean support)</p>\n<p>  是否支持多窗口，如果设置为true ，<code>WebChromeClient#onCreateWindow</code>方法必须被主程序实现，默认false</p>\n</li>\n<li><p>setLayoutAlgorithm(LayoutAlgorithm l)</p>\n<p>  指定WebView的页面布局显示形式，调用该方法会引起页面重绘。默认LayoutAlgorithm#NARROW_COLUMNS</p>\n</li>\n<li><p>setStandardFontFamily(String font)</p>\n<p>  设置标准的字体族，默认”sans-serif”。font-family 规定元素的字体系列。font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。</p>\n</li>\n<li><p>setFixedFontFamily(String font)</p>\n<p>  设置混合字体族。默认”monospace”</p>\n</li>\n<li><p>setSansSerifFontFamily(String font)</p>\n<p>  设置SansSerif字体族。默认”sans-serif”</p>\n</li>\n<li><p>setSerifFontFamily(String font)</p>\n<p>  设置SerifFont字体族，默认”sans-serif”</p>\n</li>\n<li><p>setCursiveFontFamily(String font)</p>\n<p>  设置CursiveFont字体族，默认”cursive”</p>\n</li>\n<li><p>setFantasyFontFamily(String font)</p>\n<p>  设置FantasyFont字体族，默认”fantasy”</p>\n</li>\n<li><p>setMinimumFontSize(int size)</p>\n<p>  设置最小字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setMinimumLogicalFontSize(int size)</p>\n<p>  设置最小逻辑字体，默认8. 取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setDefaultFontSize(int size)</p>\n<p>  设置默认字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setDefaultFixedFontSize(int size)</p>\n<p>  设置默认填充字体大小，默认16，取值区间[1-72]，超过范围，使用其上限值。</p>\n</li>\n<li><p>setLoadsImagesAutomatically(boolean flag)</p>\n<p>  设置是否加载图片资源，<code>注意：</code>方法控制所有的资源图片显示，包括嵌入的本地图片资源。使用方法<code>setBlockNetworkImage</code>则只限制网络资源图片的显示。值设置为true后，webview会自动加载网络图片。默认true</p>\n</li>\n<li><p>setBlockNetworkImage(boolean flag)</p>\n<p>  是否加载网络图片资源。<code>注意</code>如果<code>getLoadsImagesAutomatically</code>返回false，则该方法没有效果。如果使用<code>setBlockNetworkLoads</code>设置为false，该方法设置为false，也不会显示网络图片。当值从true改为false时。WebView会自动加载网络图片。</p>\n</li>\n<li><p>setBlockNetworkLoads(boolean flag)</p>\n<p>  设置是否加载网络资源。<code>注意</code>如果值从true切换为false后，WebView不会自动加载，除非调用WebView#reload().如果没有<code>android.Manifest.permission#INTERNET</code>权限，值设为false，则会抛出<code>java.lang.SecurityException</code>异常。默认值：有<code>android.Manifest.permission#INTERNET</code>权限时为false，其他为true。</p>\n</li>\n<li><p>setJavaScriptEnabled(boolean flag)</p>\n<p>  设置是否允许执行JS。</p>\n</li>\n<li><p>setAllowUniversalAccessFromFileURLs(boolean flag)</p>\n<p>  是否允许Js访问任何来源的内容。包括访问file scheme的URLs。考虑到安全性，限制Js访问范围默认禁用。<code>注意：</code>该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。<code>ICE_CREAM_SANDWICH_MR1</code>版本以及以下默认为true，<code>JELLY_BEAN</code>版本以上默认为false</p>\n</li>\n<li><p>setAllowFileAccessFromFileURLs(boolean flag)</p>\n<p>  是否允许Js访问其他file scheme的URLs。包括访问file scheme的资源。考虑到安全性，限制Js访问范围默认禁用。<code>注意：</code>该方法只影响file scheme类型的资源，其他类型资源如图片类型的，不会受到影响。如果<code>getAllowUniversalAccessFromFileURLs</code>为true，则该方法被忽略。<code>ICE_CREAM_SANDWICH_MR1</code>版本以及以下默认为true，<code>JELLY_BEAN</code>版本以上默认为false</p>\n</li>\n<li><p>setGeolocationDatabasePath(String databasePath)</p>\n<p>  设置存储定位数据库的位置，考虑到位置权限和持久化Cache缓存，Application需要拥有指定路径的write权限</p>\n</li>\n<li><p>setAppCacheEnabled(boolean flag)</p>\n<p>  是否允许Cache，默认false。考虑需要存储缓存，应该为缓存指定存储路径<code>setAppCachePath</code></p>\n</li>\n<li><p>setAppCachePath(String appCachePath)</p>\n<p>  设置Cache API缓存路径。为了保证可以访问Cache，Application需要拥有指定路径的write权限。该方法应该只调用一次，多次调用自动忽略。</p>\n</li>\n<li><p>setDatabaseEnabled(boolean flag)</p>\n<p>  是否允许数据库存储。默认false。查看<code>setDatabasePath</code> API 如何正确设置数据库存储。该设置拥有全局特性，同一进程所有WebView实例共用同一配置。<code>注意：</code>保证在同一进程的任一WebView加载页面之前修改该属性，因为在这之后设置WebView可能会忽略该配置</p>\n</li>\n<li><p>setDomStorageEnabled(boolean flag)</p>\n<p>  是否存储页面DOM结构，默认false。</p>\n</li>\n<li><p>setGeolocationEnabled(boolean flag)</p>\n<p>  是否允许定位，默认true。<code>注意：</code>为了保证定位可以使用，要保证以下几点：</p>\n<ul>\n<li>Application 需要有<code>android.Manifest.permission#ACCESS_COARSE_LOCATION</code>的权限</li>\n<li>Application 需要实现<code>WebChromeClient#onGeolocationPermissionsShowPrompt</code>的回调，接收Js定位请求访问地理位置的通知</li>\n</ul>\n</li>\n<li><p>setJavaScriptCanOpenWindowsAutomatically(boolean flag)</p>\n<p>  是否允许JS自动打开窗口。默认false</p>\n</li>\n<li><p>setDefaultTextEncodingName(String encoding)</p>\n<p>  设置页面的编码格式，默认UTF-8</p>\n</li>\n<li><p>setUserAgentString(String ua)</p>\n<p>  设置WebView代理，默认使用默认值</p>\n</li>\n<li><p>setNeedInitialFocus(boolean flag)</p>\n<p>  通知WebView是否需要设置一个节点获取焦点当<code>WebView#requestFocus(int, android.graphics.Rect)</code>被调用的时候，默认true</p>\n</li>\n<li><p>setCacheMode(int mode)</p>\n<p>  基于WebView导航的类型使用缓存：正常页面加载会加载缓存并按需判断内容是否需要重新验证。如果是页面返回，页面内容不会重新加载，直接从缓存中恢复。<code>setCacheMode</code>允许客户端根据指定的模式来使用缓存。</p>\n<ul>\n<li>LOAD_DEFAULT 默认加载方式</li>\n<li>LOAD_CACHE_ELSE_NETWORK 按网络情况使用缓存</li>\n<li>LOAD_NO_CACHE 不使用缓存</li>\n<li>LOAD_CACHE_ONLY 只使用缓存</li>\n</ul>\n</li>\n<li><p>setMixedContentMode(int mode)</p>\n<p>  设置加载不安全资源的WebView加载行为。<code>KITKAT</code>版本以及以下默认为<code>MIXED_CONTENT_ALWAYS_ALLOW</code>方式，<code>LOLLIPOP</code>默认<code>MIXED_CONTENT_NEVER_ALLOW</code>。强烈建议：使用<code>MIXED_CONTENT_NEVER_ALLOW</code></p>\n</li>\n</ul>\n<h3 id=\"三、WebViewClient\"><a href=\"#三、WebViewClient\" class=\"headerlink\" title=\"三、WebViewClient\"></a>三、WebViewClient</h3><ul>\n<li><p>shouldOverrideUrlLoading(WebView view, String url)</p>\n<p>  当加载新的URL时是否由主程序控制显示。如果没有提供<code>WebViewClient</code>，则选择合适的url处理方式。如果指定<code>WebViewClient</code>，返回值为true意味主程序处理url，返回值为false意味当前<code>WebView</code>处理url。<code>注意：</code>如果使用<code>POST</code>方法该方法不会被调用。</p>\n</li>\n<li><p>onPageStarted(WebView view, String url, Bitmap favicon)。</p>\n<p>  通知主程序页面开始加载。该方法只有在加载main frame时加载一次，如果一个页面有多个frame，<code>onPageStarted</code>只在加载main frame时调用一次。也意味着若内置frame发生变化，<code>onPageStarted</code>不会被调用，如：在iframe中打开url链接。</p>\n</li>\n<li><p>onPageFinished(WebView view, String url)</p>\n<p>  通知主程序页面加载结束。方法只被main frame调用一次。</p>\n</li>\n<li><p>onLoadResource(WebView view, String url)</p>\n<p>  通知主程序开始加载指定url的资源文件。</p>\n</li>\n<li><p>shouldInterceptRequest(WebView view,WebResourceRequest request)</p>\n<p>  通知主程序资源请求，是否允许程序返回指定数据资源。如果返回值为<code>null</code>，表示继续正常加载资源文件，否则使用返回响应和值。<code>注意：</code>该方法在线程被调用而不是UI线程，所有客户端在调用私有数据或在与View交互的时候应该注意。</p>\n</li>\n<li><p>onReceivedError(WebView view, int errorCode, String description, String failingUrl)</p>\n<p>  返回访问错误通知。</p>\n</li>\n<li><p>onFormResubmission(WebView view, Message dontResend, Message resend)</p>\n<p>  是否重发POST请求数据，默认不重发。</p>\n</li>\n<li><p>doUpdateVisitedHistory(WebView view, String url, boolean isReload)</p>\n<p>  更新访问历史</p>\n</li>\n<li><p>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)</p>\n<p>  通知主程序加载资源的SSL错误。必须调用<code>handler.cancel()</code>或<code>handler.proceed()</code>。该设置可能会为之后资源访问的SSL错误保留使用当前的设定。默认<code>cancel</code></p>\n</li>\n<li><p>onReceivedClientCertRequest(WebView view, ClientCertRequest request)</p>\n<p>  通知主程序处理SSL客户端认证请求。如果需要提供密钥，主程序负责显示UI界面。有三个响应方法：<code>proceed()</code>, <code>cancel()</code> 和 <code>ignore()</code>。如果调用<code>proceed()</code>和<code>cancel()</code>，webview将会记住response，对相同的host和port地址不再调用onReceivedClientCertRequest方法。如果调用<code>ignore()</code>方法，webview则不会记住response。该方法在UI线程中执行，在回调期间，连接被挂起。默认<code>cancel()</code>，即无客户端认证</p>\n</li>\n<li><p>onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)</p>\n<p>  通知主程序：WebView接收HTTP认证请求，主程序可以使用<code>HttpAuthHandler</code>为请求设置WebView响应。默认取消请求。</p>\n</li>\n<li><p>shouldOverrideKeyEvent(WebView view, KeyEvent event)</p>\n<p>  是否让主程序同步处理Key Event事件，如过滤菜单快捷键的Key Event事件。如果返回true，WebView不会处理Key Event，如果返回false，Key Event总是由WebView处理。默认：false</p>\n</li>\n<li><p>onUnhandledInputEvent(WebView view, InputEvent event)</p>\n<p>  通知主程序输入事件不是由WebView调用。是否让主程序处理WebView未处理的Input Event。除了系统按键，WebView总是消耗掉输入事件或<code>shouldOverrideKeyEvent</code>返回true。该方法由event 分发异步调用。<code>注意：</code>如果事件为<code>MotionEvent</code>，则事件的生命周期只存在方法调用过程中，如果WebViewClient想要使用这个Event，则需要复制Event对象。</p>\n</li>\n<li><p>onScaleChanged(WebView view, float oldScale, float newScale)</p>\n<p>  通知主程序WebView的大小发生变化。</p>\n</li>\n<li><p>onReceivedLoginRequest(WebView view, String realm, String account, String args)</p>\n<p>  通知主程序执行了自动登录请求。</p>\n</li>\n</ul>\n<h3 id=\"四、WebChromeClient\"><a href=\"#四、WebChromeClient\" class=\"headerlink\" title=\"四、WebChromeClient\"></a>四、WebChromeClient</h3><ul>\n<li><p>onProgressChanged(WebView view, int newProgress)</p>\n<p>  通知程序当前页面加载进度</p>\n</li>\n<li><p>onReceivedTitle(WebView view, String title) </p>\n<p>  通知页面标题变化</p>\n</li>\n<li><p>onReceivedIcon(WebView view, Bitmap icon)</p>\n<p>  通知当前页面网站新图标</p>\n</li>\n<li><p>onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)</p>\n<p> 通知主程序图标按钮URL</p>\n</li>\n<li><p>CustomViewCallback</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomViewCallback</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// 通知当前页面自定义的View被关闭</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCustomViewHidden</span><span class=\"params\">()</span></span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>onShowCustomView(View view, CustomViewCallback callback)</p>\n<p>  通知主程序当前页面将要显示指定方向的View，该方法用来全屏播放视频。</p>\n</li>\n<li><p>onHideCustomView()</p>\n<p>  与<code>onShowCustomView</code>对应，通知主程序当前页面将要关闭Custom View</p>\n</li>\n<li><p>onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)</p>\n<p>  请求主程序创建一个新的Window，如果主程序接收请求，返回true并创建一个新的WebView来装载Window，然后添加到View中，发送带有创建的WebView作为参数的resultMsg的给Target。如果主程序拒绝接收请求，则方法返回false。默认不做任何处理，返回false</p>\n</li>\n<li><p>onRequestFocus(WebView view)</p>\n<p>  显示当前WebView，为当前WebView获取焦点。</p>\n</li>\n<li><p>onCloseWindow(WebView window)</p>\n<p>  通知主程序关闭WebView，并从View中移除，<code>WebCore</code>停止任何的进行中的加载和JS功能。</p>\n</li>\n<li><p>onJsAlert(WebView view, String url, String message, JsResult result)</p>\n<p>  告诉客户端显示Js 提示框。如果客户端返回true，由客户端处理提示框。否则继续显示Js 提示框。</p>\n</li>\n<li><p>onJsConfirm(WebView view, String url, String message, JsResult result)</p>\n<p>  告诉客户端显示确认提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值false给javascript。默认：false</p>\n</li>\n<li><p>onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)</p>\n<p>  告诉客户端显示提示框。如果返回true，由客户端处理确认提示框，调用合适的JsPromptResult方法。如果返回false，则返回默认值false给javascript。默认：false</p>\n</li>\n<li><p>onJsBeforeUnload(WebView view, String url, String message, JsResult result)</p>\n<p>  告诉客户端显示离开当前页面的导航提示框。如果返回true，由客户端处理确认提示框，调用合适的JsResult方法。如果返回false，则返回默认值true给javascript接受离开当前页面的导航。默认：false。JsResult设置false，当前页面取消导航提示，否则离开当前页面。</p>\n</li>\n<li><p>onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)</p>\n<p>  通知主程序web内容尝试使用定位API，但是没有相关的权限。主程序需要调用调用指定的定位权限申请的回调。更多说明查看<code>GeolocationPermissions</code>相关API。</p>\n</li>\n<li><p>onGeolocationPermissionsHidePrompt()</p>\n<p>  通知程序有定位权限请求。如果<code>onGeolocationPermissionsShowPrompt</code>权限申请操作被取消，则隐藏相关的UI界面。</p>\n</li>\n<li><p>onPermissionRequest(PermissionRequest request)</p>\n<p>  通知主程序web内容尝试申请指定资源的权限（权限没有授权或已拒绝），主程序必须调用<code>PermissionRequest#grant(String[])</code>或<code>PermissionRequest#deny()</code>。如果没有覆写该方法，默认拒绝。</p>\n</li>\n<li><p>onPermissionRequestCanceled(PermissionRequest request)</p>\n<p>  通知主程序相关权限被取消。任何相关UI都应该隐藏掉。</p>\n</li>\n<li><p>onJsTimeout() </p>\n<p>  通知主程序 执行的Js操作超时。客户端决定是否中断<code>JavaScript</code>继续执行。如果客户端返回true，JavaScript中断执行。如果客户端返回false，则执行继续。<code>注意：</code>如果继续执行，重置JavaScript超时计时器。如果Js下一次检查点仍没有结束，则再次提示。</p>\n</li>\n<li><p>onConsoleMessage(ConsoleMessage consoleMessage)</p>\n<p>  通知主程序的Js控制台消息，<code>ChromeClient</code>应该覆写该方法在合适的时候来打印日志。</p>\n</li>\n<li><p>getDefaultVideoPoster()</p>\n<p>  当停止播放，Video显示为一张图片。默认图片可以通过HTML的Video的poster属性标签来指定。如果poster属性不存在，则使用默认的poster。该方法允许<code>ChromeClient</code>提供默认图片。</p>\n</li>\n<li><p>getVideoLoadingProgressView()</p>\n<p>  当用户重放视频，在渲染第一帧前需要花费时间去缓冲足够的数据。在缓冲期间，<code>ChromeClient</code>可以提供一个显示的View。如：可以显示一个加载动画。</p>\n</li>\n<li><p>getVisitedHistory(ValueCallback<string[]> callback)</string[]></p>\n<p>  获取访问历史Item，用于链接颜色。</p>\n</li>\n<li><p>onShowFileChooser(WebView webView, ValueCallback<uri[]> filePathCallback,</uri[]></p>\n<pre><code>FileChooserParams fileChooserParams)\n</code></pre><p>  通知客户端显示文件选择器。用来处理file类型的HTML标签，响应用户点击选择文件的按钮操作。调用<code>filePathCallback.onReceiveValue(null)</code>并返回true取消请求操作。</p>\n</li>\n<li><p>FileChooserParams </p>\n<p>  <code>onShowFileChooser</code>方法使用的参数</p>\n<ul>\n<li>MODE_OPEN 打开</li>\n<li>MODE_OPEN_MULTIPLE 选中多个文件打开</li>\n<li>MODE_OPEN_FOLDER 打开文件夹（暂不支持）</li>\n<li>MODE_SAVE 保存</li>\n<li><p>parseResult(int resultCode, Intent data)</p>\n<p>  解析文件选择Activity返回的结果。需要和<code>createIntent</code>一起使用。</p>\n</li>\n<li><p>createIntent()</p>\n<p>  创建Intent对象来启动文件选择器。Intent支持可访问的简单类型文件资源。不支持高级文件资源如<code>live media capture</code>媒体快照。如果需要访问这些资源或其他高级文件类型资源可以自己创建Intent对象。</p>\n</li>\n<li><p>getMode()</p>\n<p>  返回文件选择模式</p>\n</li>\n<li><p>getAcceptTypes() </p>\n<p>  返回可访问<code>MIME</code>类型数组，如<code>audio/*</code>，如果没有指定可访问类型，数组返回为null</p>\n</li>\n<li><p>isCaptureEnabled()</p>\n<p>  返回优先的媒体快照类型值如<code>Camera</code>、<code>Microphone</code>。true：允许快照。false，禁止快照。使用<code>getAcceptTypes</code>方法确定合适的<code>capture</code>设备。</p>\n</li>\n<li><p>getTitle()</p>\n<p>  返回文件选择器的标题。如果为null，使用默认名称。</p>\n</li>\n<li><p>getFilenameHint()</p>\n<p>  指定默认选中的文件名或为null</p>\n</li>\n</ul>\n</li>\n<li><p>setupAutoFill(Message msg) <code>暂不支持</code></p>\n<p>  告诉客户端当前页面以自动填充表单形式查看。</p>\n</li>\n</ul>\n"},{"title":"Android：Activity的基础知识及启动过程","date":"2016-06-05T15:14:29.000Z","thumbnailImage":"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529028/android/8ff23095a2a4e04af26ca63642bfdea3_b.png","_content":"Activity是Android四个基本组件之一，主要用作Application的界面展示和交互。Activity可以说是Android中应用最多的组件，因此有必要掌握关于Activity的知识。如：Activity的生命周期，Activity的启动模式，更深层次的如Activity的创建过程以及Actvity生命周期对应的方法是如何调用的。\n# 一、Activity的生命周期\n## 1.正常生命周期\n一个Activity正常的流程如下图：\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529027/android/activity_lifecycle.png\" style=\"width:50%\">\n</div>\n\n1.Activity的完整生命周期：从onCreate()开始到onDestory()结束。Activity在onCreate()中完成一系列初始化的工作，如完成界面布局资源的加载，初始化Activity的需要的数据等等。在onDestory()中释放所有包含的资源。如在结束Actviity时，如果Activity中还有未完成的数据加载的工作，就需要在onDestory()中或之前及时结束。\n\n2.Activity的`可见`生命周期：`可见`生命周期在onStart()与onStop()之间。这段周期中，用户可以看到activity出现在屏幕上，并在onResume()之后，用户可以与界面交互了。当前Activity调用onStop()后，则不再可见，如启动一个新的Activity。在这段生命周期中，你可以添加资源到activity中，向用户展示。如：你在onStart中注册了一个广播，来更新你的UI，然后当activity不可见时，在onStop()中注销这个广播，释放广播资源。在activity整个生命周期中，onStart()和onStop()可能会多次调用，因为activity会在可见和不可见之间多次变化。注：onStart()和onStop()中不要做耗时操作，影响Actvitiy的\n显示与停止。\n\n3.Activity前台展示时的生命周期：这段生命周期在调用onResume()和onPause()之间。这段周期，当前Actvitiy位于所有其他Activity顶部（因为Actvitiy就是保存在栈形式的结构中）。Actviity会频繁地在前台的进入和退出之间交互，比如：当回到Android的Home页面、设备处于休眠状态或显示Dialog时，都会调用onPause()，停止当前Actvity的前台状态。因为Actvitiy比较频繁在前台展示的状态交互，在这两方法中，不能进行耗时任务，也是因为新的Actvitiy在显示时，需要暂停前一个Actvitiy的执行，才会调用本身onResume()方法。\n\n## 2.异常时的生命周期\n\n这里还需要考虑到，当系统内存不够用时或旋转屏幕时，Activity会经历哪些生命周期？\n\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467533421/android/restore_instance.png\"\n\tstyle=\"width:50%\">\n</div>\n\n当系统在内存不够用的时候，系统会销毁后台的Activity以来提供足够内存资源给前台的Actvitiy使用，所以在这种情况下，后台的Activity已经被销毁，回到前台时，系统不仅仅只调用onResume()等方法，系统必须重新创建Activity对象。然而用户不会意识到系统销毁了之前Actviity并重新创建了一个新的。因此开发时某时候需要恢复到之前Actvitiy状态：包括数据、界面资源状态等。这时候需要你的Activity覆写Actvity的 onSaveInstanceState()方法，来存储Activity销毁时的数据。\n\n{% codeblock lang:java Actvity.java %}\n// 这个方法在onStop()之前调用。\nprotected void onSaveInstanceState(Bundle outState) {\n    // 委托Window保存数据\n    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());\n    Parcelable p = mFragments.saveAllState();\n    if (p != null) {\n        outState.putParcelable(FRAGMENTS_TAG, p);\n    }\n    getApplication().dispatchActivitySaveInstanceState(this, outState);\n}\n{% endcodeblock %}\n\n系统默认保存当前Activity的视图结构。并在Actvitiy重启后恢复这些数据。首先Actvitiy会调用onSaveInstanceState保存数据，然后Actvitiy会委托Window保存数据，Window委托它上面的顶级容器去保存数据。顶级容器是一个ViewGroup，一般情况下是DecorView。最后顶层容器再去一一通知它的子元素来保存数据。\n\n{% codeblock lang:java PhoneWindow.java %}\n// PhoneWindow.java 是Window的实现\n@Override\npublic Bundle saveHierarchyState() {\n    Bundle outState = new Bundle();\n    if (mContentParent == null) {\n        return outState;\n    }\n    // mContentParent就是ViewGroup\n    mContentParent.saveHierarchyState(states);\n    ...\n    return outState;\n}\n{% endcodeblock %}\n\n\n{% codeblock lang:java ViewGroup.java %}\n\n// 分发的每个子View的dispatchSaveInstanceState具体实现\n@Override\nprotected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {\n    super.dispatchSaveInstanceState(container);\n    final int count = mChildrenCount;\n    final View[] children = mChildren;\n    for (int i = 0; i < count; i++) {\n        View c = children[i];\n        if ((c.mViewFlags & PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) {\n            c.dispatchSaveInstanceState(container);\n        }\n    }\n}\n{% endcodeblock %}\n\n当Actvitiy被重新创建后，系统会调用onRestoreInstanceState，并把Actvitiy销毁时onSaveInstanceState方法所保存的Bundle对象作为参数同时传递给onRestoreInstanceState和onCreate方法。\n{% codeblock lang:java Actvity.java %}\n    // 这个方法在onStart和onPostCreate()之前调用\n    protected void onRestoreInstanceState(Bundle savedInstanceState) {\n        if (mWindow != null) {\n            Bundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);\n            if (windowState != null) {\n                mWindow.restoreHierarchyState(windowState);\n            }\n        }\n    }\n{% endcodeblock %}\n\n在恢复Actvitiy存储时的数据时候，接收的位置可以选择onRestoreInstanceState()或者onCreate，两者区别是onRestoreInstanceState()中的Bundle不为空，onCreate()中的Bundle值可能为空，需要加上判断。\n\n> `注`：onSaveInstanceState()并不能保证正常时被调用。所以不要用来做为数据存储持久化的工作。相反的，当用户离开Activity时应该在onPause()中来存储持久化数据（如数据库数据）。可以简单理解为系统只在Actvitiy异常终止的时候才会调用这两方法，其他情况并不会触发。异常终止：如因为内存不足导致低优先级的Actvitiy被销毁、在旋转屏幕的时候Actvitiy被销毁又被重新创建。\n\n## 3.处理系统配置变化\n\n一些系统配置在运行时可能会发生变化（如：屏幕旋转、键盘变化、语言等）。当这些变化发生的时候，系统会调用onDestroy(),然后立即调用onCreate()。有时候我们并不想要销毁Actvitiy和重新创建，这时候我们可以在AndroidManifest中配置指定Activity的`android:configChanges`的属性即可\n{% codeblock lang:xml AndroidManifest.xml %}\n<activity \n    ...\n    android:configChanges=[\"mcc\", \"mnc\", \"locale\",\n                         \"touchscreen\", \"keyboard\", \"keyboardHidden\",\n                         \"navigation\", \"screenLayout\", \"fontScale\",\n                         \"uiMode\", \"orientation\", \"screenSize\",\n                         \"smallestScreenSize\"] \n    ... >\n    ...\n</activity>\n{% endcodeblock %}\n\n常用的三个选项：\n\n\t1. local：系统语言变化、\n\t2. orientation：手机屏幕发生旋转、\n\t3. keyboardHidden：键盘的可访问性发生了变化，调出键盘。\n\n使用方法\n\n{% codeblock lang:xml AndroidManifest.xml %}\n<activity\n\tandroid:configChanges=\"orientation|...\"\n\t... >\n\t...\n</activity>\n{% endcodeblock %}\n\n> `注`：screenSize、smallestScreenSize比较特殊，它们的行为与编译选项有关，和运行环境无关。\n\n{% codeblock lang:xml AndroidManifest.xml %}\n<!--如果指定的minSdkVersion和targetSdkVersion有一个大于13，为了防止旋转屏幕时Actvitiy重启，除了 -->\n<!-- orientation，还需要加上screenSize和smallestScreenSize -->\n<uses-sdk\n    android:minSdkVersion=\"...\"\n    android:targetSdkVersion=\"...\"\n    />\n{% endcodeblock %}\n\n# 二、Activity的启动模式\n为了方便管理Activity，Android引入了Task（任务）和Stack（返回栈）\nTask（任务）是用户进行交互的Activity集合。Activity置于类似`后进先出`的对象结构的Stack（返回栈）中。\n- 当用户点击Application（应用程序）的Icon时，如果应用的Task没有创建，则系统创建一个新的Task，Application打开Main Activity作为Task的根activity。\n- 当启动新的Activity时，创建Activity的实例放入栈，置于栈顶并获取焦点。\n- 当Activity进入停止状态，系统保持它的当前状态。\n- 当用户点击返回按钮时，栈顶Activity出栈，调用onDestory()销毁实例。前Activity恢复存储的状态并置于栈顶。栈中的Activities不会重新排序，只能够被压入栈和出栈。\n- 当用户连续点击返回键，栈中Activity接连出栈，直到回到桌面或Task运行的起始位置。所有activity都被从栈中移除时，则Task销毁。\n- 当启动新的Task（如打开新应用）或者点击Home键回到桌面时，任务栈退到后台；当位于后台时，Task中的Activity都会进入停止状态。退到后台的Task的返回栈仍然保持完整性。如：Task A的栈中有三个Activity，用户点击Home键，打开新的应用程序，Task A退到后台。新的应用程序启动，系统创建并启动新的Task B。用户再次回到桌面，打开Task A对应的应用程序，Task A回到前台，Task A中的三个Activity保持完整性。\n- Android支持后台多任务；但同时运行多个后台任务，系统可能销毁后台的Activity来回收内存，就导致后台Activity的状态丢失。\n\n## 1. Activity任务管理。\n默认情况下Android中的Activity通过`standard`启动模式进入在后进先出的Stack（返回栈）中。有时因为业务需求，需要修改Activity的默认启动模式。如：在新的任务中来启动Activity而不是在返回栈的栈顶创建新的实例；又比如：在启动Activity时，只想要启动Activity已存在的实例；或在用户离开任务时清空除了根Activity外所有的Activity。\n\n修改Activity的默认启动模式有两种方法：\n1. 在AndroidManifest中指定Activity的任务和启动模式。\n2. 在启动Activity的Intent中加入标志位。\n\n在优先级上第二种高于第一种，就是在Intent中传递Flag标志的方式会覆盖在XML指定启动模式的方式。\n标准启动模式，启动Activity时，系统会创建Activity新的实例。Activity可能会多次创建：每个实例可能属于不同任务，一个任务可能有多个实例。\n\n### 1）AndroidManifest中指定Activity的任务和启动模式。\n{% codeblock lang:xml AndroidManefest.xml %}\n<activity\n    android:name=\".activity.MainActivity\"\n    android:taskAffinity=\"string\"\n    android:launchMode=[\"multiple\" | \"singleTop\" |\n                  \"singleTask\" | \"singleInstance\"]\n    android:clearTaskOnLaunch=[\"true\" | \"false\"]\n    android:alwaysRetainTaskState=[\"true\" | \"false\"]\n    android:finishOnTaskLaunch=[\"true\" | \"false\"] \n    ... >\n    ...\n</activity>\n\n{% endcodeblock %}\n- `taskAffinity`\n taskAffinity表示Activity对应的任务。有相同taskAffinity的Activity理论属于同一个任务。任务自身的Affinity决定\n根Activity的Affinity值。taskAffinity的使用场合是什么呢？1.根据taskAffinity重新为Activity选择任务（与\nallowTaskReparenting属性配合工作）；2.启动Activity时，Intent使用FLAG_ACTIVITY_NEW_TASK标记，根据\ntaskAffinity查找或创建一个新Activity对应taskAffinity的任务。默认情况下，应用内所有Activity都具有相同的\ntaskAffinity,都是从Application继承来，而Application默认taskAffinity值为<manifest>中定义的包名。\n\n- `launchMode`\nlaunchMode表示Activity启动模式。配合Intent的Activity Flags使用。\n\n- `allowTaskReparenting`\nActivity是否从启动它的任务中移动到目标任务中，\"true\"表示可以移动；\"false\"表示必须保留在启动它的任务中。\n如果没有设置，则继承<application>中的属性值，默认false。正常情况下Activity位于启动它的任务中，并度过它的整个生命周期。\n\n- `clearTaskOnLaunch`\n标记是否从任务中清除除根Activity的所有Activity，\"true\"表示清除，\"false\"表示不清除。默认\"false\"。这个属性只对根Activity起作用。如果为\"true\"，每次重新启动应用时，都只看到根Activity，任务中的其他的Activity都会被清除栈。\n\n- `alwaysRetainTaskState`\n标记任务是否保持原来的状态，\"true\"总是保持，\"false\"不能保证，默认\"false\"。属性只对根Activity起作用。默认情况下，如果应用在后台停留过长时间，应用再次回到前台时，系统会对应用任务的栈进行清空处理。只保留根Activity。如果根Activity的这个属性为\"true\"时，应用回到前台时，任务仍然保留所有的Activity。如：浏览器应用打开很多tab页面，在后台停留过长时间，回到前台时，仍然保留这些打开的界面。\n\n- `finishOnTaskLaunch`\nfinishOnTaskLaunch属性与clearTaskOnLaunch属性类似，不同是它是在操作单个的Activity，而不是整个任务栈。它可以销毁任意Activity包括根Activity。当设置为\"true\"时，如果用户离开然后回到任务栈，则Activity不再显示。\n\n> 注：多数任务和Activity启动模式应该保持默认值。除非必要情况下，需要改变默认行为。\n\n## 2. 启动模式\n\nActivity有四种启动模式：`standard`，`singleTop`，`singleTask`和`singleInstance`\n- `standard`\nActivity的默认启动模式，不论栈中是否已存在Activity的实例，都会在创建新的Activity实例，放入栈顶。如下图ActivityA和ActivityB均为standard启动模式。\n\n<div>\n\t<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_standard.png\" style=\"width:60%;\"/>\n</div>\n\n- `singleTop`\n任务栈顶存在要启动的Activity，系统不会创建新的Activity实例，只调用Activity的onNewIntent()方法。Activity可能被多次实例化，每个Activity实例可能属于不同任务栈，一个任务栈可能有多个实例（仅在返回栈栈顶的Activity不是启动的Activity实例情况下）\n假设有任务的返回栈包含ABCD的Activity，A为根Activity，D在栈顶；如果启动D并且D启动模式为\"singleTop\"，则调用栈顶已经存在的D的方法onNewIntent()，栈内容不变，仍为\"ABCD\"；如果启动B，B的启动模式为\"singleTop\"，则会创建新的B实例，并压人栈中。如下图ActivityA和ActivityB均为singleTop启动模式。\n\n<div>\n\t<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_singleTop.png\" style=\"width:60%;\"/>\n</div>\n> 注：当创建新的Activity，用户点击返回键会返回之前Activity。如果已存在的Activity来处理一个新的Intent对象时，在Intent进入onNewIntent()之前，用户点击返回键无法返回Activity之前的状态。\n\n- `singleTask`\n系统查找或创建新Activity对应的任务，已有任务栈时直接向栈中添加Activity的实例；否则创建新的Activity实例作为新任务栈的根。如果指定的任务栈中已经存在Activity的实例，系统只调用Acitivity的onNewIntent()方法，而不是创建新的Activity，同时只能够存在一个相同Activity实例。需要配合`android:taskAffinity`属性来使用。若taskAffinity的值与应用程序一致，新的Activity仍然会在应用程序的默认任务栈中。\n\n<div>\n<image\nsrc=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467552922/android/diagram_backstack_singletask_multiactivity.png\" style=\"width:60%;\"/>\n</div>\n\n>注：尽管\"singleTask\"启动了一个新任务，点击返回键时仍然返回到之前的Activity对应的任务栈。\n\n- `singleInstance`\n除了具有\"singleTask\"的全部特性以外，系统不会在有\"singleInstance\"启动模式的Activity对应栈中启动任何其他的Activity。具有\"singleInstance\"启动模式的Activity是栈中唯一的成员，通过这个任务栈启动的Activity都会在指定的任务栈中打开。\n\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467705412/android/android_launchmode_singleInstance.png\" style=\"width:70%\"/>\n</div>\n\n不管在新的任务中启动Activity还是在启动时的任务栈中启动Activity，点击返回键总是回到之前的Activity。如果你指定Activity的启动模式为singleTask，并在后台任务栈中存在对应的实例。启动这个Acitivity时，就会把整个任务栈带到前台。这时候，返回栈包含所有带到前台的任务栈中所有Activity，并置于栈顶。如singleTask小节图示。\n\n{% codeblock lang:java %}\n/**\n* 假设有三个Activity：MainAcitivity，ActivityA，ActivityB。MainActivity为应用程序的入口Activity，ActivityA是\n* `singleTask`启动模式，任务为`org.alexwan.taskandflag`的Activity，ActivityB与ActivityA一样。在启动MainActivity\n* 后，由MainActivity启动ActivityA，ActivityA启动ActivityB。\n*/\n\n// 查看运行栈 命令\nadb shell dumpsys activity activities | sed -En -e '/Running activities/,/Run #0/p'\n\n// 结果\nRunning activities (most recent first):\n    TaskRecord{d42fd8e #7592 A=org.alexwan.view U=0 sz=2}\n        Run #2: ActivityRecord{247d0678 u0 org.alexwan.taskandflag/.ActivityB t7592}\n        Run #1: ActivityRecord{168061c4 u0 org.alexwan.taskandflag/.ActivityA t7592}\n    TaskRecord{20b981bc #7591 A=org.alexwan.taskandflag U=0 sz=1}\n        Run #0: ActivityRecord{618def7 u0 org.alexwan.taskandflag/.MainActivity t7591}\n{% endcodeblock %}\n\n## 3.Intent Activity标志\n在调用startActivity时，为Intent添加一个标志位决定Activity启动方式。用来修改默认行为.\n{% codeblock lang:java Intent.java%}\n\n// 用新任务启动Activity。如果任务中的Activity已运行需要启动的Activity，则直接返回前台状态并调用onNewIntent()方\n// 法。与\"singleTask\"效果相同\nFLAG_ACTIVITY_NEW_TASK\n\n// 如果启动的Activity在返回栈栈顶，则直接调用Activity的onNewIntent方法，而不是创建一个新的实例。\n// 与\"singleTop\"效果相同。\nFLAG_ACTIVITY_SINGLE_TOP\n\n// 如果启动的Activity已经运行在当前任务栈中，则它的所有顶部Activity都会被销毁，而不是创建一个新Activity实例。调用\n// onNewIntent()方法恢复Activity状态。\nFLAG_ACTIVITY_CLEAR_TOP\n\n// 启动的Activity不会出现在历史Activity的列表中，在某些情况下我们不希望用户通过历史列表回到Activity时会使用这个标\n// 志。与在AndroidManifest中指定Activity的android:excludeFromRecents=\"true\"属性效果相同。\nFLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\n\n{% endcodeblock %}\n\n\n> `FLAG_ACTIVITY_CLEAR_TOP`常和`FLAG_ACTIVITY_NEW_TASK`配合使用。当同时使用，这些标志是定位其他栈中存在的Activity和放置在可以享用Intent的位置的方式。这种情况下，被启动Activity的实例如果已经存在，那么系统就会调用它的onNewIntent()方法。如果被启动的Activity采用\"standard\"启动模式，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并置于栈顶。 \n\n\n## 4. 处理affinities\n\naffinity 表示Activity对应的任务栈值。默认情况下所有Activity继承Application对应的包名所在的任务栈。可以在AndroidManifest中为Activity修改默认affinity值。不同Application可以共享相同affinity属性，同样相同Application中的Activity可以关联不同的affinity属性。\n如：\n```xml\n<activity\n    android:name=\".ActivityB\"\n    android:launchMode=\"singleTask\"\n    android:taskAffinity=\"org.alexwan.view\" />\n```\nTaskAffinitys主要配合\"singleTask\"启动模式和\"allowTaskReparenting\"属性来使用\n- 1）配合\"singleTask\"启动模式的Activity使用的情景；如通知管理总是在外部的任务栈中启动Activity，而不是作为Application任务栈的一部分。所以通知类的Intent总是用FLAG_ACTIVITY_NEW_TASK在intent的属性中传递给startActivity()。\n\n- 2）配合 allowTaskReparenting 属性使用情景。假设Activity的allowTaskReparenting的值为\"true\"，这种情况下，在Activity对应的任务栈回到前台，并且已经被其他任务栈启动时，则会从其他任务栈转到Activity对应的任务栈中。比如：在应用程序A中打开浏览器的Activity，Activity初始化时属于应用A的对应的任务栈，当浏览器回到前台时，Activity则从应用A任务栈转到浏览器的任务栈直接显示。\n\n\n# 三、Activity的启动匹配规则\n\nIntent打开Activity时分为隐式、显式打开Actiivty。\n\n`显式启动`：这种情况启动的Activity为已知，显式Intent也是启动Activity最常用的方式。\n```java\nIntent intent = new Intent(ActivityA.this , ActivityB.class);\nstartActivity(intent);\n```\n`隐式启动`：在未知启动的Activity的情况时，通过action，data，category等IntentFilter属性来过滤匹配要启动的Activity，Activity可能为多个或者没有对应Activity。如：启动分享、打开多媒体相关的Activity等。\n\n```java\nIntent sendIntent = new Intent();\nsendIntent.setAction(Intent.ACTION_VIEW);\nsendIntent.putExtra(Intent.EXTRA_TEXT , message);\nsendIntent.setType(\"text/plain\");\nif(sendIntent.resolveActivity(getPackageManager()) != null){\n    startActivity(sendIntent);\n}\n```\n> 注：如果没有匹配到相应的Activity时，调用startActivity()时，应用程序直接崩溃。因此在使用隐式Intent时，需要调用resolveActivity()来判断是否有相匹配的Activity来接收Intent，如果没有则不会调用startActivity。\n\n## 1. IntentFilter匹配规则。\n```xml\n<activity \n    android:name=\".activity.ActivityA\"\n    ...>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\">\n        ...\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        ...\n        <data android:scheme=\"package\" />\n        ...\n    </intent-filter>\n</activity>\n```\n只在有action、category、data都匹配时，Intent才算是匹配成功，如果Activity若声明多个IntentFilter时，只需匹配任意一个则表示匹配成功。\n\n（1） action\n一个Intent Filter中可声明0个或多个action，Intent中的action与其中任一action在字符串形式上完全相同（区分大小写），action就算是匹配成功。Intent调用setAction或构造器中传入action为Intent设置action。隐式Intent必须指定action。\n\n（2）category\n与action相同，一个Intent Filter可声明多个category或不声明category属性。Intent中的category必须全部匹配Filter中出现的category。Intent若没有指定category，同样能够匹配成功，因为Intent没有指定category时，Android自定为Intent指定默认category值`Intent.CATEGORY_DEFAULT`\n```xml\n<intent-filter>\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    ...\n</intent-filter>\n```\n\n（3）data\n与action相同，一个Intent Filter可声明多个data或不声明data属性。\n```xml\n<intent-filter>\n    <data android:mimeType=\"video/mpeg\" android:scheme=\"http\" ... />\n    <data android:mimeType=\"audio/mpeg\" android:scheme=\"http\" ... />\n    ...\n</intent-filter>\n```\n每个<data>可以指定一个URI和一个数据类型（MIME 媒体类型）。\n\n`URI`\n结构：`<scheme>://<host>:<port>/<path>`。如：\"content://com.example.project:200/folder/subfolder/etc\"。\n\n> 注：如果scheme没有指定，则忽略host；host没有指定，则忽略port；如果scheme和host都没有指定，则忽略path。path可以包含星号（*）通配符部分满足path的名称。\nURI默认值为content和file。如果filter中没有指定URI，Intent中的URI部分的scheme必须为content或file才能匹配。如果为Intent指定完整的data，必须调用setDataAndType()，单独的调用setData或setType()会重置Data和Type属性。\n\n# 四、Activity的启动过程\n\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467896657/android/%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8%E6%97%B6%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png\" style=\"width:100%\">\n<div style=\"text-align:center;\"><b>4-1. Android 5.0的启动应用程序时Activity的时序图</b></div>\n</div>\n\n应用程序的入口MainActivity的定义\n\n```xml\n<activity android:name=\".MainActivity\"    \n      android:label=\"@string/app_name\">    \n       <intent-filter>    \n        <action android:name=\"android.intent.action.MAIN\" />    \n        <category android:name=\"android.intent.category.LAUNCHER\" />    \n    </intent-filter>    \n</activity>    \n```\nAndroid中启动应用程序从桌面启动，系统桌面实际上也是应用程序，对应的是Launcher。\n\n{% codeblock lang:java com.android.launcher2.Launcher.java%}\n    boolean startActivitySafely(View v, Intent intent, Object tag) {\n        boolean success = false;\n        try {\n            // 调用Activity的startActivity方法。\n            success = startActivity(v, intent, tag);\n        } catch (ActivityNotFoundException e) {\n            Toast.makeText(this, R.string.activity_not_found, Toast.LENGTH_SHORT).show();\n            Log.e(TAG, \"Unable to launch. tag=\" + tag + \" intent=\" + intent, e);\n        }\n        return success;\n    }\n{% endcodeblock %}\n\n调用Activity的startActivity方法，最终调用Activity的startActivityForResult方法。\n{% codeblock lang:java Activity.java %}\n    @Override\n    public void startActivity(Intent intent, @Nullable Bundle options) {\n        if (options != null) {\n            startActivityForResult(intent, -1, options);\n        } else {\n            // Note we want to go through this call for compatibility with\n            // applications that may have overridden the method.\n            startActivityForResult(intent, -1);\n        }\n    }\n\n    @Override\n    public void startActivityForResult(\n            String who, Intent intent, int requestCode, @Nullable Bundle options) {\n        ...\n        // 1. 创建要启动的Activity实例信息。\n        Instrumentation.ActivityResult ar =\n            mInstrumentation.execStartActivity(\n                this, mMainThread.getApplicationThread(), mToken, who,\n                intent, requestCode, options);\n        if (ar != null) {\n            // mMainThread 就是ActivityThread\n            mMainThread.sendActivityResult(\n                mToken, who, requestCode,\n                ar.getResultCode(), ar.getResultData());\n        }\n        ...\n    }\n{% endcodeblock %}\n\n`Instrumentation`主要用来监控应用程序的交互操作。只在Activity和ActivityThread有实例，每次在应用程序创建的时候，在ActivityThread中初始化唯一的实例`mInstrumentation`，后续在每个Activity.attach方法中，添加到Activity的中。这里调用execStartActivity执行Activity的启动流程。\n\n{% codeblock lang:java Instrumentation.java%}\n    public ActivityResult execStartActivity(\n            Context who, IBinder contextThread, IBinder token, Activity target,\n            Intent intent, int requestCode, Bundle options, UserHandle user) {\n        // contextThread 是IBinder对象，主要用来与底层进程之间交互。\n        // whoThread 是Launcher的IApplicationThread\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\n        ...\n        try {\n            intent.migrateExtraStreamToClipData();\n            intent.prepareToLeaveProcess();\n            // 获取到ActivityManagerService远程接口即ActivityManagerProxy，调用\n            // startActivityAsUser的方法\n            int result = ActivityManagerNative.getDefault()\n                .startActivityAsUser(whoThread, who.getBasePackageName(), intent,\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\n                        token, target != null ? target.mEmbeddedID : null,\n                        requestCode, 0, null, options, user.getIdentifier());\n            // 根据返回结果，检测是否成功启动Activity，如果没有抛出异常\n            checkStartActivityResult(result, intent);\n        } catch (RemoteException e) {\n            throw new RuntimeException(\"Failure from system\", e);\n        }\n        return null;\n    }\n{% endcodeblock %}\n\nInstrumentation的execStartActivity方法中获得Launcher的IApplicationThread，主要用它与ActivityThread进行进程间通信。获取到ActivityManagerService的远程接口ActivityManagerProxy，调用startActivityAsUser方法。\nActivityManagerProxy定义在ActivityManagerNative中\n{% codeblock lang:java ActivityManagerNative.java -> ActivityManagerProxy.java%}\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n    static public IActivityManager asInterface(IBinder obj) {\n        ...\n        // 创建ActivityManagerProxy实例\n        return new ActivityManagerProxy(obj);\n    }\n    ...\n    static public IActivityManager getDefault() {\n        // 单例模式获取到IActivityManager，如果IActivityManager未创建\n        // 则调用create方法创建IActivityManager\n        return gDefault.get();\n    }\n    ...\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            // 查找ActivityManagerService\n            IBinder b = ServiceManager.getService(\"activity\");\n            // am 就是ActivityManagerProxy\n            IActivityManager am = asInterface(b);\n            \n            return am;\n        }\n    };\n}\n\nclass ActivityManagerProxy implements IActivityManager\n{\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n    ...\n}\n\n{% endcodeblock %}\n\n调用ActivityManagerProxy的startActivityAsUser方法，通过Binder驱动调用ActivityManagerService的startActivity\n```java \n\n{% codeblock lang:java ActivityManagerProxy.java%}\n\n    public int startActivity(IApplicationThread caller, String callingPackage, Intent intent,\n            String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) throws RemoteException {\n    ...\n    // mRemote 是个Binder，ServiceManager.getService(\"activity\")返回的binder对象\n    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n    ...\n    return result;\n    }\n{% endcodeblock %}\n调用ActivityManagerNative的onTransact方法。\n{% codeblock lang:java ActivityManagerNative.java%}\n\n    @Override\n    public boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n            throws RemoteException {\n        switch (code) {\n        case START_ACTIVITY_TRANSACTION:\n        {\n            ...\n            IBinder b = data.readStrongBinder();\n            // ApplicationThreadProxy\n            IApplicationThread app = ApplicationThreadNative.asInterface(b);\n            ...\n            Intent intent = Intent.CREATOR.createFromParcel(data);\n            ...\n            // resultTo\n            IBinder resultTo = data.readStrongBinder();\n            ...\n            // ActivityManagerService是ActivityManagerNative的具体实现\n            // startActivity也是由ActivityManagerService来执行。\n            int result = startActivity(app, callingPackage, intent, resolvedType,\n                    resultTo, resultWho, requestCode, startFlags, profilerInfo, options);\n            ...\n            return true;\n        }\n{% endcodeblock %}\n最终由ActivityManagerService实现调用startActivity\n{% codeblock lang:java ActivityManagerService.java%}\n    @Override\n    public final int startActivity(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) {\n        // 调用startActivityAsUser\n        return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,\n            resultWho, requestCode, startFlags, profilerInfo, options,\n            UserHandle.getCallingUserId());\n    }\n\n    @Override\n    public final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options, int userId) {\n        ...\n        //  调用ActivityStackSupervisor的startActivityMayWait\n        return mStackSupervisor.startActivityMayWait(caller, -1, callingPackage, intent,\n                resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n                profilerInfo, null, null, options, false, userId, null, null);\n    }\n\n{% endcodeblock %}\n\n`ActivityStackSupervisor`startActivityMayWait\n\n{% codeblock lang:java ActivityStackSupervisor.java%}\n    final int startActivityMayWait(IApplicationThread caller, int callingUid,\n            String callingPackage, Intent intent, String resolvedType,\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n            IBinder resultTo, String resultWho, int requestCode, int startFlags,\n            ProfilerInfo profilerInfo, WaitResult outResult, Configuration config,\n            Bundle options, boolean ignoreTargetSecurity, int userId,\n            IActivityContainer iContainer, TaskRecord inTask) {\n        ...\n        // Collect information about the target of the Intent.\n       // 收集MainActivity信息\n        ActivityInfo aInfo = resolveActivity(intent, resolvedType, startFlags, profilerInfo, userId);\n        ...\n        synchronized (mService) {\n            ...\n            final ActivityStack stack;\n            if (container == null || container.mStack.isOnHomeDisplay()) {\n                stack = mFocusedStack;\n            } else {\n                stack = container.mStack;\n            }\n            ...\n            int res = startActivityLocked(caller, intent, resolvedType, aInfo,\n                    voiceSession, voiceInteractor, resultTo, resultWho,\n                    requestCode, callingPid, callingUid, callingPackage,\n                    realCallingPid, realCallingUid, startFlags, options, ignoreTargetSecurity,\n                    componentSpecified, null, container, inTask);\n            ...\n            return res;\n        }\n    }\n\n   final int startActivityLocked(IApplicationThread caller,\n            Intent intent, String resolvedType, ActivityInfo aInfo,\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n            IBinder resultTo, String resultWho, int requestCode,\n            int callingPid, int callingUid, String callingPackage,\n            int realCallingPid, int realCallingUid, int startFlags, Bundle options,\n            boolean ignoreTargetSecurity, boolean componentSpecified, ActivityRecord[] outActivity,\n            ActivityContainer container, TaskRecord inTask) {\n        int err = ActivityManager.START_SUCCESS;\n        // 指定进程的所有信息\n        ProcessRecord callerApp = null;        \n        if (caller != null) {\n            callerApp = mService.getRecordForAppLocked(caller);\n            if (callerApp != null) {\n                callingPid = callerApp.pid;\n                callingUid = callerApp.info.uid;\n            } else {\n                ...\n            }\n        }\n        ...\n\n        final int userId = aInfo != null ? UserHandle.getUserId(aInfo.applicationInfo.uid) : 0;\n        // 历史栈中的实体，表示一个Activity\n        ActivityRecord sourceRecord = null;\n        ActivityRecord resultRecord = null;\n        ... \n        // 启动标志位\n        final int launchFlags = intent.getFlags();\n        ...\n        final ActivityStack resultStack = resultRecord == null ? null : resultRecord.task.stack;\n        ...\n        boolean abort = false;\n        ...\n        abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,\n                callingPid, resolvedType, aInfo.applicationInfo);\n        ...\n        if (abort) {\n            if (resultRecord != null) {\n                resultStack.sendActivityResultLocked(-1, resultRecord, resultWho, requestCode,\n                        Activity.RESULT_CANCELED, null);\n            }\n            // We pretend to the caller that it was really started, but\n            // they will just get a cancel result.\n            ActivityOptions.abort(options);\n            return ActivityManager.START_SUCCESS;\n        }\n        ActivityRecord r = new ActivityRecord(mService, callerApp, callingUid, callingPackage,\n                intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,\n                requestCode, componentSpecified, voiceSession != null, this, container, options);\n        ...\n        err = startActivityUncheckedLocked(r, sourceRecord, voiceSession, voiceInteractor,\n                startFlags, true, options, inTask);\n\n        return err;\n    }\n\n   // startActivityUncheckedLocked\n\n    final int startActivityUncheckedLocked(final ActivityRecord r, ActivityRecord sourceRecord,\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, int startFlags,\n            boolean doResume, Bundle options, TaskRecord inTask) {\n        final Intent intent = r.intent;\n        final int callingUid = r.launchedFromUid;\n        ...\n        final boolean launchSingleTop = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP;\n        final boolean launchSingleInstance = r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE;\n        final boolean launchSingleTask = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK;\n        // \n        int launchFlags = intent.getFlags();\n        ...\n        // 如果启动的Activity没有指明是自启动，则在onPause之前调用onUserLeaving\n        // launchFlags的FLAG_ACTIVITY_NO_USER_ACTION初始值为0，所以mUserLeaving为true\n        mUserLeaving = (launchFlags & Intent.FLAG_ACTIVITY_NO_USER_ACTION) == 0;\n        ...\n        // 与FLAG_ACTIVITY_NO_USER_ACTION一样intent的flag值为0，所以notTop为null；\n        ActivityRecord notTop =\n                (launchFlags & Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP) != 0 ? r : null;\n\n        // If the onlyIfNeeded flag is set, then we can do this if the activity\n        // being launched is the same as the one making the call...  or, as\n        // a special case, if we do not know the caller then we count the\n        // current top activity as the caller.\n        if ((startFlags&ActivityManager.START_FLAG_ONLY_IF_NEEDED) != 0) {\n            ...\n        }\n\n        boolean addingToTask = false;\n        TaskRecord reuseTask = null;\n\n        // If the caller is not coming from another activity, but has given us an\n        // explicit task into which they would like us to launch the new activity,\n        // then let's see about doing that.\n        if (sourceRecord == null && inTask != null && inTask.stack != null) {\n            ...\n        } else {\n            inTask = null;\n        }\n\n        if (inTask == null) {\n            if (sourceRecord == null) {\n                ...\n            } else if (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {\n                ...\n            } else if (launchSingleInstance || launchSingleTask) {\n                // The activity being started is a single instance...  it always\n                // gets launched into its own task.\n                // launchFlags 设为Intent.FLAG_ACTIVITY_NEW_TASK\n                launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n            }\n        }\n\n        ActivityInfo newTaskInfo = null;\n        Intent newTaskIntent = null;\n        ActivityStack sourceStack;\n        if (sourceRecord != null) {\n            if (sourceRecord.finishing) {\n                ...\n            } else {\n                sourceStack = sourceRecord.task.stack;\n            }\n        } else {\n            sourceStack = null;\n        }\n\n        boolean movedHome = false;\n        ActivityStack targetStack;\n\n        intent.setFlags(launchFlags);\n        final boolean noAnimation = (launchFlags & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0;\n\n        // 检索是否存在Task来放Activity；\n        if (((launchFlags & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 &&\n                (launchFlags & Intent.FLAG_ACTIVITY_MULTIPLE_TASK) == 0)\n                || launchSingleInstance || launchSingleTask) {\n            // Activity的启动模式为launchSingleTask\n            if (inTask == null && r.resultTo == null) {\n                // 此时inTask为空 ， r.resultTo为空\n                // 调用findTaskLocked，因为应用第一次启动，所以检索返回结果为null\n                ActivityRecord intentActivity = !launchSingleInstance ?\n                        findTaskLocked(r) : findActivityLocked(intent, r.info);\n                if (intentActivity != null) {\n                    ...\n                }\n            }\n        }\n        if (r.packageName != null) {\n            // 如果Activity与当前栈顶的Activity一致，判断是否再次启动。\n            ActivityStack topStack = mFocusedStack;\n            ActivityRecord top = topStack.topRunningNonDelayedActivityLocked(notTop);\n            if (top != null && r.resultTo == null) {\n                if (top.realActivity.equals(r.realActivity) && top.userId == r.userId) {\n                    ...\n                }\n            }\n\n        } else {\n            ...\n        }\n        boolean newTask = false;\n        boolean keepCurTransition = false;\n\n        TaskRecord taskToAffiliate = launchTaskBehind && sourceRecord != null ?\n                sourceRecord.task : null;\n\n        // 参数r.resultTo为null，表示Launcher不需要等待启动MainActivity的执行结果\n        if (r.resultTo == null && inTask == null && !addingToTask\n                && (launchFlags & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {\n            newTask = true;\n            targetStack = computeStackFocus(r, newTask);\n            targetStack.moveToFront(\"startingNewTask\");\n            // 创建Task来启动Activity\n            if (reuseTask == null) {\n                r.setTask(targetStack.createTaskRecord(getNextTaskId(),\n                        newTaskInfo != null ? newTaskInfo : r.info,\n                        newTaskIntent != null ? newTaskIntent : intent,\n                        voiceSession, voiceInteractor, !launchTaskBehind /* toTop */),\n                        taskToAffiliate);\n                ...\n            } else {\n                ...\n            }\n            ...\n            if (!movedHome) {\n                if ((launchFlags &\n                        (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME))\n                        == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) {\n                    // Caller wants to appear on home activity, so before starting\n                    // their own activity we will bring home to the front.\n                    r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);\n                }\n            }\n        } else if (sourceRecord != null) {\n            ...\n        } else if (inTask != null) {\n            ...\n        } else {\n            ...\n        }\n\n        mService.grantUriPermissionFromIntentLocked(callingUid, r.packageName,\n                intent, r.getUriPermissionsLocked(), r.userId);\n        ...\n        targetStack.mLastPausedActivity = null;\n        targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options);\n        if (!launchTaskBehind) {\n            // Don't set focus on an activity that's going to the back.\n            mService.setFocusedActivityLocked(r, \"startedActivity\");\n        }\n        return ActivityManager.START_SUCCESS;\n    }\n{% endcodeblock %}\n\nstartActivityUncheckedLocked，从命名上可以猜出来方法执行Activity的检查操作。方法中获取到intent的启动标志，对启动模式重新设置，根据标志检索是否是否需要重新创建的Activity的对象、是否需要创建的任务栈、启动时Activity是否需要等待返回值等。然后调用`ActivityStack`的startActivityLocked方法。\n\n{% codeblock lang:java ActivityStack.java %}\n    final void startActivityLocked(ActivityRecord r, boolean newTask,\n            boolean doResume, boolean keepCurTransition, Bundle options) {\n        ...\n        TaskRecord task = null;\n        if (!newTask) {\n            ...\n        }\n\n        // Place a new activity at top of stack, so it is next to interact\n        // with the user.\n        \n        ...\n\n        task = r.task;\n\n        // Slot the activity into the history stack and proceed\n        // 压入历史栈后处理\n        task.addActivityToTop(r);\n        task.setFrontOfTask();\n        r.putInHistory();\n        if (!isHomeStack() || numActivities() > 0) {\n            // We want to show the starting preview window if we are\n            // switching to a new task, or the next activity's process is\n            // not currently running.\n            ...\n        } else {\n            // If this is the first activity, don't do any fancy animations,\n            // because there is nothing for it to animate on top of.\n            ...\n        }\n        ...\n\n        if (doResume) {\n            mStackSupervisor.resumeTopActivitiesLocked(this, r, options);\n        }\n    }\n{% endcodeblock %}\nstartActivityLocked主要判断是否需要去进行任务切换时的界面操作。\n接着调用ActivityStackSupervisor的resumeTopActivitiesLocked方法。\n{% codeblock lang:java ActivityStackSupervisor.java %}\n    boolean resumeTopActivitiesLocked(ActivityStack targetStack, ActivityRecord target,\n            Bundle targetOptions) {\n        if (targetStack == null) {\n            targetStack = mFocusedStack;\n        }\n        // Do targetStack first.\n        boolean result = false;\n        if (isFrontStack(targetStack)) {\n            result = targetStack.resumeTopActivityLocked(target, targetOptions);\n        }\n        ...\n        return result;\n    }\n{% endcodeblock %}\n\n接着调用ActivityStack的resumeTopActivityLocked方法\n\n{% codeblock lang:java ActivityStack.java %}\n    final boolean resumeTopActivityLocked(ActivityRecord prev) {\n        return resumeTopActivityLocked(prev, null);\n    }\n\n    final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {\n        if (mStackSupervisor.inResumeTopActivity) {\n            // Don't even start recursing.\n            return false;\n        }\n\n        boolean result = false;\n        try {\n            // Protect against recursion. 保护防止递归\n            mStackSupervisor.inResumeTopActivity = true;\n            if (mService.mLockScreenShown == ActivityManagerService.LOCK_SCREEN_LEAVING) {\n                mService.mLockScreenShown = ActivityManagerService.LOCK_SCREEN_HIDDEN;\n                mService.updateSleepIfNeededLocked();\n            }\n            result = resumeTopActivityInnerLocked(prev, options);\n        } finally {\n            mStackSupervisor.inResumeTopActivity = false;\n        }\n        return result;\n    }\n    \n    // 确保栈顶Activity已经处于Resumed状态\n    private boolean resumeTopActivityInnerLocked(ActivityRecord prev, Bundle options) {\n\n        if (!mService.mBooting && !mService.mBooted) {\n            //  服务还未启动\n            return false;\n        }\n        ActivityRecord parent = mActivityContainer.mParentActivity;\n        if ((parent != null && parent.state != ActivityState.RESUMED) ||\n                !mActivityContainer.isAttachedLocked()) {\n            // Do not resume this stack if its parent is not resumed.\n            return false;\n        }\n        cancelInitializingActivities();\n\n        // 找到栈顶ActivityRecord\n        final ActivityRecord next = topRunningActivityLocked(null);\n\n        // Remember how we'll process this pause/resume situation, and ensure\n        // that the state is reset however we wind up proceeding.\n        // mUserLeaving保存在本地，重新设置为false\n        final boolean userLeaving = mStackSupervisor.mUserLeaving;\n        mStackSupervisor.mUserLeaving = false;\n\n        final TaskRecord prevTask = prev != null ? prev.task : null;\n        if (next == null) {\n            // There are no more activities!\n            ...\n        }\n\n        next.delayedResume = false;\n\n        // 如果栈顶Activity已经处于resume状态，直接返回\n        if (mResumedActivity == next && next.state == ActivityState.RESUMED &&\n                    mStackSupervisor.allResumedActivitiesComplete()) {\n            ...\n            return false;\n        }\n        ...\n\n        // 如果休眠状态并且没有需要resume的activity，栈顶activity处于暂停状态，直接返回\n        if (mService.isSleepingOrShuttingDown()\n                && mLastPausedActivity == next\n                && mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n\n        // 验证activity的拥有者已经启动\n        if (mService.mStartedUsers.get(next.userId) == null) {\n            ...\n            return false;\n        }\n        // 如果activity正在等待停止或休眠，则从停止或休眠队列中移除这个activity\n        // 因为不适应activity了\n        mStackSupervisor.mStoppingActivities.remove(next);\n        mStackSupervisor.mGoingToSleepActivities.remove(next);\n        next.sleeping = false;\n        mStackSupervisor.mWaitingVisibleActivities.remove(next);\n        ...\n        // 如果现在正在暂停一个activity，返回等待则进入等待状态。\n        if (!mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n        ... \n        mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);\n\n        // 在activity调用resumed之前需要暂停之前的activity\n        boolean dontWaitForPause = (next.info.flags&ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != 0;\n        boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);\n        if (mResumedActivity != null) {\n            ...\n            // 开始暂停之前的Activity，mResumedActivity指定启动时的Activity\n            pausing |= startPausingLocked(userLeaving, false, true, dontWaitForPause);\n        }\n        if (pausing) {\n            ...\n            // At this point we want to put the upcoming activity's process\n            // at the top of the LRU list, since we know we will be needing it\n            // very soon and it would be a waste to let it get killed if it\n            // happens to be sitting towards the end.\n            // 如果正在暂停之前的activity，现在将要启动的activity的进程放在LRU列表的顶部，因为要很快要需要这个参数\n            // \n            if (next.app != null && next.app.thread != null) {\n                mService.updateLruProcessLocked(next.app, true, null);\n            }\n            ...\n            return true;\n        }\n        ...\n        return true;\n    }\n\n    // 执行Activity暂停操作\n    /**\n    * 保存mResumedActivity到本地变量prev中，在本文中mResumedActivity对应的就是Launcher。\n    * 调用 Launcher对应的ApplicationThread对象的远程接口，也就是ApplicationThreadProxy。执行\n    * ApplicationThreadProxy的schedulePauseActivity方法，经过底层驱动Binder，通知Launcher进入\n    * Paused状态。\n    */\n    final boolean startPausingLocked(boolean userLeaving, boolean uiSleeping, boolean resuming,\n            boolean dontWait) {\n        if (mPausingActivity != null) {\n            // 如果有暂停中的Activity\n            ...\n        }\n        ActivityRecord prev = mResumedActivity;\n        if (prev == null) {\n            ...\n            return false;\n        }\n\n        if (mActivityContainer.mParentActivity == null) {\n            // Top level stack, not a child. Look for child stacks.\n            mStackSupervisor.pauseChildStacks(prev, userLeaving, uiSleeping, resuming, dontWait);\n        }\n        ...\n        // 将mResumedActivity置空，mResumedActivity赋值给mPausingActivity\n        mResumedActivity = null;\n        mPausingActivity = prev;\n        mLastPausedActivity = prev;\n        mLastNoHistoryActivity = (prev.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_HISTORY) != 0\n                || (prev.info.flags & ActivityInfo.FLAG_NO_HISTORY) != 0 ? prev : null;\n        prev.state = ActivityState.PAUSING;\n        prev.task.touchActiveTime();\n        clearLaunchTime(prev);\n        // 启动的Activity\n        final ActivityRecord next = mStackSupervisor.topRunningActivityLocked();\n        ...\n        if (prev.app != null && prev.app.thread != null) {\n            ...\n            try {\n                ...\n                prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,\n                        userLeaving, prev.configChangeFlags, dontWait);\n            } catch (Exception e) {\n                ...\n                mPausingActivity = null;\n                mLastPausedActivity = null;\n                mLastNoHistoryActivity = null;\n            }\n        } else {\n            mPausingActivity = null;\n            mLastPausedActivity = null;\n            mLastNoHistoryActivity = null;\n        }\n        ...\n    }\n{% endcodeblock %}\n\n调用Launcher的ApplicationThread远程接口ApplicationThreadProxy的schedulePauseActivity方法\n\n{% codeblock lang:java ApplicationThreadProxy.java%}\n    public final void schedulePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges, boolean dontReport) throws RemoteException {\n        Parcel data = Parcel.obtain();\n        data.writeInterfaceToken(IApplicationThread.descriptor);\n        data.writeStrongBinder(token);\n        data.writeInt(finished ? 1 : 0);\n        data.writeInt(userLeaving ? 1 :0);\n        data.writeInt(configChanges);\n        data.writeInt(dontReport ? 1 : 0);\n        // \n        mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, null,\n                IBinder.FLAG_ONEWAY);\n        data.recycle();\n    }\n{% endcodeblock %}\n\n经过Binder驱动通知ApplicationThread指定对应的schedulePauseActivity方法。ApplicationThread为ActivityThread的内部类。\n\n{% codeblock lang:java ActivityThreadjava -> ApplicationThread.java ， H.java%}\n    private class ApplicationThread extends ApplicationThreadNative {\n        public final void schedulePauseActivity(IBinder token, boolean finished,\n                boolean userLeaving, int configChanges, boolean dontReport) {\n            sendMessage(\n                    finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,\n                    token,\n                    (userLeaving ? 1 : 0) | (dontReport ? 2 : 0),\n                    configChanges);\n        }\n    }\n\n    // 调用ActivityThread sendMessage发送Message，在H中处理Message\n    private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async) {\n        ...\n        Message msg = Message.obtain();\n        msg.what = what;\n        msg.obj = obj;\n        msg.arg1 = arg1;   // 1\n        msg.arg2 = arg2;  // configChanges\n        if (async) {\n            msg.setAsynchronous(true);\n        }\n        mH.sendMessage(msg);\n    }\n\n    private class H extends Handler {\n        public static final int LAUNCH_ACTIVITY         = 100;\n        public static final int PAUSE_ACTIVITY          = 101;\n        ...\n        public void handleMessage(Message msg) {\n                ...\n                case PAUSE_ACTIVITY:\n                    ...\n                    // arg1 = 1 , \n                    handlePauseActivity((IBinder)msg.obj, false, (msg.arg1&1) != 0, msg.arg2,\n                            (msg.arg1&2) != 0);\n                    ...\n                    break;\n                ...\n        }\n    }\n    //  最后调用handlePauseActivity\n    private void handlePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges, boolean dontReport) {\n        ActivityClientRecord r = mActivities.get(token);\n        if (r != null) {\n            ...\n            if (userLeaving) {\n                // 1. 通知Activity，用户将要离开界面\n                performUserLeavingActivity(r);\n            }\n\n            r.activity.mConfigChangeFlags |= configChanges;\n            // 2. 调用Activity的onPaused方法。\n            performPauseActivity(token, finished, r.isPreHoneycomb());\n\n            // Make sure any pending writes are now committed.\n            if (r.isPreHoneycomb()) {\n                QueuedWork.waitToFinish();\n            }\n\n            // Tell the activity manager we have paused.\n            // dontReport = (msg.arg1&2) != 0 ; dontReport的值为false\n            if (!dontReport) {\n                try {\n                    // 3. 调用ActivityManager的远程服务接口 ActivityManagerProxy\n                    // 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。\n                    ActivityManagerNative.getDefault().activityPaused(token);\n                } catch (RemoteException ex) {\n                }\n            }\n            mSomeActivitiesChanged = true;\n        }\n    }\n{% endcodeblock %}\n\nActivityThread在方法`schedulePauseActivity`只简单的调用了sendMessage()方法。然后调用ActivityThread内部类H的handlePauseActivity方法，在handlePauseActivity中做了以下的任务：1. 将Binder引用的token转成ActivityRecord的远程接口ActivityClientRecord。如果userLeaving为true时，则调用performUserLeavingActivity来通知Activity，用户将要离开界面。3. 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。这里表示启动MainActivity。\n\n{% codeblock lang:java ActivityManagerNative.java -> ActivityManagerProxy.java%}\nclass ActivityManagerProxy implements IActivityManager{\n    ...\n    public void activityPaused(IBinder token) throws RemoteException\n    {\n        Parcel data = Parcel.obtain();\n        Parcel reply = Parcel.obtain();\n        data.writeInterfaceToken(IActivityManager.descriptor);\n        data.writeStrongBinder(token);\n        mRemote.transact(ACTIVITY_PAUSED_TRANSACTION, data, reply, 0);\n        reply.readException();\n        data.recycle();\n        reply.recycle();\n    }\n    ...\n}\n{% endcodeblock %}\n\n经过Binder驱动调用ActivityManagerService.activityPaused方法\n{% codeblock lang:java ActivityManager.java %}\n    @Override\n    public final void activityPaused(IBinder token) {\n        final long origId = Binder.clearCallingIdentity();\n        synchronized(this) {\n            ActivityStack stack = ActivityRecord.getStackLocked(token);\n            if (stack != null) {\n                stack.activityPausedLocked(token, false);\n            }\n        }\n        ...\n    }\n{% endcodeblock %}\n\n调用ActivityStack的activityPausedLocked 的方法\n\n{% codeblock lang:java ActivityStack.java %}\n    final void activityPausedLocked(IBinder token, boolean timeout) {\n        ...\n        final ActivityRecord r = isInStackLocked(token);\n        if (r != null) {\n            ...\n            // startPausingLocked时将当前Activity保存在mPausingActivity中。\n            if (mPausingActivity == r) {\n                ...\n                completePauseLocked(true);\n            } else {\n                ... \n            }\n        }\n    }\n\n    final void activityPausedLocked(IBinder token, boolean timeout) {\n        ...\n\n        final ActivityRecord r = isInStackLocked(token);\n        if (r != null) {\n            ...\n            // startPausingLocked时将当前Activity保存在mPausingActivity中。\n            if (mPausingActivity == r) {\n                ...\n                completePauseLocked(true);\n            } else {\n                ...\n                \n            }\n        }\n    }\n    \n    // 完成Activity的暂停任务\n    private void completePauseLocked(boolean resumeNext) {\n        ActivityRecord prev = mPausingActivity;\n        if (prev != null) {\n            prev.state = ActivityState.PAUSED;\n            ...\n            // 在activity暂停之前，会暂时冻住屏幕。这时Activity不再可见，则解除冻结状态\n            prev.stopFreezingScreenLocked(true /*force*/);\n            mPausingActivity = null;\n        }\n        // resumeNext值为true\n        if (resumeNext) {\n            // resume 新的activity\n            final ActivityStack topStack = mStackSupervisor.getFocusedStack();\n            if (!mService.isSleepingOrShuttingDown()) {\n                // 如果没有休眠或关机\n                mStackSupervisor.resumeTopActivitiesLocked(topStack, prev, null);\n            } else {\n                ...\n            }\n        }\n\n        if (prev != null) {\n            // 恢复按键分发\n            prev.resumeKeyDispatchingLocked();\n            ...\n        }\n\n        // 栈内容变化时发送通知。\n        mService.notifyTaskStackChangedLocked();\n    }    \n{% endcodeblock %}\n\n在方法completePauseLocked中：如果mPausingActivity不为空，则mPausingActivity需要置空。而mPausingActivity是在之前调用`startPausingLocked`保存的Launcher的实例，现在不需要这个临时对象了。获取的启动应用的栈信息，调用mStackSupervisor的resumeTopActivitiesLocked方法\n{%  codeblock lang:java ActivityStackSupervisor.java %}\n    boolean resumeTopActivitiesLocked(ActivityStack targetStack, ActivityRecord target,\n            Bundle targetOptions) {\n        ...     \n        boolean result = false;\n        if (isFrontStack(targetStack)) {\n            result = targetStack.resumeTopActivityLocked(target, targetOptions);\n        }\n        ...\n        return result;\n    }\n{% endcodeblock %}\n\n又执行了ActivityStack的resumeTopActivityLocked方法中。主要用作保护防止无限递归\n\n{% codeblock lang:java ActivityStack.java %}\n    final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {\n        ...\n        boolean result = false;\n        try {\n            // Protect against recursion. \n            ...\n            result = resumeTopActivityInnerLocked(prev, options);\n        } finally {\n            ...\n        }\n        return result;\n    }\n\n    private boolean resumeTopActivityInnerLocked(ActivityRecord prev, Bundle options) {\n        ...\n        cancelInitializingActivities();\n\n        // Find the first activity that is not finishing. \n        // 1. 找到栈顶Activity，也就是要启动的Activity。\n        final ActivityRecord next = topRunningActivityLocked(null);\n\n        ...\n        final boolean userLeaving = mStackSupervisor.mUserLeaving;\n        mStackSupervisor.mUserLeaving = false;\n        ... \n        final TaskRecord prevTask = prev != null ? prev.task : null;\n        if (next == null) {\n            ...\n            return isOnHomeDisplay() &&\n                    mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);\n        }\n\n        next.delayedResume = false;\n        // 2. mResumedActivity此时为空\n        if (mResumedActivity == next && next.state == ActivityState.RESUMED &&\n                    mStackSupervisor.allResumedActivitiesComplete()) {\n            ...\n            return false;\n        }\n\n        final TaskRecord nextTask = next.task;\n        if (prevTask != null && prevTask.stack == this &&\n                prevTask.isOverHomeStack() && prev.finishing && prev.frontOfTask) {\n            ...\n        }\n\n        // 休眠状态或没有找到Activity需要执行resume直接返回\n        if (mService.isSleepingOrShuttingDown()\n                && mLastPausedActivity == next\n                && mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n\n        ...\n\n        // 暂停Activity已经执行，跳过\n        if (!mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n        // 设置启动信息\n        mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);\n\n        // launcher已经暂停，跳过\n        boolean dontWaitForPause = (next.info.flags&ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != 0;\n        boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);\n        if (mResumedActivity != null) {\n            ...\n        }\n        if (pausing) {\n            ...\n            return true;\n        }\n        \n        // 并不是休眠状态\n        if (mService.isSleeping() && mLastNoHistoryActivity != null &&\n                !mLastNoHistoryActivity.finishing) {\n            ...\n        }\n\n        if (prev != null && prev != next) {\n            if (!mStackSupervisor.mWaitingVisibleActivities.contains(prev)\n                    && next != null && !next.nowVisible) {\n                // 将要启动的Acitivity添加等待显示的列表中\n                mStackSupervisor.mWaitingVisibleActivities.add(prev);\n                \n            } else {\n\n                // 如果之前的Acitivity消失了，执行这段代码。\n                ...\n            }\n        }\n\n        // Launching this app's activity, make sure the app is no longer\n        // considered stopped.\n        // 启动app，\n        try {\n            AppGlobals.getPackageManager().setPackageStoppedState(\n                    next.packageName, false, next.userId); /* TODO: Verify if correct userid */\n        } catch (RemoteException e1) {\n        } catch (IllegalArgumentException e) {\n           ...\n        }\n\n        // 开始启动新的Activity，通知WindowManager之前的Activity将会很快消失。这样\n        // 在计算需求的屏幕方向时忽略它\n        boolean anim = true;\n        if (prev != null) {\n            // 为Activity准备Window基本参数配置，是否显示启动动画等\n            if (prev.finishing) {\n                ... \n                if (mNoAnimActivities.contains(next)) {\n                    anim = false;\n                    ...\n                }\n                ...\n            } else {\n                ...\n            }\n            ...\n        } else {\n            ...\n        }\n        // 执行resume时的动画参数\n        Bundle resumeAnimOptions = null;\n        if (anim) {\n            // \n            ActivityOptions opts = next.getOptionsForTargetActivityLocked();\n            if (opts != null) {\n                resumeAnimOptions = opts.toBundle();\n            }\n            ...\n        } else {\n            ...\n        }\n        ...\n        // 3. 获取最近的Activity栈信息\n        ActivityStack lastStack = mStackSupervisor.getLastStack();\n        if (next.app != null && next.app.thread != null) {\n            // 因为是从Launcher中第一次启动程序，所以程序没有这些进程和主线程信息。\n            ...\n        } else {\n            \n            // 需要重启Activity：如正常启动程序或闪退后启动程序\n            if (!next.hasBeenLaunched) {\n                // 之前没有启动过\n                next.hasBeenLaunched = true;\n            } else {\n                ...\n            }\n            // 开始执行应用程序的进程和ActivityThread等重要参数的初始化操作\n            mStackSupervisor.startSpecificActivityLocked(next, true, true);\n        }\n        ...\n        return true;\n    }\n\n{% endcodeblock %}\n\nresumeTopActivityInnerLocked中执行的任务\n1）取出栈顶Activity，也就是要启动的Activity。\n2）Launcher此时已经处于Pasued状态，所以此时mResumedActivity为null，mLastPausedActivity为Launcher。\n3）因为应用还未启动所以MainActivity的ActivityRecord的app和thread属性还未初始化，都为空，则调用ActivityStackSupervisor的startSpecificActivityLocked方法初始化应用的重要变量：ActivityThread等。\n\n{% codeblock lang:java ActivityStackSupervisor.java %}\n    void startSpecificActivityLocked(ActivityRecord r,\n            boolean andResume, boolean checkConfig) {\n        // Is this activity's application already running?\n        // activity的application是否已经运行\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n                r.info.applicationInfo.uid, true);\n     \n        r.task.stack.setLaunchTime(r);\n\n        if (app != null && app.thread != null) {\n            // 如果程序已经运行了，则执行realStartActivityLocked的流程\n            try {\n                ...\n                realStartActivityLocked(r, app, andResume, checkConfig);\n                return;\n            } catch (RemoteException e) {\n                ...\n            }\n            ...\n        }\n        // 因为这时的应用还未启动则执行startProcessLocked方法，开启新的进程\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n                \"activity\", r.intent.getComponent(), false, false, true);\n    }\n{% endcodeblock %}\n\n因为首次的应用，所以取到的ProcessRecord为null。默认情况下，ActivityRecord中的进程名processName对应的就是在`AndroidManifest`中声明包名。调用ActivityManagerService的startProcessLocked方法来执行初始化任务。\n{% codeblock lang:java ActivityManagerService.java %}\n    final ProcessRecord startProcessLocked(String processName, ApplicationInfo info,\n            boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName,\n            boolean allowWhileBooting, boolean isolated, int isolatedUid, boolean keepIfLarge,\n            String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) {\n        ...\n        ProcessRecord app;\n        // isolated为true\n        if (!isolated) {\n            ...\n        } else {\n            ...\n            // 如果是单独进程，则不能重用已存在的进程\n            app = null;\n        }\n        ...\n        // 如果存在一个Application；\n        // 调用者不认为已经死亡或没有线程对象时我们认为没有崩溃；\n        // 或分配了一个进程id时，则认为正在启动或已经运行；\n        // 这三种情况下，不会做任何事\n        if (app != null && app.pid > 0) {\n            if (!knownToBeDead || app.thread == null) {\n                // 已经运行App或等待出现（已经有进程id，但是还没有线程），则保留应用\n                ...\n                // 如果是进程的新包，则添加新包到列表中\n                app.addPackage(info.packageName, info.versionCode, mProcessStats);\n                ...\n                return app;\n            }\n\n            // app添加到之前的进程中，则清空进程\n            ...\n        }\n        \n        // host name\n        String hostingNameStr = hostingName != null\n                ? hostingName.flattenToShortString() : null;\n        ...\n        if (app == null) {\n            ...\n            // 为app 创建新的进程\n            app = newProcessRecordLocked(info, processName, isolated, isolatedUid);\n            if (app == null) {\n                return null;\n            }\n            app.crashHandler = crashHandler;\n            ...\n        } else {\n            // 如果是进程的新包，则添加新包到列表中\n            app.addPackage(info.packageName, info.versionCode, mProcessStats);\n            ...\n        }\n\n        // 推迟进程启动直到系统准备好。\n        if (!mProcessesReady\n                && !isAllowedWhileBooting(info)\n                && !allowWhileBooting) {\n            ...\n        }\n        // 开启进程\n        startProcessLocked(\n                app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);\n        ...\n        return (app.pid != 0) ? app : null;\n    }\n\n     final ProcessRecord newProcessRecordLocked(ApplicationInfo info, String customProcess,\n            boolean isolated, int isolatedUid) {\n        // 进程命名 ： processName+uid\n        String proc = customProcess != null ? customProcess : info.processName;\n        BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();\n        final int userId = UserHandle.getUserId(info.uid);\n        int uid = info.uid;\n        if (isolated) {\n            // isolatedUid 为 0\n            if (isolatedUid == 0) {\n                int stepsLeft = Process.LAST_ISOLATED_UID - Process.FIRST_ISOLATED_UID + 1;\n                while (true) {\n                    ...\n                    uid = UserHandle.getUid(userId, mNextIsolatedProcessUid);\n                    mNextIsolatedProcessUid++;\n                    if (mIsolatedProcesses.indexOfKey(uid) < 0) {\n                        // No process for this uid, use it.\n                        break;\n                    }\n                    ...\n                }\n            } else {\n                ...\n                uid = isolatedUid;\n            }\n        }\n        final ProcessRecord r = new ProcessRecord(stats, info, proc, uid);\n        ...\n        addProcessNameLocked(r);\n        return r;\n    }\n\n    private final void addProcessNameLocked(ProcessRecord proc) {\n        // 清空旧进程\n        ProcessRecord old = removeProcessNameLocked(proc.processName, proc.uid);\n        if (old == proc && proc.persistent) {\n            // We are re-adding a persistent process.  Whatevs!  Just leave it there.\n            ...\n        } else if (old != null) {\n            ...\n        }\n        ...\n        // mProcessNames添加进程信息\n        mProcessNames.put(proc.processName, proc.uid, proc);\n        if (proc.isolated) {\n            mIsolatedProcesses.put(proc.uid, proc);\n        }\n    }\n\n{% endcodeblock %}\n\nActivityManagerService的startProcessLocked方法：检查是否有对应的进程存在，如果没有进程（如启动新应用时），则\nnewProcessRecordLocked初始化进程基本参数：pid，uid，进程名等等。并保存在mProcessNames全局变量中。然后执行`startProcessLocked`方法，进入下一步。\n\n{% codeblock lang:java ActivityManagerService.java%}\n    private final void startProcessLocked(ProcessRecord app, String hostingType,\n            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) {\n        ...\n        if (app.pid > 0 && app.pid != MY_PID) {\n            ...\n            app.setPid(0);\n        }\n        ...\n        mProcessesOnHold.remove(app);\n        ...\n\n        try {\n            ...\n            int uid = app.uid;\n            int[] gids = null;\n            int mountExternal = Zygote.MOUNT_EXTERNAL_NONE;\n            if (!app.isolated) {\n                ...\n            }\n            ...\n            if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {\n                if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL\n                        && mTopComponent != null\n                        && app.processName.equals(mTopComponent.getPackageName())) {\n                    uid = 0;\n                }\n                if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL\n                        && (app.info.flags&ApplicationInfo.FLAG_FACTORY_TEST) != 0) {\n                    uid = 0;\n                }\n            }\n            ... \n            // debug 标志\n            int debugFlags = 0;\n            ...\n            String requiredAbi = (abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;\n            if (requiredAbi == null) {\n                requiredAbi = Build.SUPPORTED_ABIS[0];\n            }\n            String instructionSet = null;\n            if (app.info.primaryCpuAbi != null) {\n                instructionSet = VMRuntime.getInstructionSet(app.info.primaryCpuAbi);\n            }\n            app.gids = gids;\n            app.requiredAbi = requiredAbi;\n            app.instructionSet = instructionSet;\n\n            // Start the process.  It will either succeed and return a result containing\n            // the PID of the new process, or else throw a RuntimeException.\n            // 启动进程，成功则返回含有新进程pid信息的结构，否则抛出异常。\n            boolean isActivityProcess = (entryPoint == null);\n            // \"android.app.ActivityThread\"\n            if (entryPoint == null) entryPoint = \"android.app.ActivityThread\";\n            ...\n            // 创建新的进程，\n            Process.ProcessStartResult startResult = Process.start(entryPoint,\n                    app.processName, uid, uid, gids, debugFlags, mountExternal,\n                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                    app.info.dataDir, entryPointArgs);\n            ...\n        } catch (RuntimeException e) {\n            \n            ...\n        }\n    }\n{% endcodeblock %}\n\nProcess的start方法向Zygote发送请求，传入\"android.app.ActivityThread\"字符串参数，通过Zygote执行fork子进程，初始化应用最终调用ActivityThread的main方法。\n\n{% codeblock lang:java ActivityThread.java%}\n    public static void main(String[] args) {\n        ...\n        SamplingProfilerIntegration.start();\n        ...\n        Environment.initForCurrentUser();\n        ...\n        AndroidKeyStoreProvider.install();\n\n        // Make sure TrustedCertificateStore looks in the right place for CA certificates\n        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n        TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n        Process.setArgV0(\"<pre-initialized>\");\n        // 初始化MainLooper\n        Looper.prepareMainLooper();\n        // 创建ActivityThread\n        ActivityThread thread = new ActivityThread();\n        // attach 调用attach方法\n        thread.attach(false);\n        // 主线程的sMainThreadHandler\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = thread.getHandler();\n        }\n        ...\n        // 开启主线程循环\n        Looper.loop();\n        ...\n    }\n\n    private void attach(boolean system) {\n        sCurrentActivityThread = this;\n        // system值为false\n        mSystemThread = system;\n        if (!system) {\n            ...\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n            final IActivityManager mgr = ActivityManagerNative.getDefault();\n            try {\n                // 调用ActivityManagerProxy进行远程通信。\n                mgr.attachApplication(mAppThread);\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n            ...\n        } else {\n            // 不能设置Application对象。如果系统崩溃了，直接结束。\n            ...\n        }\n        ...\n    }\n{% endcodeblock %}\n\nActivityThread的main方法是整个应用程序启动的入口。执行了ActivityThread、主线程消息Looper的初始化操作。然后调用ActivityManagerProxy的attachApplication方法通过Binder驱动通知ActivityManagerService的attachApplication执行应用启动的后续操作。\n{% codeblock lang:java ActivityManagerService%}\n    @Override\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            ...\n            attachApplicationLocked(thread, callingPid);\n            ...\n        }\n    }\n\n    private final boolean attachApplicationLocked(IApplicationThread thread,\n            int pid) {\n\n        // Find the application record that is being attached...  either via\n        // the pid if we are running in multiple processes, or just pull the\n        // next app record if we are emulating process with anonymous threads.\n\n        // 检索需要附加的application信息。\n        // 1. 运行在多进程中pid信息;2. 或拉取用匿名线程模拟的进程启动的app信息。\n        ProcessRecord app;\n        if (pid != MY_PID && pid >= 0) {\n            synchronized (mPidsSelfLocked) {\n                app = mPidsSelfLocked.get(pid);\n            }\n        } else {\n            app = null;\n        }\n\n        if (app == null) {\n            ...\n            // 未找到application\n            return false;\n        }\n\n        // If this application record is still attached to a previous\n        // process, clean it up now.\n        // 如果application record仍附加在之前的进程，则结束application\n        if (app.thread != null) {\n            handleAppDiedLocked(app, true, true);\n        }\n        // 进程名：\n        final String processName = app.processName;\n        try {\n            AppDeathRecipient adr = new AppDeathRecipient(\n                    app, pid, thread);\n            thread.asBinder().linkToDeath(adr, 0);\n            app.deathRecipient = adr;\n        } catch (RemoteException e) {\n            ...\n            return false;\n        }\n        ...\n        // 激活进程状态\n        app.makeActive(thread, mProcessStats);\n        app.curAdj = app.setAdj = -100;\n        app.curSchedGroup = app.setSchedGroup = Process.THREAD_GROUP_DEFAULT;\n        app.forcingToForeground = null;\n        updateProcessForegroundLocked(app, false, false);\n        app.hasShownUi = false;\n        app.debugging = false;\n        ...\n        boolean normalMode = mProcessesReady || isAllowedWhileBooting(app.info);\n        List<ProviderInfo> providers = normalMode ? generateApplicationProvidersLocked(app) : null;\n        ...\n        try {\n            ...\n            ApplicationInfo appInfo = app.instrumentationInfo != null\n                    ? app.instrumentationInfo : app.info;\n            app.compat = compatibilityInfoForPackageLocked(appInfo);\n            if (profileFd != null) {\n                profileFd = profileFd.dup();\n            }\n            ProfilerInfo profilerInfo = profileFile == null ? null\n                    : new ProfilerInfo(profileFile, profileFd, samplingInterval, profileAutoStop);\n            // 1. 初始化应用中对应系统信息，\n            thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,\n                    profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,\n                    app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,\n                    enableTrackAllocation, isRestrictedBackupMode || !normalMode, app.persistent,\n                    new Configuration(mConfiguration), app.compat,\n                    getCommonServicesLocked(app.isolated),\n                    mCoreSettingsObserver.getCoreSettingsLocked());\n            updateLruProcessLocked(app, false, null);\n            ...\n        } catch (Exception e) {\n            ...\n        }\n        ...\n        boolean badApp = false;\n        boolean didSomething = false;\n        ... \n        // 查看进程中是否有栈顶Activity等待运行\n        if (normalMode) {\n            try {\n                // 2. 开始执行应用的MainActivity的启动操作。\n                if (mStackSupervisor.attachApplicationLocked(app)) {\n                    didSomething = true;\n                }\n            } catch (Exception e) {\n               ...\n            }\n        }\n\n        // 查看进程中是否要运行的Service\n        if (!badApp) {\n            try {\n                didSomething |= mServices.attachApplicationLocked(app, processName);\n            } catch (Exception e) {\n                ...\n            }\n        }\n\n        // 查看进程中是否有要运行的Broadcast\n        if (!badApp && isPendingBroadcastProcessLocked(pid)) {\n            try {\n                didSomething |= sendPendingBroadcastsLocked(app);\n            } catch (Exception e) {\n                ...\n            }\n        }\n        ...\n        return true;\n    }\n{% endcodeblock%}\nattachApplicationLocked中做了两个重要的事情\n\n1）bindApplication：完成Application的实例化操作。通过Binder机制调用ApplicationThread的bindApplication，又会经过Handler发送Application绑定的操作，通过mInstrumentation来完成Application实例化，最后调用Application的onCreate()方法\n\n2）attachApplicationLocked：接着步骤1）查找栈顶的Activity，如果存在MainActivity。则调用ActivityStackSupervisor的attachApplicationLocked方法执行启动Activity的任务。\n\n{% codeblock lang:java ActivityStackSupervisor.java %}\n    // 查找需要启动的Activity。\n    boolean attachApplicationLocked(ProcessRecord app) throws RemoteException {\n        final String processName = app.processName;\n        boolean didSomething = false;\n        // 对所有任务栈循环\n        for (int displayNdx = mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {\n            ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;\n            for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {\n                // \n                final ActivityStack stack = stacks.get(stackNdx);\n                if (!isFrontStack(stack)) {\n                    continue;\n                }\n                // 如果是最前显示的栈，获取栈顶Activity的信息\n                ActivityRecord hr = stack.topRunningActivityLocked(null);\n                if (hr != null) {\n                    if (hr.app == null && app.uid == hr.info.applicationInfo.uid\n                            && processName.equals(hr.processName)) {\n                        try {\n                            // 启动栈顶Activity\n                            if (realStartActivityLocked(hr, app, true, true)) {\n                                didSomething = true;\n                            }\n                        } catch (RemoteException e) {\n                            ...\n                        }\n                    }\n                }\n            }\n        }\n        return didSomething;\n    }\n\n    final boolean realStartActivityLocked(ActivityRecord r,\n            ProcessRecord app, boolean andResume, boolean checkConfig)\n            throws RemoteException {\n\n        if (andResume) {\n            ...\n        }\n        ...\n        r.app = app;\n        app.waitingToKill = null;\n        r.launchCount++;\n        r.lastLaunchTime = SystemClock.uptimeMillis();\n        ...\n        int idx = app.activities.indexOf(r);\n        if (idx < 0) {\n            app.activities.add(r);\n        }\n        ...\n        final TaskRecord task = r.task;\n        final ActivityStack stack = task.stack;\n        try {\n            ...\n            List<ResultInfo> results = null;\n            List<ReferrerIntent> newIntents = null;\n            if (andResume) {\n                results = r.results;\n                newIntents = r.newIntents;\n            }\n            ...\n            if (r.isHomeActivity() && r.isNotResolverActivity()) {\n                // Home process is the root process of the task.\n                mService.mHomeProcess = task.mActivities.get(0).app;\n            }\n            ...\n            r.sleeping = false;\n            r.forceNewConfig = false;\n            mService.showAskCompatModeDialogLocked(r);\n            r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);\n            ProfilerInfo profilerInfo = null;\n            if (mService.mProfileApp != null && mService.mProfileApp.equals(app.processName)) {\n                ...\n            }\n\n            if (andResume) {\n                app.hasShownUi = true;\n                app.pendingUiClean = true;\n            }\n            ...\n            // 启动Activity\n            app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                    System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                    new Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,\n                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n            ...\n\n        } catch (RemoteException e) {\n            ...\n        }\n        ...\n\n        return true;\n    }\n{% endcodeblock %}\n\n遍历所有Activity的任务找到最前显示的Activity的栈，取栈顶的Activity执行真正的Activity启动操作。同样需要Binder进行进程间通讯通知ApplicationThread执行scheduleLaunchActivity任务。\n\n{% codeblock lang:java ActivityThread.java -> ApplicationThread.java %}\n\n    private class ApplicationThread extends ApplicationThreadNative {\n        @Override\n        public final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n                ActivityInfo info, Configuration curConfig, Configuration overrideConfig,\n                CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,\n                int procState, Bundle state, PersistableBundle persistentState,\n                List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents,\n                boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) {\n\n            updateProcessState(procState, false);\n\n            ActivityClientRecord r = new ActivityClientRecord();\n\n            r.token = token;\n            r.ident = ident;\n            r.intent = intent;\n            r.referrer = referrer;\n            r.voiceInteractor = voiceInteractor;\n            r.activityInfo = info;\n            r.compatInfo = compatInfo;\n            r.state = state;\n            r.persistentState = persistentState;\n\n            r.pendingResults = pendingResults;\n            r.pendingIntents = pendingNewIntents;\n\n            r.startsNotResumed = notResumed;\n            r.isForward = isForward;\n\n            r.profilerInfo = profilerInfo;\n\n            r.overrideConfig = overrideConfig;\n            updatePendingConfiguration(curConfig);\n            // 发送启动的Activity的消息\n            sendMessage(H.LAUNCH_ACTIVITY, r);\n        }\n    }\n\n    private class H extends Handler {\n        ...\n        public void handleMessage(Message msg) {\n            ...\n            switch (msg.what) {\n                ...\n                case LAUNCH_ACTIVITY: {\n                    ...\n                    final ActivityClientRecord r = (ActivityClientRecord) msg.obj;\n                    ...\n                    handleLaunchActivity(r, null);\n                    ...\n                } break;\n                ...\n            }\n            ...\n        }   \n        ...\n    }\n    private void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n\n        mSomeActivitiesChanged = true;\n        ...\n        // 启动Activity前初始化WindowManager的全局属性\n        WindowManagerGlobal.initialize();\n        // 1. 执行Activity的启动操作\n        Activity a = performLaunchActivity(r, customIntent);\n        // 启动成功\n        if (a != null) {\n            r.createdConfig = new Configuration(mConfiguration);\n            // 2. 执行Activity的resume操作\n            handleResumeActivity(r.token, false, r.isForward,\n                    !r.activity.mFinished && !r.startsNotResumed);\n\n            if (!r.activity.mFinished && r.startsNotResumed) {\n                ...\n                r.paused = true;\n            }\n        } else {\n            // 出现异常时直接结束Activity\n        }\n    }\n{% endcodeblock %}\n\n先调用performLaunchActivity启动Activity，方法中执行Activity的onCreate()和start()方法。如果启动成功即返回的Activity不为null，则继续执行handleResumeActivity方法，方法中完成Activity调用onResume方法，完成整个Activity启动的过程。\n\n{% codeblock lang:java ActivityThread%}\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n\n        ActivityInfo aInfo = r.activityInfo;\n        if (r.packageInfo == null) {\n            r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,\n                    Context.CONTEXT_INCLUDE_CODE);\n        }\n        // 收集启动的Activity信息。\n        // 创建Activity的相关组件\n        ComponentName component = r.intent.getComponent();\n        if (component == null) {\n            component = r.intent.resolveActivity(\n                mInitialApplication.getPackageManager());\n            r.intent.setComponent(component);\n        }\n\n        if (r.activityInfo.targetActivity != null) {\n            component = new ComponentName(r.activityInfo.packageName,\n                    r.activityInfo.targetActivity);\n        }\n\n        Activity activity = null;\n        try {\n            // 用ClassLoader加载MainActivity。实例化MainActivity\n            java.lang.ClassLoader cl = r.packageInfo.getClassLoader();\n            activity = mInstrumentation.newActivity(\n                    cl, component.getClassName(), r.intent);\n            ...\n            r.intent.setExtrasClassLoader(cl);\n            r.intent.prepareToEnterProcess();\n            if (r.state != null) {\n                r.state.setClassLoader(cl);\n            }\n        } catch (Exception e) {\n            ...\n        }\n\n        try {\n            Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n            ...\n            if (activity != null) {\n                // 创建Activity上下文信息。\n                Context appContext = createBaseContextForActivity(r, activity);\n                // \n                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());\n                Configuration config = new Configuration(mCompatConfiguration);\n                ...\n\n                activity.attach(appContext, this, getInstrumentation(), r.token,\n                        r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                        r.embeddedID, r.lastNonConfigurationInstances, config,\n                        r.referrer, r.voiceInteractor);\n\n                if (customIntent != null) {\n                    activity.mIntent = customIntent;\n                }\n                r.lastNonConfigurationInstances = null;\n                activity.mStartedActivity = false;\n                int theme = r.activityInfo.getThemeResource();\n                if (theme != 0) {\n                    activity.setTheme(theme);\n                }\n\n                activity.mCalled = false;\n                // 调用callActivityOnCreate方法\n                if (r.isPersistable()) {\n                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);\n                } else {\n                    mInstrumentation.callActivityOnCreate(activity, r.state);\n                }\n                ...\n                r.activity = activity;\n                r.stopped = true;\n                if (!r.activity.mFinished) {\n                    // 调用start方法\n                    activity.performStart();\n                    r.stopped = false;\n                }\n                if (!r.activity.mFinished) {\n                    // 如果是异常恢复则调用onRestoreInstanceState方法来恢复状态\n                    if (r.isPersistable()) {\n                        if (r.state != null || r.persistentState != null) {\n                            mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,\n                                    r.persistentState);\n                        }\n                    } else if (r.state != null) {\n                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);\n                    }\n                }\n                if (!r.activity.mFinished) {\n                    activity.mCalled = false;\n                    // \n                    if (r.isPersistable()) {\n                        mInstrumentation.callActivityOnPostCreate(activity, r.state,\n                                r.persistentState);\n                    } else {\n                        mInstrumentation.callActivityOnPostCreate(activity, r.state);\n                    }\n                    ...\n                }\n            }\n            r.paused = true;\n            // 绑定token\n            mActivities.put(r.token, r);\n        } catch (SuperNotCalledException e) {\n            throw e;\n        } catch (Exception e) {\n            ...\n        }\n\n        return activity;\n    }\n{% endcodeblock %}\n实例化Activity的组件信息，通过ClassLoader加载Activity，创建上下文信息附加到Activity中，然后由Instrumentation调用callActivityOnCreate等方法完成Activity启动时的生命周期方法，如onCreate()、onStart()等。\n{% codeblock lang:java Instrumentation.java%}\n    public void callActivityOnCreate(Activity activity, Bundle icicle) {\n        prePerformCreate(activity);\n        // 调用Activity的onCreate \n        activity.performCreate(icicle);\n        postPerformCreate(activity);\n    }\n{% endcodeblock %}\n\n到此，Android的应用程序启动与Activity相关的流程就完成了。\n在整个流程中几个重要的类需要注意\n\n- `ActivityManagerNative` ：是Binder的子类，是底层Binder驱动在Java类中的实现。因为是抽象类，所以具体实现由ActivityManagerService来完成。\n\n- `ActivityManagerService `：简称AMS，是Android中最核心的服务，主要负责Android的四大组件的启动、切换、是调度和应用进程的管理和调度工作（如Activity的生命周期控制）。在系统启动的时候完成AMS的注册。\n\n- `ActivityManagerProxy` ：是ActivityManagerService的远程代理，客户端调用ActivityManagerProxy的相关方法通过Binder机制实现IPC，完成与ActivityManagerService通信交互任务。\n\n- `ActivityThread` ：Application的入口，从main方法开始创建应用相关的核心功能。如主线程的消息循环，Application初始化，绑定Application相关的服务等等，同时控制组件的生命周期操作。对应Application的主线程。\n\n- `ApplicationtThreadNative` ：与`ActivityManagerNative`一样也是Binder子类。具体实现由ApplicationThread完成。\n\n- `ApplicationThread`：完成AMS与ActivityThread之间的通信。\n\n- `ApplicationThreadProxy` ：是ApplicationThread远程接口代理。负责与客户端ApplicationThread通讯\n\n\n- `Instrumentation` ：每个应用绑定唯一的一个Instrumentation，每个Activity都一个对该对象的引用。ActivityThread通过Instrumentation来控制Activity的生命周期。\n\n- `ActivityStackSupervisor`： ActivityStack的超级管理员。\n\n- `ActivityStack` ：用于保存Activity的栈，决定是否要启动新的进程。\n\n- `ActivityRecord ` ：用于Activity的信息存储，包括状态、进程名等。\n\n- `TaskRecord ` ：Android中的Task的具体实现。记录ActivityRecord的任务栈。\n\n### 参考链接\n\n[Android Developer Activities](https://developer.android.com/guide/components/activities.html)\n\n[Activity的启动方式和flag详解](http://blog.csdn.net/singwhatiwanna/article/details/9294285)\n\n[Android 基础](http://blog.csdn.net/liuhe688/article/details/9494411)\n\n[深入理解Java Binder和MessageQueue](http://blog.csdn.net/innost/article/details/47317823)\n\n[Android应用程序启动过程源代码分析](http://blog.csdn.net/luoshengyang/article/details/6689748)\n\n[深入理解Binder](http://blog.csdn.net/innost/article/details/47208049)\n\n[【凯子哥带你学Framework】Activity启动过程全解析](http://www.jianshu.com/p/6037f6fda285)","source":"_posts/Android：Activity的基础知识及启动过程.md","raw":"---\ntitle: Android：Activity的基础知识及启动过程\ndate: 2016-06-05 23:14:29\nthumbnailImage: http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529028/android/8ff23095a2a4e04af26ca63642bfdea3_b.png\ntags: android-aosp\ncategories: android-aosp\n---\nActivity是Android四个基本组件之一，主要用作Application的界面展示和交互。Activity可以说是Android中应用最多的组件，因此有必要掌握关于Activity的知识。如：Activity的生命周期，Activity的启动模式，更深层次的如Activity的创建过程以及Actvity生命周期对应的方法是如何调用的。\n# 一、Activity的生命周期\n## 1.正常生命周期\n一个Activity正常的流程如下图：\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529027/android/activity_lifecycle.png\" style=\"width:50%\">\n</div>\n\n1.Activity的完整生命周期：从onCreate()开始到onDestory()结束。Activity在onCreate()中完成一系列初始化的工作，如完成界面布局资源的加载，初始化Activity的需要的数据等等。在onDestory()中释放所有包含的资源。如在结束Actviity时，如果Activity中还有未完成的数据加载的工作，就需要在onDestory()中或之前及时结束。\n\n2.Activity的`可见`生命周期：`可见`生命周期在onStart()与onStop()之间。这段周期中，用户可以看到activity出现在屏幕上，并在onResume()之后，用户可以与界面交互了。当前Activity调用onStop()后，则不再可见，如启动一个新的Activity。在这段生命周期中，你可以添加资源到activity中，向用户展示。如：你在onStart中注册了一个广播，来更新你的UI，然后当activity不可见时，在onStop()中注销这个广播，释放广播资源。在activity整个生命周期中，onStart()和onStop()可能会多次调用，因为activity会在可见和不可见之间多次变化。注：onStart()和onStop()中不要做耗时操作，影响Actvitiy的\n显示与停止。\n\n3.Activity前台展示时的生命周期：这段生命周期在调用onResume()和onPause()之间。这段周期，当前Actvitiy位于所有其他Activity顶部（因为Actvitiy就是保存在栈形式的结构中）。Actviity会频繁地在前台的进入和退出之间交互，比如：当回到Android的Home页面、设备处于休眠状态或显示Dialog时，都会调用onPause()，停止当前Actvity的前台状态。因为Actvitiy比较频繁在前台展示的状态交互，在这两方法中，不能进行耗时任务，也是因为新的Actvitiy在显示时，需要暂停前一个Actvitiy的执行，才会调用本身onResume()方法。\n\n## 2.异常时的生命周期\n\n这里还需要考虑到，当系统内存不够用时或旋转屏幕时，Activity会经历哪些生命周期？\n\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467533421/android/restore_instance.png\"\n\tstyle=\"width:50%\">\n</div>\n\n当系统在内存不够用的时候，系统会销毁后台的Activity以来提供足够内存资源给前台的Actvitiy使用，所以在这种情况下，后台的Activity已经被销毁，回到前台时，系统不仅仅只调用onResume()等方法，系统必须重新创建Activity对象。然而用户不会意识到系统销毁了之前Actviity并重新创建了一个新的。因此开发时某时候需要恢复到之前Actvitiy状态：包括数据、界面资源状态等。这时候需要你的Activity覆写Actvity的 onSaveInstanceState()方法，来存储Activity销毁时的数据。\n\n{% codeblock lang:java Actvity.java %}\n// 这个方法在onStop()之前调用。\nprotected void onSaveInstanceState(Bundle outState) {\n    // 委托Window保存数据\n    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());\n    Parcelable p = mFragments.saveAllState();\n    if (p != null) {\n        outState.putParcelable(FRAGMENTS_TAG, p);\n    }\n    getApplication().dispatchActivitySaveInstanceState(this, outState);\n}\n{% endcodeblock %}\n\n系统默认保存当前Activity的视图结构。并在Actvitiy重启后恢复这些数据。首先Actvitiy会调用onSaveInstanceState保存数据，然后Actvitiy会委托Window保存数据，Window委托它上面的顶级容器去保存数据。顶级容器是一个ViewGroup，一般情况下是DecorView。最后顶层容器再去一一通知它的子元素来保存数据。\n\n{% codeblock lang:java PhoneWindow.java %}\n// PhoneWindow.java 是Window的实现\n@Override\npublic Bundle saveHierarchyState() {\n    Bundle outState = new Bundle();\n    if (mContentParent == null) {\n        return outState;\n    }\n    // mContentParent就是ViewGroup\n    mContentParent.saveHierarchyState(states);\n    ...\n    return outState;\n}\n{% endcodeblock %}\n\n\n{% codeblock lang:java ViewGroup.java %}\n\n// 分发的每个子View的dispatchSaveInstanceState具体实现\n@Override\nprotected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {\n    super.dispatchSaveInstanceState(container);\n    final int count = mChildrenCount;\n    final View[] children = mChildren;\n    for (int i = 0; i < count; i++) {\n        View c = children[i];\n        if ((c.mViewFlags & PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) {\n            c.dispatchSaveInstanceState(container);\n        }\n    }\n}\n{% endcodeblock %}\n\n当Actvitiy被重新创建后，系统会调用onRestoreInstanceState，并把Actvitiy销毁时onSaveInstanceState方法所保存的Bundle对象作为参数同时传递给onRestoreInstanceState和onCreate方法。\n{% codeblock lang:java Actvity.java %}\n    // 这个方法在onStart和onPostCreate()之前调用\n    protected void onRestoreInstanceState(Bundle savedInstanceState) {\n        if (mWindow != null) {\n            Bundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);\n            if (windowState != null) {\n                mWindow.restoreHierarchyState(windowState);\n            }\n        }\n    }\n{% endcodeblock %}\n\n在恢复Actvitiy存储时的数据时候，接收的位置可以选择onRestoreInstanceState()或者onCreate，两者区别是onRestoreInstanceState()中的Bundle不为空，onCreate()中的Bundle值可能为空，需要加上判断。\n\n> `注`：onSaveInstanceState()并不能保证正常时被调用。所以不要用来做为数据存储持久化的工作。相反的，当用户离开Activity时应该在onPause()中来存储持久化数据（如数据库数据）。可以简单理解为系统只在Actvitiy异常终止的时候才会调用这两方法，其他情况并不会触发。异常终止：如因为内存不足导致低优先级的Actvitiy被销毁、在旋转屏幕的时候Actvitiy被销毁又被重新创建。\n\n## 3.处理系统配置变化\n\n一些系统配置在运行时可能会发生变化（如：屏幕旋转、键盘变化、语言等）。当这些变化发生的时候，系统会调用onDestroy(),然后立即调用onCreate()。有时候我们并不想要销毁Actvitiy和重新创建，这时候我们可以在AndroidManifest中配置指定Activity的`android:configChanges`的属性即可\n{% codeblock lang:xml AndroidManifest.xml %}\n<activity \n    ...\n    android:configChanges=[\"mcc\", \"mnc\", \"locale\",\n                         \"touchscreen\", \"keyboard\", \"keyboardHidden\",\n                         \"navigation\", \"screenLayout\", \"fontScale\",\n                         \"uiMode\", \"orientation\", \"screenSize\",\n                         \"smallestScreenSize\"] \n    ... >\n    ...\n</activity>\n{% endcodeblock %}\n\n常用的三个选项：\n\n\t1. local：系统语言变化、\n\t2. orientation：手机屏幕发生旋转、\n\t3. keyboardHidden：键盘的可访问性发生了变化，调出键盘。\n\n使用方法\n\n{% codeblock lang:xml AndroidManifest.xml %}\n<activity\n\tandroid:configChanges=\"orientation|...\"\n\t... >\n\t...\n</activity>\n{% endcodeblock %}\n\n> `注`：screenSize、smallestScreenSize比较特殊，它们的行为与编译选项有关，和运行环境无关。\n\n{% codeblock lang:xml AndroidManifest.xml %}\n<!--如果指定的minSdkVersion和targetSdkVersion有一个大于13，为了防止旋转屏幕时Actvitiy重启，除了 -->\n<!-- orientation，还需要加上screenSize和smallestScreenSize -->\n<uses-sdk\n    android:minSdkVersion=\"...\"\n    android:targetSdkVersion=\"...\"\n    />\n{% endcodeblock %}\n\n# 二、Activity的启动模式\n为了方便管理Activity，Android引入了Task（任务）和Stack（返回栈）\nTask（任务）是用户进行交互的Activity集合。Activity置于类似`后进先出`的对象结构的Stack（返回栈）中。\n- 当用户点击Application（应用程序）的Icon时，如果应用的Task没有创建，则系统创建一个新的Task，Application打开Main Activity作为Task的根activity。\n- 当启动新的Activity时，创建Activity的实例放入栈，置于栈顶并获取焦点。\n- 当Activity进入停止状态，系统保持它的当前状态。\n- 当用户点击返回按钮时，栈顶Activity出栈，调用onDestory()销毁实例。前Activity恢复存储的状态并置于栈顶。栈中的Activities不会重新排序，只能够被压入栈和出栈。\n- 当用户连续点击返回键，栈中Activity接连出栈，直到回到桌面或Task运行的起始位置。所有activity都被从栈中移除时，则Task销毁。\n- 当启动新的Task（如打开新应用）或者点击Home键回到桌面时，任务栈退到后台；当位于后台时，Task中的Activity都会进入停止状态。退到后台的Task的返回栈仍然保持完整性。如：Task A的栈中有三个Activity，用户点击Home键，打开新的应用程序，Task A退到后台。新的应用程序启动，系统创建并启动新的Task B。用户再次回到桌面，打开Task A对应的应用程序，Task A回到前台，Task A中的三个Activity保持完整性。\n- Android支持后台多任务；但同时运行多个后台任务，系统可能销毁后台的Activity来回收内存，就导致后台Activity的状态丢失。\n\n## 1. Activity任务管理。\n默认情况下Android中的Activity通过`standard`启动模式进入在后进先出的Stack（返回栈）中。有时因为业务需求，需要修改Activity的默认启动模式。如：在新的任务中来启动Activity而不是在返回栈的栈顶创建新的实例；又比如：在启动Activity时，只想要启动Activity已存在的实例；或在用户离开任务时清空除了根Activity外所有的Activity。\n\n修改Activity的默认启动模式有两种方法：\n1. 在AndroidManifest中指定Activity的任务和启动模式。\n2. 在启动Activity的Intent中加入标志位。\n\n在优先级上第二种高于第一种，就是在Intent中传递Flag标志的方式会覆盖在XML指定启动模式的方式。\n标准启动模式，启动Activity时，系统会创建Activity新的实例。Activity可能会多次创建：每个实例可能属于不同任务，一个任务可能有多个实例。\n\n### 1）AndroidManifest中指定Activity的任务和启动模式。\n{% codeblock lang:xml AndroidManefest.xml %}\n<activity\n    android:name=\".activity.MainActivity\"\n    android:taskAffinity=\"string\"\n    android:launchMode=[\"multiple\" | \"singleTop\" |\n                  \"singleTask\" | \"singleInstance\"]\n    android:clearTaskOnLaunch=[\"true\" | \"false\"]\n    android:alwaysRetainTaskState=[\"true\" | \"false\"]\n    android:finishOnTaskLaunch=[\"true\" | \"false\"] \n    ... >\n    ...\n</activity>\n\n{% endcodeblock %}\n- `taskAffinity`\n taskAffinity表示Activity对应的任务。有相同taskAffinity的Activity理论属于同一个任务。任务自身的Affinity决定\n根Activity的Affinity值。taskAffinity的使用场合是什么呢？1.根据taskAffinity重新为Activity选择任务（与\nallowTaskReparenting属性配合工作）；2.启动Activity时，Intent使用FLAG_ACTIVITY_NEW_TASK标记，根据\ntaskAffinity查找或创建一个新Activity对应taskAffinity的任务。默认情况下，应用内所有Activity都具有相同的\ntaskAffinity,都是从Application继承来，而Application默认taskAffinity值为<manifest>中定义的包名。\n\n- `launchMode`\nlaunchMode表示Activity启动模式。配合Intent的Activity Flags使用。\n\n- `allowTaskReparenting`\nActivity是否从启动它的任务中移动到目标任务中，\"true\"表示可以移动；\"false\"表示必须保留在启动它的任务中。\n如果没有设置，则继承<application>中的属性值，默认false。正常情况下Activity位于启动它的任务中，并度过它的整个生命周期。\n\n- `clearTaskOnLaunch`\n标记是否从任务中清除除根Activity的所有Activity，\"true\"表示清除，\"false\"表示不清除。默认\"false\"。这个属性只对根Activity起作用。如果为\"true\"，每次重新启动应用时，都只看到根Activity，任务中的其他的Activity都会被清除栈。\n\n- `alwaysRetainTaskState`\n标记任务是否保持原来的状态，\"true\"总是保持，\"false\"不能保证，默认\"false\"。属性只对根Activity起作用。默认情况下，如果应用在后台停留过长时间，应用再次回到前台时，系统会对应用任务的栈进行清空处理。只保留根Activity。如果根Activity的这个属性为\"true\"时，应用回到前台时，任务仍然保留所有的Activity。如：浏览器应用打开很多tab页面，在后台停留过长时间，回到前台时，仍然保留这些打开的界面。\n\n- `finishOnTaskLaunch`\nfinishOnTaskLaunch属性与clearTaskOnLaunch属性类似，不同是它是在操作单个的Activity，而不是整个任务栈。它可以销毁任意Activity包括根Activity。当设置为\"true\"时，如果用户离开然后回到任务栈，则Activity不再显示。\n\n> 注：多数任务和Activity启动模式应该保持默认值。除非必要情况下，需要改变默认行为。\n\n## 2. 启动模式\n\nActivity有四种启动模式：`standard`，`singleTop`，`singleTask`和`singleInstance`\n- `standard`\nActivity的默认启动模式，不论栈中是否已存在Activity的实例，都会在创建新的Activity实例，放入栈顶。如下图ActivityA和ActivityB均为standard启动模式。\n\n<div>\n\t<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_standard.png\" style=\"width:60%;\"/>\n</div>\n\n- `singleTop`\n任务栈顶存在要启动的Activity，系统不会创建新的Activity实例，只调用Activity的onNewIntent()方法。Activity可能被多次实例化，每个Activity实例可能属于不同任务栈，一个任务栈可能有多个实例（仅在返回栈栈顶的Activity不是启动的Activity实例情况下）\n假设有任务的返回栈包含ABCD的Activity，A为根Activity，D在栈顶；如果启动D并且D启动模式为\"singleTop\"，则调用栈顶已经存在的D的方法onNewIntent()，栈内容不变，仍为\"ABCD\"；如果启动B，B的启动模式为\"singleTop\"，则会创建新的B实例，并压人栈中。如下图ActivityA和ActivityB均为singleTop启动模式。\n\n<div>\n\t<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_singleTop.png\" style=\"width:60%;\"/>\n</div>\n> 注：当创建新的Activity，用户点击返回键会返回之前Activity。如果已存在的Activity来处理一个新的Intent对象时，在Intent进入onNewIntent()之前，用户点击返回键无法返回Activity之前的状态。\n\n- `singleTask`\n系统查找或创建新Activity对应的任务，已有任务栈时直接向栈中添加Activity的实例；否则创建新的Activity实例作为新任务栈的根。如果指定的任务栈中已经存在Activity的实例，系统只调用Acitivity的onNewIntent()方法，而不是创建新的Activity，同时只能够存在一个相同Activity实例。需要配合`android:taskAffinity`属性来使用。若taskAffinity的值与应用程序一致，新的Activity仍然会在应用程序的默认任务栈中。\n\n<div>\n<image\nsrc=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467552922/android/diagram_backstack_singletask_multiactivity.png\" style=\"width:60%;\"/>\n</div>\n\n>注：尽管\"singleTask\"启动了一个新任务，点击返回键时仍然返回到之前的Activity对应的任务栈。\n\n- `singleInstance`\n除了具有\"singleTask\"的全部特性以外，系统不会在有\"singleInstance\"启动模式的Activity对应栈中启动任何其他的Activity。具有\"singleInstance\"启动模式的Activity是栈中唯一的成员，通过这个任务栈启动的Activity都会在指定的任务栈中打开。\n\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467705412/android/android_launchmode_singleInstance.png\" style=\"width:70%\"/>\n</div>\n\n不管在新的任务中启动Activity还是在启动时的任务栈中启动Activity，点击返回键总是回到之前的Activity。如果你指定Activity的启动模式为singleTask，并在后台任务栈中存在对应的实例。启动这个Acitivity时，就会把整个任务栈带到前台。这时候，返回栈包含所有带到前台的任务栈中所有Activity，并置于栈顶。如singleTask小节图示。\n\n{% codeblock lang:java %}\n/**\n* 假设有三个Activity：MainAcitivity，ActivityA，ActivityB。MainActivity为应用程序的入口Activity，ActivityA是\n* `singleTask`启动模式，任务为`org.alexwan.taskandflag`的Activity，ActivityB与ActivityA一样。在启动MainActivity\n* 后，由MainActivity启动ActivityA，ActivityA启动ActivityB。\n*/\n\n// 查看运行栈 命令\nadb shell dumpsys activity activities | sed -En -e '/Running activities/,/Run #0/p'\n\n// 结果\nRunning activities (most recent first):\n    TaskRecord{d42fd8e #7592 A=org.alexwan.view U=0 sz=2}\n        Run #2: ActivityRecord{247d0678 u0 org.alexwan.taskandflag/.ActivityB t7592}\n        Run #1: ActivityRecord{168061c4 u0 org.alexwan.taskandflag/.ActivityA t7592}\n    TaskRecord{20b981bc #7591 A=org.alexwan.taskandflag U=0 sz=1}\n        Run #0: ActivityRecord{618def7 u0 org.alexwan.taskandflag/.MainActivity t7591}\n{% endcodeblock %}\n\n## 3.Intent Activity标志\n在调用startActivity时，为Intent添加一个标志位决定Activity启动方式。用来修改默认行为.\n{% codeblock lang:java Intent.java%}\n\n// 用新任务启动Activity。如果任务中的Activity已运行需要启动的Activity，则直接返回前台状态并调用onNewIntent()方\n// 法。与\"singleTask\"效果相同\nFLAG_ACTIVITY_NEW_TASK\n\n// 如果启动的Activity在返回栈栈顶，则直接调用Activity的onNewIntent方法，而不是创建一个新的实例。\n// 与\"singleTop\"效果相同。\nFLAG_ACTIVITY_SINGLE_TOP\n\n// 如果启动的Activity已经运行在当前任务栈中，则它的所有顶部Activity都会被销毁，而不是创建一个新Activity实例。调用\n// onNewIntent()方法恢复Activity状态。\nFLAG_ACTIVITY_CLEAR_TOP\n\n// 启动的Activity不会出现在历史Activity的列表中，在某些情况下我们不希望用户通过历史列表回到Activity时会使用这个标\n// 志。与在AndroidManifest中指定Activity的android:excludeFromRecents=\"true\"属性效果相同。\nFLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\n\n{% endcodeblock %}\n\n\n> `FLAG_ACTIVITY_CLEAR_TOP`常和`FLAG_ACTIVITY_NEW_TASK`配合使用。当同时使用，这些标志是定位其他栈中存在的Activity和放置在可以享用Intent的位置的方式。这种情况下，被启动Activity的实例如果已经存在，那么系统就会调用它的onNewIntent()方法。如果被启动的Activity采用\"standard\"启动模式，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并置于栈顶。 \n\n\n## 4. 处理affinities\n\naffinity 表示Activity对应的任务栈值。默认情况下所有Activity继承Application对应的包名所在的任务栈。可以在AndroidManifest中为Activity修改默认affinity值。不同Application可以共享相同affinity属性，同样相同Application中的Activity可以关联不同的affinity属性。\n如：\n```xml\n<activity\n    android:name=\".ActivityB\"\n    android:launchMode=\"singleTask\"\n    android:taskAffinity=\"org.alexwan.view\" />\n```\nTaskAffinitys主要配合\"singleTask\"启动模式和\"allowTaskReparenting\"属性来使用\n- 1）配合\"singleTask\"启动模式的Activity使用的情景；如通知管理总是在外部的任务栈中启动Activity，而不是作为Application任务栈的一部分。所以通知类的Intent总是用FLAG_ACTIVITY_NEW_TASK在intent的属性中传递给startActivity()。\n\n- 2）配合 allowTaskReparenting 属性使用情景。假设Activity的allowTaskReparenting的值为\"true\"，这种情况下，在Activity对应的任务栈回到前台，并且已经被其他任务栈启动时，则会从其他任务栈转到Activity对应的任务栈中。比如：在应用程序A中打开浏览器的Activity，Activity初始化时属于应用A的对应的任务栈，当浏览器回到前台时，Activity则从应用A任务栈转到浏览器的任务栈直接显示。\n\n\n# 三、Activity的启动匹配规则\n\nIntent打开Activity时分为隐式、显式打开Actiivty。\n\n`显式启动`：这种情况启动的Activity为已知，显式Intent也是启动Activity最常用的方式。\n```java\nIntent intent = new Intent(ActivityA.this , ActivityB.class);\nstartActivity(intent);\n```\n`隐式启动`：在未知启动的Activity的情况时，通过action，data，category等IntentFilter属性来过滤匹配要启动的Activity，Activity可能为多个或者没有对应Activity。如：启动分享、打开多媒体相关的Activity等。\n\n```java\nIntent sendIntent = new Intent();\nsendIntent.setAction(Intent.ACTION_VIEW);\nsendIntent.putExtra(Intent.EXTRA_TEXT , message);\nsendIntent.setType(\"text/plain\");\nif(sendIntent.resolveActivity(getPackageManager()) != null){\n    startActivity(sendIntent);\n}\n```\n> 注：如果没有匹配到相应的Activity时，调用startActivity()时，应用程序直接崩溃。因此在使用隐式Intent时，需要调用resolveActivity()来判断是否有相匹配的Activity来接收Intent，如果没有则不会调用startActivity。\n\n## 1. IntentFilter匹配规则。\n```xml\n<activity \n    android:name=\".activity.ActivityA\"\n    ...>\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\">\n        ...\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        ...\n        <data android:scheme=\"package\" />\n        ...\n    </intent-filter>\n</activity>\n```\n只在有action、category、data都匹配时，Intent才算是匹配成功，如果Activity若声明多个IntentFilter时，只需匹配任意一个则表示匹配成功。\n\n（1） action\n一个Intent Filter中可声明0个或多个action，Intent中的action与其中任一action在字符串形式上完全相同（区分大小写），action就算是匹配成功。Intent调用setAction或构造器中传入action为Intent设置action。隐式Intent必须指定action。\n\n（2）category\n与action相同，一个Intent Filter可声明多个category或不声明category属性。Intent中的category必须全部匹配Filter中出现的category。Intent若没有指定category，同样能够匹配成功，因为Intent没有指定category时，Android自定为Intent指定默认category值`Intent.CATEGORY_DEFAULT`\n```xml\n<intent-filter>\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    ...\n</intent-filter>\n```\n\n（3）data\n与action相同，一个Intent Filter可声明多个data或不声明data属性。\n```xml\n<intent-filter>\n    <data android:mimeType=\"video/mpeg\" android:scheme=\"http\" ... />\n    <data android:mimeType=\"audio/mpeg\" android:scheme=\"http\" ... />\n    ...\n</intent-filter>\n```\n每个<data>可以指定一个URI和一个数据类型（MIME 媒体类型）。\n\n`URI`\n结构：`<scheme>://<host>:<port>/<path>`。如：\"content://com.example.project:200/folder/subfolder/etc\"。\n\n> 注：如果scheme没有指定，则忽略host；host没有指定，则忽略port；如果scheme和host都没有指定，则忽略path。path可以包含星号（*）通配符部分满足path的名称。\nURI默认值为content和file。如果filter中没有指定URI，Intent中的URI部分的scheme必须为content或file才能匹配。如果为Intent指定完整的data，必须调用setDataAndType()，单独的调用setData或setType()会重置Data和Type属性。\n\n# 四、Activity的启动过程\n\n<div>\n<image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467896657/android/%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8%E6%97%B6%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png\" style=\"width:100%\">\n<div style=\"text-align:center;\"><b>4-1. Android 5.0的启动应用程序时Activity的时序图</b></div>\n</div>\n\n应用程序的入口MainActivity的定义\n\n```xml\n<activity android:name=\".MainActivity\"    \n      android:label=\"@string/app_name\">    \n       <intent-filter>    \n        <action android:name=\"android.intent.action.MAIN\" />    \n        <category android:name=\"android.intent.category.LAUNCHER\" />    \n    </intent-filter>    \n</activity>    \n```\nAndroid中启动应用程序从桌面启动，系统桌面实际上也是应用程序，对应的是Launcher。\n\n{% codeblock lang:java com.android.launcher2.Launcher.java%}\n    boolean startActivitySafely(View v, Intent intent, Object tag) {\n        boolean success = false;\n        try {\n            // 调用Activity的startActivity方法。\n            success = startActivity(v, intent, tag);\n        } catch (ActivityNotFoundException e) {\n            Toast.makeText(this, R.string.activity_not_found, Toast.LENGTH_SHORT).show();\n            Log.e(TAG, \"Unable to launch. tag=\" + tag + \" intent=\" + intent, e);\n        }\n        return success;\n    }\n{% endcodeblock %}\n\n调用Activity的startActivity方法，最终调用Activity的startActivityForResult方法。\n{% codeblock lang:java Activity.java %}\n    @Override\n    public void startActivity(Intent intent, @Nullable Bundle options) {\n        if (options != null) {\n            startActivityForResult(intent, -1, options);\n        } else {\n            // Note we want to go through this call for compatibility with\n            // applications that may have overridden the method.\n            startActivityForResult(intent, -1);\n        }\n    }\n\n    @Override\n    public void startActivityForResult(\n            String who, Intent intent, int requestCode, @Nullable Bundle options) {\n        ...\n        // 1. 创建要启动的Activity实例信息。\n        Instrumentation.ActivityResult ar =\n            mInstrumentation.execStartActivity(\n                this, mMainThread.getApplicationThread(), mToken, who,\n                intent, requestCode, options);\n        if (ar != null) {\n            // mMainThread 就是ActivityThread\n            mMainThread.sendActivityResult(\n                mToken, who, requestCode,\n                ar.getResultCode(), ar.getResultData());\n        }\n        ...\n    }\n{% endcodeblock %}\n\n`Instrumentation`主要用来监控应用程序的交互操作。只在Activity和ActivityThread有实例，每次在应用程序创建的时候，在ActivityThread中初始化唯一的实例`mInstrumentation`，后续在每个Activity.attach方法中，添加到Activity的中。这里调用execStartActivity执行Activity的启动流程。\n\n{% codeblock lang:java Instrumentation.java%}\n    public ActivityResult execStartActivity(\n            Context who, IBinder contextThread, IBinder token, Activity target,\n            Intent intent, int requestCode, Bundle options, UserHandle user) {\n        // contextThread 是IBinder对象，主要用来与底层进程之间交互。\n        // whoThread 是Launcher的IApplicationThread\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\n        ...\n        try {\n            intent.migrateExtraStreamToClipData();\n            intent.prepareToLeaveProcess();\n            // 获取到ActivityManagerService远程接口即ActivityManagerProxy，调用\n            // startActivityAsUser的方法\n            int result = ActivityManagerNative.getDefault()\n                .startActivityAsUser(whoThread, who.getBasePackageName(), intent,\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\n                        token, target != null ? target.mEmbeddedID : null,\n                        requestCode, 0, null, options, user.getIdentifier());\n            // 根据返回结果，检测是否成功启动Activity，如果没有抛出异常\n            checkStartActivityResult(result, intent);\n        } catch (RemoteException e) {\n            throw new RuntimeException(\"Failure from system\", e);\n        }\n        return null;\n    }\n{% endcodeblock %}\n\nInstrumentation的execStartActivity方法中获得Launcher的IApplicationThread，主要用它与ActivityThread进行进程间通信。获取到ActivityManagerService的远程接口ActivityManagerProxy，调用startActivityAsUser方法。\nActivityManagerProxy定义在ActivityManagerNative中\n{% codeblock lang:java ActivityManagerNative.java -> ActivityManagerProxy.java%}\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n    static public IActivityManager asInterface(IBinder obj) {\n        ...\n        // 创建ActivityManagerProxy实例\n        return new ActivityManagerProxy(obj);\n    }\n    ...\n    static public IActivityManager getDefault() {\n        // 单例模式获取到IActivityManager，如果IActivityManager未创建\n        // 则调用create方法创建IActivityManager\n        return gDefault.get();\n    }\n    ...\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            // 查找ActivityManagerService\n            IBinder b = ServiceManager.getService(\"activity\");\n            // am 就是ActivityManagerProxy\n            IActivityManager am = asInterface(b);\n            \n            return am;\n        }\n    };\n}\n\nclass ActivityManagerProxy implements IActivityManager\n{\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n    ...\n}\n\n{% endcodeblock %}\n\n调用ActivityManagerProxy的startActivityAsUser方法，通过Binder驱动调用ActivityManagerService的startActivity\n```java \n\n{% codeblock lang:java ActivityManagerProxy.java%}\n\n    public int startActivity(IApplicationThread caller, String callingPackage, Intent intent,\n            String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) throws RemoteException {\n    ...\n    // mRemote 是个Binder，ServiceManager.getService(\"activity\")返回的binder对象\n    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n    ...\n    return result;\n    }\n{% endcodeblock %}\n调用ActivityManagerNative的onTransact方法。\n{% codeblock lang:java ActivityManagerNative.java%}\n\n    @Override\n    public boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n            throws RemoteException {\n        switch (code) {\n        case START_ACTIVITY_TRANSACTION:\n        {\n            ...\n            IBinder b = data.readStrongBinder();\n            // ApplicationThreadProxy\n            IApplicationThread app = ApplicationThreadNative.asInterface(b);\n            ...\n            Intent intent = Intent.CREATOR.createFromParcel(data);\n            ...\n            // resultTo\n            IBinder resultTo = data.readStrongBinder();\n            ...\n            // ActivityManagerService是ActivityManagerNative的具体实现\n            // startActivity也是由ActivityManagerService来执行。\n            int result = startActivity(app, callingPackage, intent, resolvedType,\n                    resultTo, resultWho, requestCode, startFlags, profilerInfo, options);\n            ...\n            return true;\n        }\n{% endcodeblock %}\n最终由ActivityManagerService实现调用startActivity\n{% codeblock lang:java ActivityManagerService.java%}\n    @Override\n    public final int startActivity(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) {\n        // 调用startActivityAsUser\n        return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,\n            resultWho, requestCode, startFlags, profilerInfo, options,\n            UserHandle.getCallingUserId());\n    }\n\n    @Override\n    public final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options, int userId) {\n        ...\n        //  调用ActivityStackSupervisor的startActivityMayWait\n        return mStackSupervisor.startActivityMayWait(caller, -1, callingPackage, intent,\n                resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n                profilerInfo, null, null, options, false, userId, null, null);\n    }\n\n{% endcodeblock %}\n\n`ActivityStackSupervisor`startActivityMayWait\n\n{% codeblock lang:java ActivityStackSupervisor.java%}\n    final int startActivityMayWait(IApplicationThread caller, int callingUid,\n            String callingPackage, Intent intent, String resolvedType,\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n            IBinder resultTo, String resultWho, int requestCode, int startFlags,\n            ProfilerInfo profilerInfo, WaitResult outResult, Configuration config,\n            Bundle options, boolean ignoreTargetSecurity, int userId,\n            IActivityContainer iContainer, TaskRecord inTask) {\n        ...\n        // Collect information about the target of the Intent.\n       // 收集MainActivity信息\n        ActivityInfo aInfo = resolveActivity(intent, resolvedType, startFlags, profilerInfo, userId);\n        ...\n        synchronized (mService) {\n            ...\n            final ActivityStack stack;\n            if (container == null || container.mStack.isOnHomeDisplay()) {\n                stack = mFocusedStack;\n            } else {\n                stack = container.mStack;\n            }\n            ...\n            int res = startActivityLocked(caller, intent, resolvedType, aInfo,\n                    voiceSession, voiceInteractor, resultTo, resultWho,\n                    requestCode, callingPid, callingUid, callingPackage,\n                    realCallingPid, realCallingUid, startFlags, options, ignoreTargetSecurity,\n                    componentSpecified, null, container, inTask);\n            ...\n            return res;\n        }\n    }\n\n   final int startActivityLocked(IApplicationThread caller,\n            Intent intent, String resolvedType, ActivityInfo aInfo,\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n            IBinder resultTo, String resultWho, int requestCode,\n            int callingPid, int callingUid, String callingPackage,\n            int realCallingPid, int realCallingUid, int startFlags, Bundle options,\n            boolean ignoreTargetSecurity, boolean componentSpecified, ActivityRecord[] outActivity,\n            ActivityContainer container, TaskRecord inTask) {\n        int err = ActivityManager.START_SUCCESS;\n        // 指定进程的所有信息\n        ProcessRecord callerApp = null;        \n        if (caller != null) {\n            callerApp = mService.getRecordForAppLocked(caller);\n            if (callerApp != null) {\n                callingPid = callerApp.pid;\n                callingUid = callerApp.info.uid;\n            } else {\n                ...\n            }\n        }\n        ...\n\n        final int userId = aInfo != null ? UserHandle.getUserId(aInfo.applicationInfo.uid) : 0;\n        // 历史栈中的实体，表示一个Activity\n        ActivityRecord sourceRecord = null;\n        ActivityRecord resultRecord = null;\n        ... \n        // 启动标志位\n        final int launchFlags = intent.getFlags();\n        ...\n        final ActivityStack resultStack = resultRecord == null ? null : resultRecord.task.stack;\n        ...\n        boolean abort = false;\n        ...\n        abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,\n                callingPid, resolvedType, aInfo.applicationInfo);\n        ...\n        if (abort) {\n            if (resultRecord != null) {\n                resultStack.sendActivityResultLocked(-1, resultRecord, resultWho, requestCode,\n                        Activity.RESULT_CANCELED, null);\n            }\n            // We pretend to the caller that it was really started, but\n            // they will just get a cancel result.\n            ActivityOptions.abort(options);\n            return ActivityManager.START_SUCCESS;\n        }\n        ActivityRecord r = new ActivityRecord(mService, callerApp, callingUid, callingPackage,\n                intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,\n                requestCode, componentSpecified, voiceSession != null, this, container, options);\n        ...\n        err = startActivityUncheckedLocked(r, sourceRecord, voiceSession, voiceInteractor,\n                startFlags, true, options, inTask);\n\n        return err;\n    }\n\n   // startActivityUncheckedLocked\n\n    final int startActivityUncheckedLocked(final ActivityRecord r, ActivityRecord sourceRecord,\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, int startFlags,\n            boolean doResume, Bundle options, TaskRecord inTask) {\n        final Intent intent = r.intent;\n        final int callingUid = r.launchedFromUid;\n        ...\n        final boolean launchSingleTop = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP;\n        final boolean launchSingleInstance = r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE;\n        final boolean launchSingleTask = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK;\n        // \n        int launchFlags = intent.getFlags();\n        ...\n        // 如果启动的Activity没有指明是自启动，则在onPause之前调用onUserLeaving\n        // launchFlags的FLAG_ACTIVITY_NO_USER_ACTION初始值为0，所以mUserLeaving为true\n        mUserLeaving = (launchFlags & Intent.FLAG_ACTIVITY_NO_USER_ACTION) == 0;\n        ...\n        // 与FLAG_ACTIVITY_NO_USER_ACTION一样intent的flag值为0，所以notTop为null；\n        ActivityRecord notTop =\n                (launchFlags & Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP) != 0 ? r : null;\n\n        // If the onlyIfNeeded flag is set, then we can do this if the activity\n        // being launched is the same as the one making the call...  or, as\n        // a special case, if we do not know the caller then we count the\n        // current top activity as the caller.\n        if ((startFlags&ActivityManager.START_FLAG_ONLY_IF_NEEDED) != 0) {\n            ...\n        }\n\n        boolean addingToTask = false;\n        TaskRecord reuseTask = null;\n\n        // If the caller is not coming from another activity, but has given us an\n        // explicit task into which they would like us to launch the new activity,\n        // then let's see about doing that.\n        if (sourceRecord == null && inTask != null && inTask.stack != null) {\n            ...\n        } else {\n            inTask = null;\n        }\n\n        if (inTask == null) {\n            if (sourceRecord == null) {\n                ...\n            } else if (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {\n                ...\n            } else if (launchSingleInstance || launchSingleTask) {\n                // The activity being started is a single instance...  it always\n                // gets launched into its own task.\n                // launchFlags 设为Intent.FLAG_ACTIVITY_NEW_TASK\n                launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n            }\n        }\n\n        ActivityInfo newTaskInfo = null;\n        Intent newTaskIntent = null;\n        ActivityStack sourceStack;\n        if (sourceRecord != null) {\n            if (sourceRecord.finishing) {\n                ...\n            } else {\n                sourceStack = sourceRecord.task.stack;\n            }\n        } else {\n            sourceStack = null;\n        }\n\n        boolean movedHome = false;\n        ActivityStack targetStack;\n\n        intent.setFlags(launchFlags);\n        final boolean noAnimation = (launchFlags & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0;\n\n        // 检索是否存在Task来放Activity；\n        if (((launchFlags & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 &&\n                (launchFlags & Intent.FLAG_ACTIVITY_MULTIPLE_TASK) == 0)\n                || launchSingleInstance || launchSingleTask) {\n            // Activity的启动模式为launchSingleTask\n            if (inTask == null && r.resultTo == null) {\n                // 此时inTask为空 ， r.resultTo为空\n                // 调用findTaskLocked，因为应用第一次启动，所以检索返回结果为null\n                ActivityRecord intentActivity = !launchSingleInstance ?\n                        findTaskLocked(r) : findActivityLocked(intent, r.info);\n                if (intentActivity != null) {\n                    ...\n                }\n            }\n        }\n        if (r.packageName != null) {\n            // 如果Activity与当前栈顶的Activity一致，判断是否再次启动。\n            ActivityStack topStack = mFocusedStack;\n            ActivityRecord top = topStack.topRunningNonDelayedActivityLocked(notTop);\n            if (top != null && r.resultTo == null) {\n                if (top.realActivity.equals(r.realActivity) && top.userId == r.userId) {\n                    ...\n                }\n            }\n\n        } else {\n            ...\n        }\n        boolean newTask = false;\n        boolean keepCurTransition = false;\n\n        TaskRecord taskToAffiliate = launchTaskBehind && sourceRecord != null ?\n                sourceRecord.task : null;\n\n        // 参数r.resultTo为null，表示Launcher不需要等待启动MainActivity的执行结果\n        if (r.resultTo == null && inTask == null && !addingToTask\n                && (launchFlags & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {\n            newTask = true;\n            targetStack = computeStackFocus(r, newTask);\n            targetStack.moveToFront(\"startingNewTask\");\n            // 创建Task来启动Activity\n            if (reuseTask == null) {\n                r.setTask(targetStack.createTaskRecord(getNextTaskId(),\n                        newTaskInfo != null ? newTaskInfo : r.info,\n                        newTaskIntent != null ? newTaskIntent : intent,\n                        voiceSession, voiceInteractor, !launchTaskBehind /* toTop */),\n                        taskToAffiliate);\n                ...\n            } else {\n                ...\n            }\n            ...\n            if (!movedHome) {\n                if ((launchFlags &\n                        (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME))\n                        == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) {\n                    // Caller wants to appear on home activity, so before starting\n                    // their own activity we will bring home to the front.\n                    r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);\n                }\n            }\n        } else if (sourceRecord != null) {\n            ...\n        } else if (inTask != null) {\n            ...\n        } else {\n            ...\n        }\n\n        mService.grantUriPermissionFromIntentLocked(callingUid, r.packageName,\n                intent, r.getUriPermissionsLocked(), r.userId);\n        ...\n        targetStack.mLastPausedActivity = null;\n        targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options);\n        if (!launchTaskBehind) {\n            // Don't set focus on an activity that's going to the back.\n            mService.setFocusedActivityLocked(r, \"startedActivity\");\n        }\n        return ActivityManager.START_SUCCESS;\n    }\n{% endcodeblock %}\n\nstartActivityUncheckedLocked，从命名上可以猜出来方法执行Activity的检查操作。方法中获取到intent的启动标志，对启动模式重新设置，根据标志检索是否是否需要重新创建的Activity的对象、是否需要创建的任务栈、启动时Activity是否需要等待返回值等。然后调用`ActivityStack`的startActivityLocked方法。\n\n{% codeblock lang:java ActivityStack.java %}\n    final void startActivityLocked(ActivityRecord r, boolean newTask,\n            boolean doResume, boolean keepCurTransition, Bundle options) {\n        ...\n        TaskRecord task = null;\n        if (!newTask) {\n            ...\n        }\n\n        // Place a new activity at top of stack, so it is next to interact\n        // with the user.\n        \n        ...\n\n        task = r.task;\n\n        // Slot the activity into the history stack and proceed\n        // 压入历史栈后处理\n        task.addActivityToTop(r);\n        task.setFrontOfTask();\n        r.putInHistory();\n        if (!isHomeStack() || numActivities() > 0) {\n            // We want to show the starting preview window if we are\n            // switching to a new task, or the next activity's process is\n            // not currently running.\n            ...\n        } else {\n            // If this is the first activity, don't do any fancy animations,\n            // because there is nothing for it to animate on top of.\n            ...\n        }\n        ...\n\n        if (doResume) {\n            mStackSupervisor.resumeTopActivitiesLocked(this, r, options);\n        }\n    }\n{% endcodeblock %}\nstartActivityLocked主要判断是否需要去进行任务切换时的界面操作。\n接着调用ActivityStackSupervisor的resumeTopActivitiesLocked方法。\n{% codeblock lang:java ActivityStackSupervisor.java %}\n    boolean resumeTopActivitiesLocked(ActivityStack targetStack, ActivityRecord target,\n            Bundle targetOptions) {\n        if (targetStack == null) {\n            targetStack = mFocusedStack;\n        }\n        // Do targetStack first.\n        boolean result = false;\n        if (isFrontStack(targetStack)) {\n            result = targetStack.resumeTopActivityLocked(target, targetOptions);\n        }\n        ...\n        return result;\n    }\n{% endcodeblock %}\n\n接着调用ActivityStack的resumeTopActivityLocked方法\n\n{% codeblock lang:java ActivityStack.java %}\n    final boolean resumeTopActivityLocked(ActivityRecord prev) {\n        return resumeTopActivityLocked(prev, null);\n    }\n\n    final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {\n        if (mStackSupervisor.inResumeTopActivity) {\n            // Don't even start recursing.\n            return false;\n        }\n\n        boolean result = false;\n        try {\n            // Protect against recursion. 保护防止递归\n            mStackSupervisor.inResumeTopActivity = true;\n            if (mService.mLockScreenShown == ActivityManagerService.LOCK_SCREEN_LEAVING) {\n                mService.mLockScreenShown = ActivityManagerService.LOCK_SCREEN_HIDDEN;\n                mService.updateSleepIfNeededLocked();\n            }\n            result = resumeTopActivityInnerLocked(prev, options);\n        } finally {\n            mStackSupervisor.inResumeTopActivity = false;\n        }\n        return result;\n    }\n    \n    // 确保栈顶Activity已经处于Resumed状态\n    private boolean resumeTopActivityInnerLocked(ActivityRecord prev, Bundle options) {\n\n        if (!mService.mBooting && !mService.mBooted) {\n            //  服务还未启动\n            return false;\n        }\n        ActivityRecord parent = mActivityContainer.mParentActivity;\n        if ((parent != null && parent.state != ActivityState.RESUMED) ||\n                !mActivityContainer.isAttachedLocked()) {\n            // Do not resume this stack if its parent is not resumed.\n            return false;\n        }\n        cancelInitializingActivities();\n\n        // 找到栈顶ActivityRecord\n        final ActivityRecord next = topRunningActivityLocked(null);\n\n        // Remember how we'll process this pause/resume situation, and ensure\n        // that the state is reset however we wind up proceeding.\n        // mUserLeaving保存在本地，重新设置为false\n        final boolean userLeaving = mStackSupervisor.mUserLeaving;\n        mStackSupervisor.mUserLeaving = false;\n\n        final TaskRecord prevTask = prev != null ? prev.task : null;\n        if (next == null) {\n            // There are no more activities!\n            ...\n        }\n\n        next.delayedResume = false;\n\n        // 如果栈顶Activity已经处于resume状态，直接返回\n        if (mResumedActivity == next && next.state == ActivityState.RESUMED &&\n                    mStackSupervisor.allResumedActivitiesComplete()) {\n            ...\n            return false;\n        }\n        ...\n\n        // 如果休眠状态并且没有需要resume的activity，栈顶activity处于暂停状态，直接返回\n        if (mService.isSleepingOrShuttingDown()\n                && mLastPausedActivity == next\n                && mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n\n        // 验证activity的拥有者已经启动\n        if (mService.mStartedUsers.get(next.userId) == null) {\n            ...\n            return false;\n        }\n        // 如果activity正在等待停止或休眠，则从停止或休眠队列中移除这个activity\n        // 因为不适应activity了\n        mStackSupervisor.mStoppingActivities.remove(next);\n        mStackSupervisor.mGoingToSleepActivities.remove(next);\n        next.sleeping = false;\n        mStackSupervisor.mWaitingVisibleActivities.remove(next);\n        ...\n        // 如果现在正在暂停一个activity，返回等待则进入等待状态。\n        if (!mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n        ... \n        mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);\n\n        // 在activity调用resumed之前需要暂停之前的activity\n        boolean dontWaitForPause = (next.info.flags&ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != 0;\n        boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);\n        if (mResumedActivity != null) {\n            ...\n            // 开始暂停之前的Activity，mResumedActivity指定启动时的Activity\n            pausing |= startPausingLocked(userLeaving, false, true, dontWaitForPause);\n        }\n        if (pausing) {\n            ...\n            // At this point we want to put the upcoming activity's process\n            // at the top of the LRU list, since we know we will be needing it\n            // very soon and it would be a waste to let it get killed if it\n            // happens to be sitting towards the end.\n            // 如果正在暂停之前的activity，现在将要启动的activity的进程放在LRU列表的顶部，因为要很快要需要这个参数\n            // \n            if (next.app != null && next.app.thread != null) {\n                mService.updateLruProcessLocked(next.app, true, null);\n            }\n            ...\n            return true;\n        }\n        ...\n        return true;\n    }\n\n    // 执行Activity暂停操作\n    /**\n    * 保存mResumedActivity到本地变量prev中，在本文中mResumedActivity对应的就是Launcher。\n    * 调用 Launcher对应的ApplicationThread对象的远程接口，也就是ApplicationThreadProxy。执行\n    * ApplicationThreadProxy的schedulePauseActivity方法，经过底层驱动Binder，通知Launcher进入\n    * Paused状态。\n    */\n    final boolean startPausingLocked(boolean userLeaving, boolean uiSleeping, boolean resuming,\n            boolean dontWait) {\n        if (mPausingActivity != null) {\n            // 如果有暂停中的Activity\n            ...\n        }\n        ActivityRecord prev = mResumedActivity;\n        if (prev == null) {\n            ...\n            return false;\n        }\n\n        if (mActivityContainer.mParentActivity == null) {\n            // Top level stack, not a child. Look for child stacks.\n            mStackSupervisor.pauseChildStacks(prev, userLeaving, uiSleeping, resuming, dontWait);\n        }\n        ...\n        // 将mResumedActivity置空，mResumedActivity赋值给mPausingActivity\n        mResumedActivity = null;\n        mPausingActivity = prev;\n        mLastPausedActivity = prev;\n        mLastNoHistoryActivity = (prev.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_HISTORY) != 0\n                || (prev.info.flags & ActivityInfo.FLAG_NO_HISTORY) != 0 ? prev : null;\n        prev.state = ActivityState.PAUSING;\n        prev.task.touchActiveTime();\n        clearLaunchTime(prev);\n        // 启动的Activity\n        final ActivityRecord next = mStackSupervisor.topRunningActivityLocked();\n        ...\n        if (prev.app != null && prev.app.thread != null) {\n            ...\n            try {\n                ...\n                prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,\n                        userLeaving, prev.configChangeFlags, dontWait);\n            } catch (Exception e) {\n                ...\n                mPausingActivity = null;\n                mLastPausedActivity = null;\n                mLastNoHistoryActivity = null;\n            }\n        } else {\n            mPausingActivity = null;\n            mLastPausedActivity = null;\n            mLastNoHistoryActivity = null;\n        }\n        ...\n    }\n{% endcodeblock %}\n\n调用Launcher的ApplicationThread远程接口ApplicationThreadProxy的schedulePauseActivity方法\n\n{% codeblock lang:java ApplicationThreadProxy.java%}\n    public final void schedulePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges, boolean dontReport) throws RemoteException {\n        Parcel data = Parcel.obtain();\n        data.writeInterfaceToken(IApplicationThread.descriptor);\n        data.writeStrongBinder(token);\n        data.writeInt(finished ? 1 : 0);\n        data.writeInt(userLeaving ? 1 :0);\n        data.writeInt(configChanges);\n        data.writeInt(dontReport ? 1 : 0);\n        // \n        mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, null,\n                IBinder.FLAG_ONEWAY);\n        data.recycle();\n    }\n{% endcodeblock %}\n\n经过Binder驱动通知ApplicationThread指定对应的schedulePauseActivity方法。ApplicationThread为ActivityThread的内部类。\n\n{% codeblock lang:java ActivityThreadjava -> ApplicationThread.java ， H.java%}\n    private class ApplicationThread extends ApplicationThreadNative {\n        public final void schedulePauseActivity(IBinder token, boolean finished,\n                boolean userLeaving, int configChanges, boolean dontReport) {\n            sendMessage(\n                    finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,\n                    token,\n                    (userLeaving ? 1 : 0) | (dontReport ? 2 : 0),\n                    configChanges);\n        }\n    }\n\n    // 调用ActivityThread sendMessage发送Message，在H中处理Message\n    private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async) {\n        ...\n        Message msg = Message.obtain();\n        msg.what = what;\n        msg.obj = obj;\n        msg.arg1 = arg1;   // 1\n        msg.arg2 = arg2;  // configChanges\n        if (async) {\n            msg.setAsynchronous(true);\n        }\n        mH.sendMessage(msg);\n    }\n\n    private class H extends Handler {\n        public static final int LAUNCH_ACTIVITY         = 100;\n        public static final int PAUSE_ACTIVITY          = 101;\n        ...\n        public void handleMessage(Message msg) {\n                ...\n                case PAUSE_ACTIVITY:\n                    ...\n                    // arg1 = 1 , \n                    handlePauseActivity((IBinder)msg.obj, false, (msg.arg1&1) != 0, msg.arg2,\n                            (msg.arg1&2) != 0);\n                    ...\n                    break;\n                ...\n        }\n    }\n    //  最后调用handlePauseActivity\n    private void handlePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges, boolean dontReport) {\n        ActivityClientRecord r = mActivities.get(token);\n        if (r != null) {\n            ...\n            if (userLeaving) {\n                // 1. 通知Activity，用户将要离开界面\n                performUserLeavingActivity(r);\n            }\n\n            r.activity.mConfigChangeFlags |= configChanges;\n            // 2. 调用Activity的onPaused方法。\n            performPauseActivity(token, finished, r.isPreHoneycomb());\n\n            // Make sure any pending writes are now committed.\n            if (r.isPreHoneycomb()) {\n                QueuedWork.waitToFinish();\n            }\n\n            // Tell the activity manager we have paused.\n            // dontReport = (msg.arg1&2) != 0 ; dontReport的值为false\n            if (!dontReport) {\n                try {\n                    // 3. 调用ActivityManager的远程服务接口 ActivityManagerProxy\n                    // 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。\n                    ActivityManagerNative.getDefault().activityPaused(token);\n                } catch (RemoteException ex) {\n                }\n            }\n            mSomeActivitiesChanged = true;\n        }\n    }\n{% endcodeblock %}\n\nActivityThread在方法`schedulePauseActivity`只简单的调用了sendMessage()方法。然后调用ActivityThread内部类H的handlePauseActivity方法，在handlePauseActivity中做了以下的任务：1. 将Binder引用的token转成ActivityRecord的远程接口ActivityClientRecord。如果userLeaving为true时，则调用performUserLeavingActivity来通知Activity，用户将要离开界面。3. 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。这里表示启动MainActivity。\n\n{% codeblock lang:java ActivityManagerNative.java -> ActivityManagerProxy.java%}\nclass ActivityManagerProxy implements IActivityManager{\n    ...\n    public void activityPaused(IBinder token) throws RemoteException\n    {\n        Parcel data = Parcel.obtain();\n        Parcel reply = Parcel.obtain();\n        data.writeInterfaceToken(IActivityManager.descriptor);\n        data.writeStrongBinder(token);\n        mRemote.transact(ACTIVITY_PAUSED_TRANSACTION, data, reply, 0);\n        reply.readException();\n        data.recycle();\n        reply.recycle();\n    }\n    ...\n}\n{% endcodeblock %}\n\n经过Binder驱动调用ActivityManagerService.activityPaused方法\n{% codeblock lang:java ActivityManager.java %}\n    @Override\n    public final void activityPaused(IBinder token) {\n        final long origId = Binder.clearCallingIdentity();\n        synchronized(this) {\n            ActivityStack stack = ActivityRecord.getStackLocked(token);\n            if (stack != null) {\n                stack.activityPausedLocked(token, false);\n            }\n        }\n        ...\n    }\n{% endcodeblock %}\n\n调用ActivityStack的activityPausedLocked 的方法\n\n{% codeblock lang:java ActivityStack.java %}\n    final void activityPausedLocked(IBinder token, boolean timeout) {\n        ...\n        final ActivityRecord r = isInStackLocked(token);\n        if (r != null) {\n            ...\n            // startPausingLocked时将当前Activity保存在mPausingActivity中。\n            if (mPausingActivity == r) {\n                ...\n                completePauseLocked(true);\n            } else {\n                ... \n            }\n        }\n    }\n\n    final void activityPausedLocked(IBinder token, boolean timeout) {\n        ...\n\n        final ActivityRecord r = isInStackLocked(token);\n        if (r != null) {\n            ...\n            // startPausingLocked时将当前Activity保存在mPausingActivity中。\n            if (mPausingActivity == r) {\n                ...\n                completePauseLocked(true);\n            } else {\n                ...\n                \n            }\n        }\n    }\n    \n    // 完成Activity的暂停任务\n    private void completePauseLocked(boolean resumeNext) {\n        ActivityRecord prev = mPausingActivity;\n        if (prev != null) {\n            prev.state = ActivityState.PAUSED;\n            ...\n            // 在activity暂停之前，会暂时冻住屏幕。这时Activity不再可见，则解除冻结状态\n            prev.stopFreezingScreenLocked(true /*force*/);\n            mPausingActivity = null;\n        }\n        // resumeNext值为true\n        if (resumeNext) {\n            // resume 新的activity\n            final ActivityStack topStack = mStackSupervisor.getFocusedStack();\n            if (!mService.isSleepingOrShuttingDown()) {\n                // 如果没有休眠或关机\n                mStackSupervisor.resumeTopActivitiesLocked(topStack, prev, null);\n            } else {\n                ...\n            }\n        }\n\n        if (prev != null) {\n            // 恢复按键分发\n            prev.resumeKeyDispatchingLocked();\n            ...\n        }\n\n        // 栈内容变化时发送通知。\n        mService.notifyTaskStackChangedLocked();\n    }    \n{% endcodeblock %}\n\n在方法completePauseLocked中：如果mPausingActivity不为空，则mPausingActivity需要置空。而mPausingActivity是在之前调用`startPausingLocked`保存的Launcher的实例，现在不需要这个临时对象了。获取的启动应用的栈信息，调用mStackSupervisor的resumeTopActivitiesLocked方法\n{%  codeblock lang:java ActivityStackSupervisor.java %}\n    boolean resumeTopActivitiesLocked(ActivityStack targetStack, ActivityRecord target,\n            Bundle targetOptions) {\n        ...     \n        boolean result = false;\n        if (isFrontStack(targetStack)) {\n            result = targetStack.resumeTopActivityLocked(target, targetOptions);\n        }\n        ...\n        return result;\n    }\n{% endcodeblock %}\n\n又执行了ActivityStack的resumeTopActivityLocked方法中。主要用作保护防止无限递归\n\n{% codeblock lang:java ActivityStack.java %}\n    final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {\n        ...\n        boolean result = false;\n        try {\n            // Protect against recursion. \n            ...\n            result = resumeTopActivityInnerLocked(prev, options);\n        } finally {\n            ...\n        }\n        return result;\n    }\n\n    private boolean resumeTopActivityInnerLocked(ActivityRecord prev, Bundle options) {\n        ...\n        cancelInitializingActivities();\n\n        // Find the first activity that is not finishing. \n        // 1. 找到栈顶Activity，也就是要启动的Activity。\n        final ActivityRecord next = topRunningActivityLocked(null);\n\n        ...\n        final boolean userLeaving = mStackSupervisor.mUserLeaving;\n        mStackSupervisor.mUserLeaving = false;\n        ... \n        final TaskRecord prevTask = prev != null ? prev.task : null;\n        if (next == null) {\n            ...\n            return isOnHomeDisplay() &&\n                    mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);\n        }\n\n        next.delayedResume = false;\n        // 2. mResumedActivity此时为空\n        if (mResumedActivity == next && next.state == ActivityState.RESUMED &&\n                    mStackSupervisor.allResumedActivitiesComplete()) {\n            ...\n            return false;\n        }\n\n        final TaskRecord nextTask = next.task;\n        if (prevTask != null && prevTask.stack == this &&\n                prevTask.isOverHomeStack() && prev.finishing && prev.frontOfTask) {\n            ...\n        }\n\n        // 休眠状态或没有找到Activity需要执行resume直接返回\n        if (mService.isSleepingOrShuttingDown()\n                && mLastPausedActivity == next\n                && mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n\n        ...\n\n        // 暂停Activity已经执行，跳过\n        if (!mStackSupervisor.allPausedActivitiesComplete()) {\n            ...\n            return false;\n        }\n        // 设置启动信息\n        mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);\n\n        // launcher已经暂停，跳过\n        boolean dontWaitForPause = (next.info.flags&ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != 0;\n        boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);\n        if (mResumedActivity != null) {\n            ...\n        }\n        if (pausing) {\n            ...\n            return true;\n        }\n        \n        // 并不是休眠状态\n        if (mService.isSleeping() && mLastNoHistoryActivity != null &&\n                !mLastNoHistoryActivity.finishing) {\n            ...\n        }\n\n        if (prev != null && prev != next) {\n            if (!mStackSupervisor.mWaitingVisibleActivities.contains(prev)\n                    && next != null && !next.nowVisible) {\n                // 将要启动的Acitivity添加等待显示的列表中\n                mStackSupervisor.mWaitingVisibleActivities.add(prev);\n                \n            } else {\n\n                // 如果之前的Acitivity消失了，执行这段代码。\n                ...\n            }\n        }\n\n        // Launching this app's activity, make sure the app is no longer\n        // considered stopped.\n        // 启动app，\n        try {\n            AppGlobals.getPackageManager().setPackageStoppedState(\n                    next.packageName, false, next.userId); /* TODO: Verify if correct userid */\n        } catch (RemoteException e1) {\n        } catch (IllegalArgumentException e) {\n           ...\n        }\n\n        // 开始启动新的Activity，通知WindowManager之前的Activity将会很快消失。这样\n        // 在计算需求的屏幕方向时忽略它\n        boolean anim = true;\n        if (prev != null) {\n            // 为Activity准备Window基本参数配置，是否显示启动动画等\n            if (prev.finishing) {\n                ... \n                if (mNoAnimActivities.contains(next)) {\n                    anim = false;\n                    ...\n                }\n                ...\n            } else {\n                ...\n            }\n            ...\n        } else {\n            ...\n        }\n        // 执行resume时的动画参数\n        Bundle resumeAnimOptions = null;\n        if (anim) {\n            // \n            ActivityOptions opts = next.getOptionsForTargetActivityLocked();\n            if (opts != null) {\n                resumeAnimOptions = opts.toBundle();\n            }\n            ...\n        } else {\n            ...\n        }\n        ...\n        // 3. 获取最近的Activity栈信息\n        ActivityStack lastStack = mStackSupervisor.getLastStack();\n        if (next.app != null && next.app.thread != null) {\n            // 因为是从Launcher中第一次启动程序，所以程序没有这些进程和主线程信息。\n            ...\n        } else {\n            \n            // 需要重启Activity：如正常启动程序或闪退后启动程序\n            if (!next.hasBeenLaunched) {\n                // 之前没有启动过\n                next.hasBeenLaunched = true;\n            } else {\n                ...\n            }\n            // 开始执行应用程序的进程和ActivityThread等重要参数的初始化操作\n            mStackSupervisor.startSpecificActivityLocked(next, true, true);\n        }\n        ...\n        return true;\n    }\n\n{% endcodeblock %}\n\nresumeTopActivityInnerLocked中执行的任务\n1）取出栈顶Activity，也就是要启动的Activity。\n2）Launcher此时已经处于Pasued状态，所以此时mResumedActivity为null，mLastPausedActivity为Launcher。\n3）因为应用还未启动所以MainActivity的ActivityRecord的app和thread属性还未初始化，都为空，则调用ActivityStackSupervisor的startSpecificActivityLocked方法初始化应用的重要变量：ActivityThread等。\n\n{% codeblock lang:java ActivityStackSupervisor.java %}\n    void startSpecificActivityLocked(ActivityRecord r,\n            boolean andResume, boolean checkConfig) {\n        // Is this activity's application already running?\n        // activity的application是否已经运行\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n                r.info.applicationInfo.uid, true);\n     \n        r.task.stack.setLaunchTime(r);\n\n        if (app != null && app.thread != null) {\n            // 如果程序已经运行了，则执行realStartActivityLocked的流程\n            try {\n                ...\n                realStartActivityLocked(r, app, andResume, checkConfig);\n                return;\n            } catch (RemoteException e) {\n                ...\n            }\n            ...\n        }\n        // 因为这时的应用还未启动则执行startProcessLocked方法，开启新的进程\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n                \"activity\", r.intent.getComponent(), false, false, true);\n    }\n{% endcodeblock %}\n\n因为首次的应用，所以取到的ProcessRecord为null。默认情况下，ActivityRecord中的进程名processName对应的就是在`AndroidManifest`中声明包名。调用ActivityManagerService的startProcessLocked方法来执行初始化任务。\n{% codeblock lang:java ActivityManagerService.java %}\n    final ProcessRecord startProcessLocked(String processName, ApplicationInfo info,\n            boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName,\n            boolean allowWhileBooting, boolean isolated, int isolatedUid, boolean keepIfLarge,\n            String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) {\n        ...\n        ProcessRecord app;\n        // isolated为true\n        if (!isolated) {\n            ...\n        } else {\n            ...\n            // 如果是单独进程，则不能重用已存在的进程\n            app = null;\n        }\n        ...\n        // 如果存在一个Application；\n        // 调用者不认为已经死亡或没有线程对象时我们认为没有崩溃；\n        // 或分配了一个进程id时，则认为正在启动或已经运行；\n        // 这三种情况下，不会做任何事\n        if (app != null && app.pid > 0) {\n            if (!knownToBeDead || app.thread == null) {\n                // 已经运行App或等待出现（已经有进程id，但是还没有线程），则保留应用\n                ...\n                // 如果是进程的新包，则添加新包到列表中\n                app.addPackage(info.packageName, info.versionCode, mProcessStats);\n                ...\n                return app;\n            }\n\n            // app添加到之前的进程中，则清空进程\n            ...\n        }\n        \n        // host name\n        String hostingNameStr = hostingName != null\n                ? hostingName.flattenToShortString() : null;\n        ...\n        if (app == null) {\n            ...\n            // 为app 创建新的进程\n            app = newProcessRecordLocked(info, processName, isolated, isolatedUid);\n            if (app == null) {\n                return null;\n            }\n            app.crashHandler = crashHandler;\n            ...\n        } else {\n            // 如果是进程的新包，则添加新包到列表中\n            app.addPackage(info.packageName, info.versionCode, mProcessStats);\n            ...\n        }\n\n        // 推迟进程启动直到系统准备好。\n        if (!mProcessesReady\n                && !isAllowedWhileBooting(info)\n                && !allowWhileBooting) {\n            ...\n        }\n        // 开启进程\n        startProcessLocked(\n                app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);\n        ...\n        return (app.pid != 0) ? app : null;\n    }\n\n     final ProcessRecord newProcessRecordLocked(ApplicationInfo info, String customProcess,\n            boolean isolated, int isolatedUid) {\n        // 进程命名 ： processName+uid\n        String proc = customProcess != null ? customProcess : info.processName;\n        BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();\n        final int userId = UserHandle.getUserId(info.uid);\n        int uid = info.uid;\n        if (isolated) {\n            // isolatedUid 为 0\n            if (isolatedUid == 0) {\n                int stepsLeft = Process.LAST_ISOLATED_UID - Process.FIRST_ISOLATED_UID + 1;\n                while (true) {\n                    ...\n                    uid = UserHandle.getUid(userId, mNextIsolatedProcessUid);\n                    mNextIsolatedProcessUid++;\n                    if (mIsolatedProcesses.indexOfKey(uid) < 0) {\n                        // No process for this uid, use it.\n                        break;\n                    }\n                    ...\n                }\n            } else {\n                ...\n                uid = isolatedUid;\n            }\n        }\n        final ProcessRecord r = new ProcessRecord(stats, info, proc, uid);\n        ...\n        addProcessNameLocked(r);\n        return r;\n    }\n\n    private final void addProcessNameLocked(ProcessRecord proc) {\n        // 清空旧进程\n        ProcessRecord old = removeProcessNameLocked(proc.processName, proc.uid);\n        if (old == proc && proc.persistent) {\n            // We are re-adding a persistent process.  Whatevs!  Just leave it there.\n            ...\n        } else if (old != null) {\n            ...\n        }\n        ...\n        // mProcessNames添加进程信息\n        mProcessNames.put(proc.processName, proc.uid, proc);\n        if (proc.isolated) {\n            mIsolatedProcesses.put(proc.uid, proc);\n        }\n    }\n\n{% endcodeblock %}\n\nActivityManagerService的startProcessLocked方法：检查是否有对应的进程存在，如果没有进程（如启动新应用时），则\nnewProcessRecordLocked初始化进程基本参数：pid，uid，进程名等等。并保存在mProcessNames全局变量中。然后执行`startProcessLocked`方法，进入下一步。\n\n{% codeblock lang:java ActivityManagerService.java%}\n    private final void startProcessLocked(ProcessRecord app, String hostingType,\n            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) {\n        ...\n        if (app.pid > 0 && app.pid != MY_PID) {\n            ...\n            app.setPid(0);\n        }\n        ...\n        mProcessesOnHold.remove(app);\n        ...\n\n        try {\n            ...\n            int uid = app.uid;\n            int[] gids = null;\n            int mountExternal = Zygote.MOUNT_EXTERNAL_NONE;\n            if (!app.isolated) {\n                ...\n            }\n            ...\n            if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {\n                if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL\n                        && mTopComponent != null\n                        && app.processName.equals(mTopComponent.getPackageName())) {\n                    uid = 0;\n                }\n                if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL\n                        && (app.info.flags&ApplicationInfo.FLAG_FACTORY_TEST) != 0) {\n                    uid = 0;\n                }\n            }\n            ... \n            // debug 标志\n            int debugFlags = 0;\n            ...\n            String requiredAbi = (abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;\n            if (requiredAbi == null) {\n                requiredAbi = Build.SUPPORTED_ABIS[0];\n            }\n            String instructionSet = null;\n            if (app.info.primaryCpuAbi != null) {\n                instructionSet = VMRuntime.getInstructionSet(app.info.primaryCpuAbi);\n            }\n            app.gids = gids;\n            app.requiredAbi = requiredAbi;\n            app.instructionSet = instructionSet;\n\n            // Start the process.  It will either succeed and return a result containing\n            // the PID of the new process, or else throw a RuntimeException.\n            // 启动进程，成功则返回含有新进程pid信息的结构，否则抛出异常。\n            boolean isActivityProcess = (entryPoint == null);\n            // \"android.app.ActivityThread\"\n            if (entryPoint == null) entryPoint = \"android.app.ActivityThread\";\n            ...\n            // 创建新的进程，\n            Process.ProcessStartResult startResult = Process.start(entryPoint,\n                    app.processName, uid, uid, gids, debugFlags, mountExternal,\n                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                    app.info.dataDir, entryPointArgs);\n            ...\n        } catch (RuntimeException e) {\n            \n            ...\n        }\n    }\n{% endcodeblock %}\n\nProcess的start方法向Zygote发送请求，传入\"android.app.ActivityThread\"字符串参数，通过Zygote执行fork子进程，初始化应用最终调用ActivityThread的main方法。\n\n{% codeblock lang:java ActivityThread.java%}\n    public static void main(String[] args) {\n        ...\n        SamplingProfilerIntegration.start();\n        ...\n        Environment.initForCurrentUser();\n        ...\n        AndroidKeyStoreProvider.install();\n\n        // Make sure TrustedCertificateStore looks in the right place for CA certificates\n        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n        TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n        Process.setArgV0(\"<pre-initialized>\");\n        // 初始化MainLooper\n        Looper.prepareMainLooper();\n        // 创建ActivityThread\n        ActivityThread thread = new ActivityThread();\n        // attach 调用attach方法\n        thread.attach(false);\n        // 主线程的sMainThreadHandler\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = thread.getHandler();\n        }\n        ...\n        // 开启主线程循环\n        Looper.loop();\n        ...\n    }\n\n    private void attach(boolean system) {\n        sCurrentActivityThread = this;\n        // system值为false\n        mSystemThread = system;\n        if (!system) {\n            ...\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n            final IActivityManager mgr = ActivityManagerNative.getDefault();\n            try {\n                // 调用ActivityManagerProxy进行远程通信。\n                mgr.attachApplication(mAppThread);\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n            ...\n        } else {\n            // 不能设置Application对象。如果系统崩溃了，直接结束。\n            ...\n        }\n        ...\n    }\n{% endcodeblock %}\n\nActivityThread的main方法是整个应用程序启动的入口。执行了ActivityThread、主线程消息Looper的初始化操作。然后调用ActivityManagerProxy的attachApplication方法通过Binder驱动通知ActivityManagerService的attachApplication执行应用启动的后续操作。\n{% codeblock lang:java ActivityManagerService%}\n    @Override\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            ...\n            attachApplicationLocked(thread, callingPid);\n            ...\n        }\n    }\n\n    private final boolean attachApplicationLocked(IApplicationThread thread,\n            int pid) {\n\n        // Find the application record that is being attached...  either via\n        // the pid if we are running in multiple processes, or just pull the\n        // next app record if we are emulating process with anonymous threads.\n\n        // 检索需要附加的application信息。\n        // 1. 运行在多进程中pid信息;2. 或拉取用匿名线程模拟的进程启动的app信息。\n        ProcessRecord app;\n        if (pid != MY_PID && pid >= 0) {\n            synchronized (mPidsSelfLocked) {\n                app = mPidsSelfLocked.get(pid);\n            }\n        } else {\n            app = null;\n        }\n\n        if (app == null) {\n            ...\n            // 未找到application\n            return false;\n        }\n\n        // If this application record is still attached to a previous\n        // process, clean it up now.\n        // 如果application record仍附加在之前的进程，则结束application\n        if (app.thread != null) {\n            handleAppDiedLocked(app, true, true);\n        }\n        // 进程名：\n        final String processName = app.processName;\n        try {\n            AppDeathRecipient adr = new AppDeathRecipient(\n                    app, pid, thread);\n            thread.asBinder().linkToDeath(adr, 0);\n            app.deathRecipient = adr;\n        } catch (RemoteException e) {\n            ...\n            return false;\n        }\n        ...\n        // 激活进程状态\n        app.makeActive(thread, mProcessStats);\n        app.curAdj = app.setAdj = -100;\n        app.curSchedGroup = app.setSchedGroup = Process.THREAD_GROUP_DEFAULT;\n        app.forcingToForeground = null;\n        updateProcessForegroundLocked(app, false, false);\n        app.hasShownUi = false;\n        app.debugging = false;\n        ...\n        boolean normalMode = mProcessesReady || isAllowedWhileBooting(app.info);\n        List<ProviderInfo> providers = normalMode ? generateApplicationProvidersLocked(app) : null;\n        ...\n        try {\n            ...\n            ApplicationInfo appInfo = app.instrumentationInfo != null\n                    ? app.instrumentationInfo : app.info;\n            app.compat = compatibilityInfoForPackageLocked(appInfo);\n            if (profileFd != null) {\n                profileFd = profileFd.dup();\n            }\n            ProfilerInfo profilerInfo = profileFile == null ? null\n                    : new ProfilerInfo(profileFile, profileFd, samplingInterval, profileAutoStop);\n            // 1. 初始化应用中对应系统信息，\n            thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,\n                    profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,\n                    app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,\n                    enableTrackAllocation, isRestrictedBackupMode || !normalMode, app.persistent,\n                    new Configuration(mConfiguration), app.compat,\n                    getCommonServicesLocked(app.isolated),\n                    mCoreSettingsObserver.getCoreSettingsLocked());\n            updateLruProcessLocked(app, false, null);\n            ...\n        } catch (Exception e) {\n            ...\n        }\n        ...\n        boolean badApp = false;\n        boolean didSomething = false;\n        ... \n        // 查看进程中是否有栈顶Activity等待运行\n        if (normalMode) {\n            try {\n                // 2. 开始执行应用的MainActivity的启动操作。\n                if (mStackSupervisor.attachApplicationLocked(app)) {\n                    didSomething = true;\n                }\n            } catch (Exception e) {\n               ...\n            }\n        }\n\n        // 查看进程中是否要运行的Service\n        if (!badApp) {\n            try {\n                didSomething |= mServices.attachApplicationLocked(app, processName);\n            } catch (Exception e) {\n                ...\n            }\n        }\n\n        // 查看进程中是否有要运行的Broadcast\n        if (!badApp && isPendingBroadcastProcessLocked(pid)) {\n            try {\n                didSomething |= sendPendingBroadcastsLocked(app);\n            } catch (Exception e) {\n                ...\n            }\n        }\n        ...\n        return true;\n    }\n{% endcodeblock%}\nattachApplicationLocked中做了两个重要的事情\n\n1）bindApplication：完成Application的实例化操作。通过Binder机制调用ApplicationThread的bindApplication，又会经过Handler发送Application绑定的操作，通过mInstrumentation来完成Application实例化，最后调用Application的onCreate()方法\n\n2）attachApplicationLocked：接着步骤1）查找栈顶的Activity，如果存在MainActivity。则调用ActivityStackSupervisor的attachApplicationLocked方法执行启动Activity的任务。\n\n{% codeblock lang:java ActivityStackSupervisor.java %}\n    // 查找需要启动的Activity。\n    boolean attachApplicationLocked(ProcessRecord app) throws RemoteException {\n        final String processName = app.processName;\n        boolean didSomething = false;\n        // 对所有任务栈循环\n        for (int displayNdx = mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {\n            ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;\n            for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {\n                // \n                final ActivityStack stack = stacks.get(stackNdx);\n                if (!isFrontStack(stack)) {\n                    continue;\n                }\n                // 如果是最前显示的栈，获取栈顶Activity的信息\n                ActivityRecord hr = stack.topRunningActivityLocked(null);\n                if (hr != null) {\n                    if (hr.app == null && app.uid == hr.info.applicationInfo.uid\n                            && processName.equals(hr.processName)) {\n                        try {\n                            // 启动栈顶Activity\n                            if (realStartActivityLocked(hr, app, true, true)) {\n                                didSomething = true;\n                            }\n                        } catch (RemoteException e) {\n                            ...\n                        }\n                    }\n                }\n            }\n        }\n        return didSomething;\n    }\n\n    final boolean realStartActivityLocked(ActivityRecord r,\n            ProcessRecord app, boolean andResume, boolean checkConfig)\n            throws RemoteException {\n\n        if (andResume) {\n            ...\n        }\n        ...\n        r.app = app;\n        app.waitingToKill = null;\n        r.launchCount++;\n        r.lastLaunchTime = SystemClock.uptimeMillis();\n        ...\n        int idx = app.activities.indexOf(r);\n        if (idx < 0) {\n            app.activities.add(r);\n        }\n        ...\n        final TaskRecord task = r.task;\n        final ActivityStack stack = task.stack;\n        try {\n            ...\n            List<ResultInfo> results = null;\n            List<ReferrerIntent> newIntents = null;\n            if (andResume) {\n                results = r.results;\n                newIntents = r.newIntents;\n            }\n            ...\n            if (r.isHomeActivity() && r.isNotResolverActivity()) {\n                // Home process is the root process of the task.\n                mService.mHomeProcess = task.mActivities.get(0).app;\n            }\n            ...\n            r.sleeping = false;\n            r.forceNewConfig = false;\n            mService.showAskCompatModeDialogLocked(r);\n            r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);\n            ProfilerInfo profilerInfo = null;\n            if (mService.mProfileApp != null && mService.mProfileApp.equals(app.processName)) {\n                ...\n            }\n\n            if (andResume) {\n                app.hasShownUi = true;\n                app.pendingUiClean = true;\n            }\n            ...\n            // 启动Activity\n            app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                    System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                    new Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,\n                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n            ...\n\n        } catch (RemoteException e) {\n            ...\n        }\n        ...\n\n        return true;\n    }\n{% endcodeblock %}\n\n遍历所有Activity的任务找到最前显示的Activity的栈，取栈顶的Activity执行真正的Activity启动操作。同样需要Binder进行进程间通讯通知ApplicationThread执行scheduleLaunchActivity任务。\n\n{% codeblock lang:java ActivityThread.java -> ApplicationThread.java %}\n\n    private class ApplicationThread extends ApplicationThreadNative {\n        @Override\n        public final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n                ActivityInfo info, Configuration curConfig, Configuration overrideConfig,\n                CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,\n                int procState, Bundle state, PersistableBundle persistentState,\n                List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents,\n                boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) {\n\n            updateProcessState(procState, false);\n\n            ActivityClientRecord r = new ActivityClientRecord();\n\n            r.token = token;\n            r.ident = ident;\n            r.intent = intent;\n            r.referrer = referrer;\n            r.voiceInteractor = voiceInteractor;\n            r.activityInfo = info;\n            r.compatInfo = compatInfo;\n            r.state = state;\n            r.persistentState = persistentState;\n\n            r.pendingResults = pendingResults;\n            r.pendingIntents = pendingNewIntents;\n\n            r.startsNotResumed = notResumed;\n            r.isForward = isForward;\n\n            r.profilerInfo = profilerInfo;\n\n            r.overrideConfig = overrideConfig;\n            updatePendingConfiguration(curConfig);\n            // 发送启动的Activity的消息\n            sendMessage(H.LAUNCH_ACTIVITY, r);\n        }\n    }\n\n    private class H extends Handler {\n        ...\n        public void handleMessage(Message msg) {\n            ...\n            switch (msg.what) {\n                ...\n                case LAUNCH_ACTIVITY: {\n                    ...\n                    final ActivityClientRecord r = (ActivityClientRecord) msg.obj;\n                    ...\n                    handleLaunchActivity(r, null);\n                    ...\n                } break;\n                ...\n            }\n            ...\n        }   \n        ...\n    }\n    private void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n\n        mSomeActivitiesChanged = true;\n        ...\n        // 启动Activity前初始化WindowManager的全局属性\n        WindowManagerGlobal.initialize();\n        // 1. 执行Activity的启动操作\n        Activity a = performLaunchActivity(r, customIntent);\n        // 启动成功\n        if (a != null) {\n            r.createdConfig = new Configuration(mConfiguration);\n            // 2. 执行Activity的resume操作\n            handleResumeActivity(r.token, false, r.isForward,\n                    !r.activity.mFinished && !r.startsNotResumed);\n\n            if (!r.activity.mFinished && r.startsNotResumed) {\n                ...\n                r.paused = true;\n            }\n        } else {\n            // 出现异常时直接结束Activity\n        }\n    }\n{% endcodeblock %}\n\n先调用performLaunchActivity启动Activity，方法中执行Activity的onCreate()和start()方法。如果启动成功即返回的Activity不为null，则继续执行handleResumeActivity方法，方法中完成Activity调用onResume方法，完成整个Activity启动的过程。\n\n{% codeblock lang:java ActivityThread%}\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n\n        ActivityInfo aInfo = r.activityInfo;\n        if (r.packageInfo == null) {\n            r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,\n                    Context.CONTEXT_INCLUDE_CODE);\n        }\n        // 收集启动的Activity信息。\n        // 创建Activity的相关组件\n        ComponentName component = r.intent.getComponent();\n        if (component == null) {\n            component = r.intent.resolveActivity(\n                mInitialApplication.getPackageManager());\n            r.intent.setComponent(component);\n        }\n\n        if (r.activityInfo.targetActivity != null) {\n            component = new ComponentName(r.activityInfo.packageName,\n                    r.activityInfo.targetActivity);\n        }\n\n        Activity activity = null;\n        try {\n            // 用ClassLoader加载MainActivity。实例化MainActivity\n            java.lang.ClassLoader cl = r.packageInfo.getClassLoader();\n            activity = mInstrumentation.newActivity(\n                    cl, component.getClassName(), r.intent);\n            ...\n            r.intent.setExtrasClassLoader(cl);\n            r.intent.prepareToEnterProcess();\n            if (r.state != null) {\n                r.state.setClassLoader(cl);\n            }\n        } catch (Exception e) {\n            ...\n        }\n\n        try {\n            Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n            ...\n            if (activity != null) {\n                // 创建Activity上下文信息。\n                Context appContext = createBaseContextForActivity(r, activity);\n                // \n                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());\n                Configuration config = new Configuration(mCompatConfiguration);\n                ...\n\n                activity.attach(appContext, this, getInstrumentation(), r.token,\n                        r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                        r.embeddedID, r.lastNonConfigurationInstances, config,\n                        r.referrer, r.voiceInteractor);\n\n                if (customIntent != null) {\n                    activity.mIntent = customIntent;\n                }\n                r.lastNonConfigurationInstances = null;\n                activity.mStartedActivity = false;\n                int theme = r.activityInfo.getThemeResource();\n                if (theme != 0) {\n                    activity.setTheme(theme);\n                }\n\n                activity.mCalled = false;\n                // 调用callActivityOnCreate方法\n                if (r.isPersistable()) {\n                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);\n                } else {\n                    mInstrumentation.callActivityOnCreate(activity, r.state);\n                }\n                ...\n                r.activity = activity;\n                r.stopped = true;\n                if (!r.activity.mFinished) {\n                    // 调用start方法\n                    activity.performStart();\n                    r.stopped = false;\n                }\n                if (!r.activity.mFinished) {\n                    // 如果是异常恢复则调用onRestoreInstanceState方法来恢复状态\n                    if (r.isPersistable()) {\n                        if (r.state != null || r.persistentState != null) {\n                            mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,\n                                    r.persistentState);\n                        }\n                    } else if (r.state != null) {\n                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);\n                    }\n                }\n                if (!r.activity.mFinished) {\n                    activity.mCalled = false;\n                    // \n                    if (r.isPersistable()) {\n                        mInstrumentation.callActivityOnPostCreate(activity, r.state,\n                                r.persistentState);\n                    } else {\n                        mInstrumentation.callActivityOnPostCreate(activity, r.state);\n                    }\n                    ...\n                }\n            }\n            r.paused = true;\n            // 绑定token\n            mActivities.put(r.token, r);\n        } catch (SuperNotCalledException e) {\n            throw e;\n        } catch (Exception e) {\n            ...\n        }\n\n        return activity;\n    }\n{% endcodeblock %}\n实例化Activity的组件信息，通过ClassLoader加载Activity，创建上下文信息附加到Activity中，然后由Instrumentation调用callActivityOnCreate等方法完成Activity启动时的生命周期方法，如onCreate()、onStart()等。\n{% codeblock lang:java Instrumentation.java%}\n    public void callActivityOnCreate(Activity activity, Bundle icicle) {\n        prePerformCreate(activity);\n        // 调用Activity的onCreate \n        activity.performCreate(icicle);\n        postPerformCreate(activity);\n    }\n{% endcodeblock %}\n\n到此，Android的应用程序启动与Activity相关的流程就完成了。\n在整个流程中几个重要的类需要注意\n\n- `ActivityManagerNative` ：是Binder的子类，是底层Binder驱动在Java类中的实现。因为是抽象类，所以具体实现由ActivityManagerService来完成。\n\n- `ActivityManagerService `：简称AMS，是Android中最核心的服务，主要负责Android的四大组件的启动、切换、是调度和应用进程的管理和调度工作（如Activity的生命周期控制）。在系统启动的时候完成AMS的注册。\n\n- `ActivityManagerProxy` ：是ActivityManagerService的远程代理，客户端调用ActivityManagerProxy的相关方法通过Binder机制实现IPC，完成与ActivityManagerService通信交互任务。\n\n- `ActivityThread` ：Application的入口，从main方法开始创建应用相关的核心功能。如主线程的消息循环，Application初始化，绑定Application相关的服务等等，同时控制组件的生命周期操作。对应Application的主线程。\n\n- `ApplicationtThreadNative` ：与`ActivityManagerNative`一样也是Binder子类。具体实现由ApplicationThread完成。\n\n- `ApplicationThread`：完成AMS与ActivityThread之间的通信。\n\n- `ApplicationThreadProxy` ：是ApplicationThread远程接口代理。负责与客户端ApplicationThread通讯\n\n\n- `Instrumentation` ：每个应用绑定唯一的一个Instrumentation，每个Activity都一个对该对象的引用。ActivityThread通过Instrumentation来控制Activity的生命周期。\n\n- `ActivityStackSupervisor`： ActivityStack的超级管理员。\n\n- `ActivityStack` ：用于保存Activity的栈，决定是否要启动新的进程。\n\n- `ActivityRecord ` ：用于Activity的信息存储，包括状态、进程名等。\n\n- `TaskRecord ` ：Android中的Task的具体实现。记录ActivityRecord的任务栈。\n\n### 参考链接\n\n[Android Developer Activities](https://developer.android.com/guide/components/activities.html)\n\n[Activity的启动方式和flag详解](http://blog.csdn.net/singwhatiwanna/article/details/9294285)\n\n[Android 基础](http://blog.csdn.net/liuhe688/article/details/9494411)\n\n[深入理解Java Binder和MessageQueue](http://blog.csdn.net/innost/article/details/47317823)\n\n[Android应用程序启动过程源代码分析](http://blog.csdn.net/luoshengyang/article/details/6689748)\n\n[深入理解Binder](http://blog.csdn.net/innost/article/details/47208049)\n\n[【凯子哥带你学Framework】Activity启动过程全解析](http://www.jianshu.com/p/6037f6fda285)","slug":"Android：Activity的基础知识及启动过程","published":1,"updated":"2016-07-09T07:17:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj56j3ty5000lgrm376xbcsi7","content":"<p>Activity是Android四个基本组件之一，主要用作Application的界面展示和交互。Activity可以说是Android中应用最多的组件，因此有必要掌握关于Activity的知识。如：Activity的生命周期，Activity的启动模式，更深层次的如Activity的创建过程以及Actvity生命周期对应的方法是如何调用的。</p>\n<h1 id=\"一、Activity的生命周期\"><a href=\"#一、Activity的生命周期\" class=\"headerlink\" title=\"一、Activity的生命周期\"></a>一、Activity的生命周期</h1><h2 id=\"1-正常生命周期\"><a href=\"#1-正常生命周期\" class=\"headerlink\" title=\"1.正常生命周期\"></a>1.正常生命周期</h2><p>一个Activity正常的流程如下图：</p>\n<div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529027/android/activity_lifecycle.png\" style=\"width:50%\"><br></image></div>\n\n<p>1.Activity的完整生命周期：从onCreate()开始到onDestory()结束。Activity在onCreate()中完成一系列初始化的工作，如完成界面布局资源的加载，初始化Activity的需要的数据等等。在onDestory()中释放所有包含的资源。如在结束Actviity时，如果Activity中还有未完成的数据加载的工作，就需要在onDestory()中或之前及时结束。</p>\n<p>2.Activity的<code>可见</code>生命周期：<code>可见</code>生命周期在onStart()与onStop()之间。这段周期中，用户可以看到activity出现在屏幕上，并在onResume()之后，用户可以与界面交互了。当前Activity调用onStop()后，则不再可见，如启动一个新的Activity。在这段生命周期中，你可以添加资源到activity中，向用户展示。如：你在onStart中注册了一个广播，来更新你的UI，然后当activity不可见时，在onStop()中注销这个广播，释放广播资源。在activity整个生命周期中，onStart()和onStop()可能会多次调用，因为activity会在可见和不可见之间多次变化。注：onStart()和onStop()中不要做耗时操作，影响Actvitiy的<br>显示与停止。</p>\n<p>3.Activity前台展示时的生命周期：这段生命周期在调用onResume()和onPause()之间。这段周期，当前Actvitiy位于所有其他Activity顶部（因为Actvitiy就是保存在栈形式的结构中）。Actviity会频繁地在前台的进入和退出之间交互，比如：当回到Android的Home页面、设备处于休眠状态或显示Dialog时，都会调用onPause()，停止当前Actvity的前台状态。因为Actvitiy比较频繁在前台展示的状态交互，在这两方法中，不能进行耗时任务，也是因为新的Actvitiy在显示时，需要暂停前一个Actvitiy的执行，才会调用本身onResume()方法。</p>\n<h2 id=\"2-异常时的生命周期\"><a href=\"#2-异常时的生命周期\" class=\"headerlink\" title=\"2.异常时的生命周期\"></a>2.异常时的生命周期</h2><p>这里还需要考虑到，当系统内存不够用时或旋转屏幕时，Activity会经历哪些生命周期？</p>\n<div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467533421/android/restore_instance.png\" style=\"width:50%\"><br></image></div>\n\n<p>当系统在内存不够用的时候，系统会销毁后台的Activity以来提供足够内存资源给前台的Actvitiy使用，所以在这种情况下，后台的Activity已经被销毁，回到前台时，系统不仅仅只调用onResume()等方法，系统必须重新创建Activity对象。然而用户不会意识到系统销毁了之前Actviity并重新创建了一个新的。因此开发时某时候需要恢复到之前Actvitiy状态：包括数据、界面资源状态等。这时候需要你的Activity覆写Actvity的 onSaveInstanceState()方法，来存储Activity销毁时的数据。</p>\n<figure class=\"highlight java\"><figcaption><span>Actvity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个方法在onStop()之前调用。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 委托Window保存数据</span></div><div class=\"line\">    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());</div><div class=\"line\">    Parcelable p = mFragments.saveAllState();</div><div class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        outState.putParcelable(FRAGMENTS_TAG, p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    getApplication().dispatchActivitySaveInstanceState(<span class=\"keyword\">this</span>, outState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>系统默认保存当前Activity的视图结构。并在Actvitiy重启后恢复这些数据。首先Actvitiy会调用onSaveInstanceState保存数据，然后Actvitiy会委托Window保存数据，Window委托它上面的顶级容器去保存数据。顶级容器是一个ViewGroup，一般情况下是DecorView。最后顶层容器再去一一通知它的子元素来保存数据。</p>\n<figure class=\"highlight java\"><figcaption><span>PhoneWindow.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// PhoneWindow.java 是Window的实现</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bundle <span class=\"title\">saveHierarchyState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Bundle outState = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> outState;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// mContentParent就是ViewGroup</span></div><div class=\"line\">    mContentParent.saveHierarchyState(states);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> outState;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>ViewGroup.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 分发的每个子View的dispatchSaveInstanceState具体实现</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchSaveInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.dispatchSaveInstanceState(container);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</div><div class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        View c = children[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> ((c.mViewFlags &amp; PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) &#123;</div><div class=\"line\">            c.dispatchSaveInstanceState(container);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当Actvitiy被重新创建后，系统会调用onRestoreInstanceState，并把Actvitiy销毁时onSaveInstanceState方法所保存的Bundle对象作为参数同时传递给onRestoreInstanceState和onCreate方法。<br><figure class=\"highlight java\"><figcaption><span>Actvity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个方法在onStart和onPostCreate()之前调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRestoreInstanceState</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Bundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);</div><div class=\"line\">        <span class=\"keyword\">if</span> (windowState != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mWindow.restoreHierarchyState(windowState);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在恢复Actvitiy存储时的数据时候，接收的位置可以选择onRestoreInstanceState()或者onCreate，两者区别是onRestoreInstanceState()中的Bundle不为空，onCreate()中的Bundle值可能为空，需要加上判断。</p>\n<blockquote>\n<p><code>注</code>：onSaveInstanceState()并不能保证正常时被调用。所以不要用来做为数据存储持久化的工作。相反的，当用户离开Activity时应该在onPause()中来存储持久化数据（如数据库数据）。可以简单理解为系统只在Actvitiy异常终止的时候才会调用这两方法，其他情况并不会触发。异常终止：如因为内存不足导致低优先级的Actvitiy被销毁、在旋转屏幕的时候Actvitiy被销毁又被重新创建。</p>\n</blockquote>\n<h2 id=\"3-处理系统配置变化\"><a href=\"#3-处理系统配置变化\" class=\"headerlink\" title=\"3.处理系统配置变化\"></a>3.处理系统配置变化</h2><p>一些系统配置在运行时可能会发生变化（如：屏幕旋转、键盘变化、语言等）。当这些变化发生的时候，系统会调用onDestroy(),然后立即调用onCreate()。有时候我们并不想要销毁Actvitiy和重新创建，这时候我们可以在AndroidManifest中配置指定Activity的<code>android:configChanges</code>的属性即可<br><figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">android:configChanges</span>=<span class=\"string\">[</span>\"<span class=\"attr\">mcc</span>\", \"<span class=\"attr\">mnc</span>\", \"<span class=\"attr\">locale</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">touchscreen</span>\", \"<span class=\"attr\">keyboard</span>\", \"<span class=\"attr\">keyboardHidden</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">navigation</span>\", \"<span class=\"attr\">screenLayout</span>\", \"<span class=\"attr\">fontScale</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">uiMode</span>\", \"<span class=\"attr\">orientation</span>\", \"<span class=\"attr\">screenSize</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">smallestScreenSize</span>\"] </div><div class=\"line\">    <span class=\"attr\">...</span> &gt;</div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>常用的三个选项：</p>\n<pre><code>1. local：系统语言变化、\n2. orientation：手机屏幕发生旋转、\n3. keyboardHidden：键盘的可访问性发生了变化，调出键盘。\n</code></pre><p>使用方法</p>\n<figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">\t<span class=\"attr\">android:configChanges</span>=<span class=\"string\">\"orientation|...\"</span></div><div class=\"line\">\t<span class=\"attr\">...</span> &gt;</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>注</code>：screenSize、smallestScreenSize比较特殊，它们的行为与编译选项有关，和运行环境无关。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--如果指定的minSdkVersion和targetSdkVersion有一个大于13，为了防止旋转屏幕时Actvitiy重启，除了 --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- orientation，还需要加上screenSize和smallestScreenSize --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span></div><div class=\"line\">    <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"...\"</span></div><div class=\"line\">    <span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"...\"</span></div><div class=\"line\">    /&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"二、Activity的启动模式\"><a href=\"#二、Activity的启动模式\" class=\"headerlink\" title=\"二、Activity的启动模式\"></a>二、Activity的启动模式</h1><p>为了方便管理Activity，Android引入了Task（任务）和Stack（返回栈）<br>Task（任务）是用户进行交互的Activity集合。Activity置于类似<code>后进先出</code>的对象结构的Stack（返回栈）中。</p>\n<ul>\n<li>当用户点击Application（应用程序）的Icon时，如果应用的Task没有创建，则系统创建一个新的Task，Application打开Main Activity作为Task的根activity。</li>\n<li>当启动新的Activity时，创建Activity的实例放入栈，置于栈顶并获取焦点。</li>\n<li>当Activity进入停止状态，系统保持它的当前状态。</li>\n<li>当用户点击返回按钮时，栈顶Activity出栈，调用onDestory()销毁实例。前Activity恢复存储的状态并置于栈顶。栈中的Activities不会重新排序，只能够被压入栈和出栈。</li>\n<li>当用户连续点击返回键，栈中Activity接连出栈，直到回到桌面或Task运行的起始位置。所有activity都被从栈中移除时，则Task销毁。</li>\n<li>当启动新的Task（如打开新应用）或者点击Home键回到桌面时，任务栈退到后台；当位于后台时，Task中的Activity都会进入停止状态。退到后台的Task的返回栈仍然保持完整性。如：Task A的栈中有三个Activity，用户点击Home键，打开新的应用程序，Task A退到后台。新的应用程序启动，系统创建并启动新的Task B。用户再次回到桌面，打开Task A对应的应用程序，Task A回到前台，Task A中的三个Activity保持完整性。</li>\n<li>Android支持后台多任务；但同时运行多个后台任务，系统可能销毁后台的Activity来回收内存，就导致后台Activity的状态丢失。</li>\n</ul>\n<h2 id=\"1-Activity任务管理。\"><a href=\"#1-Activity任务管理。\" class=\"headerlink\" title=\"1. Activity任务管理。\"></a>1. Activity任务管理。</h2><p>默认情况下Android中的Activity通过<code>standard</code>启动模式进入在后进先出的Stack（返回栈）中。有时因为业务需求，需要修改Activity的默认启动模式。如：在新的任务中来启动Activity而不是在返回栈的栈顶创建新的实例；又比如：在启动Activity时，只想要启动Activity已存在的实例；或在用户离开任务时清空除了根Activity外所有的Activity。</p>\n<p>修改Activity的默认启动模式有两种方法：</p>\n<ol>\n<li>在AndroidManifest中指定Activity的任务和启动模式。</li>\n<li>在启动Activity的Intent中加入标志位。</li>\n</ol>\n<p>在优先级上第二种高于第一种，就是在Intent中传递Flag标志的方式会覆盖在XML指定启动模式的方式。<br>标准启动模式，启动Activity时，系统会创建Activity新的实例。Activity可能会多次创建：每个实例可能属于不同任务，一个任务可能有多个实例。</p>\n<h3 id=\"1）AndroidManifest中指定Activity的任务和启动模式。\"><a href=\"#1）AndroidManifest中指定Activity的任务和启动模式。\" class=\"headerlink\" title=\"1）AndroidManifest中指定Activity的任务和启动模式。\"></a>1）AndroidManifest中指定Activity的任务和启动模式。</h3><figure class=\"highlight xml\"><figcaption><span>AndroidManefest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.MainActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:taskAffinity</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">    <span class=\"attr\">android:launchMode</span>=<span class=\"string\">[</span>\"<span class=\"attr\">multiple</span>\" | \"<span class=\"attr\">singleTop</span>\" |</div><div class=\"line\">                  \"<span class=\"attr\">singleTask</span>\" | \"<span class=\"attr\">singleInstance</span>\"]</div><div class=\"line\">    <span class=\"attr\">android:clearTaskOnLaunch</span>=<span class=\"string\">[</span>\"<span class=\"attr\">true</span>\" | \"<span class=\"attr\">false</span>\"]</div><div class=\"line\">    <span class=\"attr\">android:alwaysRetainTaskState</span>=<span class=\"string\">[</span>\"<span class=\"attr\">true</span>\" | \"<span class=\"attr\">false</span>\"]</div><div class=\"line\">    <span class=\"attr\">android:finishOnTaskLaunch</span>=<span class=\"string\">[</span>\"<span class=\"attr\">true</span>\" | \"<span class=\"attr\">false</span>\"] </div><div class=\"line\">    <span class=\"attr\">...</span> &gt;</div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>taskAffinity</code><br>taskAffinity表示Activity对应的任务。有相同taskAffinity的Activity理论属于同一个任务。任务自身的Affinity决定<br>根Activity的Affinity值。taskAffinity的使用场合是什么呢？1.根据taskAffinity重新为Activity选择任务（与<br>allowTaskReparenting属性配合工作）；2.启动Activity时，Intent使用FLAG_ACTIVITY_NEW_TASK标记，根据<br>taskAffinity查找或创建一个新Activity对应taskAffinity的任务。默认情况下，应用内所有Activity都具有相同的<br>taskAffinity,都是从Application继承来，而Application默认taskAffinity值为<manifest>中定义的包名。</manifest></p>\n</li>\n<li><p><code>launchMode</code><br>launchMode表示Activity启动模式。配合Intent的Activity Flags使用。</p>\n</li>\n<li><p><code>allowTaskReparenting</code><br>Activity是否从启动它的任务中移动到目标任务中，”true”表示可以移动；”false”表示必须保留在启动它的任务中。<br>如果没有设置，则继承<application>中的属性值，默认false。正常情况下Activity位于启动它的任务中，并度过它的整个生命周期。</application></p>\n</li>\n<li><p><code>clearTaskOnLaunch</code><br>标记是否从任务中清除除根Activity的所有Activity，”true”表示清除，”false”表示不清除。默认”false”。这个属性只对根Activity起作用。如果为”true”，每次重新启动应用时，都只看到根Activity，任务中的其他的Activity都会被清除栈。</p>\n</li>\n<li><p><code>alwaysRetainTaskState</code><br>标记任务是否保持原来的状态，”true”总是保持，”false”不能保证，默认”false”。属性只对根Activity起作用。默认情况下，如果应用在后台停留过长时间，应用再次回到前台时，系统会对应用任务的栈进行清空处理。只保留根Activity。如果根Activity的这个属性为”true”时，应用回到前台时，任务仍然保留所有的Activity。如：浏览器应用打开很多tab页面，在后台停留过长时间，回到前台时，仍然保留这些打开的界面。</p>\n</li>\n<li><p><code>finishOnTaskLaunch</code><br>finishOnTaskLaunch属性与clearTaskOnLaunch属性类似，不同是它是在操作单个的Activity，而不是整个任务栈。它可以销毁任意Activity包括根Activity。当设置为”true”时，如果用户离开然后回到任务栈，则Activity不再显示。</p>\n</li>\n</ul>\n<blockquote>\n<p>注：多数任务和Activity启动模式应该保持默认值。除非必要情况下，需要改变默认行为。</p>\n</blockquote>\n<h2 id=\"2-启动模式\"><a href=\"#2-启动模式\" class=\"headerlink\" title=\"2. 启动模式\"></a>2. 启动模式</h2><p>Activity有四种启动模式：<code>standard</code>，<code>singleTop</code>，<code>singleTask</code>和<code>singleInstance</code></p>\n<ul>\n<li><code>standard</code><br>Activity的默认启动模式，不论栈中是否已存在Activity的实例，都会在创建新的Activity实例，放入栈顶。如下图ActivityA和ActivityB均为standard启动模式。</li>\n</ul>\n<div><br>    <image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_standard.png\" style=\"width:60%;\"><br></image></div>\n\n<ul>\n<li><code>singleTop</code><br>任务栈顶存在要启动的Activity，系统不会创建新的Activity实例，只调用Activity的onNewIntent()方法。Activity可能被多次实例化，每个Activity实例可能属于不同任务栈，一个任务栈可能有多个实例（仅在返回栈栈顶的Activity不是启动的Activity实例情况下）<br>假设有任务的返回栈包含ABCD的Activity，A为根Activity，D在栈顶；如果启动D并且D启动模式为”singleTop”，则调用栈顶已经存在的D的方法onNewIntent()，栈内容不变，仍为”ABCD”；如果启动B，B的启动模式为”singleTop”，则会创建新的B实例，并压人栈中。如下图ActivityA和ActivityB均为singleTop启动模式。</li>\n</ul>\n<div><br>    <image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_singleTop.png\" style=\"width:60%;\"><br></image></div><br>&gt; 注：当创建新的Activity，用户点击返回键会返回之前Activity。如果已存在的Activity来处理一个新的Intent对象时，在Intent进入onNewIntent()之前，用户点击返回键无法返回Activity之前的状态。<br><br>- <code>singleTask</code><br>系统查找或创建新Activity对应的任务，已有任务栈时直接向栈中添加Activity的实例；否则创建新的Activity实例作为新任务栈的根。如果指定的任务栈中已经存在Activity的实例，系统只调用Acitivity的onNewIntent()方法，而不是创建新的Activity，同时只能够存在一个相同Activity实例。需要配合<code>android:taskAffinity</code>属性来使用。若taskAffinity的值与应用程序一致，新的Activity仍然会在应用程序的默认任务栈中。<br><br><div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467552922/android/diagram_backstack_singletask_multiactivity.png\" style=\"width:60%;\"><br></image></div>\n\n<blockquote>\n<p>注：尽管”singleTask”启动了一个新任务，点击返回键时仍然返回到之前的Activity对应的任务栈。</p>\n</blockquote>\n<ul>\n<li><code>singleInstance</code><br>除了具有”singleTask”的全部特性以外，系统不会在有”singleInstance”启动模式的Activity对应栈中启动任何其他的Activity。具有”singleInstance”启动模式的Activity是栈中唯一的成员，通过这个任务栈启动的Activity都会在指定的任务栈中打开。</li>\n</ul>\n<div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467705412/android/android_launchmode_singleInstance.png\" style=\"width:70%\"><br></image></div>\n\n<p>不管在新的任务中启动Activity还是在启动时的任务栈中启动Activity，点击返回键总是回到之前的Activity。如果你指定Activity的启动模式为singleTask，并在后台任务栈中存在对应的实例。启动这个Acitivity时，就会把整个任务栈带到前台。这时候，返回栈包含所有带到前台的任务栈中所有Activity，并置于栈顶。如singleTask小节图示。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 假设有三个Activity：MainAcitivity，ActivityA，ActivityB。MainActivity为应用程序的入口Activity，ActivityA是</div><div class=\"line\">* `singleTask`启动模式，任务为`org.alexwan.taskandflag`的Activity，ActivityB与ActivityA一样。在启动MainActivity</div><div class=\"line\">* 后，由MainActivity启动ActivityA，ActivityA启动ActivityB。</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">// 查看运行栈 命令</div><div class=\"line\">adb shell dumpsys activity activities | sed -En -e '/Running activities/,/Run #0/p'</div><div class=\"line\"></div><div class=\"line\">// 结果</div><div class=\"line\">Running activities (most recent first):</div><div class=\"line\">    TaskRecord&#123;d42fd8e #7592 A=org.alexwan.view U=0 sz=2&#125;</div><div class=\"line\">        Run #2: ActivityRecord&#123;247d0678 u0 org.alexwan.taskandflag/.ActivityB t7592&#125;</div><div class=\"line\">        Run #1: ActivityRecord&#123;168061c4 u0 org.alexwan.taskandflag/.ActivityA t7592&#125;</div><div class=\"line\">    TaskRecord&#123;20b981bc #7591 A=org.alexwan.taskandflag U=0 sz=1&#125;</div><div class=\"line\">        Run #0: ActivityRecord&#123;618def7 u0 org.alexwan.taskandflag/.MainActivity t7591&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-Intent-Activity标志\"><a href=\"#3-Intent-Activity标志\" class=\"headerlink\" title=\"3.Intent Activity标志\"></a>3.Intent Activity标志</h2><p>在调用startActivity时，为Intent添加一个标志位决定Activity启动方式。用来修改默认行为.<br><figure class=\"highlight java\"><figcaption><span>Intent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用新任务启动Activity。如果任务中的Activity已运行需要启动的Activity，则直接返回前台状态并调用onNewIntent()方</span></div><div class=\"line\"><span class=\"comment\">// 法。与\"singleTask\"效果相同</span></div><div class=\"line\">FLAG_ACTIVITY_NEW_TASK</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果启动的Activity在返回栈栈顶，则直接调用Activity的onNewIntent方法，而不是创建一个新的实例。</span></div><div class=\"line\"><span class=\"comment\">// 与\"singleTop\"效果相同。</span></div><div class=\"line\">FLAG_ACTIVITY_SINGLE_TOP</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果启动的Activity已经运行在当前任务栈中，则它的所有顶部Activity都会被销毁，而不是创建一个新Activity实例。调用</span></div><div class=\"line\"><span class=\"comment\">// onNewIntent()方法恢复Activity状态。</span></div><div class=\"line\">FLAG_ACTIVITY_CLEAR_TOP</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 启动的Activity不会出现在历史Activity的列表中，在某些情况下我们不希望用户通过历史列表回到Activity时会使用这个标</span></div><div class=\"line\"><span class=\"comment\">// 志。与在AndroidManifest中指定Activity的android:excludeFromRecents=\"true\"属性效果相同。</span></div><div class=\"line\">FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>FLAG_ACTIVITY_CLEAR_TOP</code>常和<code>FLAG_ACTIVITY_NEW_TASK</code>配合使用。当同时使用，这些标志是定位其他栈中存在的Activity和放置在可以享用Intent的位置的方式。这种情况下，被启动Activity的实例如果已经存在，那么系统就会调用它的onNewIntent()方法。如果被启动的Activity采用”standard”启动模式，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并置于栈顶。 </p>\n</blockquote>\n<h2 id=\"4-处理affinities\"><a href=\"#4-处理affinities\" class=\"headerlink\" title=\"4. 处理affinities\"></a>4. 处理affinities</h2><p>affinity 表示Activity对应的任务栈值。默认情况下所有Activity继承Application对应的包名所在的任务栈。可以在AndroidManifest中为Activity修改默认affinity值。不同Application可以共享相同affinity属性，同样相同Application中的Activity可以关联不同的affinity属性。<br>如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".ActivityB\"</span></div><div class=\"line\">    <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTask\"</span></div><div class=\"line\">    <span class=\"attr\">android:taskAffinity</span>=<span class=\"string\">\"org.alexwan.view\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>TaskAffinitys主要配合”singleTask”启动模式和”allowTaskReparenting”属性来使用</p>\n<ul>\n<li><p>1）配合”singleTask”启动模式的Activity使用的情景；如通知管理总是在外部的任务栈中启动Activity，而不是作为Application任务栈的一部分。所以通知类的Intent总是用FLAG_ACTIVITY_NEW_TASK在intent的属性中传递给startActivity()。</p>\n</li>\n<li><p>2）配合 allowTaskReparenting 属性使用情景。假设Activity的allowTaskReparenting的值为”true”，这种情况下，在Activity对应的任务栈回到前台，并且已经被其他任务栈启动时，则会从其他任务栈转到Activity对应的任务栈中。比如：在应用程序A中打开浏览器的Activity，Activity初始化时属于应用A的对应的任务栈，当浏览器回到前台时，Activity则从应用A任务栈转到浏览器的任务栈直接显示。</p>\n</li>\n</ul>\n<h1 id=\"三、Activity的启动匹配规则\"><a href=\"#三、Activity的启动匹配规则\" class=\"headerlink\" title=\"三、Activity的启动匹配规则\"></a>三、Activity的启动匹配规则</h1><p>Intent打开Activity时分为隐式、显式打开Actiivty。</p>\n<p><code>显式启动</code>：这种情况启动的Activity为已知，显式Intent也是启动Activity最常用的方式。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(ActivityA.<span class=\"keyword\">this</span> , ActivityB.class);</div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p><code>隐式启动</code>：在未知启动的Activity的情况时，通过action，data，category等IntentFilter属性来过滤匹配要启动的Activity，Activity可能为多个或者没有对应Activity。如：启动分享、打开多媒体相关的Activity等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent sendIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">sendIntent.setAction(Intent.ACTION_VIEW);</div><div class=\"line\">sendIntent.putExtra(Intent.EXTRA_TEXT , message);</div><div class=\"line\">sendIntent.setType(<span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span>(sendIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">    startActivity(sendIntent);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果没有匹配到相应的Activity时，调用startActivity()时，应用程序直接崩溃。因此在使用隐式Intent时，需要调用resolveActivity()来判断是否有相匹配的Activity来接收Intent，如果没有则不会调用startActivity。</p>\n</blockquote>\n<h2 id=\"1-IntentFilter匹配规则。\"><a href=\"#1-IntentFilter匹配规则。\" class=\"headerlink\" title=\"1. IntentFilter匹配规则。\"></a>1. IntentFilter匹配规则。</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.ActivityA\"</span></div><div class=\"line\">    <span class=\"attr\">...</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"package\"</span> /&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>只在有action、category、data都匹配时，Intent才算是匹配成功，如果Activity若声明多个IntentFilter时，只需匹配任意一个则表示匹配成功。</p>\n<p>（1） action<br>一个Intent Filter中可声明0个或多个action，Intent中的action与其中任一action在字符串形式上完全相同（区分大小写），action就算是匹配成功。Intent调用setAction或构造器中传入action为Intent设置action。隐式Intent必须指定action。</p>\n<p>（2）category<br>与action相同，一个Intent Filter可声明多个category或不声明category属性。Intent中的category必须全部匹配Filter中出现的category。Intent若没有指定category，同样能够匹配成功，因为Intent没有指定category时，Android自定为Intent指定默认category值<code>Intent.CATEGORY_DEFAULT</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span> /&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>（3）data<br>与action相同，一个Intent Filter可声明多个data或不声明data属性。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"video/mpeg\"</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"http\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"audio/mpeg\"</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"http\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>每个<data>可以指定一个URI和一个数据类型（MIME 媒体类型）。</data></p>\n<p><code>URI</code><br>结构：<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</code>。如：”content://com.example.project:200/folder/subfolder/etc”。</p>\n<blockquote>\n<p>注：如果scheme没有指定，则忽略host；host没有指定，则忽略port；如果scheme和host都没有指定，则忽略path。path可以包含星号（*）通配符部分满足path的名称。<br>URI默认值为content和file。如果filter中没有指定URI，Intent中的URI部分的scheme必须为content或file才能匹配。如果为Intent指定完整的data，必须调用setDataAndType()，单独的调用setData或setType()会重置Data和Type属性。</p>\n</blockquote>\n<h1 id=\"四、Activity的启动过程\"><a href=\"#四、Activity的启动过程\" class=\"headerlink\" title=\"四、Activity的启动过程\"></a>四、Activity的启动过程</h1><div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467896657/android/%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8%E6%97%B6%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png\" style=\"width:100%\"><br><div style=\"text-align:center;\"><b>4-1. Android 5.0的启动应用程序时Activity的时序图</b></div><br></image></div>\n\n<p>应用程序的入口MainActivity的定义</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>    </span></div><div class=\"line\">      <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span>&gt;    </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span>    </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span>    </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span>    </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span>    </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Android中启动应用程序从桌面启动，系统桌面实际上也是应用程序，对应的是Launcher。</p>\n<figure class=\"highlight java\"><figcaption><span>com.android.launcher2.Launcher.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startActivitySafely</span><span class=\"params\">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 调用Activity的startActivity方法。</span></div><div class=\"line\">        success = startActivity(v, intent, tag);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Unable to launch. tag=\"</span> + tag + <span class=\"string\">\" intent=\"</span> + intent, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> success;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用Activity的startActivity方法，最终调用Activity的startActivityForResult方法。<br><figure class=\"highlight java\"><figcaption><span>Activity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Note we want to go through this call for compatibility with</span></div><div class=\"line\">        <span class=\"comment\">// applications that may have overridden the method.</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(</span></span></div><div class=\"line\">        String who, Intent intent, <span class=\"keyword\">int</span> requestCode, @Nullable Bundle options) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 1. 创建要启动的Activity实例信息。</span></div><div class=\"line\">    Instrumentation.ActivityResult ar =</div><div class=\"line\">        mInstrumentation.execStartActivity(</div><div class=\"line\">            <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, who,</div><div class=\"line\">            intent, requestCode, options);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// mMainThread 就是ActivityThread</span></div><div class=\"line\">        mMainThread.sendActivityResult(</div><div class=\"line\">            mToken, who, requestCode,</div><div class=\"line\">            ar.getResultCode(), ar.getResultData());</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Instrumentation</code>主要用来监控应用程序的交互操作。只在Activity和ActivityThread有实例，每次在应用程序创建的时候，在ActivityThread中初始化唯一的实例<code>mInstrumentation</code>，后续在每个Activity.attach方法中，添加到Activity的中。这里调用execStartActivity执行Activity的启动流程。</p>\n<figure class=\"highlight java\"><figcaption><span>Instrumentation.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></span></div><div class=\"line\">        Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">        Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options, UserHandle user) &#123;</div><div class=\"line\">    <span class=\"comment\">// contextThread 是IBinder对象，主要用来与底层进程之间交互。</span></div><div class=\"line\">    <span class=\"comment\">// whoThread 是Launcher的IApplicationThread</span></div><div class=\"line\">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        intent.migrateExtraStreamToClipData();</div><div class=\"line\">        intent.prepareToLeaveProcess();</div><div class=\"line\">        <span class=\"comment\">// 获取到ActivityManagerService远程接口即ActivityManagerProxy，调用</span></div><div class=\"line\">        <span class=\"comment\">// startActivityAsUser的方法</span></div><div class=\"line\">        <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">            .startActivityAsUser(whoThread, who.getBasePackageName(), intent,</div><div class=\"line\">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                    token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                    requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, options, user.getIdentifier());</div><div class=\"line\">        <span class=\"comment\">// 根据返回结果，检测是否成功启动Activity，如果没有抛出异常</span></div><div class=\"line\">        checkStartActivityResult(result, intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Failure from system\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Instrumentation的execStartActivity方法中获得Launcher的IApplicationThread，主要用它与ActivityThread进行进程间通信。获取到ActivityManagerService的远程接口ActivityManagerProxy，调用startActivityAsUser方法。<br>ActivityManagerProxy定义在ActivityManagerNative中<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerNative.java -> ActivityManagerProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 创建ActivityManagerProxy实例</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 单例模式获取到IActivityManager，如果IActivityManager未创建</span></div><div class=\"line\">        <span class=\"comment\">// 则调用create方法创建IActivityManager</span></div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 查找ActivityManagerService</span></div><div class=\"line\">            IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">            <span class=\"comment\">// am 就是ActivityManagerProxy</span></div><div class=\"line\">            IActivityManager am = asInterface(b);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> am;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerProxy</span><span class=\"params\">(IBinder remote)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>调用ActivityManagerProxy的startActivityAsUser方法，通过Binder驱动调用ActivityManagerService的startActivity<br>```java </p>\n<figure class=\"highlight java\"><figcaption><span>ActivityManagerProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage, Intent intent,</span></span></div><div class=\"line\">        String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// mRemote 是个Binder，ServiceManager.getService(\"activity\")返回的binder对象</span></div><div class=\"line\">mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用ActivityManagerNative的onTransact方法。<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerNative.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">        <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> START_ACTIVITY_TRANSACTION:</div><div class=\"line\">    &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        IBinder b = data.readStrongBinder();</div><div class=\"line\">        <span class=\"comment\">// ApplicationThreadProxy</span></div><div class=\"line\">        IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class=\"line\">        ...</div><div class=\"line\">        Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// resultTo</span></div><div class=\"line\">        IBinder resultTo = data.readStrongBinder();</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// ActivityManagerService是ActivityManagerNative的具体实现</span></div><div class=\"line\">        <span class=\"comment\">// startActivity也是由ActivityManagerService来执行。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> result = startActivity(app, callingPackage, intent, resolvedType,</div><div class=\"line\">                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure><br>最终由ActivityManagerService实现调用startActivity<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) &#123;</div><div class=\"line\">    <span class=\"comment\">// 调用startActivityAsUser</span></div><div class=\"line\">    <span class=\"keyword\">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class=\"line\">        resultWho, requestCode, startFlags, profilerInfo, options,</div><div class=\"line\">        UserHandle.getCallingUserId());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityAsUser</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class=\"keyword\">int</span> userId) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//  调用ActivityStackSupervisor的startActivityMayWait</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class=\"number\">1</span>, callingPackage, intent,</div><div class=\"line\">            resolvedType, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">            profilerInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options, <span class=\"keyword\">false</span>, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p><code>ActivityStackSupervisor</code>startActivityMayWait</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityMayWait</span><span class=\"params\">(IApplicationThread caller, <span class=\"keyword\">int</span> callingUid,</span></span></div><div class=\"line\">         String callingPackage, Intent intent, String resolvedType,</div><div class=\"line\">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class=\"line\">         IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> startFlags,</div><div class=\"line\">         ProfilerInfo profilerInfo, WaitResult outResult, Configuration config,</div><div class=\"line\">         Bundle options, <span class=\"keyword\">boolean</span> ignoreTargetSecurity, <span class=\"keyword\">int</span> userId,</div><div class=\"line\">         IActivityContainer iContainer, TaskRecord inTask) &#123;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">// Collect information about the target of the Intent.</span></div><div class=\"line\">    <span class=\"comment\">// 收集MainActivity信息</span></div><div class=\"line\">     ActivityInfo aInfo = resolveActivity(intent, resolvedType, startFlags, profilerInfo, userId);</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">synchronized</span> (mService) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">final</span> ActivityStack stack;</div><div class=\"line\">         <span class=\"keyword\">if</span> (container == <span class=\"keyword\">null</span> || container.mStack.isOnHomeDisplay()) &#123;</div><div class=\"line\">             stack = mFocusedStack;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             stack = container.mStack;</div><div class=\"line\">         &#125;</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">int</span> res = startActivityLocked(caller, intent, resolvedType, aInfo,</div><div class=\"line\">                 voiceSession, voiceInteractor, resultTo, resultWho,</div><div class=\"line\">                 requestCode, callingPid, callingUid, callingPackage,</div><div class=\"line\">                 realCallingPid, realCallingUid, startFlags, options, ignoreTargetSecurity,</div><div class=\"line\">                 componentSpecified, <span class=\"keyword\">null</span>, container, inTask);</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">return</span> res;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(IApplicationThread caller,</span></span></div><div class=\"line\">         Intent intent, String resolvedType, ActivityInfo aInfo,</div><div class=\"line\">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class=\"line\">         IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">         <span class=\"keyword\">int</span> callingPid, <span class=\"keyword\">int</span> callingUid, String callingPackage,</div><div class=\"line\">         <span class=\"keyword\">int</span> realCallingPid, <span class=\"keyword\">int</span> realCallingUid, <span class=\"keyword\">int</span> startFlags, Bundle options,</div><div class=\"line\">         <span class=\"keyword\">boolean</span> ignoreTargetSecurity, <span class=\"keyword\">boolean</span> componentSpecified, ActivityRecord[] outActivity,</div><div class=\"line\">         ActivityContainer container, TaskRecord inTask) &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> err = ActivityManager.START_SUCCESS;</div><div class=\"line\">     <span class=\"comment\">// 指定进程的所有信息</span></div><div class=\"line\">     ProcessRecord callerApp = <span class=\"keyword\">null</span>;        </div><div class=\"line\">     <span class=\"keyword\">if</span> (caller != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         callerApp = mService.getRecordForAppLocked(caller);</div><div class=\"line\">         <span class=\"keyword\">if</span> (callerApp != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             callingPid = callerApp.pid;</div><div class=\"line\">             callingUid = callerApp.info.uid;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     ...</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> userId = aInfo != <span class=\"keyword\">null</span> ? UserHandle.getUserId(aInfo.applicationInfo.uid) : <span class=\"number\">0</span>;</div><div class=\"line\">     <span class=\"comment\">// 历史栈中的实体，表示一个Activity</span></div><div class=\"line\">     ActivityRecord sourceRecord = <span class=\"keyword\">null</span>;</div><div class=\"line\">     ActivityRecord resultRecord = <span class=\"keyword\">null</span>;</div><div class=\"line\">     ... </div><div class=\"line\">     <span class=\"comment\">// 启动标志位</span></div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> launchFlags = intent.getFlags();</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">final</span> ActivityStack resultStack = resultRecord == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : resultRecord.task.stack;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">boolean</span> abort = <span class=\"keyword\">false</span>;</div><div class=\"line\">     ...</div><div class=\"line\">     abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,</div><div class=\"line\">             callingPid, resolvedType, aInfo.applicationInfo);</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">if</span> (abort) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (resultRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             resultStack.sendActivityResultLocked(-<span class=\"number\">1</span>, resultRecord, resultWho, requestCode,</div><div class=\"line\">                     Activity.RESULT_CANCELED, <span class=\"keyword\">null</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"comment\">// We pretend to the caller that it was really started, but</span></div><div class=\"line\">         <span class=\"comment\">// they will just get a cancel result.</span></div><div class=\"line\">         ActivityOptions.abort(options);</div><div class=\"line\">         <span class=\"keyword\">return</span> ActivityManager.START_SUCCESS;</div><div class=\"line\">     &#125;</div><div class=\"line\">     ActivityRecord r = <span class=\"keyword\">new</span> ActivityRecord(mService, callerApp, callingUid, callingPackage,</div><div class=\"line\">             intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,</div><div class=\"line\">             requestCode, componentSpecified, voiceSession != <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>, container, options);</div><div class=\"line\">     ...</div><div class=\"line\">     err = startActivityUncheckedLocked(r, sourceRecord, voiceSession, voiceInteractor,</div><div class=\"line\">             startFlags, <span class=\"keyword\">true</span>, options, inTask);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// startActivityUncheckedLocked</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUncheckedLocked</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></div><div class=\"line\">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, <span class=\"keyword\">int</span> startFlags,</div><div class=\"line\">         <span class=\"keyword\">boolean</span> doResume, Bundle options, TaskRecord inTask) &#123;</div><div class=\"line\">     <span class=\"keyword\">final</span> Intent intent = r.intent;</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUid = r.launchedFromUid;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> launchSingleTop = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP;</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> launchSingleInstance = r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE;</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> launchSingleTask = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK;</div><div class=\"line\">     <span class=\"comment\">// </span></div><div class=\"line\">     <span class=\"keyword\">int</span> launchFlags = intent.getFlags();</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">// 如果启动的Activity没有指明是自启动，则在onPause之前调用onUserLeaving</span></div><div class=\"line\">     <span class=\"comment\">// launchFlags的FLAG_ACTIVITY_NO_USER_ACTION初始值为0，所以mUserLeaving为true</span></div><div class=\"line\">     mUserLeaving = (launchFlags &amp; Intent.FLAG_ACTIVITY_NO_USER_ACTION) == <span class=\"number\">0</span>;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">// 与FLAG_ACTIVITY_NO_USER_ACTION一样intent的flag值为0，所以notTop为null；</span></div><div class=\"line\">     ActivityRecord notTop =</div><div class=\"line\">             (launchFlags &amp; Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP) != <span class=\"number\">0</span> ? r : <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// If the onlyIfNeeded flag is set, then we can do this if the activity</span></div><div class=\"line\">     <span class=\"comment\">// being launched is the same as the one making the call...  or, as</span></div><div class=\"line\">     <span class=\"comment\">// a special case, if we do not know the caller then we count the</span></div><div class=\"line\">     <span class=\"comment\">// current top activity as the caller.</span></div><div class=\"line\">     <span class=\"keyword\">if</span> ((startFlags&amp;ActivityManager.START_FLAG_ONLY_IF_NEEDED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> addingToTask = <span class=\"keyword\">false</span>;</div><div class=\"line\">     TaskRecord reuseTask = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// If the caller is not coming from another activity, but has given us an</span></div><div class=\"line\">     <span class=\"comment\">// explicit task into which they would like us to launch the new activity,</span></div><div class=\"line\">     <span class=\"comment\">// then let's see about doing that.</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (sourceRecord == <span class=\"keyword\">null</span> &amp;&amp; inTask != <span class=\"keyword\">null</span> &amp;&amp; inTask.stack != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         inTask = <span class=\"keyword\">null</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (inTask == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (sourceRecord == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (launchSingleInstance || launchSingleTask) &#123;</div><div class=\"line\">             <span class=\"comment\">// The activity being started is a single instance...  it always</span></div><div class=\"line\">             <span class=\"comment\">// gets launched into its own task.</span></div><div class=\"line\">             <span class=\"comment\">// launchFlags 设为Intent.FLAG_ACTIVITY_NEW_TASK</span></div><div class=\"line\">             launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ActivityInfo newTaskInfo = <span class=\"keyword\">null</span>;</div><div class=\"line\">     Intent newTaskIntent = <span class=\"keyword\">null</span>;</div><div class=\"line\">     ActivityStack sourceStack;</div><div class=\"line\">     <span class=\"keyword\">if</span> (sourceRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (sourceRecord.finishing) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             sourceStack = sourceRecord.task.stack;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         sourceStack = <span class=\"keyword\">null</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> movedHome = <span class=\"keyword\">false</span>;</div><div class=\"line\">     ActivityStack targetStack;</div><div class=\"line\"></div><div class=\"line\">     intent.setFlags(launchFlags);</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> noAnimation = (launchFlags &amp; Intent.FLAG_ACTIVITY_NO_ANIMATION) != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 检索是否存在Task来放Activity；</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">             (launchFlags &amp; Intent.FLAG_ACTIVITY_MULTIPLE_TASK) == <span class=\"number\">0</span>)</div><div class=\"line\">             || launchSingleInstance || launchSingleTask) &#123;</div><div class=\"line\">         <span class=\"comment\">// Activity的启动模式为launchSingleTask</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (inTask == <span class=\"keyword\">null</span> &amp;&amp; r.resultTo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"comment\">// 此时inTask为空 ， r.resultTo为空</span></div><div class=\"line\">             <span class=\"comment\">// 调用findTaskLocked，因为应用第一次启动，所以检索返回结果为null</span></div><div class=\"line\">             ActivityRecord intentActivity = !launchSingleInstance ?</div><div class=\"line\">                     findTaskLocked(r) : findActivityLocked(intent, r.info);</div><div class=\"line\">             <span class=\"keyword\">if</span> (intentActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 ...</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (r.packageName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"comment\">// 如果Activity与当前栈顶的Activity一致，判断是否再次启动。</span></div><div class=\"line\">         ActivityStack topStack = mFocusedStack;</div><div class=\"line\">         ActivityRecord top = topStack.topRunningNonDelayedActivityLocked(notTop);</div><div class=\"line\">         <span class=\"keyword\">if</span> (top != <span class=\"keyword\">null</span> &amp;&amp; r.resultTo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (top.realActivity.equals(r.realActivity) &amp;&amp; top.userId == r.userId) &#123;</div><div class=\"line\">                 ...</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">boolean</span> newTask = <span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">boolean</span> keepCurTransition = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">     TaskRecord taskToAffiliate = launchTaskBehind &amp;&amp; sourceRecord != <span class=\"keyword\">null</span> ?</div><div class=\"line\">             sourceRecord.task : <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 参数r.resultTo为null，表示Launcher不需要等待启动MainActivity的执行结果</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (r.resultTo == <span class=\"keyword\">null</span> &amp;&amp; inTask == <span class=\"keyword\">null</span> &amp;&amp; !addingToTask</div><div class=\"line\">             &amp;&amp; (launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         newTask = <span class=\"keyword\">true</span>;</div><div class=\"line\">         targetStack = computeStackFocus(r, newTask);</div><div class=\"line\">         targetStack.moveToFront(<span class=\"string\">\"startingNewTask\"</span>);</div><div class=\"line\">         <span class=\"comment\">// 创建Task来启动Activity</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (reuseTask == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             r.setTask(targetStack.createTaskRecord(getNextTaskId(),</div><div class=\"line\">                     newTaskInfo != <span class=\"keyword\">null</span> ? newTaskInfo : r.info,</div><div class=\"line\">                     newTaskIntent != <span class=\"keyword\">null</span> ? newTaskIntent : intent,</div><div class=\"line\">                     voiceSession, voiceInteractor, !launchTaskBehind <span class=\"comment\">/* toTop */</span>),</div><div class=\"line\">                     taskToAffiliate);</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125;</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">if</span> (!movedHome) &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> ((launchFlags &amp;</div><div class=\"line\">                     (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME))</div><div class=\"line\">                     == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) &#123;</div><div class=\"line\">                 <span class=\"comment\">// Caller wants to appear on home activity, so before starting</span></div><div class=\"line\">                 <span class=\"comment\">// their own activity we will bring home to the front.</span></div><div class=\"line\">                 r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sourceRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (inTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     mService.grantUriPermissionFromIntentLocked(callingUid, r.packageName,</div><div class=\"line\">             intent, r.getUriPermissionsLocked(), r.userId);</div><div class=\"line\">     ...</div><div class=\"line\">     targetStack.mLastPausedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">     targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options);</div><div class=\"line\">     <span class=\"keyword\">if</span> (!launchTaskBehind) &#123;</div><div class=\"line\">         <span class=\"comment\">// Don't set focus on an activity that's going to the back.</span></div><div class=\"line\">         mService.setFocusedActivityLocked(r, <span class=\"string\">\"startedActivity\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> ActivityManager.START_SUCCESS;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>startActivityUncheckedLocked，从命名上可以猜出来方法执行Activity的检查操作。方法中获取到intent的启动标志，对启动模式重新设置，根据标志检索是否是否需要重新创建的Activity的对象、是否需要创建的任务栈、启动时Activity是否需要等待返回值等。然后调用<code>ActivityStack</code>的startActivityLocked方法。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(ActivityRecord r, <span class=\"keyword\">boolean</span> newTask,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> doResume, <span class=\"keyword\">boolean</span> keepCurTransition, Bundle options) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    TaskRecord task = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!newTask) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place a new activity at top of stack, so it is next to interact</span></div><div class=\"line\">    <span class=\"comment\">// with the user.</span></div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    task = r.task;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Slot the activity into the history stack and proceed</span></div><div class=\"line\">    <span class=\"comment\">// 压入历史栈后处理</span></div><div class=\"line\">    task.addActivityToTop(r);</div><div class=\"line\">    task.setFrontOfTask();</div><div class=\"line\">    r.putInHistory();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isHomeStack() || numActivities() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// We want to show the starting preview window if we are</span></div><div class=\"line\">        <span class=\"comment\">// switching to a new task, or the next activity's process is</span></div><div class=\"line\">        <span class=\"comment\">// not currently running.</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// If this is the first activity, don't do any fancy animations,</span></div><div class=\"line\">        <span class=\"comment\">// because there is nothing for it to animate on top of.</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doResume) &#123;</div><div class=\"line\">        mStackSupervisor.resumeTopActivitiesLocked(<span class=\"keyword\">this</span>, r, options);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>startActivityLocked主要判断是否需要去进行任务切换时的界面操作。<br>接着调用ActivityStackSupervisor的resumeTopActivitiesLocked方法。<br><figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivitiesLocked</span><span class=\"params\">(ActivityStack targetStack, ActivityRecord target,</span></span></div><div class=\"line\">        Bundle targetOptions) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (targetStack == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        targetStack = mFocusedStack;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Do targetStack first.</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isFrontStack(targetStack)) &#123;</div><div class=\"line\">        result = targetStack.resumeTopActivityLocked(target, targetOptions);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着调用ActivityStack的resumeTopActivityLocked方法</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> resumeTopActivityLocked(prev, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</div><div class=\"line\">        <span class=\"comment\">// Don't even start recursing.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Protect against recursion. 保护防止递归</span></div><div class=\"line\">        mStackSupervisor.inResumeTopActivity = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mService.mLockScreenShown == ActivityManagerService.LOCK_SCREEN_LEAVING) &#123;</div><div class=\"line\">            mService.mLockScreenShown = ActivityManagerService.LOCK_SCREEN_HIDDEN;</div><div class=\"line\">            mService.updateSleepIfNeededLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">        result = resumeTopActivityInnerLocked(prev, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        mStackSupervisor.inResumeTopActivity = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 确保栈顶Activity已经处于Resumed状态</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityInnerLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mService.mBooting &amp;&amp; !mService.mBooted) &#123;</div><div class=\"line\">        <span class=\"comment\">//  服务还未启动</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ActivityRecord parent = mActivityContainer.mParentActivity;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((parent != <span class=\"keyword\">null</span> &amp;&amp; parent.state != ActivityState.RESUMED) ||</div><div class=\"line\">            !mActivityContainer.isAttachedLocked()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Do not resume this stack if its parent is not resumed.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    cancelInitializingActivities();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 找到栈顶ActivityRecord</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord next = topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Remember how we'll process this pause/resume situation, and ensure</span></div><div class=\"line\">    <span class=\"comment\">// that the state is reset however we wind up proceeding.</span></div><div class=\"line\">    <span class=\"comment\">// mUserLeaving保存在本地，重新设置为false</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> userLeaving = mStackSupervisor.mUserLeaving;</div><div class=\"line\">    mStackSupervisor.mUserLeaving = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord prevTask = prev != <span class=\"keyword\">null</span> ? prev.task : <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// There are no more activities!</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next.delayedResume = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果栈顶Activity已经处于resume状态，直接返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</div><div class=\"line\">                mStackSupervisor.allResumedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果休眠状态并且没有需要resume的activity，栈顶activity处于暂停状态，直接返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.isSleepingOrShuttingDown()</div><div class=\"line\">            &amp;&amp; mLastPausedActivity == next</div><div class=\"line\">            &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证activity的拥有者已经启动</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.mStartedUsers.get(next.userId) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果activity正在等待停止或休眠，则从停止或休眠队列中移除这个activity</span></div><div class=\"line\">    <span class=\"comment\">// 因为不适应activity了</span></div><div class=\"line\">    mStackSupervisor.mStoppingActivities.remove(next);</div><div class=\"line\">    mStackSupervisor.mGoingToSleepActivities.remove(next);</div><div class=\"line\">    next.sleeping = <span class=\"keyword\">false</span>;</div><div class=\"line\">    mStackSupervisor.mWaitingVisibleActivities.remove(next);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 如果现在正在暂停一个activity，返回等待则进入等待状态。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... </div><div class=\"line\">    mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在activity调用resumed之前需要暂停之前的activity</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> dontWaitForPause = (next.info.flags&amp;ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, <span class=\"keyword\">true</span>, dontWaitForPause);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 开始暂停之前的Activity，mResumedActivity指定启动时的Activity</span></div><div class=\"line\">        pausing |= startPausingLocked(userLeaving, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, dontWaitForPause);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pausing) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// At this point we want to put the upcoming activity's process</span></div><div class=\"line\">        <span class=\"comment\">// at the top of the LRU list, since we know we will be needing it</span></div><div class=\"line\">        <span class=\"comment\">// very soon and it would be a waste to let it get killed if it</span></div><div class=\"line\">        <span class=\"comment\">// happens to be sitting towards the end.</span></div><div class=\"line\">        <span class=\"comment\">// 如果正在暂停之前的activity，现在将要启动的activity的进程放在LRU列表的顶部，因为要很快要需要这个参数</span></div><div class=\"line\">        <span class=\"comment\">// </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (next.app != <span class=\"keyword\">null</span> &amp;&amp; next.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mService.updateLruProcessLocked(next.app, <span class=\"keyword\">true</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 执行Activity暂停操作</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 保存mResumedActivity到本地变量prev中，在本文中mResumedActivity对应的就是Launcher。</div><div class=\"line\">* 调用 Launcher对应的ApplicationThread对象的远程接口，也就是ApplicationThreadProxy。执行</div><div class=\"line\">* ApplicationThreadProxy的schedulePauseActivity方法，经过底层驱动Binder，通知Launcher进入</div><div class=\"line\">* Paused状态。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startPausingLocked</span><span class=\"params\">(<span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">boolean</span> uiSleeping, <span class=\"keyword\">boolean</span> resuming,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> dontWait) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mPausingActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果有暂停中的Activity</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ActivityRecord prev = mResumedActivity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mActivityContainer.mParentActivity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Top level stack, not a child. Look for child stacks.</span></div><div class=\"line\">        mStackSupervisor.pauseChildStacks(prev, userLeaving, uiSleeping, resuming, dontWait);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 将mResumedActivity置空，mResumedActivity赋值给mPausingActivity</span></div><div class=\"line\">    mResumedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    mPausingActivity = prev;</div><div class=\"line\">    mLastPausedActivity = prev;</div><div class=\"line\">    mLastNoHistoryActivity = (prev.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NO_HISTORY) != <span class=\"number\">0</span></div><div class=\"line\">            || (prev.info.flags &amp; ActivityInfo.FLAG_NO_HISTORY) != <span class=\"number\">0</span> ? prev : <span class=\"keyword\">null</span>;</div><div class=\"line\">    prev.state = ActivityState.PAUSING;</div><div class=\"line\">    prev.task.touchActiveTime();</div><div class=\"line\">    clearLaunchTime(prev);</div><div class=\"line\">    <span class=\"comment\">// 启动的Activity</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord next = mStackSupervisor.topRunningActivityLocked();</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev.app != <span class=\"keyword\">null</span> &amp;&amp; prev.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,</div><div class=\"line\">                    userLeaving, prev.configChangeFlags, dontWait);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            mPausingActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mLastPausedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mLastNoHistoryActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mPausingActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">        mLastPausedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">        mLastNoHistoryActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用Launcher的ApplicationThread远程接口ApplicationThreadProxy的schedulePauseActivity方法</p>\n<figure class=\"highlight java\"><figcaption><span>ApplicationThreadProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">schedulePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    Parcel data = Parcel.obtain();</div><div class=\"line\">    data.writeInterfaceToken(IApplicationThread.descriptor);</div><div class=\"line\">    data.writeStrongBinder(token);</div><div class=\"line\">    data.writeInt(finished ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">    data.writeInt(userLeaving ? <span class=\"number\">1</span> :<span class=\"number\">0</span>);</div><div class=\"line\">    data.writeInt(configChanges);</div><div class=\"line\">    data.writeInt(dontReport ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"comment\">// </span></div><div class=\"line\">    mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, <span class=\"keyword\">null</span>,</div><div class=\"line\">            IBinder.FLAG_ONEWAY);</div><div class=\"line\">    data.recycle();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过Binder驱动通知ApplicationThread指定对应的schedulePauseActivity方法。ApplicationThread为ActivityThread的内部类。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThreadjava -> ApplicationThread.java ， H.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">schedulePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) &#123;</div><div class=\"line\">        sendMessage(</div><div class=\"line\">                finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,</div><div class=\"line\">                token,</div><div class=\"line\">                (userLeaving ? <span class=\"number\">1</span> : <span class=\"number\">0</span>) | (dontReport ? <span class=\"number\">2</span> : <span class=\"number\">0</span>),</div><div class=\"line\">                configChanges);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用ActivityThread sendMessage发送Message，在H中处理Message</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj, <span class=\"keyword\">int</span> arg1, <span class=\"keyword\">int</span> arg2, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    Message msg = Message.obtain();</div><div class=\"line\">    msg.what = what;</div><div class=\"line\">    msg.obj = obj;</div><div class=\"line\">    msg.arg1 = arg1;   <span class=\"comment\">// 1</span></div><div class=\"line\">    msg.arg2 = arg2;  <span class=\"comment\">// configChanges</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (async) &#123;</div><div class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mH.sendMessage(msg);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAUNCH_ACTIVITY         = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PAUSE_ACTIVITY          = <span class=\"number\">101</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">case</span> PAUSE_ACTIVITY:</div><div class=\"line\">                ...</div><div class=\"line\">                <span class=\"comment\">// arg1 = 1 , </span></div><div class=\"line\">                handlePauseActivity((IBinder)msg.obj, <span class=\"keyword\">false</span>, (msg.arg1&amp;<span class=\"number\">1</span>) != <span class=\"number\">0</span>, msg.arg2,</div><div class=\"line\">                        (msg.arg1&amp;<span class=\"number\">2</span>) != <span class=\"number\">0</span>);</div><div class=\"line\">                ...</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//  最后调用handlePauseActivity</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) &#123;</div><div class=\"line\">    ActivityClientRecord r = mActivities.get(token);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (userLeaving) &#123;</div><div class=\"line\">            <span class=\"comment\">// 1. 通知Activity，用户将要离开界面</span></div><div class=\"line\">            performUserLeavingActivity(r);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        r.activity.mConfigChangeFlags |= configChanges;</div><div class=\"line\">        <span class=\"comment\">// 2. 调用Activity的onPaused方法。</span></div><div class=\"line\">        performPauseActivity(token, finished, r.isPreHoneycomb());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure any pending writes are now committed.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.isPreHoneycomb()) &#123;</div><div class=\"line\">            QueuedWork.waitToFinish();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Tell the activity manager we have paused.</span></div><div class=\"line\">        <span class=\"comment\">// dontReport = (msg.arg1&amp;2) != 0 ; dontReport的值为false</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!dontReport) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 3. 调用ActivityManager的远程服务接口 ActivityManagerProxy</span></div><div class=\"line\">                <span class=\"comment\">// 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。</span></div><div class=\"line\">                ActivityManagerNative.getDefault().activityPaused(token);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mSomeActivitiesChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ActivityThread在方法<code>schedulePauseActivity</code>只简单的调用了sendMessage()方法。然后调用ActivityThread内部类H的handlePauseActivity方法，在handlePauseActivity中做了以下的任务：1. 将Binder引用的token转成ActivityRecord的远程接口ActivityClientRecord。如果userLeaving为true时，则调用performUserLeavingActivity来通知Activity，用户将要离开界面。3. 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。这里表示启动MainActivity。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityManagerNative.java -> ActivityManagerProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPaused</span><span class=\"params\">(IBinder token)</span> <span class=\"keyword\">throws</span> RemoteException</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        Parcel reply = Parcel.obtain();</div><div class=\"line\">        data.writeInterfaceToken(IActivityManager.descriptor);</div><div class=\"line\">        data.writeStrongBinder(token);</div><div class=\"line\">        mRemote.transact(ACTIVITY_PAUSED_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">        reply.readException();</div><div class=\"line\">        data.recycle();</div><div class=\"line\">        reply.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过Binder驱动调用ActivityManagerService.activityPaused方法<br><figure class=\"highlight java\"><figcaption><span>ActivityManager.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPaused</span><span class=\"params\">(IBinder token)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        ActivityStack stack = ActivityRecord.getStackLocked(token);</div><div class=\"line\">        <span class=\"keyword\">if</span> (stack != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            stack.activityPausedLocked(token, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用ActivityStack的activityPausedLocked 的方法</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPausedLocked</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> timeout)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord r = isInStackLocked(token);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// startPausingLocked时将当前Activity保存在mPausingActivity中。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mPausingActivity == r) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            completePauseLocked(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ... </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPausedLocked</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> timeout)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord r = isInStackLocked(token);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// startPausingLocked时将当前Activity保存在mPausingActivity中。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mPausingActivity == r) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            completePauseLocked(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 完成Activity的暂停任务</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">completePauseLocked</span><span class=\"params\">(<span class=\"keyword\">boolean</span> resumeNext)</span> </span>&#123;</div><div class=\"line\">    ActivityRecord prev = mPausingActivity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        prev.state = ActivityState.PAUSED;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 在activity暂停之前，会暂时冻住屏幕。这时Activity不再可见，则解除冻结状态</span></div><div class=\"line\">        prev.stopFreezingScreenLocked(<span class=\"keyword\">true</span> <span class=\"comment\">/*force*/</span>);</div><div class=\"line\">        mPausingActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// resumeNext值为true</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resumeNext) &#123;</div><div class=\"line\">        <span class=\"comment\">// resume 新的activity</span></div><div class=\"line\">        <span class=\"keyword\">final</span> ActivityStack topStack = mStackSupervisor.getFocusedStack();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mService.isSleepingOrShuttingDown()) &#123;</div><div class=\"line\">            <span class=\"comment\">// 如果没有休眠或关机</span></div><div class=\"line\">            mStackSupervisor.resumeTopActivitiesLocked(topStack, prev, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 恢复按键分发</span></div><div class=\"line\">        prev.resumeKeyDispatchingLocked();</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 栈内容变化时发送通知。</span></div><div class=\"line\">    mService.notifyTaskStackChangedLocked();</div><div class=\"line\">&#125;    </div></pre></td></tr></table></figure>\n<p>在方法completePauseLocked中：如果mPausingActivity不为空，则mPausingActivity需要置空。而mPausingActivity是在之前调用<code>startPausingLocked</code>保存的Launcher的实例，现在不需要这个临时对象了。获取的启动应用的栈信息，调用mStackSupervisor的resumeTopActivitiesLocked方法<br><figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivitiesLocked</span><span class=\"params\">(ActivityStack targetStack, ActivityRecord target,</span></span></div><div class=\"line\">        Bundle targetOptions) &#123;</div><div class=\"line\">    ...     </div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isFrontStack(targetStack)) &#123;</div><div class=\"line\">        result = targetStack.resumeTopActivityLocked(target, targetOptions);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>又执行了ActivityStack的resumeTopActivityLocked方法中。主要用作保护防止无限递归</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Protect against recursion. </span></div><div class=\"line\">        ...</div><div class=\"line\">        result = resumeTopActivityInnerLocked(prev, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityInnerLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    cancelInitializingActivities();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Find the first activity that is not finishing. </span></div><div class=\"line\">    <span class=\"comment\">// 1. 找到栈顶Activity，也就是要启动的Activity。</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord next = topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> userLeaving = mStackSupervisor.mUserLeaving;</div><div class=\"line\">    mStackSupervisor.mUserLeaving = <span class=\"keyword\">false</span>;</div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord prevTask = prev != <span class=\"keyword\">null</span> ? prev.task : <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> isOnHomeDisplay() &amp;&amp;</div><div class=\"line\">                mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next.delayedResume = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">// 2. mResumedActivity此时为空</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</div><div class=\"line\">                mStackSupervisor.allResumedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord nextTask = next.task;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prevTask != <span class=\"keyword\">null</span> &amp;&amp; prevTask.stack == <span class=\"keyword\">this</span> &amp;&amp;</div><div class=\"line\">            prevTask.isOverHomeStack() &amp;&amp; prev.finishing &amp;&amp; prev.frontOfTask) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 休眠状态或没有找到Activity需要执行resume直接返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.isSleepingOrShuttingDown()</div><div class=\"line\">            &amp;&amp; mLastPausedActivity == next</div><div class=\"line\">            &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 暂停Activity已经执行，跳过</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 设置启动信息</span></div><div class=\"line\">    mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// launcher已经暂停，跳过</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> dontWaitForPause = (next.info.flags&amp;ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, <span class=\"keyword\">true</span>, dontWaitForPause);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pausing) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 并不是休眠状态</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.isSleeping() &amp;&amp; mLastNoHistoryActivity != <span class=\"keyword\">null</span> &amp;&amp;</div><div class=\"line\">            !mLastNoHistoryActivity.finishing) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span> &amp;&amp; prev != next) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mStackSupervisor.mWaitingVisibleActivities.contains(prev)</div><div class=\"line\">                &amp;&amp; next != <span class=\"keyword\">null</span> &amp;&amp; !next.nowVisible) &#123;</div><div class=\"line\">            <span class=\"comment\">// 将要启动的Acitivity添加等待显示的列表中</span></div><div class=\"line\">            mStackSupervisor.mWaitingVisibleActivities.add(prev);</div><div class=\"line\">            </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果之前的Acitivity消失了，执行这段代码。</span></div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Launching this app's activity, make sure the app is no longer</span></div><div class=\"line\">    <span class=\"comment\">// considered stopped.</span></div><div class=\"line\">    <span class=\"comment\">// 启动app，</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        AppGlobals.getPackageManager().setPackageStoppedState(</div><div class=\"line\">                next.packageName, <span class=\"keyword\">false</span>, next.userId); <span class=\"comment\">/* <span class=\"doctag\">TODO:</span> Verify if correct userid */</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e1) &#123;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">       ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 开始启动新的Activity，通知WindowManager之前的Activity将会很快消失。这样</span></div><div class=\"line\">    <span class=\"comment\">// 在计算需求的屏幕方向时忽略它</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> anim = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 为Activity准备Window基本参数配置，是否显示启动动画等</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (prev.finishing) &#123;</div><div class=\"line\">            ... </div><div class=\"line\">            <span class=\"keyword\">if</span> (mNoAnimActivities.contains(next)) &#123;</div><div class=\"line\">                anim = <span class=\"keyword\">false</span>;</div><div class=\"line\">                ...</div><div class=\"line\">            &#125;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 执行resume时的动画参数</span></div><div class=\"line\">    Bundle resumeAnimOptions = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (anim) &#123;</div><div class=\"line\">        <span class=\"comment\">// </span></div><div class=\"line\">        ActivityOptions opts = next.getOptionsForTargetActivityLocked();</div><div class=\"line\">        <span class=\"keyword\">if</span> (opts != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            resumeAnimOptions = opts.toBundle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 3. 获取最近的Activity栈信息</span></div><div class=\"line\">    ActivityStack lastStack = mStackSupervisor.getLastStack();</div><div class=\"line\">    <span class=\"keyword\">if</span> (next.app != <span class=\"keyword\">null</span> &amp;&amp; next.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 因为是从Launcher中第一次启动程序，所以程序没有这些进程和主线程信息。</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 需要重启Activity：如正常启动程序或闪退后启动程序</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!next.hasBeenLaunched) &#123;</div><div class=\"line\">            <span class=\"comment\">// 之前没有启动过</span></div><div class=\"line\">            next.hasBeenLaunched = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 开始执行应用程序的进程和ActivityThread等重要参数的初始化操作</span></div><div class=\"line\">        mStackSupervisor.startSpecificActivityLocked(next, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>resumeTopActivityInnerLocked中执行的任务<br>1）取出栈顶Activity，也就是要启动的Activity。<br>2）Launcher此时已经处于Pasued状态，所以此时mResumedActivity为null，mLastPausedActivity为Launcher。<br>3）因为应用还未启动所以MainActivity的ActivityRecord的app和thread属性还未初始化，都为空，则调用ActivityStackSupervisor的startSpecificActivityLocked方法初始化应用的重要变量：ActivityThread等。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig) &#123;</div><div class=\"line\">    <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">    <span class=\"comment\">// activity的application是否已经运行</span></div><div class=\"line\">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">            r.info.applicationInfo.uid, <span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">    r.task.stack.setLaunchTime(r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果程序已经运行了，则执行realStartActivityLocked的流程</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            realStartActivityLocked(r, app, andResume, checkConfig);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 因为这时的应用还未启动则执行startProcessLocked方法，开启新的进程</span></div><div class=\"line\">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">            <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为首次的应用，所以取到的ProcessRecord为null。默认情况下，ActivityRecord中的进程名processName对应的就是在<code>AndroidManifest</code>中声明包名。调用ActivityManagerService的startProcessLocked方法来执行初始化任务。<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> ProcessRecord <span class=\"title\">startProcessLocked</span><span class=\"params\">(String processName, ApplicationInfo info,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> knownToBeDead, <span class=\"keyword\">int</span> intentFlags, String hostingType, ComponentName hostingName,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> allowWhileBooting, <span class=\"keyword\">boolean</span> isolated, <span class=\"keyword\">int</span> isolatedUid, <span class=\"keyword\">boolean</span> keepIfLarge,</div><div class=\"line\">        String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    ProcessRecord app;</div><div class=\"line\">    <span class=\"comment\">// isolated为true</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!isolated) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 如果是单独进程，则不能重用已存在的进程</span></div><div class=\"line\">        app = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 如果存在一个Application；</span></div><div class=\"line\">    <span class=\"comment\">// 调用者不认为已经死亡或没有线程对象时我们认为没有崩溃；</span></div><div class=\"line\">    <span class=\"comment\">// 或分配了一个进程id时，则认为正在启动或已经运行；</span></div><div class=\"line\">    <span class=\"comment\">// 这三种情况下，不会做任何事</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.pid &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!knownToBeDead || app.thread == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 已经运行App或等待出现（已经有进程id，但是还没有线程），则保留应用</span></div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"comment\">// 如果是进程的新包，则添加新包到列表中</span></div><div class=\"line\">            app.addPackage(info.packageName, info.versionCode, mProcessStats);</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">return</span> app;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// app添加到之前的进程中，则清空进程</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// host name</span></div><div class=\"line\">    String hostingNameStr = hostingName != <span class=\"keyword\">null</span></div><div class=\"line\">            ? hostingName.flattenToShortString() : <span class=\"keyword\">null</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 为app 创建新的进程</span></div><div class=\"line\">        app = newProcessRecordLocked(info, processName, isolated, isolatedUid);</div><div class=\"line\">        <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        app.crashHandler = crashHandler;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果是进程的新包，则添加新包到列表中</span></div><div class=\"line\">        app.addPackage(info.packageName, info.versionCode, mProcessStats);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 推迟进程启动直到系统准备好。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mProcessesReady</div><div class=\"line\">            &amp;&amp; !isAllowedWhileBooting(info)</div><div class=\"line\">            &amp;&amp; !allowWhileBooting) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 开启进程</span></div><div class=\"line\">    startProcessLocked(</div><div class=\"line\">            app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> (app.pid != <span class=\"number\">0</span>) ? app : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> ProcessRecord <span class=\"title\">newProcessRecordLocked</span><span class=\"params\">(ApplicationInfo info, String customProcess,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> isolated, <span class=\"keyword\">int</span> isolatedUid) &#123;</div><div class=\"line\">    <span class=\"comment\">// 进程命名 ： processName+uid</span></div><div class=\"line\">    String proc = customProcess != <span class=\"keyword\">null</span> ? customProcess : info.processName;</div><div class=\"line\">    BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> userId = UserHandle.getUserId(info.uid);</div><div class=\"line\">    <span class=\"keyword\">int</span> uid = info.uid;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isolated) &#123;</div><div class=\"line\">        <span class=\"comment\">// isolatedUid 为 0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (isolatedUid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> stepsLeft = Process.LAST_ISOLATED_UID - Process.FIRST_ISOLATED_UID + <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                ...</div><div class=\"line\">                uid = UserHandle.getUid(userId, mNextIsolatedProcessUid);</div><div class=\"line\">                mNextIsolatedProcessUid++;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mIsolatedProcesses.indexOfKey(uid) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// No process for this uid, use it.</span></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            uid = isolatedUid;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">final</span> ProcessRecord r = <span class=\"keyword\">new</span> ProcessRecord(stats, info, proc, uid);</div><div class=\"line\">    ...</div><div class=\"line\">    addProcessNameLocked(r);</div><div class=\"line\">    <span class=\"keyword\">return</span> r;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addProcessNameLocked</span><span class=\"params\">(ProcessRecord proc)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 清空旧进程</span></div><div class=\"line\">    ProcessRecord old = removeProcessNameLocked(proc.processName, proc.uid);</div><div class=\"line\">    <span class=\"keyword\">if</span> (old == proc &amp;&amp; proc.persistent) &#123;</div><div class=\"line\">        <span class=\"comment\">// We are re-adding a persistent process.  Whatevs!  Just leave it there.</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// mProcessNames添加进程信息</span></div><div class=\"line\">    mProcessNames.put(proc.processName, proc.uid, proc);</div><div class=\"line\">    <span class=\"keyword\">if</span> (proc.isolated) &#123;</div><div class=\"line\">        mIsolatedProcesses.put(proc.uid, proc);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>ActivityManagerService的startProcessLocked方法：检查是否有对应的进程存在，如果没有进程（如启动新应用时），则<br>newProcessRecordLocked初始化进程基本参数：pid，uid，进程名等等。并保存在mProcessNames全局变量中。然后执行<code>startProcessLocked</code>方法，进入下一步。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityManagerService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startProcessLocked</span><span class=\"params\">(ProcessRecord app, String hostingType,</span></span></div><div class=\"line\">        String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (app.pid &gt; <span class=\"number\">0</span> &amp;&amp; app.pid != MY_PID) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        app.setPid(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    mProcessesOnHold.remove(app);</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">int</span> uid = app.uid;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] gids = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> mountExternal = Zygote.MOUNT_EXTERNAL_NONE;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!app.isolated) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</div><div class=\"line\">                    &amp;&amp; mTopComponent != <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; app.processName.equals(mTopComponent.getPackageName())) &#123;</div><div class=\"line\">                uid = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL</div><div class=\"line\">                    &amp;&amp; (app.info.flags&amp;ApplicationInfo.FLAG_FACTORY_TEST) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                uid = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ... </div><div class=\"line\">        <span class=\"comment\">// debug 标志</span></div><div class=\"line\">        <span class=\"keyword\">int</span> debugFlags = <span class=\"number\">0</span>;</div><div class=\"line\">        ...</div><div class=\"line\">        String requiredAbi = (abiOverride != <span class=\"keyword\">null</span>) ? abiOverride : app.info.primaryCpuAbi;</div><div class=\"line\">        <span class=\"keyword\">if</span> (requiredAbi == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            requiredAbi = Build.SUPPORTED_ABIS[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        String instructionSet = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (app.info.primaryCpuAbi != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instructionSet = VMRuntime.getInstructionSet(app.info.primaryCpuAbi);</div><div class=\"line\">        &#125;</div><div class=\"line\">        app.gids = gids;</div><div class=\"line\">        app.requiredAbi = requiredAbi;</div><div class=\"line\">        app.instructionSet = instructionSet;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Start the process.  It will either succeed and return a result containing</span></div><div class=\"line\">        <span class=\"comment\">// the PID of the new process, or else throw a RuntimeException.</span></div><div class=\"line\">        <span class=\"comment\">// 启动进程，成功则返回含有新进程pid信息的结构，否则抛出异常。</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> isActivityProcess = (entryPoint == <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"comment\">// \"android.app.ActivityThread\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (entryPoint == <span class=\"keyword\">null</span>) entryPoint = <span class=\"string\">\"android.app.ActivityThread\"</span>;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 创建新的进程，</span></div><div class=\"line\">        Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class=\"line\">                app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class=\"line\">                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class=\"line\">                app.info.dataDir, entryPointArgs);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">        </div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Process的start方法向Zygote发送请求，传入”android.app.ActivityThread”字符串参数，通过Zygote执行fork子进程，初始化应用最终调用ActivityThread的main方法。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    SamplingProfilerIntegration.start();</div><div class=\"line\">    ...</div><div class=\"line\">    Environment.initForCurrentUser();</div><div class=\"line\">    ...</div><div class=\"line\">    AndroidKeyStoreProvider.install();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">    <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">    <span class=\"comment\">// 初始化MainLooper</span></div><div class=\"line\">    Looper.prepareMainLooper();</div><div class=\"line\">    <span class=\"comment\">// 创建ActivityThread</span></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">    <span class=\"comment\">// attach 调用attach方法</span></div><div class=\"line\">    thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">// 主线程的sMainThreadHandler</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sMainThreadHandler = thread.getHandler();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 开启主线程循环</span></div><div class=\"line\">    Looper.loop();</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">    sCurrentActivityThread = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// system值为false</span></div><div class=\"line\">    mSystemThread = system;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!system) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\">        <span class=\"keyword\">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 调用ActivityManagerProxy进行远程通信。</span></div><div class=\"line\">            mgr.attachApplication(mAppThread);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">            <span class=\"comment\">// Ignore</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 不能设置Application对象。如果系统崩溃了，直接结束。</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ActivityThread的main方法是整个应用程序启动的入口。执行了ActivityThread、主线程消息Looper的初始化操作。然后调用ActivityManagerProxy的attachApplication方法通过Binder驱动通知ActivityManagerService的attachApplication执行应用启动的后续操作。<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerService</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        attachApplicationLocked(thread, callingPid);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> pid) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Find the application record that is being attached...  either via</span></div><div class=\"line\">    <span class=\"comment\">// the pid if we are running in multiple processes, or just pull the</span></div><div class=\"line\">    <span class=\"comment\">// next app record if we are emulating process with anonymous threads.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 检索需要附加的application信息。</span></div><div class=\"line\">    <span class=\"comment\">// 1. 运行在多进程中pid信息;2. 或拉取用匿名线程模拟的进程启动的app信息。</span></div><div class=\"line\">    ProcessRecord app;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid != MY_PID &amp;&amp; pid &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mPidsSelfLocked) &#123;</div><div class=\"line\">            app = mPidsSelfLocked.get(pid);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        app = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 未找到application</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If this application record is still attached to a previous</span></div><div class=\"line\">    <span class=\"comment\">// process, clean it up now.</span></div><div class=\"line\">    <span class=\"comment\">// 如果application record仍附加在之前的进程，则结束application</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleAppDiedLocked(app, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 进程名：</span></div><div class=\"line\">    <span class=\"keyword\">final</span> String processName = app.processName;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        AppDeathRecipient adr = <span class=\"keyword\">new</span> AppDeathRecipient(</div><div class=\"line\">                app, pid, thread);</div><div class=\"line\">        thread.asBinder().linkToDeath(adr, <span class=\"number\">0</span>);</div><div class=\"line\">        app.deathRecipient = adr;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 激活进程状态</span></div><div class=\"line\">    app.makeActive(thread, mProcessStats);</div><div class=\"line\">    app.curAdj = app.setAdj = -<span class=\"number\">100</span>;</div><div class=\"line\">    app.curSchedGroup = app.setSchedGroup = Process.THREAD_GROUP_DEFAULT;</div><div class=\"line\">    app.forcingToForeground = <span class=\"keyword\">null</span>;</div><div class=\"line\">    updateProcessForegroundLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">    app.hasShownUi = <span class=\"keyword\">false</span>;</div><div class=\"line\">    app.debugging = <span class=\"keyword\">false</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">boolean</span> normalMode = mProcessesReady || isAllowedWhileBooting(app.info);</div><div class=\"line\">    List&lt;ProviderInfo&gt; providers = normalMode ? generateApplicationProvidersLocked(app) : <span class=\"keyword\">null</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        ApplicationInfo appInfo = app.instrumentationInfo != <span class=\"keyword\">null</span></div><div class=\"line\">                ? app.instrumentationInfo : app.info;</div><div class=\"line\">        app.compat = compatibilityInfoForPackageLocked(appInfo);</div><div class=\"line\">        <span class=\"keyword\">if</span> (profileFd != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            profileFd = profileFd.dup();</div><div class=\"line\">        &#125;</div><div class=\"line\">        ProfilerInfo profilerInfo = profileFile == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span></div><div class=\"line\">                : <span class=\"keyword\">new</span> ProfilerInfo(profileFile, profileFd, samplingInterval, profileAutoStop);</div><div class=\"line\">        <span class=\"comment\">// 1. 初始化应用中对应系统信息，</span></div><div class=\"line\">        thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</div><div class=\"line\">                profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</div><div class=\"line\">                app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,</div><div class=\"line\">                enableTrackAllocation, isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                <span class=\"keyword\">new</span> Configuration(mConfiguration), app.compat,</div><div class=\"line\">                getCommonServicesLocked(app.isolated),</div><div class=\"line\">                mCoreSettingsObserver.getCoreSettingsLocked());</div><div class=\"line\">        updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">boolean</span> badApp = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> didSomething = <span class=\"keyword\">false</span>;</div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"comment\">// 查看进程中是否有栈顶Activity等待运行</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (normalMode) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 2. 开始执行应用的MainActivity的启动操作。</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</div><div class=\"line\">                didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">           ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 查看进程中是否要运行的Service</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= mServices.attachApplicationLocked(app, processName);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 查看进程中是否有要运行的Broadcast</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= sendPendingBroadcastsLocked(app);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>attachApplicationLocked中做了两个重要的事情</p>\n<p>1）bindApplication：完成Application的实例化操作。通过Binder机制调用ApplicationThread的bindApplication，又会经过Handler发送Application绑定的操作，通过mInstrumentation来完成Application实例化，最后调用Application的onCreate()方法</p>\n<p>2）attachApplicationLocked：接着步骤1）查找栈顶的Activity，如果存在MainActivity。则调用ActivityStackSupervisor的attachApplicationLocked方法执行启动Activity的任务。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 查找需要启动的Activity。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(ProcessRecord app)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> String processName = app.processName;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> didSomething = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">// 对所有任务栈循环</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> displayNdx = mActivityDisplays.size() - <span class=\"number\">1</span>; displayNdx &gt;= <span class=\"number\">0</span>; --displayNdx) &#123;</div><div class=\"line\">        ArrayList&lt;ActivityStack&gt; stacks = mActivityDisplays.valueAt(displayNdx).mStacks;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> stackNdx = stacks.size() - <span class=\"number\">1</span>; stackNdx &gt;= <span class=\"number\">0</span>; --stackNdx) &#123;</div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            <span class=\"keyword\">final</span> ActivityStack stack = stacks.get(stackNdx);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isFrontStack(stack)) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 如果是最前显示的栈，获取栈顶Activity的信息</span></div><div class=\"line\">            ActivityRecord hr = stack.topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (hr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (hr.app == <span class=\"keyword\">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</div><div class=\"line\">                        &amp;&amp; processName.equals(hr.processName)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// 启动栈顶Activity</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (realStartActivityLocked(hr, app, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>)) &#123;</div><div class=\"line\">                            didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                        ...</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> didSomething;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">        ProcessRecord app, <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</div><div class=\"line\">        <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (andResume) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    r.app = app;</div><div class=\"line\">    app.waitingToKill = <span class=\"keyword\">null</span>;</div><div class=\"line\">    r.launchCount++;</div><div class=\"line\">    r.lastLaunchTime = SystemClock.uptimeMillis();</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">int</span> idx = app.activities.indexOf(r);</div><div class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        app.activities.add(r);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord task = r.task;</div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityStack stack = task.stack;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        List&lt;ResultInfo&gt; results = <span class=\"keyword\">null</span>;</div><div class=\"line\">        List&lt;ReferrerIntent&gt; newIntents = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (andResume) &#123;</div><div class=\"line\">            results = r.results;</div><div class=\"line\">            newIntents = r.newIntents;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (r.isHomeActivity() &amp;&amp; r.isNotResolverActivity()) &#123;</div><div class=\"line\">            <span class=\"comment\">// Home process is the root process of the task.</span></div><div class=\"line\">            mService.mHomeProcess = task.mActivities.get(<span class=\"number\">0</span>).app;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        r.sleeping = <span class=\"keyword\">false</span>;</div><div class=\"line\">        r.forceNewConfig = <span class=\"keyword\">false</span>;</div><div class=\"line\">        mService.showAskCompatModeDialogLocked(r);</div><div class=\"line\">        r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);</div><div class=\"line\">        ProfilerInfo profilerInfo = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mService.mProfileApp != <span class=\"keyword\">null</span> &amp;&amp; mService.mProfileApp.equals(app.processName)) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (andResume) &#123;</div><div class=\"line\">            app.hasShownUi = <span class=\"keyword\">true</span>;</div><div class=\"line\">            app.pendingUiClean = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 启动Activity</span></div><div class=\"line\">        app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                System.identityHashCode(r), r.info, <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                <span class=\"keyword\">new</span> Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class=\"line\">                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class=\"line\">                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>遍历所有Activity的任务找到最前显示的Activity的栈，取栈顶的Activity执行真正的Activity启动操作。同样需要Binder进行进程间通讯通知ApplicationThread执行scheduleLaunchActivity任务。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread.java -> ApplicationThread.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></div><div class=\"line\">            ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class=\"line\">            CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class=\"line\">            <span class=\"keyword\">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class=\"line\">            List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward, ProfilerInfo profilerInfo) &#123;</div><div class=\"line\"></div><div class=\"line\">        updateProcessState(procState, <span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        ActivityClientRecord r = <span class=\"keyword\">new</span> ActivityClientRecord();</div><div class=\"line\"></div><div class=\"line\">        r.token = token;</div><div class=\"line\">        r.ident = ident;</div><div class=\"line\">        r.intent = intent;</div><div class=\"line\">        r.referrer = referrer;</div><div class=\"line\">        r.voiceInteractor = voiceInteractor;</div><div class=\"line\">        r.activityInfo = info;</div><div class=\"line\">        r.compatInfo = compatInfo;</div><div class=\"line\">        r.state = state;</div><div class=\"line\">        r.persistentState = persistentState;</div><div class=\"line\"></div><div class=\"line\">        r.pendingResults = pendingResults;</div><div class=\"line\">        r.pendingIntents = pendingNewIntents;</div><div class=\"line\"></div><div class=\"line\">        r.startsNotResumed = notResumed;</div><div class=\"line\">        r.isForward = isForward;</div><div class=\"line\"></div><div class=\"line\">        r.profilerInfo = profilerInfo;</div><div class=\"line\"></div><div class=\"line\">        r.overrideConfig = overrideConfig;</div><div class=\"line\">        updatePendingConfiguration(curConfig);</div><div class=\"line\">        <span class=\"comment\">// 发送启动的Activity的消息</span></div><div class=\"line\">        sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">case</span> LAUNCH_ACTIVITY: &#123;</div><div class=\"line\">                ...</div><div class=\"line\">                <span class=\"keyword\">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class=\"line\">                ...</div><div class=\"line\">                handleLaunchActivity(r, <span class=\"keyword\">null</span>);</div><div class=\"line\">                ...</div><div class=\"line\">            &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;   </div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    mSomeActivitiesChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 启动Activity前初始化WindowManager的全局属性</span></div><div class=\"line\">    WindowManagerGlobal.initialize();</div><div class=\"line\">    <span class=\"comment\">// 1. 执行Activity的启动操作</span></div><div class=\"line\">    Activity a = performLaunchActivity(r, customIntent);</div><div class=\"line\">    <span class=\"comment\">// 启动成功</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        r.createdConfig = <span class=\"keyword\">new</span> Configuration(mConfiguration);</div><div class=\"line\">        <span class=\"comment\">// 2. 执行Activity的resume操作</span></div><div class=\"line\">        handleResumeActivity(r.token, <span class=\"keyword\">false</span>, r.isForward,</div><div class=\"line\">                !r.activity.mFinished &amp;&amp; !r.startsNotResumed);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            r.paused = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 出现异常时直接结束Activity</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先调用performLaunchActivity启动Activity，方法中执行Activity的onCreate()和start()方法。如果启动成功即返回的Activity不为null，则继续执行handleResumeActivity方法，方法中完成Activity调用onResume方法，完成整个Activity启动的过程。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Activity <span class=\"title\">performLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ActivityInfo aInfo = r.activityInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (r.packageInfo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class=\"line\">                Context.CONTEXT_INCLUDE_CODE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 收集启动的Activity信息。</span></div><div class=\"line\">    <span class=\"comment\">// 创建Activity的相关组件</span></div><div class=\"line\">    ComponentName component = r.intent.getComponent();</div><div class=\"line\">    <span class=\"keyword\">if</span> (component == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        component = r.intent.resolveActivity(</div><div class=\"line\">            mInitialApplication.getPackageManager());</div><div class=\"line\">        r.intent.setComponent(component);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (r.activityInfo.targetActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        component = <span class=\"keyword\">new</span> ComponentName(r.activityInfo.packageName,</div><div class=\"line\">                r.activityInfo.targetActivity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Activity activity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 用ClassLoader加载MainActivity。实例化MainActivity</span></div><div class=\"line\">        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class=\"line\">        activity = mInstrumentation.newActivity(</div><div class=\"line\">                cl, component.getClassName(), r.intent);</div><div class=\"line\">        ...</div><div class=\"line\">        r.intent.setExtrasClassLoader(cl);</div><div class=\"line\">        r.intent.prepareToEnterProcess();</div><div class=\"line\">        <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            r.state.setClassLoader(cl);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Application app = r.packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 创建Activity上下文信息。</span></div><div class=\"line\">            Context appContext = createBaseContextForActivity(r, activity);</div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class=\"line\">            Configuration config = <span class=\"keyword\">new</span> Configuration(mCompatConfiguration);</div><div class=\"line\">            ...</div><div class=\"line\"></div><div class=\"line\">            activity.attach(appContext, <span class=\"keyword\">this</span>, getInstrumentation(), r.token,</div><div class=\"line\">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class=\"line\">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class=\"line\">                    r.referrer, r.voiceInteractor);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (customIntent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                activity.mIntent = customIntent;</div><div class=\"line\">            &#125;</div><div class=\"line\">            r.lastNonConfigurationInstances = <span class=\"keyword\">null</span>;</div><div class=\"line\">            activity.mStartedActivity = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> theme = r.activityInfo.getThemeResource();</div><div class=\"line\">            <span class=\"keyword\">if</span> (theme != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                activity.setTheme(theme);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"comment\">// 调用callActivityOnCreate方法</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (r.isPersistable()) &#123;</div><div class=\"line\">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ...</div><div class=\"line\">            r.activity = activity;</div><div class=\"line\">            r.stopped = <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                <span class=\"comment\">// 调用start方法</span></div><div class=\"line\">                activity.performStart();</div><div class=\"line\">                r.stopped = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                <span class=\"comment\">// 如果是异常恢复则调用onRestoreInstanceState方法来恢复状态</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (r.isPersistable()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span> || r.persistentState != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</div><div class=\"line\">                                r.persistentState);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"comment\">// </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (r.isPersistable()) &#123;</div><div class=\"line\">                    mInstrumentation.callActivityOnPostCreate(activity, r.state,</div><div class=\"line\">                            r.persistentState);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class=\"line\">                &#125;</div><div class=\"line\">                ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        r.paused = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"comment\">// 绑定token</span></div><div class=\"line\">        mActivities.put(r.token, r);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SuperNotCalledException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> activity;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实例化Activity的组件信息，通过ClassLoader加载Activity，创建上下文信息附加到Activity中，然后由Instrumentation调用callActivityOnCreate等方法完成Activity启动时的生命周期方法，如onCreate()、onStart()等。<br><figure class=\"highlight java\"><figcaption><span>Instrumentation.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnCreate</span><span class=\"params\">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    prePerformCreate(activity);</div><div class=\"line\">    <span class=\"comment\">// 调用Activity的onCreate </span></div><div class=\"line\">    activity.performCreate(icicle);</div><div class=\"line\">    postPerformCreate(activity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到此，Android的应用程序启动与Activity相关的流程就完成了。<br>在整个流程中几个重要的类需要注意</p>\n<ul>\n<li><p><code>ActivityManagerNative</code> ：是Binder的子类，是底层Binder驱动在Java类中的实现。因为是抽象类，所以具体实现由ActivityManagerService来完成。</p>\n</li>\n<li><p><code>ActivityManagerService</code>：简称AMS，是Android中最核心的服务，主要负责Android的四大组件的启动、切换、是调度和应用进程的管理和调度工作（如Activity的生命周期控制）。在系统启动的时候完成AMS的注册。</p>\n</li>\n<li><p><code>ActivityManagerProxy</code> ：是ActivityManagerService的远程代理，客户端调用ActivityManagerProxy的相关方法通过Binder机制实现IPC，完成与ActivityManagerService通信交互任务。</p>\n</li>\n<li><p><code>ActivityThread</code> ：Application的入口，从main方法开始创建应用相关的核心功能。如主线程的消息循环，Application初始化，绑定Application相关的服务等等，同时控制组件的生命周期操作。对应Application的主线程。</p>\n</li>\n<li><p><code>ApplicationtThreadNative</code> ：与<code>ActivityManagerNative</code>一样也是Binder子类。具体实现由ApplicationThread完成。</p>\n</li>\n<li><p><code>ApplicationThread</code>：完成AMS与ActivityThread之间的通信。</p>\n</li>\n<li><p><code>ApplicationThreadProxy</code> ：是ApplicationThread远程接口代理。负责与客户端ApplicationThread通讯</p>\n</li>\n</ul>\n<ul>\n<li><p><code>Instrumentation</code> ：每个应用绑定唯一的一个Instrumentation，每个Activity都一个对该对象的引用。ActivityThread通过Instrumentation来控制Activity的生命周期。</p>\n</li>\n<li><p><code>ActivityStackSupervisor</code>： ActivityStack的超级管理员。</p>\n</li>\n<li><p><code>ActivityStack</code> ：用于保存Activity的栈，决定是否要启动新的进程。</p>\n</li>\n<li><p><code>ActivityRecord</code> ：用于Activity的信息存储，包括状态、进程名等。</p>\n</li>\n<li><p><code>TaskRecord</code> ：Android中的Task的具体实现。记录ActivityRecord的任务栈。</p>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://developer.android.com/guide/components/activities.html\" target=\"_blank\" rel=\"external\">Android Developer Activities</a></p>\n<p><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/9294285\" target=\"_blank\" rel=\"external\">Activity的启动方式和flag详解</a></p>\n<p><a href=\"http://blog.csdn.net/liuhe688/article/details/9494411\" target=\"_blank\" rel=\"external\">Android 基础</a></p>\n<p><a href=\"http://blog.csdn.net/innost/article/details/47317823\" target=\"_blank\" rel=\"external\">深入理解Java Binder和MessageQueue</a></p>\n<p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6689748\" target=\"_blank\" rel=\"external\">Android应用程序启动过程源代码分析</a></p>\n<p><a href=\"http://blog.csdn.net/innost/article/details/47208049\" target=\"_blank\" rel=\"external\">深入理解Binder</a></p>\n<p><a href=\"http://www.jianshu.com/p/6037f6fda285\" target=\"_blank\" rel=\"external\">【凯子哥带你学Framework】Activity启动过程全解析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Activity是Android四个基本组件之一，主要用作Application的界面展示和交互。Activity可以说是Android中应用最多的组件，因此有必要掌握关于Activity的知识。如：Activity的生命周期，Activity的启动模式，更深层次的如Activity的创建过程以及Actvity生命周期对应的方法是如何调用的。</p>\n<h1 id=\"一、Activity的生命周期\"><a href=\"#一、Activity的生命周期\" class=\"headerlink\" title=\"一、Activity的生命周期\"></a>一、Activity的生命周期</h1><h2 id=\"1-正常生命周期\"><a href=\"#1-正常生命周期\" class=\"headerlink\" title=\"1.正常生命周期\"></a>1.正常生命周期</h2><p>一个Activity正常的流程如下图：</p>\n<div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467529027/android/activity_lifecycle.png\" style=\"width:50%\"><br></image></div>\n\n<p>1.Activity的完整生命周期：从onCreate()开始到onDestory()结束。Activity在onCreate()中完成一系列初始化的工作，如完成界面布局资源的加载，初始化Activity的需要的数据等等。在onDestory()中释放所有包含的资源。如在结束Actviity时，如果Activity中还有未完成的数据加载的工作，就需要在onDestory()中或之前及时结束。</p>\n<p>2.Activity的<code>可见</code>生命周期：<code>可见</code>生命周期在onStart()与onStop()之间。这段周期中，用户可以看到activity出现在屏幕上，并在onResume()之后，用户可以与界面交互了。当前Activity调用onStop()后，则不再可见，如启动一个新的Activity。在这段生命周期中，你可以添加资源到activity中，向用户展示。如：你在onStart中注册了一个广播，来更新你的UI，然后当activity不可见时，在onStop()中注销这个广播，释放广播资源。在activity整个生命周期中，onStart()和onStop()可能会多次调用，因为activity会在可见和不可见之间多次变化。注：onStart()和onStop()中不要做耗时操作，影响Actvitiy的<br>显示与停止。</p>\n<p>3.Activity前台展示时的生命周期：这段生命周期在调用onResume()和onPause()之间。这段周期，当前Actvitiy位于所有其他Activity顶部（因为Actvitiy就是保存在栈形式的结构中）。Actviity会频繁地在前台的进入和退出之间交互，比如：当回到Android的Home页面、设备处于休眠状态或显示Dialog时，都会调用onPause()，停止当前Actvity的前台状态。因为Actvitiy比较频繁在前台展示的状态交互，在这两方法中，不能进行耗时任务，也是因为新的Actvitiy在显示时，需要暂停前一个Actvitiy的执行，才会调用本身onResume()方法。</p>\n<h2 id=\"2-异常时的生命周期\"><a href=\"#2-异常时的生命周期\" class=\"headerlink\" title=\"2.异常时的生命周期\"></a>2.异常时的生命周期</h2><p>这里还需要考虑到，当系统内存不够用时或旋转屏幕时，Activity会经历哪些生命周期？</p>\n<div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467533421/android/restore_instance.png\" style=\"width:50%\"><br></image></div>\n\n<p>当系统在内存不够用的时候，系统会销毁后台的Activity以来提供足够内存资源给前台的Actvitiy使用，所以在这种情况下，后台的Activity已经被销毁，回到前台时，系统不仅仅只调用onResume()等方法，系统必须重新创建Activity对象。然而用户不会意识到系统销毁了之前Actviity并重新创建了一个新的。因此开发时某时候需要恢复到之前Actvitiy状态：包括数据、界面资源状态等。这时候需要你的Activity覆写Actvity的 onSaveInstanceState()方法，来存储Activity销毁时的数据。</p>\n<figure class=\"highlight java\"><figcaption><span>Actvity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个方法在onStop()之前调用。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 委托Window保存数据</span></div><div class=\"line\">    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());</div><div class=\"line\">    Parcelable p = mFragments.saveAllState();</div><div class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        outState.putParcelable(FRAGMENTS_TAG, p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    getApplication().dispatchActivitySaveInstanceState(<span class=\"keyword\">this</span>, outState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>系统默认保存当前Activity的视图结构。并在Actvitiy重启后恢复这些数据。首先Actvitiy会调用onSaveInstanceState保存数据，然后Actvitiy会委托Window保存数据，Window委托它上面的顶级容器去保存数据。顶级容器是一个ViewGroup，一般情况下是DecorView。最后顶层容器再去一一通知它的子元素来保存数据。</p>\n<figure class=\"highlight java\"><figcaption><span>PhoneWindow.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// PhoneWindow.java 是Window的实现</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bundle <span class=\"title\">saveHierarchyState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Bundle outState = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> outState;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// mContentParent就是ViewGroup</span></div><div class=\"line\">    mContentParent.saveHierarchyState(states);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> outState;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>ViewGroup.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 分发的每个子View的dispatchSaveInstanceState具体实现</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchSaveInstanceState</span><span class=\"params\">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.dispatchSaveInstanceState(container);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</div><div class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        View c = children[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> ((c.mViewFlags &amp; PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) &#123;</div><div class=\"line\">            c.dispatchSaveInstanceState(container);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当Actvitiy被重新创建后，系统会调用onRestoreInstanceState，并把Actvitiy销毁时onSaveInstanceState方法所保存的Bundle对象作为参数同时传递给onRestoreInstanceState和onCreate方法。<br><figure class=\"highlight java\"><figcaption><span>Actvity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个方法在onStart和onPostCreate()之前调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRestoreInstanceState</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Bundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);</div><div class=\"line\">        <span class=\"keyword\">if</span> (windowState != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mWindow.restoreHierarchyState(windowState);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在恢复Actvitiy存储时的数据时候，接收的位置可以选择onRestoreInstanceState()或者onCreate，两者区别是onRestoreInstanceState()中的Bundle不为空，onCreate()中的Bundle值可能为空，需要加上判断。</p>\n<blockquote>\n<p><code>注</code>：onSaveInstanceState()并不能保证正常时被调用。所以不要用来做为数据存储持久化的工作。相反的，当用户离开Activity时应该在onPause()中来存储持久化数据（如数据库数据）。可以简单理解为系统只在Actvitiy异常终止的时候才会调用这两方法，其他情况并不会触发。异常终止：如因为内存不足导致低优先级的Actvitiy被销毁、在旋转屏幕的时候Actvitiy被销毁又被重新创建。</p>\n</blockquote>\n<h2 id=\"3-处理系统配置变化\"><a href=\"#3-处理系统配置变化\" class=\"headerlink\" title=\"3.处理系统配置变化\"></a>3.处理系统配置变化</h2><p>一些系统配置在运行时可能会发生变化（如：屏幕旋转、键盘变化、语言等）。当这些变化发生的时候，系统会调用onDestroy(),然后立即调用onCreate()。有时候我们并不想要销毁Actvitiy和重新创建，这时候我们可以在AndroidManifest中配置指定Activity的<code>android:configChanges</code>的属性即可<br><figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">    <span class=\"attr\">android:configChanges</span>=<span class=\"string\">[</span>\"<span class=\"attr\">mcc</span>\", \"<span class=\"attr\">mnc</span>\", \"<span class=\"attr\">locale</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">touchscreen</span>\", \"<span class=\"attr\">keyboard</span>\", \"<span class=\"attr\">keyboardHidden</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">navigation</span>\", \"<span class=\"attr\">screenLayout</span>\", \"<span class=\"attr\">fontScale</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">uiMode</span>\", \"<span class=\"attr\">orientation</span>\", \"<span class=\"attr\">screenSize</span>\",</div><div class=\"line\">                         \"<span class=\"attr\">smallestScreenSize</span>\"] </div><div class=\"line\">    <span class=\"attr\">...</span> &gt;</div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>常用的三个选项：</p>\n<pre><code>1. local：系统语言变化、\n2. orientation：手机屏幕发生旋转、\n3. keyboardHidden：键盘的可访问性发生了变化，调出键盘。\n</code></pre><p>使用方法</p>\n<figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">\t<span class=\"attr\">android:configChanges</span>=<span class=\"string\">\"orientation|...\"</span></div><div class=\"line\">\t<span class=\"attr\">...</span> &gt;</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>注</code>：screenSize、smallestScreenSize比较特殊，它们的行为与编译选项有关，和运行环境无关。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--如果指定的minSdkVersion和targetSdkVersion有一个大于13，为了防止旋转屏幕时Actvitiy重启，除了 --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- orientation，还需要加上screenSize和smallestScreenSize --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span></div><div class=\"line\">    <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"...\"</span></div><div class=\"line\">    <span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"...\"</span></div><div class=\"line\">    /&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"二、Activity的启动模式\"><a href=\"#二、Activity的启动模式\" class=\"headerlink\" title=\"二、Activity的启动模式\"></a>二、Activity的启动模式</h1><p>为了方便管理Activity，Android引入了Task（任务）和Stack（返回栈）<br>Task（任务）是用户进行交互的Activity集合。Activity置于类似<code>后进先出</code>的对象结构的Stack（返回栈）中。</p>\n<ul>\n<li>当用户点击Application（应用程序）的Icon时，如果应用的Task没有创建，则系统创建一个新的Task，Application打开Main Activity作为Task的根activity。</li>\n<li>当启动新的Activity时，创建Activity的实例放入栈，置于栈顶并获取焦点。</li>\n<li>当Activity进入停止状态，系统保持它的当前状态。</li>\n<li>当用户点击返回按钮时，栈顶Activity出栈，调用onDestory()销毁实例。前Activity恢复存储的状态并置于栈顶。栈中的Activities不会重新排序，只能够被压入栈和出栈。</li>\n<li>当用户连续点击返回键，栈中Activity接连出栈，直到回到桌面或Task运行的起始位置。所有activity都被从栈中移除时，则Task销毁。</li>\n<li>当启动新的Task（如打开新应用）或者点击Home键回到桌面时，任务栈退到后台；当位于后台时，Task中的Activity都会进入停止状态。退到后台的Task的返回栈仍然保持完整性。如：Task A的栈中有三个Activity，用户点击Home键，打开新的应用程序，Task A退到后台。新的应用程序启动，系统创建并启动新的Task B。用户再次回到桌面，打开Task A对应的应用程序，Task A回到前台，Task A中的三个Activity保持完整性。</li>\n<li>Android支持后台多任务；但同时运行多个后台任务，系统可能销毁后台的Activity来回收内存，就导致后台Activity的状态丢失。</li>\n</ul>\n<h2 id=\"1-Activity任务管理。\"><a href=\"#1-Activity任务管理。\" class=\"headerlink\" title=\"1. Activity任务管理。\"></a>1. Activity任务管理。</h2><p>默认情况下Android中的Activity通过<code>standard</code>启动模式进入在后进先出的Stack（返回栈）中。有时因为业务需求，需要修改Activity的默认启动模式。如：在新的任务中来启动Activity而不是在返回栈的栈顶创建新的实例；又比如：在启动Activity时，只想要启动Activity已存在的实例；或在用户离开任务时清空除了根Activity外所有的Activity。</p>\n<p>修改Activity的默认启动模式有两种方法：</p>\n<ol>\n<li>在AndroidManifest中指定Activity的任务和启动模式。</li>\n<li>在启动Activity的Intent中加入标志位。</li>\n</ol>\n<p>在优先级上第二种高于第一种，就是在Intent中传递Flag标志的方式会覆盖在XML指定启动模式的方式。<br>标准启动模式，启动Activity时，系统会创建Activity新的实例。Activity可能会多次创建：每个实例可能属于不同任务，一个任务可能有多个实例。</p>\n<h3 id=\"1）AndroidManifest中指定Activity的任务和启动模式。\"><a href=\"#1）AndroidManifest中指定Activity的任务和启动模式。\" class=\"headerlink\" title=\"1）AndroidManifest中指定Activity的任务和启动模式。\"></a>1）AndroidManifest中指定Activity的任务和启动模式。</h3><figure class=\"highlight xml\"><figcaption><span>AndroidManefest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.MainActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:taskAffinity</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">    <span class=\"attr\">android:launchMode</span>=<span class=\"string\">[</span>\"<span class=\"attr\">multiple</span>\" | \"<span class=\"attr\">singleTop</span>\" |</div><div class=\"line\">                  \"<span class=\"attr\">singleTask</span>\" | \"<span class=\"attr\">singleInstance</span>\"]</div><div class=\"line\">    <span class=\"attr\">android:clearTaskOnLaunch</span>=<span class=\"string\">[</span>\"<span class=\"attr\">true</span>\" | \"<span class=\"attr\">false</span>\"]</div><div class=\"line\">    <span class=\"attr\">android:alwaysRetainTaskState</span>=<span class=\"string\">[</span>\"<span class=\"attr\">true</span>\" | \"<span class=\"attr\">false</span>\"]</div><div class=\"line\">    <span class=\"attr\">android:finishOnTaskLaunch</span>=<span class=\"string\">[</span>\"<span class=\"attr\">true</span>\" | \"<span class=\"attr\">false</span>\"] </div><div class=\"line\">    <span class=\"attr\">...</span> &gt;</div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>taskAffinity</code><br>taskAffinity表示Activity对应的任务。有相同taskAffinity的Activity理论属于同一个任务。任务自身的Affinity决定<br>根Activity的Affinity值。taskAffinity的使用场合是什么呢？1.根据taskAffinity重新为Activity选择任务（与<br>allowTaskReparenting属性配合工作）；2.启动Activity时，Intent使用FLAG_ACTIVITY_NEW_TASK标记，根据<br>taskAffinity查找或创建一个新Activity对应taskAffinity的任务。默认情况下，应用内所有Activity都具有相同的<br>taskAffinity,都是从Application继承来，而Application默认taskAffinity值为<manifest>中定义的包名。</manifest></p>\n</li>\n<li><p><code>launchMode</code><br>launchMode表示Activity启动模式。配合Intent的Activity Flags使用。</p>\n</li>\n<li><p><code>allowTaskReparenting</code><br>Activity是否从启动它的任务中移动到目标任务中，”true”表示可以移动；”false”表示必须保留在启动它的任务中。<br>如果没有设置，则继承<application>中的属性值，默认false。正常情况下Activity位于启动它的任务中，并度过它的整个生命周期。</application></p>\n</li>\n<li><p><code>clearTaskOnLaunch</code><br>标记是否从任务中清除除根Activity的所有Activity，”true”表示清除，”false”表示不清除。默认”false”。这个属性只对根Activity起作用。如果为”true”，每次重新启动应用时，都只看到根Activity，任务中的其他的Activity都会被清除栈。</p>\n</li>\n<li><p><code>alwaysRetainTaskState</code><br>标记任务是否保持原来的状态，”true”总是保持，”false”不能保证，默认”false”。属性只对根Activity起作用。默认情况下，如果应用在后台停留过长时间，应用再次回到前台时，系统会对应用任务的栈进行清空处理。只保留根Activity。如果根Activity的这个属性为”true”时，应用回到前台时，任务仍然保留所有的Activity。如：浏览器应用打开很多tab页面，在后台停留过长时间，回到前台时，仍然保留这些打开的界面。</p>\n</li>\n<li><p><code>finishOnTaskLaunch</code><br>finishOnTaskLaunch属性与clearTaskOnLaunch属性类似，不同是它是在操作单个的Activity，而不是整个任务栈。它可以销毁任意Activity包括根Activity。当设置为”true”时，如果用户离开然后回到任务栈，则Activity不再显示。</p>\n</li>\n</ul>\n<blockquote>\n<p>注：多数任务和Activity启动模式应该保持默认值。除非必要情况下，需要改变默认行为。</p>\n</blockquote>\n<h2 id=\"2-启动模式\"><a href=\"#2-启动模式\" class=\"headerlink\" title=\"2. 启动模式\"></a>2. 启动模式</h2><p>Activity有四种启动模式：<code>standard</code>，<code>singleTop</code>，<code>singleTask</code>和<code>singleInstance</code></p>\n<ul>\n<li><code>standard</code><br>Activity的默认启动模式，不论栈中是否已存在Activity的实例，都会在创建新的Activity实例，放入栈顶。如下图ActivityA和ActivityB均为standard启动模式。</li>\n</ul>\n<div><br>    <image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_standard.png\" style=\"width:60%;\"><br></image></div>\n\n<ul>\n<li><code>singleTop</code><br>任务栈顶存在要启动的Activity，系统不会创建新的Activity实例，只调用Activity的onNewIntent()方法。Activity可能被多次实例化，每个Activity实例可能属于不同任务栈，一个任务栈可能有多个实例（仅在返回栈栈顶的Activity不是启动的Activity实例情况下）<br>假设有任务的返回栈包含ABCD的Activity，A为根Activity，D在栈顶；如果启动D并且D启动模式为”singleTop”，则调用栈顶已经存在的D的方法onNewIntent()，栈内容不变，仍为”ABCD”；如果启动B，B的启动模式为”singleTop”，则会创建新的B实例，并压人栈中。如下图ActivityA和ActivityB均为singleTop启动模式。</li>\n</ul>\n<div><br>    <image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467702956/android/android_launchmode_singleTop.png\" style=\"width:60%;\"><br></image></div><br>&gt; 注：当创建新的Activity，用户点击返回键会返回之前Activity。如果已存在的Activity来处理一个新的Intent对象时，在Intent进入onNewIntent()之前，用户点击返回键无法返回Activity之前的状态。<br><br>- <code>singleTask</code><br>系统查找或创建新Activity对应的任务，已有任务栈时直接向栈中添加Activity的实例；否则创建新的Activity实例作为新任务栈的根。如果指定的任务栈中已经存在Activity的实例，系统只调用Acitivity的onNewIntent()方法，而不是创建新的Activity，同时只能够存在一个相同Activity实例。需要配合<code>android:taskAffinity</code>属性来使用。若taskAffinity的值与应用程序一致，新的Activity仍然会在应用程序的默认任务栈中。<br><br><div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467552922/android/diagram_backstack_singletask_multiactivity.png\" style=\"width:60%;\"><br></image></div>\n\n<blockquote>\n<p>注：尽管”singleTask”启动了一个新任务，点击返回键时仍然返回到之前的Activity对应的任务栈。</p>\n</blockquote>\n<ul>\n<li><code>singleInstance</code><br>除了具有”singleTask”的全部特性以外，系统不会在有”singleInstance”启动模式的Activity对应栈中启动任何其他的Activity。具有”singleInstance”启动模式的Activity是栈中唯一的成员，通过这个任务栈启动的Activity都会在指定的任务栈中打开。</li>\n</ul>\n<div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467705412/android/android_launchmode_singleInstance.png\" style=\"width:70%\"><br></image></div>\n\n<p>不管在新的任务中启动Activity还是在启动时的任务栈中启动Activity，点击返回键总是回到之前的Activity。如果你指定Activity的启动模式为singleTask，并在后台任务栈中存在对应的实例。启动这个Acitivity时，就会把整个任务栈带到前台。这时候，返回栈包含所有带到前台的任务栈中所有Activity，并置于栈顶。如singleTask小节图示。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 假设有三个Activity：MainAcitivity，ActivityA，ActivityB。MainActivity为应用程序的入口Activity，ActivityA是</div><div class=\"line\">* `singleTask`启动模式，任务为`org.alexwan.taskandflag`的Activity，ActivityB与ActivityA一样。在启动MainActivity</div><div class=\"line\">* 后，由MainActivity启动ActivityA，ActivityA启动ActivityB。</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">// 查看运行栈 命令</div><div class=\"line\">adb shell dumpsys activity activities | sed -En -e '/Running activities/,/Run #0/p'</div><div class=\"line\"></div><div class=\"line\">// 结果</div><div class=\"line\">Running activities (most recent first):</div><div class=\"line\">    TaskRecord&#123;d42fd8e #7592 A=org.alexwan.view U=0 sz=2&#125;</div><div class=\"line\">        Run #2: ActivityRecord&#123;247d0678 u0 org.alexwan.taskandflag/.ActivityB t7592&#125;</div><div class=\"line\">        Run #1: ActivityRecord&#123;168061c4 u0 org.alexwan.taskandflag/.ActivityA t7592&#125;</div><div class=\"line\">    TaskRecord&#123;20b981bc #7591 A=org.alexwan.taskandflag U=0 sz=1&#125;</div><div class=\"line\">        Run #0: ActivityRecord&#123;618def7 u0 org.alexwan.taskandflag/.MainActivity t7591&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-Intent-Activity标志\"><a href=\"#3-Intent-Activity标志\" class=\"headerlink\" title=\"3.Intent Activity标志\"></a>3.Intent Activity标志</h2><p>在调用startActivity时，为Intent添加一个标志位决定Activity启动方式。用来修改默认行为.<br><figure class=\"highlight java\"><figcaption><span>Intent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用新任务启动Activity。如果任务中的Activity已运行需要启动的Activity，则直接返回前台状态并调用onNewIntent()方</span></div><div class=\"line\"><span class=\"comment\">// 法。与\"singleTask\"效果相同</span></div><div class=\"line\">FLAG_ACTIVITY_NEW_TASK</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果启动的Activity在返回栈栈顶，则直接调用Activity的onNewIntent方法，而不是创建一个新的实例。</span></div><div class=\"line\"><span class=\"comment\">// 与\"singleTop\"效果相同。</span></div><div class=\"line\">FLAG_ACTIVITY_SINGLE_TOP</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果启动的Activity已经运行在当前任务栈中，则它的所有顶部Activity都会被销毁，而不是创建一个新Activity实例。调用</span></div><div class=\"line\"><span class=\"comment\">// onNewIntent()方法恢复Activity状态。</span></div><div class=\"line\">FLAG_ACTIVITY_CLEAR_TOP</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 启动的Activity不会出现在历史Activity的列表中，在某些情况下我们不希望用户通过历史列表回到Activity时会使用这个标</span></div><div class=\"line\"><span class=\"comment\">// 志。与在AndroidManifest中指定Activity的android:excludeFromRecents=\"true\"属性效果相同。</span></div><div class=\"line\">FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>FLAG_ACTIVITY_CLEAR_TOP</code>常和<code>FLAG_ACTIVITY_NEW_TASK</code>配合使用。当同时使用，这些标志是定位其他栈中存在的Activity和放置在可以享用Intent的位置的方式。这种情况下，被启动Activity的实例如果已经存在，那么系统就会调用它的onNewIntent()方法。如果被启动的Activity采用”standard”启动模式，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并置于栈顶。 </p>\n</blockquote>\n<h2 id=\"4-处理affinities\"><a href=\"#4-处理affinities\" class=\"headerlink\" title=\"4. 处理affinities\"></a>4. 处理affinities</h2><p>affinity 表示Activity对应的任务栈值。默认情况下所有Activity继承Application对应的包名所在的任务栈。可以在AndroidManifest中为Activity修改默认affinity值。不同Application可以共享相同affinity属性，同样相同Application中的Activity可以关联不同的affinity属性。<br>如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".ActivityB\"</span></div><div class=\"line\">    <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTask\"</span></div><div class=\"line\">    <span class=\"attr\">android:taskAffinity</span>=<span class=\"string\">\"org.alexwan.view\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>TaskAffinitys主要配合”singleTask”启动模式和”allowTaskReparenting”属性来使用</p>\n<ul>\n<li><p>1）配合”singleTask”启动模式的Activity使用的情景；如通知管理总是在外部的任务栈中启动Activity，而不是作为Application任务栈的一部分。所以通知类的Intent总是用FLAG_ACTIVITY_NEW_TASK在intent的属性中传递给startActivity()。</p>\n</li>\n<li><p>2）配合 allowTaskReparenting 属性使用情景。假设Activity的allowTaskReparenting的值为”true”，这种情况下，在Activity对应的任务栈回到前台，并且已经被其他任务栈启动时，则会从其他任务栈转到Activity对应的任务栈中。比如：在应用程序A中打开浏览器的Activity，Activity初始化时属于应用A的对应的任务栈，当浏览器回到前台时，Activity则从应用A任务栈转到浏览器的任务栈直接显示。</p>\n</li>\n</ul>\n<h1 id=\"三、Activity的启动匹配规则\"><a href=\"#三、Activity的启动匹配规则\" class=\"headerlink\" title=\"三、Activity的启动匹配规则\"></a>三、Activity的启动匹配规则</h1><p>Intent打开Activity时分为隐式、显式打开Actiivty。</p>\n<p><code>显式启动</code>：这种情况启动的Activity为已知，显式Intent也是启动Activity最常用的方式。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(ActivityA.<span class=\"keyword\">this</span> , ActivityB.class);</div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p><code>隐式启动</code>：在未知启动的Activity的情况时，通过action，data，category等IntentFilter属性来过滤匹配要启动的Activity，Activity可能为多个或者没有对应Activity。如：启动分享、打开多媒体相关的Activity等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent sendIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">sendIntent.setAction(Intent.ACTION_VIEW);</div><div class=\"line\">sendIntent.putExtra(Intent.EXTRA_TEXT , message);</div><div class=\"line\">sendIntent.setType(<span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span>(sendIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">    startActivity(sendIntent);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果没有匹配到相应的Activity时，调用startActivity()时，应用程序直接崩溃。因此在使用隐式Intent时，需要调用resolveActivity()来判断是否有相匹配的Activity来接收Intent，如果没有则不会调用startActivity。</p>\n</blockquote>\n<h2 id=\"1-IntentFilter匹配规则。\"><a href=\"#1-IntentFilter匹配规则。\" class=\"headerlink\" title=\"1. IntentFilter匹配规则。\"></a>1. IntentFilter匹配规则。</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.ActivityA\"</span></div><div class=\"line\">    <span class=\"attr\">...</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"package\"</span> /&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>只在有action、category、data都匹配时，Intent才算是匹配成功，如果Activity若声明多个IntentFilter时，只需匹配任意一个则表示匹配成功。</p>\n<p>（1） action<br>一个Intent Filter中可声明0个或多个action，Intent中的action与其中任一action在字符串形式上完全相同（区分大小写），action就算是匹配成功。Intent调用setAction或构造器中传入action为Intent设置action。隐式Intent必须指定action。</p>\n<p>（2）category<br>与action相同，一个Intent Filter可声明多个category或不声明category属性。Intent中的category必须全部匹配Filter中出现的category。Intent若没有指定category，同样能够匹配成功，因为Intent没有指定category时，Android自定为Intent指定默认category值<code>Intent.CATEGORY_DEFAULT</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span> /&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>（3）data<br>与action相同，一个Intent Filter可声明多个data或不声明data属性。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"video/mpeg\"</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"http\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"audio/mpeg\"</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"http\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>每个<data>可以指定一个URI和一个数据类型（MIME 媒体类型）。</data></p>\n<p><code>URI</code><br>结构：<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</code>。如：”content://com.example.project:200/folder/subfolder/etc”。</p>\n<blockquote>\n<p>注：如果scheme没有指定，则忽略host；host没有指定，则忽略port；如果scheme和host都没有指定，则忽略path。path可以包含星号（*）通配符部分满足path的名称。<br>URI默认值为content和file。如果filter中没有指定URI，Intent中的URI部分的scheme必须为content或file才能匹配。如果为Intent指定完整的data，必须调用setDataAndType()，单独的调用setData或setType()会重置Data和Type属性。</p>\n</blockquote>\n<h1 id=\"四、Activity的启动过程\"><a href=\"#四、Activity的启动过程\" class=\"headerlink\" title=\"四、Activity的启动过程\"></a>四、Activity的启动过程</h1><div><br><image src=\"http://res.cloudinary.com/dmfz9aun7/image/upload/v1467896657/android/%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8%E6%97%B6%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png\" style=\"width:100%\"><br><div style=\"text-align:center;\"><b>4-1. Android 5.0的启动应用程序时Activity的时序图</b></div><br></image></div>\n\n<p>应用程序的入口MainActivity的定义</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>    </span></div><div class=\"line\">      <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span>&gt;    </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span>    </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span>    </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span>    </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span>    </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Android中启动应用程序从桌面启动，系统桌面实际上也是应用程序，对应的是Launcher。</p>\n<figure class=\"highlight java\"><figcaption><span>com.android.launcher2.Launcher.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startActivitySafely</span><span class=\"params\">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 调用Activity的startActivity方法。</span></div><div class=\"line\">        success = startActivity(v, intent, tag);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Unable to launch. tag=\"</span> + tag + <span class=\"string\">\" intent=\"</span> + intent, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> success;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用Activity的startActivity方法，最终调用Activity的startActivityForResult方法。<br><figure class=\"highlight java\"><figcaption><span>Activity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Note we want to go through this call for compatibility with</span></div><div class=\"line\">        <span class=\"comment\">// applications that may have overridden the method.</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(</span></span></div><div class=\"line\">        String who, Intent intent, <span class=\"keyword\">int</span> requestCode, @Nullable Bundle options) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 1. 创建要启动的Activity实例信息。</span></div><div class=\"line\">    Instrumentation.ActivityResult ar =</div><div class=\"line\">        mInstrumentation.execStartActivity(</div><div class=\"line\">            <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, who,</div><div class=\"line\">            intent, requestCode, options);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// mMainThread 就是ActivityThread</span></div><div class=\"line\">        mMainThread.sendActivityResult(</div><div class=\"line\">            mToken, who, requestCode,</div><div class=\"line\">            ar.getResultCode(), ar.getResultData());</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Instrumentation</code>主要用来监控应用程序的交互操作。只在Activity和ActivityThread有实例，每次在应用程序创建的时候，在ActivityThread中初始化唯一的实例<code>mInstrumentation</code>，后续在每个Activity.attach方法中，添加到Activity的中。这里调用execStartActivity执行Activity的启动流程。</p>\n<figure class=\"highlight java\"><figcaption><span>Instrumentation.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></span></div><div class=\"line\">        Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">        Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options, UserHandle user) &#123;</div><div class=\"line\">    <span class=\"comment\">// contextThread 是IBinder对象，主要用来与底层进程之间交互。</span></div><div class=\"line\">    <span class=\"comment\">// whoThread 是Launcher的IApplicationThread</span></div><div class=\"line\">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        intent.migrateExtraStreamToClipData();</div><div class=\"line\">        intent.prepareToLeaveProcess();</div><div class=\"line\">        <span class=\"comment\">// 获取到ActivityManagerService远程接口即ActivityManagerProxy，调用</span></div><div class=\"line\">        <span class=\"comment\">// startActivityAsUser的方法</span></div><div class=\"line\">        <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">            .startActivityAsUser(whoThread, who.getBasePackageName(), intent,</div><div class=\"line\">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                    token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                    requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, options, user.getIdentifier());</div><div class=\"line\">        <span class=\"comment\">// 根据返回结果，检测是否成功启动Activity，如果没有抛出异常</span></div><div class=\"line\">        checkStartActivityResult(result, intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Failure from system\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Instrumentation的execStartActivity方法中获得Launcher的IApplicationThread，主要用它与ActivityThread进行进程间通信。获取到ActivityManagerService的远程接口ActivityManagerProxy，调用startActivityAsUser方法。<br>ActivityManagerProxy定义在ActivityManagerNative中<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerNative.java -> ActivityManagerProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 创建ActivityManagerProxy实例</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 单例模式获取到IActivityManager，如果IActivityManager未创建</span></div><div class=\"line\">        <span class=\"comment\">// 则调用create方法创建IActivityManager</span></div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 查找ActivityManagerService</span></div><div class=\"line\">            IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">            <span class=\"comment\">// am 就是ActivityManagerProxy</span></div><div class=\"line\">            IActivityManager am = asInterface(b);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> am;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerProxy</span><span class=\"params\">(IBinder remote)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>调用ActivityManagerProxy的startActivityAsUser方法，通过Binder驱动调用ActivityManagerService的startActivity<br>```java </p>\n<figure class=\"highlight java\"><figcaption><span>ActivityManagerProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage, Intent intent,</span></span></div><div class=\"line\">        String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// mRemote 是个Binder，ServiceManager.getService(\"activity\")返回的binder对象</span></div><div class=\"line\">mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用ActivityManagerNative的onTransact方法。<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerNative.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">        <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> START_ACTIVITY_TRANSACTION:</div><div class=\"line\">    &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        IBinder b = data.readStrongBinder();</div><div class=\"line\">        <span class=\"comment\">// ApplicationThreadProxy</span></div><div class=\"line\">        IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class=\"line\">        ...</div><div class=\"line\">        Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// resultTo</span></div><div class=\"line\">        IBinder resultTo = data.readStrongBinder();</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// ActivityManagerService是ActivityManagerNative的具体实现</span></div><div class=\"line\">        <span class=\"comment\">// startActivity也是由ActivityManagerService来执行。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> result = startActivity(app, callingPackage, intent, resolvedType,</div><div class=\"line\">                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure><br>最终由ActivityManagerService实现调用startActivity<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) &#123;</div><div class=\"line\">    <span class=\"comment\">// 调用startActivityAsUser</span></div><div class=\"line\">    <span class=\"keyword\">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class=\"line\">        resultWho, requestCode, startFlags, profilerInfo, options,</div><div class=\"line\">        UserHandle.getCallingUserId());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityAsUser</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class=\"keyword\">int</span> userId) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//  调用ActivityStackSupervisor的startActivityMayWait</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class=\"number\">1</span>, callingPackage, intent,</div><div class=\"line\">            resolvedType, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">            profilerInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options, <span class=\"keyword\">false</span>, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p><code>ActivityStackSupervisor</code>startActivityMayWait</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityMayWait</span><span class=\"params\">(IApplicationThread caller, <span class=\"keyword\">int</span> callingUid,</span></span></div><div class=\"line\">         String callingPackage, Intent intent, String resolvedType,</div><div class=\"line\">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class=\"line\">         IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> startFlags,</div><div class=\"line\">         ProfilerInfo profilerInfo, WaitResult outResult, Configuration config,</div><div class=\"line\">         Bundle options, <span class=\"keyword\">boolean</span> ignoreTargetSecurity, <span class=\"keyword\">int</span> userId,</div><div class=\"line\">         IActivityContainer iContainer, TaskRecord inTask) &#123;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">// Collect information about the target of the Intent.</span></div><div class=\"line\">    <span class=\"comment\">// 收集MainActivity信息</span></div><div class=\"line\">     ActivityInfo aInfo = resolveActivity(intent, resolvedType, startFlags, profilerInfo, userId);</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">synchronized</span> (mService) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">final</span> ActivityStack stack;</div><div class=\"line\">         <span class=\"keyword\">if</span> (container == <span class=\"keyword\">null</span> || container.mStack.isOnHomeDisplay()) &#123;</div><div class=\"line\">             stack = mFocusedStack;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             stack = container.mStack;</div><div class=\"line\">         &#125;</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">int</span> res = startActivityLocked(caller, intent, resolvedType, aInfo,</div><div class=\"line\">                 voiceSession, voiceInteractor, resultTo, resultWho,</div><div class=\"line\">                 requestCode, callingPid, callingUid, callingPackage,</div><div class=\"line\">                 realCallingPid, realCallingUid, startFlags, options, ignoreTargetSecurity,</div><div class=\"line\">                 componentSpecified, <span class=\"keyword\">null</span>, container, inTask);</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">return</span> res;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(IApplicationThread caller,</span></span></div><div class=\"line\">         Intent intent, String resolvedType, ActivityInfo aInfo,</div><div class=\"line\">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class=\"line\">         IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">         <span class=\"keyword\">int</span> callingPid, <span class=\"keyword\">int</span> callingUid, String callingPackage,</div><div class=\"line\">         <span class=\"keyword\">int</span> realCallingPid, <span class=\"keyword\">int</span> realCallingUid, <span class=\"keyword\">int</span> startFlags, Bundle options,</div><div class=\"line\">         <span class=\"keyword\">boolean</span> ignoreTargetSecurity, <span class=\"keyword\">boolean</span> componentSpecified, ActivityRecord[] outActivity,</div><div class=\"line\">         ActivityContainer container, TaskRecord inTask) &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> err = ActivityManager.START_SUCCESS;</div><div class=\"line\">     <span class=\"comment\">// 指定进程的所有信息</span></div><div class=\"line\">     ProcessRecord callerApp = <span class=\"keyword\">null</span>;        </div><div class=\"line\">     <span class=\"keyword\">if</span> (caller != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         callerApp = mService.getRecordForAppLocked(caller);</div><div class=\"line\">         <span class=\"keyword\">if</span> (callerApp != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             callingPid = callerApp.pid;</div><div class=\"line\">             callingUid = callerApp.info.uid;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     ...</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> userId = aInfo != <span class=\"keyword\">null</span> ? UserHandle.getUserId(aInfo.applicationInfo.uid) : <span class=\"number\">0</span>;</div><div class=\"line\">     <span class=\"comment\">// 历史栈中的实体，表示一个Activity</span></div><div class=\"line\">     ActivityRecord sourceRecord = <span class=\"keyword\">null</span>;</div><div class=\"line\">     ActivityRecord resultRecord = <span class=\"keyword\">null</span>;</div><div class=\"line\">     ... </div><div class=\"line\">     <span class=\"comment\">// 启动标志位</span></div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> launchFlags = intent.getFlags();</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">final</span> ActivityStack resultStack = resultRecord == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : resultRecord.task.stack;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">boolean</span> abort = <span class=\"keyword\">false</span>;</div><div class=\"line\">     ...</div><div class=\"line\">     abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,</div><div class=\"line\">             callingPid, resolvedType, aInfo.applicationInfo);</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">if</span> (abort) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (resultRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             resultStack.sendActivityResultLocked(-<span class=\"number\">1</span>, resultRecord, resultWho, requestCode,</div><div class=\"line\">                     Activity.RESULT_CANCELED, <span class=\"keyword\">null</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"comment\">// We pretend to the caller that it was really started, but</span></div><div class=\"line\">         <span class=\"comment\">// they will just get a cancel result.</span></div><div class=\"line\">         ActivityOptions.abort(options);</div><div class=\"line\">         <span class=\"keyword\">return</span> ActivityManager.START_SUCCESS;</div><div class=\"line\">     &#125;</div><div class=\"line\">     ActivityRecord r = <span class=\"keyword\">new</span> ActivityRecord(mService, callerApp, callingUid, callingPackage,</div><div class=\"line\">             intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,</div><div class=\"line\">             requestCode, componentSpecified, voiceSession != <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>, container, options);</div><div class=\"line\">     ...</div><div class=\"line\">     err = startActivityUncheckedLocked(r, sourceRecord, voiceSession, voiceInteractor,</div><div class=\"line\">             startFlags, <span class=\"keyword\">true</span>, options, inTask);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// startActivityUncheckedLocked</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUncheckedLocked</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></div><div class=\"line\">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, <span class=\"keyword\">int</span> startFlags,</div><div class=\"line\">         <span class=\"keyword\">boolean</span> doResume, Bundle options, TaskRecord inTask) &#123;</div><div class=\"line\">     <span class=\"keyword\">final</span> Intent intent = r.intent;</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUid = r.launchedFromUid;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> launchSingleTop = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP;</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> launchSingleInstance = r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE;</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> launchSingleTask = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK;</div><div class=\"line\">     <span class=\"comment\">// </span></div><div class=\"line\">     <span class=\"keyword\">int</span> launchFlags = intent.getFlags();</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">// 如果启动的Activity没有指明是自启动，则在onPause之前调用onUserLeaving</span></div><div class=\"line\">     <span class=\"comment\">// launchFlags的FLAG_ACTIVITY_NO_USER_ACTION初始值为0，所以mUserLeaving为true</span></div><div class=\"line\">     mUserLeaving = (launchFlags &amp; Intent.FLAG_ACTIVITY_NO_USER_ACTION) == <span class=\"number\">0</span>;</div><div class=\"line\">     ...</div><div class=\"line\">     <span class=\"comment\">// 与FLAG_ACTIVITY_NO_USER_ACTION一样intent的flag值为0，所以notTop为null；</span></div><div class=\"line\">     ActivityRecord notTop =</div><div class=\"line\">             (launchFlags &amp; Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP) != <span class=\"number\">0</span> ? r : <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// If the onlyIfNeeded flag is set, then we can do this if the activity</span></div><div class=\"line\">     <span class=\"comment\">// being launched is the same as the one making the call...  or, as</span></div><div class=\"line\">     <span class=\"comment\">// a special case, if we do not know the caller then we count the</span></div><div class=\"line\">     <span class=\"comment\">// current top activity as the caller.</span></div><div class=\"line\">     <span class=\"keyword\">if</span> ((startFlags&amp;ActivityManager.START_FLAG_ONLY_IF_NEEDED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> addingToTask = <span class=\"keyword\">false</span>;</div><div class=\"line\">     TaskRecord reuseTask = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// If the caller is not coming from another activity, but has given us an</span></div><div class=\"line\">     <span class=\"comment\">// explicit task into which they would like us to launch the new activity,</span></div><div class=\"line\">     <span class=\"comment\">// then let's see about doing that.</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (sourceRecord == <span class=\"keyword\">null</span> &amp;&amp; inTask != <span class=\"keyword\">null</span> &amp;&amp; inTask.stack != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         inTask = <span class=\"keyword\">null</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (inTask == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (sourceRecord == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (launchSingleInstance || launchSingleTask) &#123;</div><div class=\"line\">             <span class=\"comment\">// The activity being started is a single instance...  it always</span></div><div class=\"line\">             <span class=\"comment\">// gets launched into its own task.</span></div><div class=\"line\">             <span class=\"comment\">// launchFlags 设为Intent.FLAG_ACTIVITY_NEW_TASK</span></div><div class=\"line\">             launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ActivityInfo newTaskInfo = <span class=\"keyword\">null</span>;</div><div class=\"line\">     Intent newTaskIntent = <span class=\"keyword\">null</span>;</div><div class=\"line\">     ActivityStack sourceStack;</div><div class=\"line\">     <span class=\"keyword\">if</span> (sourceRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (sourceRecord.finishing) &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             sourceStack = sourceRecord.task.stack;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         sourceStack = <span class=\"keyword\">null</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> movedHome = <span class=\"keyword\">false</span>;</div><div class=\"line\">     ActivityStack targetStack;</div><div class=\"line\"></div><div class=\"line\">     intent.setFlags(launchFlags);</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> noAnimation = (launchFlags &amp; Intent.FLAG_ACTIVITY_NO_ANIMATION) != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 检索是否存在Task来放Activity；</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">             (launchFlags &amp; Intent.FLAG_ACTIVITY_MULTIPLE_TASK) == <span class=\"number\">0</span>)</div><div class=\"line\">             || launchSingleInstance || launchSingleTask) &#123;</div><div class=\"line\">         <span class=\"comment\">// Activity的启动模式为launchSingleTask</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (inTask == <span class=\"keyword\">null</span> &amp;&amp; r.resultTo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"comment\">// 此时inTask为空 ， r.resultTo为空</span></div><div class=\"line\">             <span class=\"comment\">// 调用findTaskLocked，因为应用第一次启动，所以检索返回结果为null</span></div><div class=\"line\">             ActivityRecord intentActivity = !launchSingleInstance ?</div><div class=\"line\">                     findTaskLocked(r) : findActivityLocked(intent, r.info);</div><div class=\"line\">             <span class=\"keyword\">if</span> (intentActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 ...</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (r.packageName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"comment\">// 如果Activity与当前栈顶的Activity一致，判断是否再次启动。</span></div><div class=\"line\">         ActivityStack topStack = mFocusedStack;</div><div class=\"line\">         ActivityRecord top = topStack.topRunningNonDelayedActivityLocked(notTop);</div><div class=\"line\">         <span class=\"keyword\">if</span> (top != <span class=\"keyword\">null</span> &amp;&amp; r.resultTo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (top.realActivity.equals(r.realActivity) &amp;&amp; top.userId == r.userId) &#123;</div><div class=\"line\">                 ...</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">boolean</span> newTask = <span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">boolean</span> keepCurTransition = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">     TaskRecord taskToAffiliate = launchTaskBehind &amp;&amp; sourceRecord != <span class=\"keyword\">null</span> ?</div><div class=\"line\">             sourceRecord.task : <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 参数r.resultTo为null，表示Launcher不需要等待启动MainActivity的执行结果</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (r.resultTo == <span class=\"keyword\">null</span> &amp;&amp; inTask == <span class=\"keyword\">null</span> &amp;&amp; !addingToTask</div><div class=\"line\">             &amp;&amp; (launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         newTask = <span class=\"keyword\">true</span>;</div><div class=\"line\">         targetStack = computeStackFocus(r, newTask);</div><div class=\"line\">         targetStack.moveToFront(<span class=\"string\">\"startingNewTask\"</span>);</div><div class=\"line\">         <span class=\"comment\">// 创建Task来启动Activity</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (reuseTask == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             r.setTask(targetStack.createTaskRecord(getNextTaskId(),</div><div class=\"line\">                     newTaskInfo != <span class=\"keyword\">null</span> ? newTaskInfo : r.info,</div><div class=\"line\">                     newTaskIntent != <span class=\"keyword\">null</span> ? newTaskIntent : intent,</div><div class=\"line\">                     voiceSession, voiceInteractor, !launchTaskBehind <span class=\"comment\">/* toTop */</span>),</div><div class=\"line\">                     taskToAffiliate);</div><div class=\"line\">             ...</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             ...</div><div class=\"line\">         &#125;</div><div class=\"line\">         ...</div><div class=\"line\">         <span class=\"keyword\">if</span> (!movedHome) &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> ((launchFlags &amp;</div><div class=\"line\">                     (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME))</div><div class=\"line\">                     == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) &#123;</div><div class=\"line\">                 <span class=\"comment\">// Caller wants to appear on home activity, so before starting</span></div><div class=\"line\">                 <span class=\"comment\">// their own activity we will bring home to the front.</span></div><div class=\"line\">                 r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sourceRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (inTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         ...</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     mService.grantUriPermissionFromIntentLocked(callingUid, r.packageName,</div><div class=\"line\">             intent, r.getUriPermissionsLocked(), r.userId);</div><div class=\"line\">     ...</div><div class=\"line\">     targetStack.mLastPausedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">     targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options);</div><div class=\"line\">     <span class=\"keyword\">if</span> (!launchTaskBehind) &#123;</div><div class=\"line\">         <span class=\"comment\">// Don't set focus on an activity that's going to the back.</span></div><div class=\"line\">         mService.setFocusedActivityLocked(r, <span class=\"string\">\"startedActivity\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> ActivityManager.START_SUCCESS;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>startActivityUncheckedLocked，从命名上可以猜出来方法执行Activity的检查操作。方法中获取到intent的启动标志，对启动模式重新设置，根据标志检索是否是否需要重新创建的Activity的对象、是否需要创建的任务栈、启动时Activity是否需要等待返回值等。然后调用<code>ActivityStack</code>的startActivityLocked方法。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(ActivityRecord r, <span class=\"keyword\">boolean</span> newTask,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> doResume, <span class=\"keyword\">boolean</span> keepCurTransition, Bundle options) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    TaskRecord task = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!newTask) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place a new activity at top of stack, so it is next to interact</span></div><div class=\"line\">    <span class=\"comment\">// with the user.</span></div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    task = r.task;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Slot the activity into the history stack and proceed</span></div><div class=\"line\">    <span class=\"comment\">// 压入历史栈后处理</span></div><div class=\"line\">    task.addActivityToTop(r);</div><div class=\"line\">    task.setFrontOfTask();</div><div class=\"line\">    r.putInHistory();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isHomeStack() || numActivities() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// We want to show the starting preview window if we are</span></div><div class=\"line\">        <span class=\"comment\">// switching to a new task, or the next activity's process is</span></div><div class=\"line\">        <span class=\"comment\">// not currently running.</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// If this is the first activity, don't do any fancy animations,</span></div><div class=\"line\">        <span class=\"comment\">// because there is nothing for it to animate on top of.</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doResume) &#123;</div><div class=\"line\">        mStackSupervisor.resumeTopActivitiesLocked(<span class=\"keyword\">this</span>, r, options);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>startActivityLocked主要判断是否需要去进行任务切换时的界面操作。<br>接着调用ActivityStackSupervisor的resumeTopActivitiesLocked方法。<br><figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivitiesLocked</span><span class=\"params\">(ActivityStack targetStack, ActivityRecord target,</span></span></div><div class=\"line\">        Bundle targetOptions) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (targetStack == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        targetStack = mFocusedStack;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Do targetStack first.</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isFrontStack(targetStack)) &#123;</div><div class=\"line\">        result = targetStack.resumeTopActivityLocked(target, targetOptions);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着调用ActivityStack的resumeTopActivityLocked方法</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> resumeTopActivityLocked(prev, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</div><div class=\"line\">        <span class=\"comment\">// Don't even start recursing.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Protect against recursion. 保护防止递归</span></div><div class=\"line\">        mStackSupervisor.inResumeTopActivity = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mService.mLockScreenShown == ActivityManagerService.LOCK_SCREEN_LEAVING) &#123;</div><div class=\"line\">            mService.mLockScreenShown = ActivityManagerService.LOCK_SCREEN_HIDDEN;</div><div class=\"line\">            mService.updateSleepIfNeededLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">        result = resumeTopActivityInnerLocked(prev, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        mStackSupervisor.inResumeTopActivity = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 确保栈顶Activity已经处于Resumed状态</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityInnerLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mService.mBooting &amp;&amp; !mService.mBooted) &#123;</div><div class=\"line\">        <span class=\"comment\">//  服务还未启动</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ActivityRecord parent = mActivityContainer.mParentActivity;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((parent != <span class=\"keyword\">null</span> &amp;&amp; parent.state != ActivityState.RESUMED) ||</div><div class=\"line\">            !mActivityContainer.isAttachedLocked()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Do not resume this stack if its parent is not resumed.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    cancelInitializingActivities();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 找到栈顶ActivityRecord</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord next = topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Remember how we'll process this pause/resume situation, and ensure</span></div><div class=\"line\">    <span class=\"comment\">// that the state is reset however we wind up proceeding.</span></div><div class=\"line\">    <span class=\"comment\">// mUserLeaving保存在本地，重新设置为false</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> userLeaving = mStackSupervisor.mUserLeaving;</div><div class=\"line\">    mStackSupervisor.mUserLeaving = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord prevTask = prev != <span class=\"keyword\">null</span> ? prev.task : <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// There are no more activities!</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next.delayedResume = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果栈顶Activity已经处于resume状态，直接返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</div><div class=\"line\">                mStackSupervisor.allResumedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果休眠状态并且没有需要resume的activity，栈顶activity处于暂停状态，直接返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.isSleepingOrShuttingDown()</div><div class=\"line\">            &amp;&amp; mLastPausedActivity == next</div><div class=\"line\">            &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证activity的拥有者已经启动</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.mStartedUsers.get(next.userId) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果activity正在等待停止或休眠，则从停止或休眠队列中移除这个activity</span></div><div class=\"line\">    <span class=\"comment\">// 因为不适应activity了</span></div><div class=\"line\">    mStackSupervisor.mStoppingActivities.remove(next);</div><div class=\"line\">    mStackSupervisor.mGoingToSleepActivities.remove(next);</div><div class=\"line\">    next.sleeping = <span class=\"keyword\">false</span>;</div><div class=\"line\">    mStackSupervisor.mWaitingVisibleActivities.remove(next);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 如果现在正在暂停一个activity，返回等待则进入等待状态。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... </div><div class=\"line\">    mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在activity调用resumed之前需要暂停之前的activity</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> dontWaitForPause = (next.info.flags&amp;ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, <span class=\"keyword\">true</span>, dontWaitForPause);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 开始暂停之前的Activity，mResumedActivity指定启动时的Activity</span></div><div class=\"line\">        pausing |= startPausingLocked(userLeaving, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, dontWaitForPause);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pausing) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// At this point we want to put the upcoming activity's process</span></div><div class=\"line\">        <span class=\"comment\">// at the top of the LRU list, since we know we will be needing it</span></div><div class=\"line\">        <span class=\"comment\">// very soon and it would be a waste to let it get killed if it</span></div><div class=\"line\">        <span class=\"comment\">// happens to be sitting towards the end.</span></div><div class=\"line\">        <span class=\"comment\">// 如果正在暂停之前的activity，现在将要启动的activity的进程放在LRU列表的顶部，因为要很快要需要这个参数</span></div><div class=\"line\">        <span class=\"comment\">// </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (next.app != <span class=\"keyword\">null</span> &amp;&amp; next.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mService.updateLruProcessLocked(next.app, <span class=\"keyword\">true</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 执行Activity暂停操作</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 保存mResumedActivity到本地变量prev中，在本文中mResumedActivity对应的就是Launcher。</div><div class=\"line\">* 调用 Launcher对应的ApplicationThread对象的远程接口，也就是ApplicationThreadProxy。执行</div><div class=\"line\">* ApplicationThreadProxy的schedulePauseActivity方法，经过底层驱动Binder，通知Launcher进入</div><div class=\"line\">* Paused状态。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startPausingLocked</span><span class=\"params\">(<span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">boolean</span> uiSleeping, <span class=\"keyword\">boolean</span> resuming,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> dontWait) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mPausingActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果有暂停中的Activity</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ActivityRecord prev = mResumedActivity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mActivityContainer.mParentActivity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Top level stack, not a child. Look for child stacks.</span></div><div class=\"line\">        mStackSupervisor.pauseChildStacks(prev, userLeaving, uiSleeping, resuming, dontWait);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 将mResumedActivity置空，mResumedActivity赋值给mPausingActivity</span></div><div class=\"line\">    mResumedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    mPausingActivity = prev;</div><div class=\"line\">    mLastPausedActivity = prev;</div><div class=\"line\">    mLastNoHistoryActivity = (prev.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NO_HISTORY) != <span class=\"number\">0</span></div><div class=\"line\">            || (prev.info.flags &amp; ActivityInfo.FLAG_NO_HISTORY) != <span class=\"number\">0</span> ? prev : <span class=\"keyword\">null</span>;</div><div class=\"line\">    prev.state = ActivityState.PAUSING;</div><div class=\"line\">    prev.task.touchActiveTime();</div><div class=\"line\">    clearLaunchTime(prev);</div><div class=\"line\">    <span class=\"comment\">// 启动的Activity</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord next = mStackSupervisor.topRunningActivityLocked();</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev.app != <span class=\"keyword\">null</span> &amp;&amp; prev.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,</div><div class=\"line\">                    userLeaving, prev.configChangeFlags, dontWait);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            mPausingActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mLastPausedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mLastNoHistoryActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mPausingActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">        mLastPausedActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">        mLastNoHistoryActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用Launcher的ApplicationThread远程接口ApplicationThreadProxy的schedulePauseActivity方法</p>\n<figure class=\"highlight java\"><figcaption><span>ApplicationThreadProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">schedulePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    Parcel data = Parcel.obtain();</div><div class=\"line\">    data.writeInterfaceToken(IApplicationThread.descriptor);</div><div class=\"line\">    data.writeStrongBinder(token);</div><div class=\"line\">    data.writeInt(finished ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">    data.writeInt(userLeaving ? <span class=\"number\">1</span> :<span class=\"number\">0</span>);</div><div class=\"line\">    data.writeInt(configChanges);</div><div class=\"line\">    data.writeInt(dontReport ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"comment\">// </span></div><div class=\"line\">    mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, <span class=\"keyword\">null</span>,</div><div class=\"line\">            IBinder.FLAG_ONEWAY);</div><div class=\"line\">    data.recycle();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过Binder驱动通知ApplicationThread指定对应的schedulePauseActivity方法。ApplicationThread为ActivityThread的内部类。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThreadjava -> ApplicationThread.java ， H.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">schedulePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) &#123;</div><div class=\"line\">        sendMessage(</div><div class=\"line\">                finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,</div><div class=\"line\">                token,</div><div class=\"line\">                (userLeaving ? <span class=\"number\">1</span> : <span class=\"number\">0</span>) | (dontReport ? <span class=\"number\">2</span> : <span class=\"number\">0</span>),</div><div class=\"line\">                configChanges);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用ActivityThread sendMessage发送Message，在H中处理Message</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj, <span class=\"keyword\">int</span> arg1, <span class=\"keyword\">int</span> arg2, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    Message msg = Message.obtain();</div><div class=\"line\">    msg.what = what;</div><div class=\"line\">    msg.obj = obj;</div><div class=\"line\">    msg.arg1 = arg1;   <span class=\"comment\">// 1</span></div><div class=\"line\">    msg.arg2 = arg2;  <span class=\"comment\">// configChanges</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (async) &#123;</div><div class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mH.sendMessage(msg);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAUNCH_ACTIVITY         = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PAUSE_ACTIVITY          = <span class=\"number\">101</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">case</span> PAUSE_ACTIVITY:</div><div class=\"line\">                ...</div><div class=\"line\">                <span class=\"comment\">// arg1 = 1 , </span></div><div class=\"line\">                handlePauseActivity((IBinder)msg.obj, <span class=\"keyword\">false</span>, (msg.arg1&amp;<span class=\"number\">1</span>) != <span class=\"number\">0</span>, msg.arg2,</div><div class=\"line\">                        (msg.arg1&amp;<span class=\"number\">2</span>) != <span class=\"number\">0</span>);</div><div class=\"line\">                ...</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//  最后调用handlePauseActivity</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) &#123;</div><div class=\"line\">    ActivityClientRecord r = mActivities.get(token);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (userLeaving) &#123;</div><div class=\"line\">            <span class=\"comment\">// 1. 通知Activity，用户将要离开界面</span></div><div class=\"line\">            performUserLeavingActivity(r);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        r.activity.mConfigChangeFlags |= configChanges;</div><div class=\"line\">        <span class=\"comment\">// 2. 调用Activity的onPaused方法。</span></div><div class=\"line\">        performPauseActivity(token, finished, r.isPreHoneycomb());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure any pending writes are now committed.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.isPreHoneycomb()) &#123;</div><div class=\"line\">            QueuedWork.waitToFinish();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Tell the activity manager we have paused.</span></div><div class=\"line\">        <span class=\"comment\">// dontReport = (msg.arg1&amp;2) != 0 ; dontReport的值为false</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!dontReport) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 3. 调用ActivityManager的远程服务接口 ActivityManagerProxy</span></div><div class=\"line\">                <span class=\"comment\">// 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。</span></div><div class=\"line\">                ActivityManagerNative.getDefault().activityPaused(token);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mSomeActivitiesChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ActivityThread在方法<code>schedulePauseActivity</code>只简单的调用了sendMessage()方法。然后调用ActivityThread内部类H的handlePauseActivity方法，在handlePauseActivity中做了以下的任务：1. 将Binder引用的token转成ActivityRecord的远程接口ActivityClientRecord。如果userLeaving为true时，则调用performUserLeavingActivity来通知Activity，用户将要离开界面。3. 通知ActivityManagerService，当前activity已进入暂停状态，可以执行未完成任务。这里表示启动MainActivity。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityManagerNative.java -> ActivityManagerProxy.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPaused</span><span class=\"params\">(IBinder token)</span> <span class=\"keyword\">throws</span> RemoteException</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        Parcel reply = Parcel.obtain();</div><div class=\"line\">        data.writeInterfaceToken(IActivityManager.descriptor);</div><div class=\"line\">        data.writeStrongBinder(token);</div><div class=\"line\">        mRemote.transact(ACTIVITY_PAUSED_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">        reply.readException();</div><div class=\"line\">        data.recycle();</div><div class=\"line\">        reply.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过Binder驱动调用ActivityManagerService.activityPaused方法<br><figure class=\"highlight java\"><figcaption><span>ActivityManager.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPaused</span><span class=\"params\">(IBinder token)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        ActivityStack stack = ActivityRecord.getStackLocked(token);</div><div class=\"line\">        <span class=\"keyword\">if</span> (stack != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            stack.activityPausedLocked(token, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用ActivityStack的activityPausedLocked 的方法</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPausedLocked</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> timeout)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord r = isInStackLocked(token);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// startPausingLocked时将当前Activity保存在mPausingActivity中。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mPausingActivity == r) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            completePauseLocked(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ... </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">activityPausedLocked</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> timeout)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord r = isInStackLocked(token);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// startPausingLocked时将当前Activity保存在mPausingActivity中。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mPausingActivity == r) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            completePauseLocked(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 完成Activity的暂停任务</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">completePauseLocked</span><span class=\"params\">(<span class=\"keyword\">boolean</span> resumeNext)</span> </span>&#123;</div><div class=\"line\">    ActivityRecord prev = mPausingActivity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        prev.state = ActivityState.PAUSED;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 在activity暂停之前，会暂时冻住屏幕。这时Activity不再可见，则解除冻结状态</span></div><div class=\"line\">        prev.stopFreezingScreenLocked(<span class=\"keyword\">true</span> <span class=\"comment\">/*force*/</span>);</div><div class=\"line\">        mPausingActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// resumeNext值为true</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resumeNext) &#123;</div><div class=\"line\">        <span class=\"comment\">// resume 新的activity</span></div><div class=\"line\">        <span class=\"keyword\">final</span> ActivityStack topStack = mStackSupervisor.getFocusedStack();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mService.isSleepingOrShuttingDown()) &#123;</div><div class=\"line\">            <span class=\"comment\">// 如果没有休眠或关机</span></div><div class=\"line\">            mStackSupervisor.resumeTopActivitiesLocked(topStack, prev, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 恢复按键分发</span></div><div class=\"line\">        prev.resumeKeyDispatchingLocked();</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 栈内容变化时发送通知。</span></div><div class=\"line\">    mService.notifyTaskStackChangedLocked();</div><div class=\"line\">&#125;    </div></pre></td></tr></table></figure>\n<p>在方法completePauseLocked中：如果mPausingActivity不为空，则mPausingActivity需要置空。而mPausingActivity是在之前调用<code>startPausingLocked</code>保存的Launcher的实例，现在不需要这个临时对象了。获取的启动应用的栈信息，调用mStackSupervisor的resumeTopActivitiesLocked方法<br><figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivitiesLocked</span><span class=\"params\">(ActivityStack targetStack, ActivityRecord target,</span></span></div><div class=\"line\">        Bundle targetOptions) &#123;</div><div class=\"line\">    ...     </div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isFrontStack(targetStack)) &#123;</div><div class=\"line\">        result = targetStack.resumeTopActivityLocked(target, targetOptions);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>又执行了ActivityStack的resumeTopActivityLocked方法中。主要用作保护防止无限递归</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStack.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Protect against recursion. </span></div><div class=\"line\">        ...</div><div class=\"line\">        result = resumeTopActivityInnerLocked(prev, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityInnerLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    cancelInitializingActivities();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Find the first activity that is not finishing. </span></div><div class=\"line\">    <span class=\"comment\">// 1. 找到栈顶Activity，也就是要启动的Activity。</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord next = topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> userLeaving = mStackSupervisor.mUserLeaving;</div><div class=\"line\">    mStackSupervisor.mUserLeaving = <span class=\"keyword\">false</span>;</div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord prevTask = prev != <span class=\"keyword\">null</span> ? prev.task : <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> isOnHomeDisplay() &amp;&amp;</div><div class=\"line\">                mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next.delayedResume = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">// 2. mResumedActivity此时为空</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</div><div class=\"line\">                mStackSupervisor.allResumedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord nextTask = next.task;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prevTask != <span class=\"keyword\">null</span> &amp;&amp; prevTask.stack == <span class=\"keyword\">this</span> &amp;&amp;</div><div class=\"line\">            prevTask.isOverHomeStack() &amp;&amp; prev.finishing &amp;&amp; prev.frontOfTask) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 休眠状态或没有找到Activity需要执行resume直接返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.isSleepingOrShuttingDown()</div><div class=\"line\">            &amp;&amp; mLastPausedActivity == next</div><div class=\"line\">            &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 暂停Activity已经执行，跳过</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 设置启动信息</span></div><div class=\"line\">    mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// launcher已经暂停，跳过</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> dontWaitForPause = (next.info.flags&amp;ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, <span class=\"keyword\">true</span>, dontWaitForPause);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mResumedActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pausing) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 并不是休眠状态</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mService.isSleeping() &amp;&amp; mLastNoHistoryActivity != <span class=\"keyword\">null</span> &amp;&amp;</div><div class=\"line\">            !mLastNoHistoryActivity.finishing) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span> &amp;&amp; prev != next) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mStackSupervisor.mWaitingVisibleActivities.contains(prev)</div><div class=\"line\">                &amp;&amp; next != <span class=\"keyword\">null</span> &amp;&amp; !next.nowVisible) &#123;</div><div class=\"line\">            <span class=\"comment\">// 将要启动的Acitivity添加等待显示的列表中</span></div><div class=\"line\">            mStackSupervisor.mWaitingVisibleActivities.add(prev);</div><div class=\"line\">            </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果之前的Acitivity消失了，执行这段代码。</span></div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Launching this app's activity, make sure the app is no longer</span></div><div class=\"line\">    <span class=\"comment\">// considered stopped.</span></div><div class=\"line\">    <span class=\"comment\">// 启动app，</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        AppGlobals.getPackageManager().setPackageStoppedState(</div><div class=\"line\">                next.packageName, <span class=\"keyword\">false</span>, next.userId); <span class=\"comment\">/* <span class=\"doctag\">TODO:</span> Verify if correct userid */</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e1) &#123;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">       ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 开始启动新的Activity，通知WindowManager之前的Activity将会很快消失。这样</span></div><div class=\"line\">    <span class=\"comment\">// 在计算需求的屏幕方向时忽略它</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> anim = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 为Activity准备Window基本参数配置，是否显示启动动画等</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (prev.finishing) &#123;</div><div class=\"line\">            ... </div><div class=\"line\">            <span class=\"keyword\">if</span> (mNoAnimActivities.contains(next)) &#123;</div><div class=\"line\">                anim = <span class=\"keyword\">false</span>;</div><div class=\"line\">                ...</div><div class=\"line\">            &#125;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 执行resume时的动画参数</span></div><div class=\"line\">    Bundle resumeAnimOptions = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (anim) &#123;</div><div class=\"line\">        <span class=\"comment\">// </span></div><div class=\"line\">        ActivityOptions opts = next.getOptionsForTargetActivityLocked();</div><div class=\"line\">        <span class=\"keyword\">if</span> (opts != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            resumeAnimOptions = opts.toBundle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 3. 获取最近的Activity栈信息</span></div><div class=\"line\">    ActivityStack lastStack = mStackSupervisor.getLastStack();</div><div class=\"line\">    <span class=\"keyword\">if</span> (next.app != <span class=\"keyword\">null</span> &amp;&amp; next.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 因为是从Launcher中第一次启动程序，所以程序没有这些进程和主线程信息。</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 需要重启Activity：如正常启动程序或闪退后启动程序</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!next.hasBeenLaunched) &#123;</div><div class=\"line\">            <span class=\"comment\">// 之前没有启动过</span></div><div class=\"line\">            next.hasBeenLaunched = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 开始执行应用程序的进程和ActivityThread等重要参数的初始化操作</span></div><div class=\"line\">        mStackSupervisor.startSpecificActivityLocked(next, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>resumeTopActivityInnerLocked中执行的任务<br>1）取出栈顶Activity，也就是要启动的Activity。<br>2）Launcher此时已经处于Pasued状态，所以此时mResumedActivity为null，mLastPausedActivity为Launcher。<br>3）因为应用还未启动所以MainActivity的ActivityRecord的app和thread属性还未初始化，都为空，则调用ActivityStackSupervisor的startSpecificActivityLocked方法初始化应用的重要变量：ActivityThread等。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig) &#123;</div><div class=\"line\">    <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">    <span class=\"comment\">// activity的application是否已经运行</span></div><div class=\"line\">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">            r.info.applicationInfo.uid, <span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">    r.task.stack.setLaunchTime(r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果程序已经运行了，则执行realStartActivityLocked的流程</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            realStartActivityLocked(r, app, andResume, checkConfig);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 因为这时的应用还未启动则执行startProcessLocked方法，开启新的进程</span></div><div class=\"line\">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">            <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为首次的应用，所以取到的ProcessRecord为null。默认情况下，ActivityRecord中的进程名processName对应的就是在<code>AndroidManifest</code>中声明包名。调用ActivityManagerService的startProcessLocked方法来执行初始化任务。<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> ProcessRecord <span class=\"title\">startProcessLocked</span><span class=\"params\">(String processName, ApplicationInfo info,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> knownToBeDead, <span class=\"keyword\">int</span> intentFlags, String hostingType, ComponentName hostingName,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> allowWhileBooting, <span class=\"keyword\">boolean</span> isolated, <span class=\"keyword\">int</span> isolatedUid, <span class=\"keyword\">boolean</span> keepIfLarge,</div><div class=\"line\">        String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    ProcessRecord app;</div><div class=\"line\">    <span class=\"comment\">// isolated为true</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!isolated) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 如果是单独进程，则不能重用已存在的进程</span></div><div class=\"line\">        app = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 如果存在一个Application；</span></div><div class=\"line\">    <span class=\"comment\">// 调用者不认为已经死亡或没有线程对象时我们认为没有崩溃；</span></div><div class=\"line\">    <span class=\"comment\">// 或分配了一个进程id时，则认为正在启动或已经运行；</span></div><div class=\"line\">    <span class=\"comment\">// 这三种情况下，不会做任何事</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.pid &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!knownToBeDead || app.thread == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 已经运行App或等待出现（已经有进程id，但是还没有线程），则保留应用</span></div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"comment\">// 如果是进程的新包，则添加新包到列表中</span></div><div class=\"line\">            app.addPackage(info.packageName, info.versionCode, mProcessStats);</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">return</span> app;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// app添加到之前的进程中，则清空进程</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// host name</span></div><div class=\"line\">    String hostingNameStr = hostingName != <span class=\"keyword\">null</span></div><div class=\"line\">            ? hostingName.flattenToShortString() : <span class=\"keyword\">null</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 为app 创建新的进程</span></div><div class=\"line\">        app = newProcessRecordLocked(info, processName, isolated, isolatedUid);</div><div class=\"line\">        <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        app.crashHandler = crashHandler;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果是进程的新包，则添加新包到列表中</span></div><div class=\"line\">        app.addPackage(info.packageName, info.versionCode, mProcessStats);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 推迟进程启动直到系统准备好。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mProcessesReady</div><div class=\"line\">            &amp;&amp; !isAllowedWhileBooting(info)</div><div class=\"line\">            &amp;&amp; !allowWhileBooting) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 开启进程</span></div><div class=\"line\">    startProcessLocked(</div><div class=\"line\">            app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> (app.pid != <span class=\"number\">0</span>) ? app : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> ProcessRecord <span class=\"title\">newProcessRecordLocked</span><span class=\"params\">(ApplicationInfo info, String customProcess,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> isolated, <span class=\"keyword\">int</span> isolatedUid) &#123;</div><div class=\"line\">    <span class=\"comment\">// 进程命名 ： processName+uid</span></div><div class=\"line\">    String proc = customProcess != <span class=\"keyword\">null</span> ? customProcess : info.processName;</div><div class=\"line\">    BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> userId = UserHandle.getUserId(info.uid);</div><div class=\"line\">    <span class=\"keyword\">int</span> uid = info.uid;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isolated) &#123;</div><div class=\"line\">        <span class=\"comment\">// isolatedUid 为 0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (isolatedUid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> stepsLeft = Process.LAST_ISOLATED_UID - Process.FIRST_ISOLATED_UID + <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                ...</div><div class=\"line\">                uid = UserHandle.getUid(userId, mNextIsolatedProcessUid);</div><div class=\"line\">                mNextIsolatedProcessUid++;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mIsolatedProcesses.indexOfKey(uid) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// No process for this uid, use it.</span></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            uid = isolatedUid;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">final</span> ProcessRecord r = <span class=\"keyword\">new</span> ProcessRecord(stats, info, proc, uid);</div><div class=\"line\">    ...</div><div class=\"line\">    addProcessNameLocked(r);</div><div class=\"line\">    <span class=\"keyword\">return</span> r;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addProcessNameLocked</span><span class=\"params\">(ProcessRecord proc)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 清空旧进程</span></div><div class=\"line\">    ProcessRecord old = removeProcessNameLocked(proc.processName, proc.uid);</div><div class=\"line\">    <span class=\"keyword\">if</span> (old == proc &amp;&amp; proc.persistent) &#123;</div><div class=\"line\">        <span class=\"comment\">// We are re-adding a persistent process.  Whatevs!  Just leave it there.</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// mProcessNames添加进程信息</span></div><div class=\"line\">    mProcessNames.put(proc.processName, proc.uid, proc);</div><div class=\"line\">    <span class=\"keyword\">if</span> (proc.isolated) &#123;</div><div class=\"line\">        mIsolatedProcesses.put(proc.uid, proc);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>ActivityManagerService的startProcessLocked方法：检查是否有对应的进程存在，如果没有进程（如启动新应用时），则<br>newProcessRecordLocked初始化进程基本参数：pid，uid，进程名等等。并保存在mProcessNames全局变量中。然后执行<code>startProcessLocked</code>方法，进入下一步。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityManagerService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startProcessLocked</span><span class=\"params\">(ProcessRecord app, String hostingType,</span></span></div><div class=\"line\">        String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> (app.pid &gt; <span class=\"number\">0</span> &amp;&amp; app.pid != MY_PID) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        app.setPid(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    mProcessesOnHold.remove(app);</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">int</span> uid = app.uid;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] gids = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> mountExternal = Zygote.MOUNT_EXTERNAL_NONE;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!app.isolated) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</div><div class=\"line\">                    &amp;&amp; mTopComponent != <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; app.processName.equals(mTopComponent.getPackageName())) &#123;</div><div class=\"line\">                uid = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL</div><div class=\"line\">                    &amp;&amp; (app.info.flags&amp;ApplicationInfo.FLAG_FACTORY_TEST) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                uid = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ... </div><div class=\"line\">        <span class=\"comment\">// debug 标志</span></div><div class=\"line\">        <span class=\"keyword\">int</span> debugFlags = <span class=\"number\">0</span>;</div><div class=\"line\">        ...</div><div class=\"line\">        String requiredAbi = (abiOverride != <span class=\"keyword\">null</span>) ? abiOverride : app.info.primaryCpuAbi;</div><div class=\"line\">        <span class=\"keyword\">if</span> (requiredAbi == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            requiredAbi = Build.SUPPORTED_ABIS[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        String instructionSet = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (app.info.primaryCpuAbi != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instructionSet = VMRuntime.getInstructionSet(app.info.primaryCpuAbi);</div><div class=\"line\">        &#125;</div><div class=\"line\">        app.gids = gids;</div><div class=\"line\">        app.requiredAbi = requiredAbi;</div><div class=\"line\">        app.instructionSet = instructionSet;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Start the process.  It will either succeed and return a result containing</span></div><div class=\"line\">        <span class=\"comment\">// the PID of the new process, or else throw a RuntimeException.</span></div><div class=\"line\">        <span class=\"comment\">// 启动进程，成功则返回含有新进程pid信息的结构，否则抛出异常。</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> isActivityProcess = (entryPoint == <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"comment\">// \"android.app.ActivityThread\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (entryPoint == <span class=\"keyword\">null</span>) entryPoint = <span class=\"string\">\"android.app.ActivityThread\"</span>;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 创建新的进程，</span></div><div class=\"line\">        Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class=\"line\">                app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class=\"line\">                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class=\"line\">                app.info.dataDir, entryPointArgs);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">        </div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Process的start方法向Zygote发送请求，传入”android.app.ActivityThread”字符串参数，通过Zygote执行fork子进程，初始化应用最终调用ActivityThread的main方法。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    SamplingProfilerIntegration.start();</div><div class=\"line\">    ...</div><div class=\"line\">    Environment.initForCurrentUser();</div><div class=\"line\">    ...</div><div class=\"line\">    AndroidKeyStoreProvider.install();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">    <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">    <span class=\"comment\">// 初始化MainLooper</span></div><div class=\"line\">    Looper.prepareMainLooper();</div><div class=\"line\">    <span class=\"comment\">// 创建ActivityThread</span></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">    <span class=\"comment\">// attach 调用attach方法</span></div><div class=\"line\">    thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">// 主线程的sMainThreadHandler</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sMainThreadHandler = thread.getHandler();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 开启主线程循环</span></div><div class=\"line\">    Looper.loop();</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">    sCurrentActivityThread = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// system值为false</span></div><div class=\"line\">    mSystemThread = system;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!system) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\">        <span class=\"keyword\">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 调用ActivityManagerProxy进行远程通信。</span></div><div class=\"line\">            mgr.attachApplication(mAppThread);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">            <span class=\"comment\">// Ignore</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 不能设置Application对象。如果系统崩溃了，直接结束。</span></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ActivityThread的main方法是整个应用程序启动的入口。执行了ActivityThread、主线程消息Looper的初始化操作。然后调用ActivityManagerProxy的attachApplication方法通过Binder驱动通知ActivityManagerService的attachApplication执行应用启动的后续操作。<br><figure class=\"highlight java\"><figcaption><span>ActivityManagerService</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        attachApplicationLocked(thread, callingPid);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> pid) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Find the application record that is being attached...  either via</span></div><div class=\"line\">    <span class=\"comment\">// the pid if we are running in multiple processes, or just pull the</span></div><div class=\"line\">    <span class=\"comment\">// next app record if we are emulating process with anonymous threads.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 检索需要附加的application信息。</span></div><div class=\"line\">    <span class=\"comment\">// 1. 运行在多进程中pid信息;2. 或拉取用匿名线程模拟的进程启动的app信息。</span></div><div class=\"line\">    ProcessRecord app;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid != MY_PID &amp;&amp; pid &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mPidsSelfLocked) &#123;</div><div class=\"line\">            app = mPidsSelfLocked.get(pid);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        app = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 未找到application</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If this application record is still attached to a previous</span></div><div class=\"line\">    <span class=\"comment\">// process, clean it up now.</span></div><div class=\"line\">    <span class=\"comment\">// 如果application record仍附加在之前的进程，则结束application</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleAppDiedLocked(app, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 进程名：</span></div><div class=\"line\">    <span class=\"keyword\">final</span> String processName = app.processName;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        AppDeathRecipient adr = <span class=\"keyword\">new</span> AppDeathRecipient(</div><div class=\"line\">                app, pid, thread);</div><div class=\"line\">        thread.asBinder().linkToDeath(adr, <span class=\"number\">0</span>);</div><div class=\"line\">        app.deathRecipient = adr;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 激活进程状态</span></div><div class=\"line\">    app.makeActive(thread, mProcessStats);</div><div class=\"line\">    app.curAdj = app.setAdj = -<span class=\"number\">100</span>;</div><div class=\"line\">    app.curSchedGroup = app.setSchedGroup = Process.THREAD_GROUP_DEFAULT;</div><div class=\"line\">    app.forcingToForeground = <span class=\"keyword\">null</span>;</div><div class=\"line\">    updateProcessForegroundLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">    app.hasShownUi = <span class=\"keyword\">false</span>;</div><div class=\"line\">    app.debugging = <span class=\"keyword\">false</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">boolean</span> normalMode = mProcessesReady || isAllowedWhileBooting(app.info);</div><div class=\"line\">    List&lt;ProviderInfo&gt; providers = normalMode ? generateApplicationProvidersLocked(app) : <span class=\"keyword\">null</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        ApplicationInfo appInfo = app.instrumentationInfo != <span class=\"keyword\">null</span></div><div class=\"line\">                ? app.instrumentationInfo : app.info;</div><div class=\"line\">        app.compat = compatibilityInfoForPackageLocked(appInfo);</div><div class=\"line\">        <span class=\"keyword\">if</span> (profileFd != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            profileFd = profileFd.dup();</div><div class=\"line\">        &#125;</div><div class=\"line\">        ProfilerInfo profilerInfo = profileFile == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span></div><div class=\"line\">                : <span class=\"keyword\">new</span> ProfilerInfo(profileFile, profileFd, samplingInterval, profileAutoStop);</div><div class=\"line\">        <span class=\"comment\">// 1. 初始化应用中对应系统信息，</span></div><div class=\"line\">        thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</div><div class=\"line\">                profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</div><div class=\"line\">                app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,</div><div class=\"line\">                enableTrackAllocation, isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                <span class=\"keyword\">new</span> Configuration(mConfiguration), app.compat,</div><div class=\"line\">                getCommonServicesLocked(app.isolated),</div><div class=\"line\">                mCoreSettingsObserver.getCoreSettingsLocked());</div><div class=\"line\">        updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">boolean</span> badApp = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> didSomething = <span class=\"keyword\">false</span>;</div><div class=\"line\">    ... </div><div class=\"line\">    <span class=\"comment\">// 查看进程中是否有栈顶Activity等待运行</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (normalMode) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 2. 开始执行应用的MainActivity的启动操作。</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</div><div class=\"line\">                didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">           ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 查看进程中是否要运行的Service</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= mServices.attachApplicationLocked(app, processName);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 查看进程中是否有要运行的Broadcast</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= sendPendingBroadcastsLocked(app);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>attachApplicationLocked中做了两个重要的事情</p>\n<p>1）bindApplication：完成Application的实例化操作。通过Binder机制调用ApplicationThread的bindApplication，又会经过Handler发送Application绑定的操作，通过mInstrumentation来完成Application实例化，最后调用Application的onCreate()方法</p>\n<p>2）attachApplicationLocked：接着步骤1）查找栈顶的Activity，如果存在MainActivity。则调用ActivityStackSupervisor的attachApplicationLocked方法执行启动Activity的任务。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityStackSupervisor.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 查找需要启动的Activity。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(ProcessRecord app)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> String processName = app.processName;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> didSomething = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">// 对所有任务栈循环</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> displayNdx = mActivityDisplays.size() - <span class=\"number\">1</span>; displayNdx &gt;= <span class=\"number\">0</span>; --displayNdx) &#123;</div><div class=\"line\">        ArrayList&lt;ActivityStack&gt; stacks = mActivityDisplays.valueAt(displayNdx).mStacks;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> stackNdx = stacks.size() - <span class=\"number\">1</span>; stackNdx &gt;= <span class=\"number\">0</span>; --stackNdx) &#123;</div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            <span class=\"keyword\">final</span> ActivityStack stack = stacks.get(stackNdx);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isFrontStack(stack)) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 如果是最前显示的栈，获取栈顶Activity的信息</span></div><div class=\"line\">            ActivityRecord hr = stack.topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (hr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (hr.app == <span class=\"keyword\">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</div><div class=\"line\">                        &amp;&amp; processName.equals(hr.processName)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// 启动栈顶Activity</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (realStartActivityLocked(hr, app, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>)) &#123;</div><div class=\"line\">                            didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                        ...</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> didSomething;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">        ProcessRecord app, <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</div><div class=\"line\">        <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (andResume) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    r.app = app;</div><div class=\"line\">    app.waitingToKill = <span class=\"keyword\">null</span>;</div><div class=\"line\">    r.launchCount++;</div><div class=\"line\">    r.lastLaunchTime = SystemClock.uptimeMillis();</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">int</span> idx = app.activities.indexOf(r);</div><div class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        app.activities.add(r);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">final</span> TaskRecord task = r.task;</div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityStack stack = task.stack;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        List&lt;ResultInfo&gt; results = <span class=\"keyword\">null</span>;</div><div class=\"line\">        List&lt;ReferrerIntent&gt; newIntents = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (andResume) &#123;</div><div class=\"line\">            results = r.results;</div><div class=\"line\">            newIntents = r.newIntents;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (r.isHomeActivity() &amp;&amp; r.isNotResolverActivity()) &#123;</div><div class=\"line\">            <span class=\"comment\">// Home process is the root process of the task.</span></div><div class=\"line\">            mService.mHomeProcess = task.mActivities.get(<span class=\"number\">0</span>).app;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        r.sleeping = <span class=\"keyword\">false</span>;</div><div class=\"line\">        r.forceNewConfig = <span class=\"keyword\">false</span>;</div><div class=\"line\">        mService.showAskCompatModeDialogLocked(r);</div><div class=\"line\">        r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);</div><div class=\"line\">        ProfilerInfo profilerInfo = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mService.mProfileApp != <span class=\"keyword\">null</span> &amp;&amp; mService.mProfileApp.equals(app.processName)) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (andResume) &#123;</div><div class=\"line\">            app.hasShownUi = <span class=\"keyword\">true</span>;</div><div class=\"line\">            app.pendingUiClean = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// 启动Activity</span></div><div class=\"line\">        app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                System.identityHashCode(r), r.info, <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                <span class=\"keyword\">new</span> Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class=\"line\">                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class=\"line\">                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>遍历所有Activity的任务找到最前显示的Activity的栈，取栈顶的Activity执行真正的Activity启动操作。同样需要Binder进行进程间通讯通知ApplicationThread执行scheduleLaunchActivity任务。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread.java -> ApplicationThread.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></div><div class=\"line\">            ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class=\"line\">            CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class=\"line\">            <span class=\"keyword\">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class=\"line\">            List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward, ProfilerInfo profilerInfo) &#123;</div><div class=\"line\"></div><div class=\"line\">        updateProcessState(procState, <span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        ActivityClientRecord r = <span class=\"keyword\">new</span> ActivityClientRecord();</div><div class=\"line\"></div><div class=\"line\">        r.token = token;</div><div class=\"line\">        r.ident = ident;</div><div class=\"line\">        r.intent = intent;</div><div class=\"line\">        r.referrer = referrer;</div><div class=\"line\">        r.voiceInteractor = voiceInteractor;</div><div class=\"line\">        r.activityInfo = info;</div><div class=\"line\">        r.compatInfo = compatInfo;</div><div class=\"line\">        r.state = state;</div><div class=\"line\">        r.persistentState = persistentState;</div><div class=\"line\"></div><div class=\"line\">        r.pendingResults = pendingResults;</div><div class=\"line\">        r.pendingIntents = pendingNewIntents;</div><div class=\"line\"></div><div class=\"line\">        r.startsNotResumed = notResumed;</div><div class=\"line\">        r.isForward = isForward;</div><div class=\"line\"></div><div class=\"line\">        r.profilerInfo = profilerInfo;</div><div class=\"line\"></div><div class=\"line\">        r.overrideConfig = overrideConfig;</div><div class=\"line\">        updatePendingConfiguration(curConfig);</div><div class=\"line\">        <span class=\"comment\">// 发送启动的Activity的消息</span></div><div class=\"line\">        sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">case</span> LAUNCH_ACTIVITY: &#123;</div><div class=\"line\">                ...</div><div class=\"line\">                <span class=\"keyword\">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class=\"line\">                ...</div><div class=\"line\">                handleLaunchActivity(r, <span class=\"keyword\">null</span>);</div><div class=\"line\">                ...</div><div class=\"line\">            &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;   </div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    mSomeActivitiesChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 启动Activity前初始化WindowManager的全局属性</span></div><div class=\"line\">    WindowManagerGlobal.initialize();</div><div class=\"line\">    <span class=\"comment\">// 1. 执行Activity的启动操作</span></div><div class=\"line\">    Activity a = performLaunchActivity(r, customIntent);</div><div class=\"line\">    <span class=\"comment\">// 启动成功</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        r.createdConfig = <span class=\"keyword\">new</span> Configuration(mConfiguration);</div><div class=\"line\">        <span class=\"comment\">// 2. 执行Activity的resume操作</span></div><div class=\"line\">        handleResumeActivity(r.token, <span class=\"keyword\">false</span>, r.isForward,</div><div class=\"line\">                !r.activity.mFinished &amp;&amp; !r.startsNotResumed);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;</div><div class=\"line\">            ...</div><div class=\"line\">            r.paused = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 出现异常时直接结束Activity</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先调用performLaunchActivity启动Activity，方法中执行Activity的onCreate()和start()方法。如果启动成功即返回的Activity不为null，则继续执行handleResumeActivity方法，方法中完成Activity调用onResume方法，完成整个Activity启动的过程。</p>\n<figure class=\"highlight java\"><figcaption><span>ActivityThread</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Activity <span class=\"title\">performLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ActivityInfo aInfo = r.activityInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (r.packageInfo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class=\"line\">                Context.CONTEXT_INCLUDE_CODE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 收集启动的Activity信息。</span></div><div class=\"line\">    <span class=\"comment\">// 创建Activity的相关组件</span></div><div class=\"line\">    ComponentName component = r.intent.getComponent();</div><div class=\"line\">    <span class=\"keyword\">if</span> (component == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        component = r.intent.resolveActivity(</div><div class=\"line\">            mInitialApplication.getPackageManager());</div><div class=\"line\">        r.intent.setComponent(component);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (r.activityInfo.targetActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        component = <span class=\"keyword\">new</span> ComponentName(r.activityInfo.packageName,</div><div class=\"line\">                r.activityInfo.targetActivity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Activity activity = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 用ClassLoader加载MainActivity。实例化MainActivity</span></div><div class=\"line\">        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class=\"line\">        activity = mInstrumentation.newActivity(</div><div class=\"line\">                cl, component.getClassName(), r.intent);</div><div class=\"line\">        ...</div><div class=\"line\">        r.intent.setExtrasClassLoader(cl);</div><div class=\"line\">        r.intent.prepareToEnterProcess();</div><div class=\"line\">        <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            r.state.setClassLoader(cl);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Application app = r.packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 创建Activity上下文信息。</span></div><div class=\"line\">            Context appContext = createBaseContextForActivity(r, activity);</div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class=\"line\">            Configuration config = <span class=\"keyword\">new</span> Configuration(mCompatConfiguration);</div><div class=\"line\">            ...</div><div class=\"line\"></div><div class=\"line\">            activity.attach(appContext, <span class=\"keyword\">this</span>, getInstrumentation(), r.token,</div><div class=\"line\">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class=\"line\">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class=\"line\">                    r.referrer, r.voiceInteractor);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (customIntent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                activity.mIntent = customIntent;</div><div class=\"line\">            &#125;</div><div class=\"line\">            r.lastNonConfigurationInstances = <span class=\"keyword\">null</span>;</div><div class=\"line\">            activity.mStartedActivity = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> theme = r.activityInfo.getThemeResource();</div><div class=\"line\">            <span class=\"keyword\">if</span> (theme != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                activity.setTheme(theme);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"comment\">// 调用callActivityOnCreate方法</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (r.isPersistable()) &#123;</div><div class=\"line\">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ...</div><div class=\"line\">            r.activity = activity;</div><div class=\"line\">            r.stopped = <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                <span class=\"comment\">// 调用start方法</span></div><div class=\"line\">                activity.performStart();</div><div class=\"line\">                r.stopped = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                <span class=\"comment\">// 如果是异常恢复则调用onRestoreInstanceState方法来恢复状态</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (r.isPersistable()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span> || r.persistentState != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</div><div class=\"line\">                                r.persistentState);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"comment\">// </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (r.isPersistable()) &#123;</div><div class=\"line\">                    mInstrumentation.callActivityOnPostCreate(activity, r.state,</div><div class=\"line\">                            r.persistentState);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class=\"line\">                &#125;</div><div class=\"line\">                ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        r.paused = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"comment\">// 绑定token</span></div><div class=\"line\">        mActivities.put(r.token, r);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SuperNotCalledException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> activity;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实例化Activity的组件信息，通过ClassLoader加载Activity，创建上下文信息附加到Activity中，然后由Instrumentation调用callActivityOnCreate等方法完成Activity启动时的生命周期方法，如onCreate()、onStart()等。<br><figure class=\"highlight java\"><figcaption><span>Instrumentation.java</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnCreate</span><span class=\"params\">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    prePerformCreate(activity);</div><div class=\"line\">    <span class=\"comment\">// 调用Activity的onCreate </span></div><div class=\"line\">    activity.performCreate(icicle);</div><div class=\"line\">    postPerformCreate(activity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到此，Android的应用程序启动与Activity相关的流程就完成了。<br>在整个流程中几个重要的类需要注意</p>\n<ul>\n<li><p><code>ActivityManagerNative</code> ：是Binder的子类，是底层Binder驱动在Java类中的实现。因为是抽象类，所以具体实现由ActivityManagerService来完成。</p>\n</li>\n<li><p><code>ActivityManagerService</code>：简称AMS，是Android中最核心的服务，主要负责Android的四大组件的启动、切换、是调度和应用进程的管理和调度工作（如Activity的生命周期控制）。在系统启动的时候完成AMS的注册。</p>\n</li>\n<li><p><code>ActivityManagerProxy</code> ：是ActivityManagerService的远程代理，客户端调用ActivityManagerProxy的相关方法通过Binder机制实现IPC，完成与ActivityManagerService通信交互任务。</p>\n</li>\n<li><p><code>ActivityThread</code> ：Application的入口，从main方法开始创建应用相关的核心功能。如主线程的消息循环，Application初始化，绑定Application相关的服务等等，同时控制组件的生命周期操作。对应Application的主线程。</p>\n</li>\n<li><p><code>ApplicationtThreadNative</code> ：与<code>ActivityManagerNative</code>一样也是Binder子类。具体实现由ApplicationThread完成。</p>\n</li>\n<li><p><code>ApplicationThread</code>：完成AMS与ActivityThread之间的通信。</p>\n</li>\n<li><p><code>ApplicationThreadProxy</code> ：是ApplicationThread远程接口代理。负责与客户端ApplicationThread通讯</p>\n</li>\n</ul>\n<ul>\n<li><p><code>Instrumentation</code> ：每个应用绑定唯一的一个Instrumentation，每个Activity都一个对该对象的引用。ActivityThread通过Instrumentation来控制Activity的生命周期。</p>\n</li>\n<li><p><code>ActivityStackSupervisor</code>： ActivityStack的超级管理员。</p>\n</li>\n<li><p><code>ActivityStack</code> ：用于保存Activity的栈，决定是否要启动新的进程。</p>\n</li>\n<li><p><code>ActivityRecord</code> ：用于Activity的信息存储，包括状态、进程名等。</p>\n</li>\n<li><p><code>TaskRecord</code> ：Android中的Task的具体实现。记录ActivityRecord的任务栈。</p>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://developer.android.com/guide/components/activities.html\" target=\"_blank\" rel=\"external\">Android Developer Activities</a></p>\n<p><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/9294285\" target=\"_blank\" rel=\"external\">Activity的启动方式和flag详解</a></p>\n<p><a href=\"http://blog.csdn.net/liuhe688/article/details/9494411\" target=\"_blank\" rel=\"external\">Android 基础</a></p>\n<p><a href=\"http://blog.csdn.net/innost/article/details/47317823\" target=\"_blank\" rel=\"external\">深入理解Java Binder和MessageQueue</a></p>\n<p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6689748\" target=\"_blank\" rel=\"external\">Android应用程序启动过程源代码分析</a></p>\n<p><a href=\"http://blog.csdn.net/innost/article/details/47208049\" target=\"_blank\" rel=\"external\">深入理解Binder</a></p>\n<p><a href=\"http://www.jianshu.com/p/6037f6fda285\" target=\"_blank\" rel=\"external\">【凯子哥带你学Framework】Activity启动过程全解析</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj56j2dxh0002c0m3ywxjlkbh","category_id":"cj56izndp002o9zm3uv8quazw","_id":"cj56j2dxl0006c0m3xir7ghug"},{"post_id":"cj56j2dxi0003c0m37w3shb3i","category_id":"cj56izndf00249zm3d2f7kn5i","_id":"cj56j2dxn0009c0m3uhmr7pu4"},{"post_id":"cj56j2dxj0005c0m3padi7eio","category_id":"cj56izndf00249zm3d2f7kn5i","_id":"cj56j2dxo000cc0m36n9ejeje"},{"post_id":"cj56j2dxl0008c0m380vcn9eg","category_id":"cj56izndf00249zm3d2f7kn5i","_id":"cj56j2dxq000fc0m3act5jusc"},{"post_id":"cj56j2dy50019c0m3zblgc12z","category_id":"cj56izncw001c9zm30p4fl81n","_id":"cj56j2dy9001ec0m3ihfvhobl"},{"post_id":"cj56j2dy9001gc0m3evigzc3z","category_id":"cj56iznc5000a9zm3k9sbq76l","_id":"cj56j2dyb001kc0m3n531320t"},{"post_id":"cj56j2dya001ic0m3fo9i0lua","category_id":"cj56iznc5000a9zm3k9sbq76l","_id":"cj56j2dyb001mc0m3h30pd5e2"},{"post_id":"cj56j2epz001sc0m3cnrzo2mv","category_id":"cj56izndy003c9zm3kuy24f53","_id":"cj56j2eq0001uc0m3skcztful"},{"post_id":"cj56j2eq1001vc0m3s7bl88pq","category_id":"cj56izndu00309zm3l4eqrrah","_id":"cj56j2eq4001zc0m3hlhk9erc"},{"post_id":"cj56j2eq2001wc0m31zxvnr1z","category_id":"cj56izndu00309zm3l4eqrrah","_id":"cj56j2eq40021c0m3fmsyshcy"},{"post_id":"cj56j2eq3001yc0m34m8npppg","category_id":"cj56izndu00309zm3l4eqrrah","_id":"cj56j2eq40023c0m3yl84pzik"},{"post_id":"cj56j3txo0003grm3sy6o429d","category_id":"cj56izncg000l9zm3kal62tp1","_id":"cj56j3txt0007grm3meyijn4c"},{"post_id":"cj56j3txq0004grm3z8ov3gac","category_id":"cj56izncj000r9zm3boag32rt","_id":"cj56j3txv000agrm36ryawge7"},{"post_id":"cj56j3txt0009grm3a61f9abs","category_id":"cj56izncl000x9zm37ttuwbkm","_id":"cj56j3txx000egrm3ck328e30"},{"post_id":"cj56j3txz000ggrm3e2zv7m8n","category_id":"cj56izncj000r9zm3boag32rt","_id":"cj56j3ty3000kgrm3i2nsya1l"},{"post_id":"cj56j3ty5000lgrm376xbcsi7","category_id":"cj56izncj000r9zm3boag32rt","_id":"cj56j3tyf000ngrm3cwc3y8ao"}],"PostTag":[{"post_id":"cj56j2dxh0002c0m3ywxjlkbh","tag_id":"cj56izndp002p9zm33wu8byss","_id":"cj56j2dxj0004c0m3ewsjvokn"},{"post_id":"cj56j2dxi0003c0m37w3shb3i","tag_id":"cj56izndf00259zm3okvphvuo","_id":"cj56j2dxl0007c0m3por03k64"},{"post_id":"cj56j2dxj0005c0m3padi7eio","tag_id":"cj56izndf00259zm3okvphvuo","_id":"cj56j2dxn000ac0m3c51b4dx5"},{"post_id":"cj56j2dxl0008c0m380vcn9eg","tag_id":"cj56izndf00259zm3okvphvuo","_id":"cj56j2dxo000dc0m3yztmop4v"},{"post_id":"cj56j2dxn000bc0m3w6c7ocav","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxq000gc0m358wv2524"},{"post_id":"cj56j2dxp000ec0m3r8b68jqk","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxr000ic0m33a30qrml"},{"post_id":"cj56j2dxq000hc0m3w3x33ewl","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxs000kc0m3fwceip88"},{"post_id":"cj56j2dxr000jc0m3vj5qet0m","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxt000mc0m3g08po4jn"},{"post_id":"cj56j2dxs000lc0m3w72v8myx","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxu000oc0m399cvmwem"},{"post_id":"cj56j2dxt000nc0m37re00thi","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxv000qc0m311oyisr1"},{"post_id":"cj56j2dxu000pc0m33sbjjrz4","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxw000sc0m3jz2jnowz"},{"post_id":"cj56j2dxv000rc0m3r1yals3f","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxw000uc0m35fqm79sp"},{"post_id":"cj56j2dxw000tc0m3wjyndmnq","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxx000wc0m3v2cyuk48"},{"post_id":"cj56j2dxx000vc0m30ymts7lb","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxy000yc0m3lw8e1lt4"},{"post_id":"cj56j2dxy000xc0m3xshbptda","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dxz0010c0m3i09oo0v6"},{"post_id":"cj56j2dxy000zc0m3bxd5bvvc","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dy00012c0m3vk0g44xb"},{"post_id":"cj56j2dxz0011c0m324uia8dq","tag_id":"cj56izncu00199zm3hhkkq9jb","_id":"cj56j2dy20014c0m38zfbgt21"},{"post_id":"cj56j2dy50019c0m3zblgc12z","tag_id":"cj56izncy001f9zm3riir3yiz","_id":"cj56j2dyb001lc0m3nahjxuox"},{"post_id":"cj56j2dy9001gc0m3evigzc3z","tag_id":"cj56iznc7000b9zm3jafm67kq","_id":"cj56j2dyc001oc0m3l869184q"},{"post_id":"cj56j2dya001ic0m3fo9i0lua","tag_id":"cj56iznc7000b9zm3jafm67kq","_id":"cj56j2dyc001pc0m3y1y89ug2"},{"post_id":"cj56j2epz001sc0m3cnrzo2mv","tag_id":"cj56izne7003z9zm3plam2drz","_id":"cj56j2eq0001tc0m3i4vlv1s8"},{"post_id":"cj56j2eq1001vc0m3s7bl88pq","tag_id":"cj56izne1003r9zm3rnhc8p57","_id":"cj56j2eq3001xc0m3h9cxbpft"},{"post_id":"cj56j2eq2001wc0m31zxvnr1z","tag_id":"cj56izne1003r9zm3rnhc8p57","_id":"cj56j2eq40020c0m3vct9ysgl"},{"post_id":"cj56j2eq3001yc0m34m8npppg","tag_id":"cj56izne1003r9zm3rnhc8p57","_id":"cj56j2eq40022c0m3vrj0sqs4"},{"post_id":"cj56j3txo0003grm3sy6o429d","tag_id":"cj56izncg000m9zm3sumb41cv","_id":"cj56j3txr0005grm33j2yx6e2"},{"post_id":"cj56j3txq0004grm3z8ov3gac","tag_id":"cj56izncj000s9zm30htmwib1","_id":"cj56j3txt0008grm3hqtvhv76"},{"post_id":"cj56j3txt0009grm3a61f9abs","tag_id":"cj56izncl000y9zm3lw7xthou","_id":"cj56j3txw000cgrm39pxbwk5g"},{"post_id":"cj56j3txz000ggrm3e2zv7m8n","tag_id":"cj56izncj000s9zm30htmwib1","_id":"cj56j3ty2000igrm3jz162dj8"},{"post_id":"cj56j3ty5000lgrm376xbcsi7","tag_id":"cj56izncj000s9zm30htmwib1","_id":"cj56j3tyf000mgrm3elcxtts3"}],"Tag":[{"name":"android","_id":"cj56iznc7000b9zm3jafm67kq"},{"name":"danmaku","_id":"cj56izncg000m9zm3sumb41cv"},{"name":"android-aosp","_id":"cj56izncj000s9zm30htmwib1"},{"name":"android-mvvm","_id":"cj56izncl000y9zm3lw7xthou"},{"name":"kotlin","_id":"cj56izncu00199zm3hhkkq9jb"},{"name":"Java设计模式","_id":"cj56izncy001f9zm3riir3yiz"},{"name":"react-native","_id":"cj56izndf00259zm3okvphvuo"},{"name":"RxJava","_id":"cj56izndp002p9zm33wu8byss"},{"name":"生活","_id":"cj56iznds002u9zm30w3hmeqy"},{"name":"前端开发","_id":"cj56izndu002z9zm3atqf1k3w"},{"name":"JavaScript","_id":"cj56izndx00349zm3f2hybo3a"},{"name":"翻译","_id":"cj56izne0003k9zm32xrjch8p"},{"name":"OS","_id":"cj56izne0003l9zm3ty42lbwp"},{"name":"Unix","_id":"cj56izne1003o9zm315tr1ncy"},{"name":"Linux","_id":"cj56izne1003q9zm3q0vdnf4g"},{"name":"okhttp3 android","_id":"cj56izne1003r9zm3rnhc8p57"},{"name":"设计模式","_id":"cj56izne7003z9zm3plam2drz"}]}}